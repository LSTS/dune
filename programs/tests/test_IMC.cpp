//***************************************************************************
// Copyright 2007-2023 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Ricardo Martins                                                  *
//***************************************************************************
// Automatically generated.                                                 *
//***************************************************************************
// IMC XML MD5: 86c7ceace2a6f6239ea89a0e5bc64a3f                            *
//***************************************************************************

// DUNE headers.
#include <DUNE/DUNE.hpp>

using DUNE_NAMESPACES;

#include "Test.hpp"

int
main(void)
{
  Test test("IMC Serialization/Deserialization");

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.2857945089545685);
    msg.setSource(29274U);
    msg.setSourceEntity(80U);
    msg.setDestination(17302U);
    msg.setDestinationEntity(149U);
    msg.state = 168U;
    msg.flags = 182U;
    msg.description.assign("RIXPVULGHLIQADCOIJSEHSLKCEDXDUMSGLSATXNUZBHKBFCRUFBRRMNDYYZPBVEBPOORXKIABDEEIAGXUEGHATZFSYYMKWLXQCPHFUOAXEUUPCTIEWLMJOGVWSYAJDJAKJGFJNMIVRQNWVPYJPKHIYORZHCZFZMKNWDSZLVZWHJTGIFTTAKEQOLQXMWGNPBLMQUVFNTFCBGSCORYDMTXSJVOPHWLZNWBSGCRDEIDYCHMQWPNBKJVOKFQY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.9188762266018429);
    msg.setSource(1385U);
    msg.setSourceEntity(146U);
    msg.setDestination(26380U);
    msg.setDestinationEntity(126U);
    msg.state = 40U;
    msg.flags = 46U;
    msg.description.assign("HENCVJLGMHTAXSUGHKBBRKSOERXIVIKARVFIQKDKVKDHOHGENFSIJQEPHNOPGDITSWNRLTNPJCRFYECEYFYXFECWUFHXONTPVXTVDQQSTUXCRYUFBZBYGTLSVH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.5405533318620565);
    msg.setSource(18363U);
    msg.setSourceEntity(203U);
    msg.setDestination(37290U);
    msg.setDestinationEntity(3U);
    msg.state = 27U;
    msg.flags = 135U;
    msg.description.assign("RDIVXBHVTTACYWSKZQRPZRXAGYLPAEGFMWUYHWDSNUYBCDGUYFFIZLKVQZXKNOEGNPQFRLEAZWLXHXPUNKBGLCXARSJRQSVQBFBNBCXUYHMIWLOGOXWIUAWNRTHODCWKVKZSUHZNLZABJVKBUJXOIDEEESEMMZKRYKGMGOTHNUCTJLCVZFUPCVSTSHICYAJFDOPMXLJCQFNYVJTOMBHMFAORQLPISQIGBDHAWSRDKGVMYNPIIQMW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.9596530305899273);
    msg.setSource(48633U);
    msg.setSourceEntity(76U);
    msg.setDestination(62883U);
    msg.setDestinationEntity(218U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.8328623708811805);
    msg.setSource(44469U);
    msg.setSourceEntity(230U);
    msg.setDestination(48915U);
    msg.setDestinationEntity(234U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.3902935212045904);
    msg.setSource(50129U);
    msg.setSourceEntity(14U);
    msg.setDestination(17968U);
    msg.setDestinationEntity(137U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.5888483110415225);
    msg.setSource(35603U);
    msg.setSourceEntity(91U);
    msg.setDestination(43708U);
    msg.setDestinationEntity(153U);
    msg.id = 14U;
    msg.label.assign("QDCWYWLEDGKPCBUKIQEKJDDTUJAIOE");
    msg.component.assign("MMOWVTBYETXASGWEZWJIJQECHXYYAQNVRKABFPDZBFTNWUUPNCPLPTNFGIXFCYSTVRVRHORFYBYGUOKLCNKFLBJSURORYOKQCVFJIGZYHLTXLRDFUHICOSMDCIAJBJZILLIFBVKMEDAAESEGGHEPNOOHVMTQPQHWPKLZATCAAIGMMZUVJQCJNEPMQSDBX");
    msg.act_time = 33135U;
    msg.deact_time = 10763U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.3030771375434631);
    msg.setSource(20102U);
    msg.setSourceEntity(99U);
    msg.setDestination(6737U);
    msg.setDestinationEntity(80U);
    msg.id = 22U;
    msg.label.assign("NMWGWNGPSHYTREILVYKHQAPHUVEFKGJKAEONXMSZXTBRXRFJQCONLYPIQUXSNOKVOVBBZCCWLVBDIHMDDQOIBEFURMAFLYRHTPQTYCZLUXPYLYDEIJSNTTRRBUGBXYGHQYGKWUALEGJZNWMCVANBMCDZZZVKFAZWGJLNMCRQZDLTIOUUIXPQTJVPCGPYPCHZKWEROHFATSBPXDWFLNMSO");
    msg.component.assign("ANMTJMFXOSRYLEHXOHLTZVHJHDLEIOXEPIRKUUNYEEYGQLMNVOWSKTWYDYYFPB");
    msg.act_time = 12370U;
    msg.deact_time = 62719U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.22357274012670958);
    msg.setSource(14852U);
    msg.setSourceEntity(176U);
    msg.setDestination(41394U);
    msg.setDestinationEntity(151U);
    msg.id = 57U;
    msg.label.assign("QAFFBPGXZCMPDERMMHTEDPCAILMPIBZYGESFZIAODFXRVRKULZZWWTAJUCQPSZDJAJLNKGEWQSRRHJDNNMJRLCOYKIFENOCKOKTVWBHTQWHKBLAUSODGMNBRZLCQVIDTDUSEPLYUBLGSYIQYVBLUTVYHGQZEXHGQTEIJNFYIPGXAVAAXWEODBTHTLVWKHXJYDGMWFCNSJRYOJSIXMSN");
    msg.component.assign("HGVJQNLKSHSFCYHLMEWZIQFROJYUXAEXORTZBPPGNTYOI");
    msg.act_time = 36990U;
    msg.deact_time = 40874U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.3630247673773159);
    msg.setSource(13569U);
    msg.setSourceEntity(29U);
    msg.setDestination(44347U);
    msg.setDestinationEntity(21U);
    msg.id = 94U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.5997120893933612);
    msg.setSource(43396U);
    msg.setSourceEntity(166U);
    msg.setDestination(15173U);
    msg.setDestinationEntity(191U);
    msg.id = 180U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.31174093450627316);
    msg.setSource(50182U);
    msg.setSourceEntity(63U);
    msg.setDestination(46896U);
    msg.setDestinationEntity(56U);
    msg.id = 37U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.4648622705578782);
    msg.setSource(36085U);
    msg.setSourceEntity(35U);
    msg.setDestination(26623U);
    msg.setDestinationEntity(218U);
    msg.op = 156U;
    msg.list.assign("FGQZIUIPQAKXDSJDQLRMAISUUMEQNQTFMMSOZDWYEPJYIIHVTGQBZRVBRYRPESPWDMOOHGJSAIDYUDFLKRPOBKVEFNJBQCOYCRVXTNQKY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.013709824614138055);
    msg.setSource(4948U);
    msg.setSourceEntity(247U);
    msg.setDestination(1003U);
    msg.setDestinationEntity(169U);
    msg.op = 96U;
    msg.list.assign("ZUBSBSSMVBTKEEEVHCJPALNRRTRBCNYPULOZXNDLEHYPGHDJMXQJFUQQXPCTLLTDAMOQIWKCNNFVNAZDBHLRSHXTZNPEKIIYPDGXIUOX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.6118211509832829);
    msg.setSource(21375U);
    msg.setSourceEntity(195U);
    msg.setDestination(46133U);
    msg.setDestinationEntity(97U);
    msg.op = 184U;
    msg.list.assign("SAPHPHMIELJPPSGYMLGFATMGRCXBSYKSCOCVMTQRDFNKICABAMBPTWBGGXZKZEYHUOAEKCDUNCWPUJWITFKWBSXQRLVNHEJYUOCLJIZFBDWWKVPXYSAFDRTWOBDQNYTDXDXNHNSEYLZBQMZIVEXMRGLHKONEXWI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.09332143200231635);
    msg.setSource(64914U);
    msg.setSourceEntity(132U);
    msg.setDestination(20979U);
    msg.setDestinationEntity(24U);
    msg.value = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.7114821587526177);
    msg.setSource(23900U);
    msg.setSourceEntity(193U);
    msg.setDestination(38712U);
    msg.setDestinationEntity(183U);
    msg.value = 134U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.6033610370110182);
    msg.setSource(4729U);
    msg.setSourceEntity(25U);
    msg.setDestination(60973U);
    msg.setDestinationEntity(67U);
    msg.value = 159U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.43985123863141384);
    msg.setSource(32422U);
    msg.setSourceEntity(102U);
    msg.setDestination(9083U);
    msg.setDestinationEntity(15U);
    msg.consumer.assign("BVAHASXLFSNMEGKESLDZHGBPALJRXOPNIQXSKWOKJSIVEFUQBTJBAZHFTUZLXJRSGHMUDAKLMDQVOSRLVMGQLIHRPPDYXIJAUWTWBMIBEQWDYVUEPEWQQCBRRECPNQVWUFHJOXICNWQFCHDAPMAAZTKMUOTIHZCLNHODIWOMPZSYSYJJXKTBKBCDZRNVGBLCJZRYOVYFCGTIRXOGGJMNEVVIKNXWFKUFTYLFY");
    msg.message_id = 12300U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.24838025132227104);
    msg.setSource(55287U);
    msg.setSourceEntity(112U);
    msg.setDestination(15925U);
    msg.setDestinationEntity(254U);
    msg.consumer.assign("CMASLBNWLAYTPGWRBTEXHTMIGFUKWDWICLPXUCFCGOJOMQOEKDFOGETBUDSZKZFQPIDVDMGSAILNRKISZBFQQIVTOYMLGNYRHWHGUJWBXOIULUGZLBVHJDTVBPRSHHSYAVZFWSIPAEEEMWSES");
    msg.message_id = 43785U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.051570089179663325);
    msg.setSource(43953U);
    msg.setSourceEntity(54U);
    msg.setDestination(6548U);
    msg.setDestinationEntity(236U);
    msg.consumer.assign("IQTJGIVDTEMVSMFANUFSHISTXJLRHIOENWMQCQYZWYPCBOIBWNXPUJLGERWSFZNUXVJKBRMGSPKATBBFNWGIUHUXVAIDULKKGEOMYNZRUKCLRQWCUJJZNSDJLPFYNLPZSQHJAIHAEEKGRPFRYBVMXFXNTXZIPCKIDO");
    msg.message_id = 43045U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.313528858979231);
    msg.setSource(22720U);
    msg.setSourceEntity(136U);
    msg.setDestination(55913U);
    msg.setDestinationEntity(121U);
    msg.type = 66U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.6147015936021345);
    msg.setSource(32934U);
    msg.setSourceEntity(30U);
    msg.setDestination(30039U);
    msg.setDestinationEntity(121U);
    msg.type = 121U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.7343240490051135);
    msg.setSource(41081U);
    msg.setSourceEntity(12U);
    msg.setDestination(60899U);
    msg.setDestinationEntity(211U);
    msg.type = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.39604865179822446);
    msg.setSource(15495U);
    msg.setSourceEntity(192U);
    msg.setDestination(43254U);
    msg.setDestinationEntity(224U);
    msg.op = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.6487757083767247);
    msg.setSource(56710U);
    msg.setSourceEntity(12U);
    msg.setDestination(27304U);
    msg.setDestinationEntity(177U);
    msg.op = 61U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.8199775168519032);
    msg.setSource(42638U);
    msg.setSourceEntity(167U);
    msg.setDestination(57912U);
    msg.setDestinationEntity(197U);
    msg.op = 215U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.36666535156310653);
    msg.setSource(54235U);
    msg.setSourceEntity(32U);
    msg.setDestination(48630U);
    msg.setDestinationEntity(107U);
    msg.total_steps = 215U;
    msg.step_number = 143U;
    msg.step.assign("JRMHKZSJMPHBIQTYTCVCJYNGIRWZIJNXAFIQNYKCRZGNYJFLXKQNDSEYPRUOCSFTMVOGSFWMVLWOAVRULTLSFDZLUVEOINXUHTZBCRECFPUEMLVQMXQXQSYEGKCYJTFFDDI");
    msg.flags = 78U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.792889093691094);
    msg.setSource(6646U);
    msg.setSourceEntity(234U);
    msg.setDestination(31339U);
    msg.setDestinationEntity(160U);
    msg.total_steps = 158U;
    msg.step_number = 165U;
    msg.step.assign("RBSHGEXAYQRWGYQDMALULJEKVVYQJQTWZMUBGXKQKMIVHMZBUCKSSNQLVALOAREFASIPGMZYHICXPAPFJNVIMAQUYHDWMZWNGFP");
    msg.flags = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.4780080872894603);
    msg.setSource(60265U);
    msg.setSourceEntity(45U);
    msg.setDestination(3575U);
    msg.setDestinationEntity(120U);
    msg.total_steps = 186U;
    msg.step_number = 154U;
    msg.step.assign("SXXRLZKFERIDNKDULEZUZEHOVUBPVBEOAZRG");
    msg.flags = 12U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.9341167341331681);
    msg.setSource(7210U);
    msg.setSourceEntity(194U);
    msg.setDestination(32126U);
    msg.setDestinationEntity(19U);
    msg.state = 118U;
    msg.error.assign("GYLFAJBBCIKIKVDKQNOORHTDHFNMNXIQXAANFOVAXUWB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.3501646684969083);
    msg.setSource(11428U);
    msg.setSourceEntity(158U);
    msg.setDestination(52610U);
    msg.setDestinationEntity(156U);
    msg.state = 112U;
    msg.error.assign("UHVWSNLMSCFAXLWPEZMYNPRKHJBCZJZKEEAFDNNQQDZLKRVICBBASDGHLSSYDAXPVGTYZKJJDIBOYGLGPQIGFYTLSYLOVIRCICWXTEBVTVYFUPWPQIMPTATPCNAQCRJFZNESF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.8289968576254728);
    msg.setSource(22214U);
    msg.setSourceEntity(152U);
    msg.setDestination(57532U);
    msg.setDestinationEntity(93U);
    msg.state = 245U;
    msg.error.assign("RFQVUTTFDFMCJHCUAWZBLIZSGBIHWMAJKDHFOWPB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.20189362011956302);
    msg.setSource(34857U);
    msg.setSourceEntity(32U);
    msg.setDestination(21485U);
    msg.setDestinationEntity(51U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.9774193648866849);
    msg.setSource(26812U);
    msg.setSourceEntity(159U);
    msg.setDestination(12777U);
    msg.setDestinationEntity(26U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.06282122269206658);
    msg.setSource(41103U);
    msg.setSourceEntity(5U);
    msg.setDestination(3134U);
    msg.setDestinationEntity(164U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.9009171240921182);
    msg.setSource(32545U);
    msg.setSourceEntity(27U);
    msg.setDestination(26543U);
    msg.setDestinationEntity(195U);
    msg.op = 237U;
    msg.speed_min = 0.16018499447801027;
    msg.speed_max = 0.4458939770059879;
    msg.long_accel = 0.499230329150708;
    msg.alt_max_msl = 0.3735830763556883;
    msg.dive_fraction_max = 0.15890564320569067;
    msg.climb_fraction_max = 0.17279069129426616;
    msg.bank_max = 0.6336058796226245;
    msg.p_max = 0.5376350607370762;
    msg.pitch_min = 0.13937207598791135;
    msg.pitch_max = 0.12677685462587363;
    msg.q_max = 0.34726479504440455;
    msg.g_min = 0.22085005610506714;
    msg.g_max = 0.1428927859964656;
    msg.g_lat_max = 0.519333165331264;
    msg.rpm_min = 0.8720131956806713;
    msg.rpm_max = 0.42752082668377067;
    msg.rpm_rate_max = 0.5790142923960283;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.48734645358077766);
    msg.setSource(52581U);
    msg.setSourceEntity(23U);
    msg.setDestination(28486U);
    msg.setDestinationEntity(126U);
    msg.op = 121U;
    msg.speed_min = 0.23472458453690315;
    msg.speed_max = 0.14582771121722904;
    msg.long_accel = 0.898527695654819;
    msg.alt_max_msl = 0.9608449595057216;
    msg.dive_fraction_max = 0.40186878592175646;
    msg.climb_fraction_max = 0.8105386177302184;
    msg.bank_max = 0.058191606006398944;
    msg.p_max = 0.7103605245797713;
    msg.pitch_min = 0.5232369935730322;
    msg.pitch_max = 0.4214754919491106;
    msg.q_max = 0.8116020324358846;
    msg.g_min = 0.794565973855338;
    msg.g_max = 0.843091877055446;
    msg.g_lat_max = 0.6805965955426961;
    msg.rpm_min = 0.749790476468637;
    msg.rpm_max = 0.22217223322327673;
    msg.rpm_rate_max = 0.10003794400209809;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.9013649228311533);
    msg.setSource(65415U);
    msg.setSourceEntity(211U);
    msg.setDestination(38172U);
    msg.setDestinationEntity(21U);
    msg.op = 72U;
    msg.speed_min = 0.36649854930914716;
    msg.speed_max = 0.8383614363246774;
    msg.long_accel = 0.4292898370779321;
    msg.alt_max_msl = 0.3924191876483034;
    msg.dive_fraction_max = 0.6369288211386943;
    msg.climb_fraction_max = 0.12197617345011336;
    msg.bank_max = 0.4101434012745392;
    msg.p_max = 0.06934556962654337;
    msg.pitch_min = 0.03343942017340862;
    msg.pitch_max = 0.8301397413692054;
    msg.q_max = 0.8869923945436557;
    msg.g_min = 0.2702536806106294;
    msg.g_max = 0.5831232363804687;
    msg.g_lat_max = 0.613796159216012;
    msg.rpm_min = 0.7772965029032625;
    msg.rpm_max = 0.40230950343973293;
    msg.rpm_rate_max = 0.8829453203107505;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.1449418214017959);
    msg.setSource(33988U);
    msg.setSourceEntity(69U);
    msg.setDestination(5312U);
    msg.setDestinationEntity(237U);
    IMC::DesiredVerticalRate tmp_msg_0;
    tmp_msg_0.value = 0.2422038906180175;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.3471238671322785);
    msg.setSource(49994U);
    msg.setSourceEntity(153U);
    msg.setDestination(4815U);
    msg.setDestinationEntity(181U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("ALBZLVOBQHDPYXSWTBBLNMFDTSCTTQDKGDNYYMOUBFGAPZRCHEMAPGMFKRGXDFFOYOEFFAPVWXQPPKRZREJUJVGOCLEHQJHCIEKCAIWNWJLCMIBSCXAWCHMJHXOZUEOMZZYKVTXTZDWIWUHGQVVJQJZTUZYJXSGZRYXSNYDUQGXDHGALLJUBCWJNUSMVTOINHNDIKVQBLWRYIBSPQIPPAE");
    tmp_msg_0.lat = 0.12377754236753946;
    tmp_msg_0.lon = 0.03717068981802396;
    tmp_msg_0.depth = 0.91828955785866;
    tmp_msg_0.query_channel = 232U;
    tmp_msg_0.reply_channel = 172U;
    tmp_msg_0.transponder_delay = 25U;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.007125004708579352);
    msg.setSource(1898U);
    msg.setSourceEntity(242U);
    msg.setDestination(46914U);
    msg.setDestinationEntity(61U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.47892809172258677);
    msg.setSource(61855U);
    msg.setSourceEntity(7U);
    msg.setDestination(31887U);
    msg.setDestinationEntity(93U);
    msg.lat = 0.635108428258473;
    msg.lon = 0.7382633451530581;
    msg.height = 0.21678056392073208;
    msg.x = 0.8663338281680832;
    msg.y = 0.7504662925581363;
    msg.z = 0.6704572426675706;
    msg.phi = 0.35720068552304807;
    msg.theta = 0.6305293902932144;
    msg.psi = 0.02934510090991249;
    msg.u = 0.8427508488497569;
    msg.v = 0.8656573058765037;
    msg.w = 0.3495812226024513;
    msg.p = 0.4282721774450797;
    msg.q = 0.8641550799552353;
    msg.r = 0.021402711582417133;
    msg.svx = 0.10205949210490861;
    msg.svy = 0.6595172845863345;
    msg.svz = 0.12137204643229627;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.05930104262191316);
    msg.setSource(47070U);
    msg.setSourceEntity(164U);
    msg.setDestination(46283U);
    msg.setDestinationEntity(95U);
    msg.lat = 0.5161080157750549;
    msg.lon = 0.7745348058908276;
    msg.height = 0.5179465231558879;
    msg.x = 0.5116615310150071;
    msg.y = 0.2841142219741566;
    msg.z = 0.17079988017978887;
    msg.phi = 0.5544962194949079;
    msg.theta = 0.986202697360025;
    msg.psi = 0.7389260236622938;
    msg.u = 0.16451788702879733;
    msg.v = 0.4001114235305855;
    msg.w = 0.7676838877676035;
    msg.p = 0.49085622117874683;
    msg.q = 0.8397604071720698;
    msg.r = 0.4382054079426866;
    msg.svx = 0.7715353963470102;
    msg.svy = 0.12700693010236508;
    msg.svz = 0.7888812404114391;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.7310405330077785);
    msg.setSource(59064U);
    msg.setSourceEntity(161U);
    msg.setDestination(11416U);
    msg.setDestinationEntity(59U);
    msg.lat = 0.2220314786083093;
    msg.lon = 0.9106738775842765;
    msg.height = 0.3323977680451756;
    msg.x = 0.468808758714664;
    msg.y = 0.8129174389256755;
    msg.z = 0.8250439071537073;
    msg.phi = 0.4367828931479304;
    msg.theta = 0.4703544104760383;
    msg.psi = 0.5379546050637849;
    msg.u = 0.7337934465336396;
    msg.v = 0.9862894639992145;
    msg.w = 0.9760329942545406;
    msg.p = 0.9692217346555211;
    msg.q = 0.7505065021614518;
    msg.r = 0.2038359980278388;
    msg.svx = 0.8034320997959634;
    msg.svy = 0.7502457683866971;
    msg.svz = 0.6364382811866995;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.07784915419917726);
    msg.setSource(51775U);
    msg.setSourceEntity(254U);
    msg.setDestination(26545U);
    msg.setDestinationEntity(17U);
    msg.op = 50U;
    msg.entities.assign("TKGKOHDMIBDYPOJTRXBZJKEHHICHSYUKVXZCHBDSTNREFFVOLUMKAAZQXHFNDQJUYZQYXPQMNJLWZNZCEKIEGEOYFDGRBNSERIGBATTSGSTMCOUUZQMBPCPR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.4444138110889191);
    msg.setSource(45830U);
    msg.setSourceEntity(56U);
    msg.setDestination(11967U);
    msg.setDestinationEntity(30U);
    msg.op = 83U;
    msg.entities.assign("OKOSMVWSIVXQDJEUNJQREFGJJTRYDTPFPVLLQWZHWAIZJTBTANAWECERASYUHKCKXTWITNAXNLVLALBBOUVLLRXCIGKDHPZMQZUHWFQYMZMAEBEOMIPONQPIGERAHCXIBAEDIHGRQCDBUNTWQYFVKTMGCUXDFMKOTLRNJLFHDFJYTVBDVESBUIOZYSNVFZPNSOHJGPSSYGXAKWSJWDUQCXPIMRYDRLGXNHYMKHOKXZBGMUJCSFVYZRCF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.5227379993765674);
    msg.setSource(2917U);
    msg.setSourceEntity(56U);
    msg.setDestination(25002U);
    msg.setDestinationEntity(70U);
    msg.op = 254U;
    msg.entities.assign("NNUOSWPSWAZIUJMTRPQTZGKECTUYCXYVPLMPDRCAAZMZGJSHWWYAQDXTOMPBXBXDEJEGCAYJXWOJFVAEIFNKKTYODMAPZQQALQVZJGKELRORCKQBUGTBFVCBZLRXSFMRVLOTLIHDIDSLTCKUIHVPFVHPKBENXBXASMJYRPENSZYAFNXIRGGVZHWNUSTZBYHGDNSFQIDUWHBWIYJYLFEUUHNJLVFQMWJNCPGHOBKO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.22158453109772414);
    msg.setSource(50447U);
    msg.setSourceEntity(232U);
    msg.setDestination(16152U);
    msg.setDestinationEntity(19U);
    msg.type = 83U;
    msg.speed = 4941U;
    const signed char tmp_msg_0[] = {-11, -36, -104, -111, -29, 64, -1, 90, -3, 48, -11, -38, 60, -106, 93, 31, -30, 7, 40, 37, 0, 71, 42, 121, -22, -28, 27, -1, 57, -101, 10, -37, -90, 80, 64, -7, 11, -27, -90, 56, -91, 55, 82, 124, -8, -43, 91, 12, -81, 29, 28, -41, -60, -65, 92, 10, 84, -126, -14, -90, 121, -22, -17, -13, 119, -116, -4, -67, -78, -64, 22, -53, 115, 106, -62, -95, -26, -8, -99, 34, -101, 58, -65, -45, 8, -5, -98, -115, -112, -77, -36, -36, 105, 58, 111, -54, -25, 21, -51, 103, 18, -26, 53, -4, -100, -8, 112, -83, 104, -37, -38, -127, -119, 30, -77, 123, -5, 112, -24, -59, -125, -55, 98, -106, -27, 120, 118, 52, -9, 71, -39, 125, -47, -100, -36, 33, 21, 41, -127, -6, -93, 70, -24, -98, -67, -60, 59, 121, -86, 113, 19, 124, 114, 81, 44, 71, 23, 109, 112, 109, -89, -59, 80, -113, -116, -80, 33, 113, -13, 35, -75, 1, 67, -51, -59};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.004467422997413206);
    msg.setSource(27721U);
    msg.setSourceEntity(160U);
    msg.setDestination(12785U);
    msg.setDestinationEntity(137U);
    msg.type = 209U;
    msg.speed = 9333U;
    const signed char tmp_msg_0[] = {-20, 90, 92, 74, -74, 80, 60, -8, 99, 110, -7, 89, 15, -48, 54, 71, -91, 96, -11, -116, -56, -90, -44, 84, -117, 44, -114, -65, -74, -13, -106, 62, 90, -51, 79, 69, 112, 69, -54, 87, -89, -41, -46, -4, -71, -15, -5, -109, -107, 1, 98, 100, -84, 96, 121, 121, 79, -67, -66, -104, -8, -63, -101, 96, -82, 9, -30, 45, -119, -126, 7, -86, 45, 122, -116, 94, -46, -18, -40, 1, -51, 35, -60, 42, 18, 2, 1, 85, 62, -1, 21, 45, 45, 114, 31, 121, 55, 84, -109, 106, -55, -107, 9, -22, -121, 60, -98, 18, -70, 81, 39, -44, -82, -108};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.546726720935321);
    msg.setSource(43545U);
    msg.setSourceEntity(239U);
    msg.setDestination(56241U);
    msg.setDestinationEntity(171U);
    msg.type = 198U;
    msg.speed = 50593U;
    const signed char tmp_msg_0[] = {26, -123, -111, 4, -56, -104, -59, 14, -44, -4, -104, -9, -103, 80, -97, -74, 76, 113, -62, 93, -124, -73, -92, -93, -30, -21, 62, 87, 116, 60, -118, -19, 85, 95, -33, -99, 31, -45, 5, -72, 0, -72, 55, 55, -86, -30, -16, -47, -43, 44, 58, 95, 21, -75, 79, 76, -94, -112, -128, 11, 103, 41, 20, -118, 37, 64, 114, 2, -51, -21, -1, -78, 7, 86, 84, 16, 36, -123, 84, 9, -76, -112, 30, 83, 37, 85, -69, 61, -16, -20, -2, 48, -96, -6, 80, -48, -15};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.5568579002783024);
    msg.setSource(57298U);
    msg.setSourceEntity(25U);
    msg.setDestination(35978U);
    msg.setDestinationEntity(208U);
    msg.op = 110U;
    msg.tas2acc_pgain = 0.010339968294826973;
    msg.bank2p_pgain = 0.45025759977318014;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.5024445179958708);
    msg.setSource(59022U);
    msg.setSourceEntity(210U);
    msg.setDestination(17278U);
    msg.setDestinationEntity(28U);
    msg.op = 131U;
    msg.tas2acc_pgain = 0.7268866617362613;
    msg.bank2p_pgain = 0.929590999547788;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.9650009275207896);
    msg.setSource(19648U);
    msg.setSourceEntity(247U);
    msg.setDestination(5928U);
    msg.setDestinationEntity(93U);
    msg.op = 1U;
    msg.tas2acc_pgain = 0.3430056128992225;
    msg.bank2p_pgain = 0.7190135230273004;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.19871286087040196);
    msg.setSource(47241U);
    msg.setSourceEntity(75U);
    msg.setDestination(59033U);
    msg.setDestinationEntity(233U);
    msg.available = 1493296946U;
    msg.value = 121U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.8032594450614866);
    msg.setSource(56841U);
    msg.setSourceEntity(165U);
    msg.setDestination(23678U);
    msg.setDestinationEntity(251U);
    msg.available = 3528030723U;
    msg.value = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.15028893025375067);
    msg.setSource(26000U);
    msg.setSourceEntity(141U);
    msg.setDestination(29171U);
    msg.setDestinationEntity(136U);
    msg.available = 2876093464U;
    msg.value = 230U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.5197896662920478);
    msg.setSource(50363U);
    msg.setSourceEntity(36U);
    msg.setDestination(61657U);
    msg.setDestinationEntity(148U);
    msg.op = 144U;
    msg.snapshot.assign("GJZPLHABMCKBWAJQSRKXDUXIETLGAZSLJOTCGEQMIBAXKOHKVNDUAEJYHFFWUYDXYVVMKKISEKHYRAZXNEYANLRWYVGGJVQRTXXCCGDMIQQOZNSNWOSPBZVMH");
    IMC::RowsCoverage tmp_msg_0;
    tmp_msg_0.lat = 0.773061914392725;
    tmp_msg_0.lon = 0.32410591696442004;
    tmp_msg_0.z = 0.05224667165150787;
    tmp_msg_0.z_units = 137U;
    tmp_msg_0.speed = 0.9875164288160522;
    tmp_msg_0.speed_units = 39U;
    tmp_msg_0.bearing = 0.6743233785678869;
    tmp_msg_0.cross_angle = 0.3862380298315763;
    tmp_msg_0.width = 0.6977208184422611;
    tmp_msg_0.length = 0.3715133843754428;
    tmp_msg_0.coff = 29U;
    tmp_msg_0.angaperture = 0.5958117473221188;
    tmp_msg_0.range = 26712U;
    tmp_msg_0.overlap = 98U;
    tmp_msg_0.flags = 47U;
    tmp_msg_0.custom.assign("ETPPIXTSJHYRWXXKOEBEWKEXCCPYBFFUNDEAIYLFMIMEACKVWJNFCPNAFBBZLIZJYYOQOHWMCMLNZYSVQXKIZFXHTQTBSJTDYQWUFGIZJLBHRJAHOLVDZQPNOBKMCSAPSMCOORWZIQXJGXCGMWHSSCDVGLYSFNRFTIUSEK");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.056201348219901304);
    msg.setSource(64904U);
    msg.setSourceEntity(217U);
    msg.setDestination(36371U);
    msg.setDestinationEntity(238U);
    msg.op = 202U;
    msg.snapshot.assign("JFIXYGJTTOWSIXGEVSUFLVAXGFLWTPGXCWKOAUCCTIRLKMUZKPGFKDYIELTXKYIOQXBQANNJIPSVMXPEADJAGJQAFOLAHHVWPUNBWJXBPQSCKNSJPDB");
    IMC::Formation tmp_msg_0;
    tmp_msg_0.formation_name.assign("JHVZIJMMBRPBLJZCZVOEZVPXKZECXVXYQIPOJWLQENCRXNVYKURLYUIODPBFZHFYPIJPWSEIDUSDTGYCWVWEZBSEXNBPLQGXBSKAFEQOJGVNDRUWMMKULWKCOCZXIQ");
    tmp_msg_0.type = 38U;
    tmp_msg_0.op = 195U;
    tmp_msg_0.group_name.assign("BBHIOZPXQUOAFVWNOGVCXJFRIGZTTME");
    tmp_msg_0.plan_id.assign("DLHECVNSVJGKOQXHVHCQHKUCIWKABIYFTGXZQZRLYVIRMAFJRUKFAMIEHHNAICJXESUDMDSDWDQMEMXFAUGQUERYEABVQRJTK");
    tmp_msg_0.description.assign("GNDTDTKRFMRFWKKHYCCDLVQZISABRRGKZSJUBWNBXJOAJPBPZZMUEWGALJQNSTONMMLZYQOHJTIBYRUJPX");
    tmp_msg_0.reference_frame = 52U;
    IMC::VehicleFormationParticipant tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vid = 22817U;
    tmp_tmp_msg_0_0.off_x = 0.7842204600306378;
    tmp_tmp_msg_0_0.off_y = 0.8784147965864737;
    tmp_tmp_msg_0_0.off_z = 0.8877126090132146;
    tmp_msg_0.participants.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.leader_bank_lim = 0.8033607024685775;
    tmp_msg_0.leader_speed_min = 0.11690879907835405;
    tmp_msg_0.leader_speed_max = 0.8727093774816173;
    tmp_msg_0.leader_alt_min = 0.9418145569020515;
    tmp_msg_0.leader_alt_max = 0.049193008169863606;
    tmp_msg_0.pos_sim_err_lim = 0.7697496117988791;
    tmp_msg_0.pos_sim_err_wrn = 0.31596781529262685;
    tmp_msg_0.pos_sim_err_timeout = 6017U;
    tmp_msg_0.converg_max = 0.7962743670230549;
    tmp_msg_0.converg_timeout = 21232U;
    tmp_msg_0.comms_timeout = 21805U;
    tmp_msg_0.turb_lim = 0.21749617072213345;
    tmp_msg_0.custom.assign("PRMLLXKVBYYKAANVUTADDNFVWLDDYVBXZSLDRLIVEGZSTSLPFMOKIWNPEXTMWI");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.41335654312527836);
    msg.setSource(65182U);
    msg.setSourceEntity(35U);
    msg.setDestination(38024U);
    msg.setDestinationEntity(146U);
    msg.op = 169U;
    msg.snapshot.assign("JDWGOENAYZQKPMSWBVKOAWDOGNJCHWVHFMHJLLSEATCRMDFKVYCWWVTRJIURDLCPRBCXKJOINOPTDPAAQSURAOJLQQELQYVZDYAYSGZGDKWUGWMIWLZIQHUXNFQCIZIKPJTKUUNXKMZUJOLFDECZTFQNPXNPCLZYQZSGYCHEYFVBHJRNJOKKTRHORVBNXFVBTESEMEISEQBEXNATGOFBLWZGIMFXHCDUXVSMTADRPSGHXYPSIYPXFVAT");
    IMC::Magnetometer tmp_msg_0;
    tmp_msg_0.timeout = 15014U;
    tmp_msg_0.lat = 0.8081901104502355;
    tmp_msg_0.lon = 0.7034342782560575;
    tmp_msg_0.z = 0.6141418633327899;
    tmp_msg_0.z_units = 106U;
    tmp_msg_0.speed = 0.44580764479514456;
    tmp_msg_0.speed_units = 5U;
    tmp_msg_0.bearing = 0.7575516387549894;
    tmp_msg_0.width = 0.5694686467160996;
    tmp_msg_0.direction = 212U;
    tmp_msg_0.custom.assign("GEBZYUAAXVHOCLWZKCXFUFXXBIZEOZFTUWGYWRJCQLCDUXPHSBADYWTOEJFWWIKLOOPCUOSNHUDLJFEZVGRMTBGQEJNHODTQOZDNNVHAEILIRHSVCWLKLMVVGAJAMBFCSGVVISYFJMTVDERQHNQKKQYMNQBPCRIJWYATZENELKPSDFBUIJXMGPI");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.968663415166771);
    msg.setSource(36093U);
    msg.setSourceEntity(37U);
    msg.setDestination(9175U);
    msg.setDestinationEntity(17U);
    msg.op = 192U;
    msg.name.assign("ZBGJENJPHNAMWRKCVSSQEHTEUWPAGWZCXFEWVBIFYSSLOCYMQWBHGMOXLUMTHDFVADXPRRRAJNLYTJR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.6777414002430573);
    msg.setSource(5571U);
    msg.setSourceEntity(131U);
    msg.setDestination(51886U);
    msg.setDestinationEntity(61U);
    msg.op = 143U;
    msg.name.assign("RHXCLYRCNTHXVWQOZJBYJHQICIC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.8585764542169747);
    msg.setSource(54244U);
    msg.setSourceEntity(191U);
    msg.setDestination(7492U);
    msg.setDestinationEntity(18U);
    msg.op = 127U;
    msg.name.assign("DQHHGZEOPDFGYNKWPECCPOEZWGPYXLZLDYXQMGTQKDCKJDRAOHFQXUQRNFYHNAHKFEEIZMASTWXCLCFVBNWPGTEHVSXMKWRVLFIVSYYGEQNMINJVRMRULDIKXNXFUMOLUSJIOAOTDWTYVQKLBBQGMPACZBQAUFUMBEPV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.14148431350683588);
    msg.setSource(13614U);
    msg.setSourceEntity(6U);
    msg.setDestination(13750U);
    msg.setDestinationEntity(253U);
    msg.type = 134U;
    msg.htime = 0.2854761410777198;
    msg.context.assign("BJLXANZSPWCDEQKKRMVHWGQJKJGTBKCZQLUXLFFOUAAWQONUVALLBTMTKSVHWDFHEZSBRXTJSMVMRLWGIEKCFTYGWXSNBSHJSQBEOUHDOCFQKYWSKDAINXYZUPAMTYNEHV");
    msg.text.assign("ZMXNPJXJBLATQUAYZKIFKKAZEHCYTRLAKUUSJFYIVDIRKCRJMXJRTNNMNHOGQWDWNWGVEPHNQDZJKZHSBBHQDSIFXJCPUDRHOOCPTMJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.7977321149630769);
    msg.setSource(58327U);
    msg.setSourceEntity(31U);
    msg.setDestination(31019U);
    msg.setDestinationEntity(231U);
    msg.type = 12U;
    msg.htime = 0.9698184032174617;
    msg.context.assign("XPPEQZRLTKBGWJKBIUNSEMPEGWPVCMSSVQAQKZHRDQSFCDTVGGHRLKJEXFTUABOCJULJELYQNXPHYVJDWIQTXNLNCBBIZUSJTWKYSOWIATEMJZWIXDRHFOIACGNVYXMPILZQBDVHEGNSGNURROZZFXHABVTJBGNTRAKZBFLCIQAKGWDUYFKUTPOYO");
    msg.text.assign("HEFHZVSFVMSDCRKEHRWIQWONJVGTMSECPJNCPDLJLIOAGJRONOIJIXXFDAIHR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.3769564472798166);
    msg.setSource(21885U);
    msg.setSourceEntity(83U);
    msg.setDestination(32535U);
    msg.setDestinationEntity(86U);
    msg.type = 215U;
    msg.htime = 0.8668430744321082;
    msg.context.assign("DXMQPQEWLJUSKNREYMPFGKYRELSBILFBUBA");
    msg.text.assign("GBNYDOMPFJZTQVLYBMFOOAWUDUCCPBOIPKGMVAIMCTBPYBIQNFTXDKZSEQAHD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.2761372322053739);
    msg.setSource(899U);
    msg.setSourceEntity(239U);
    msg.setDestination(11546U);
    msg.setDestinationEntity(145U);
    msg.command = 128U;
    msg.htime = 0.09278378334486292;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.2074632005046786);
    msg.setSource(23832U);
    msg.setSourceEntity(212U);
    msg.setDestination(34048U);
    msg.setDestinationEntity(73U);
    msg.command = 58U;
    msg.htime = 0.5939240109161461;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.6987773229682631);
    msg.setSource(49887U);
    msg.setSourceEntity(37U);
    msg.setDestination(64956U);
    msg.setDestinationEntity(54U);
    msg.command = 168U;
    msg.htime = 0.5010713163888297;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 196U;
    tmp_msg_0.htime = 0.3777270030741734;
    tmp_msg_0.context.assign("MQHPOVZMAJGQGRLZXZSQPV");
    tmp_msg_0.text.assign("MJAXSDIDVRTSMYBPMRSWUWDTQKIQOH");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.7651866350370014);
    msg.setSource(63870U);
    msg.setSourceEntity(46U);
    msg.setDestination(62911U);
    msg.setDestinationEntity(112U);
    msg.op = 11U;
    msg.file.assign("NJBARRLGQAPXYYNQBSXXFXPH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.6843269156157238);
    msg.setSource(13370U);
    msg.setSourceEntity(73U);
    msg.setDestination(8888U);
    msg.setDestinationEntity(13U);
    msg.op = 116U;
    msg.file.assign("MKECGYPORXUTZQUBVAPVELSOBWXKYNLRYJHVIFPIFJHOITNJGNPDSMEUNPHQZVYJQUZCOJWGGRPXVJGCCHV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.43908000859316876);
    msg.setSource(5333U);
    msg.setSourceEntity(191U);
    msg.setDestination(56978U);
    msg.setDestinationEntity(98U);
    msg.op = 219U;
    msg.file.assign("YMNVMJPCKWA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.20057975971424957);
    msg.setSource(53996U);
    msg.setSourceEntity(175U);
    msg.setDestination(12229U);
    msg.setDestinationEntity(78U);
    msg.op = 59U;
    msg.clock = 0.07346653569300732;
    msg.tz = -29;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.6319233862902807);
    msg.setSource(3189U);
    msg.setSourceEntity(79U);
    msg.setDestination(10145U);
    msg.setDestinationEntity(83U);
    msg.op = 122U;
    msg.clock = 0.9469694111954905;
    msg.tz = -3;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.33136738645291064);
    msg.setSource(6486U);
    msg.setSourceEntity(161U);
    msg.setDestination(39407U);
    msg.setDestinationEntity(216U);
    msg.op = 41U;
    msg.clock = 0.8839263131373105;
    msg.tz = -96;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.29884480767511457);
    msg.setSource(60784U);
    msg.setSourceEntity(29U);
    msg.setDestination(45534U);
    msg.setDestinationEntity(4U);
    msg.conductivity = 0.8405423906848571;
    msg.temperature = 0.7109842370130721;
    msg.depth = 0.09117177800100451;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.198803378711925);
    msg.setSource(42261U);
    msg.setSourceEntity(38U);
    msg.setDestination(35614U);
    msg.setDestinationEntity(220U);
    msg.conductivity = 0.8636319934198632;
    msg.temperature = 0.999922423126027;
    msg.depth = 0.32205208125228624;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.6045220289401101);
    msg.setSource(21998U);
    msg.setSourceEntity(30U);
    msg.setDestination(9760U);
    msg.setDestinationEntity(20U);
    msg.conductivity = 0.9243935581671147;
    msg.temperature = 0.6763867961526656;
    msg.depth = 0.4437095022912153;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.43108576341318094);
    msg.setSource(34729U);
    msg.setSourceEntity(8U);
    msg.setDestination(31895U);
    msg.setDestinationEntity(245U);
    msg.altitude = 0.9132454535339424;
    msg.roll = 5450U;
    msg.pitch = 40797U;
    msg.yaw = 31944U;
    msg.speed = 27730;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.167436057722541);
    msg.setSource(11103U);
    msg.setSourceEntity(239U);
    msg.setDestination(52179U);
    msg.setDestinationEntity(38U);
    msg.altitude = 0.5421614402788856;
    msg.roll = 64565U;
    msg.pitch = 53884U;
    msg.yaw = 61855U;
    msg.speed = -24952;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.13434807173963048);
    msg.setSource(55059U);
    msg.setSourceEntity(105U);
    msg.setDestination(30460U);
    msg.setDestinationEntity(72U);
    msg.altitude = 0.7135225672750095;
    msg.roll = 5383U;
    msg.pitch = 50870U;
    msg.yaw = 54186U;
    msg.speed = -16816;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.6187848511166836);
    msg.setSource(51363U);
    msg.setSourceEntity(40U);
    msg.setDestination(4929U);
    msg.setDestinationEntity(53U);
    msg.altitude = 0.7033361116255448;
    msg.width = 0.45862453498578815;
    msg.length = 0.22224901021617527;
    msg.bearing = 0.017531242927822044;
    msg.pxl = 30193;
    msg.encoding = 202U;
    const signed char tmp_msg_0[] = {-46, -8, -70, 108, 44, -126, -124, -80, 14, -72, -96, -75, -78, -58, 34, 89, 77, -104, -108, 9, 8, -88, -126, 73, 34, -6, 22, -114, 29, -24, 25, 40, -73, -22, 86, -122, 121, -48, -116, 73, -21, -7, 14, 81, 75, 116, -70, 53, 93, 79, 0, -61, 63, -67, -40, 42, 82, 123, 57, -91, -81, -41, -51, 57, 123, 24, 10, -83, 50, -58, -104, 119, -80, -30, -26, -109, -75, -24, 112, 20, -32, 45, -20, -28, 101, 63, 70, -24, -70, -83, 53, 18, 108, 112, 106, 14, -42, 99, -53, 28, 63, -75, -60, 112, 87, -92, 126, -22, -54, -118, 85, 72, -27, -120, -128, -102, 87, 123, 51, -36, -4, 123, -11};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.09957538319660997);
    msg.setSource(21614U);
    msg.setSourceEntity(119U);
    msg.setDestination(2518U);
    msg.setDestinationEntity(48U);
    msg.altitude = 0.6459342238383676;
    msg.width = 0.804898480783389;
    msg.length = 0.39857212222813;
    msg.bearing = 0.21283947683112237;
    msg.pxl = -13380;
    msg.encoding = 174U;
    const signed char tmp_msg_0[] = {61, -12, 4, -74, 87, -94, -119, -70, -101, -71, 102, -95, 99, 53, 3, 109, -99, -6, 97, 117, 99, -122, -34, 6, 45, 33, -52, 21, 99, 64, 4, 97, 56};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.3060845999035332);
    msg.setSource(23997U);
    msg.setSourceEntity(32U);
    msg.setDestination(56001U);
    msg.setDestinationEntity(71U);
    msg.altitude = 0.5912456229163332;
    msg.width = 0.7597231276475525;
    msg.length = 0.60557044719175;
    msg.bearing = 0.07702545333585864;
    msg.pxl = -13405;
    msg.encoding = 139U;
    const signed char tmp_msg_0[] = {100, 101, -113, 50, -128, 61, 119, -57, 63, 69, -119, 91, 105, -63, -38, 21, 64, 59, -100, -105, -42, 102, -92, -1, -66, 59, 119, 50, -79, -6, -69, -81, -64, 84, -93, -57, 17, 60, 24, -108, -41, 89, -57, -4, 65, -76, 4, 106, -30, 17, 32, 61, -105, -82, -44, -90, 44, -66, 17, -17, -107, 39, 46, -17, -124, 81, -121, -111, 60, 47, 80, -53, 86, -1, -33, 51, 106, -103, 66, 103, 124, 112, -118, -109, -15, 48, 21, -80, -76, 67, -27, 87, 89, 35, 121, -26, -33, -89, -69, 54, 27, -128, -52, 67, 80, 89, -7, -85, 62, 25, 76, -75, 104, 50, -68, -2, -58, -15, -50, 120, 89, -90, -119, 76, -9, 81, 61, -72, 73, -112, -115, -62, 31, 16, 25, 39, -76, 15, -42, 71, -119, -74, 120, 45, 107};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.29467441059272825);
    msg.setSource(58304U);
    msg.setSourceEntity(175U);
    msg.setDestination(29255U);
    msg.setDestinationEntity(129U);
    msg.text.assign("WXUKRFJAVIQWHSKAAUJYKOJTLEXGFPBJNFSRPWDLKAST");
    msg.type = 191U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.4292498561155085);
    msg.setSource(6910U);
    msg.setSourceEntity(49U);
    msg.setDestination(38028U);
    msg.setDestinationEntity(207U);
    msg.text.assign("ERIWGSCQAOITHCKPFZGRXQGAF");
    msg.type = 142U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.2240821728331991);
    msg.setSource(16629U);
    msg.setSourceEntity(110U);
    msg.setDestination(51535U);
    msg.setDestinationEntity(28U);
    msg.text.assign("XHYHZJOKURJQAKTFWFRDSMOUVZNYZJOOUEBEVLCJCUBVMIEJDKXTYAQLRYNRQZHWPOLXUVDOYJCLCRPIWVIWGJDDRSAQNWVOICFZCOXDWNECFQLBGGWNPNPMIVRUGKKFMGSTKTBZXQSXVEJSIKCTHZAIGYUAIXWGBTATSYPAFFDMLHTMVHB");
    msg.type = 33U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.4880159874222335);
    msg.setSource(26560U);
    msg.setSourceEntity(177U);
    msg.setDestination(27302U);
    msg.setDestinationEntity(83U);
    msg.parameter = 231U;
    msg.numsamples = 19U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 63289U;
    tmp_msg_0.avg = 0.36701105402508416;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.015390183022408355;
    msg.lon = 0.5716556018781228;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.5901103579040571);
    msg.setSource(32784U);
    msg.setSourceEntity(193U);
    msg.setDestination(34597U);
    msg.setDestinationEntity(63U);
    msg.parameter = 176U;
    msg.numsamples = 61U;
    msg.lat = 0.9001207843646246;
    msg.lon = 0.9210164976210449;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.5918890755044002);
    msg.setSource(28814U);
    msg.setSourceEntity(27U);
    msg.setDestination(25386U);
    msg.setDestinationEntity(137U);
    msg.parameter = 180U;
    msg.numsamples = 225U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 34039U;
    tmp_msg_0.avg = 0.2944866804681834;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.19920015347671727;
    msg.lon = 0.26725566046663785;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.20220584677650144);
    msg.setSource(19046U);
    msg.setSourceEntity(15U);
    msg.setDestination(30009U);
    msg.setDestinationEntity(162U);
    msg.depth = 13488U;
    msg.avg = 0.6814756979019793;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.24197376250917935);
    msg.setSource(54967U);
    msg.setSourceEntity(39U);
    msg.setDestination(61760U);
    msg.setDestinationEntity(252U);
    msg.depth = 61820U;
    msg.avg = 0.21393252312279887;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.7551283079524157);
    msg.setSource(2660U);
    msg.setSourceEntity(78U);
    msg.setDestination(34459U);
    msg.setDestinationEntity(34U);
    msg.depth = 6873U;
    msg.avg = 0.1236205359676733;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.368279668818144);
    msg.setSource(39456U);
    msg.setSourceEntity(76U);
    msg.setDestination(47277U);
    msg.setDestinationEntity(34U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.6773498622215133);
    msg.setSource(12604U);
    msg.setSourceEntity(113U);
    msg.setDestination(37483U);
    msg.setDestinationEntity(2U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.678462264957653);
    msg.setSource(26838U);
    msg.setSourceEntity(158U);
    msg.setDestination(60070U);
    msg.setDestinationEntity(50U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.5752750499439966);
    msg.setSource(6888U);
    msg.setSourceEntity(220U);
    msg.setDestination(44366U);
    msg.setDestinationEntity(172U);
    msg.sys_name.assign("FXXWZNHVCADKRSEXVABAZVMWSHCCLBVRUGORCDFVGEQNWYLARMDAXXCRFGBOMWDFPHIUOVFHYTIQPUMQQDUGIULIAJRQYJKIPLCZJBSJXKP");
    msg.sys_type = 68U;
    msg.owner = 26054U;
    msg.lat = 0.1837905278981251;
    msg.lon = 0.7354226948523839;
    msg.height = 0.1922108178764479;
    msg.services.assign("KVRXIJXHMRJEDPWWRFGSCGWXGULXLVVTRQHGAOSWPZQIAVZCVOPEPHPWNMLZQYRNXVOKLHSBYNTTLDHWPFOQNPZFCYJH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.4355586095791044);
    msg.setSource(2341U);
    msg.setSourceEntity(84U);
    msg.setDestination(42495U);
    msg.setDestinationEntity(55U);
    msg.sys_name.assign("DNPGXGMDEAIZPBEEBPDMBJLWPCNUHPFRNAQHUZMJGOCZYGLMBBCVEVFNIFUVLPDDRSVXVZJENNZZSCPTAONKQXAJBYXDKRYEQRKCYGAMWIUQJIFIPOWWJORBOQUVGLNTSLEKCIZUQE");
    msg.sys_type = 152U;
    msg.owner = 43937U;
    msg.lat = 0.2759762622647167;
    msg.lon = 0.5770954356179127;
    msg.height = 0.9733709311012422;
    msg.services.assign("MWIQQKFNIQPOVZFNZGEDWABJONOWGFBJHDWCPNGITSPYHADOVCGJYENLNOVYHLHZUBPZCMLDRAOFOLCWTHXKVUBIQCIXKNQITURSTUFRKWXSREJJTXCDZJTCFVBXQMYMEUJWJZYAHMKSVAEHLIYUDAEGYSSZSBPKYEUHWWSGCPXGMRYOLQYVHMERWTOLXMDCMVESCXDLGAPTAVRSMJRP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.4960056635334622);
    msg.setSource(61223U);
    msg.setSourceEntity(144U);
    msg.setDestination(11503U);
    msg.setDestinationEntity(30U);
    msg.sys_name.assign("FMMLVFWZTYHKAUJCQARZTUIMBIBVQYDGTLGERJYEBSARDGNRXEHHBWKKHTJJDOXRJMAMWTKDJUXOQFFLZNRYIBCSQDUCHWVFGSWEMIPURZLGCSYYMYBCXMLOAFTXSDJBGOHNZMBUGYEXYQLOHXLEPRHHDDD");
    msg.sys_type = 64U;
    msg.owner = 26009U;
    msg.lat = 0.7932249036675525;
    msg.lon = 0.25318731242497516;
    msg.height = 0.693982232116142;
    msg.services.assign("MDVMEUNZMJDFZHPSRIRGKWZCLNESZAQYXW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.3597267031306671);
    msg.setSource(61588U);
    msg.setSourceEntity(10U);
    msg.setDestination(60860U);
    msg.setDestinationEntity(57U);
    msg.service.assign("MWVIZADBQMSDXJWTOZRFYQMRSHIXXHTOEOFKEHIGDAJHCVRMARRNCLKFXSEPSVCUKUPKZLSHFXQPYOJGTEOOPNTZEKYDVTSYAHRRJJXYZECWMQTYPWFECRZNWEBTWRJXBROUVBDIUSLCGQAWNKELVTXOILKD");
    msg.service_type = 184U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.3921044941324472);
    msg.setSource(49970U);
    msg.setSourceEntity(110U);
    msg.setDestination(30132U);
    msg.setDestinationEntity(217U);
    msg.service.assign("RBRXALELPRORHEJIMEFJFSISVQFHBHWKMSZOQTYMUDKIENTAUFCEDIMXEUSBIFQHZKXCBKZXJCXAOCKLMVPUSRTEAQOFTCWQTKFKPGQYSPMPHBVELXPRJOQLUNWWXDKNZTAZLVWGOIQIFDCGFZMADZIWMHQYTYWZBXYNSRLOCDJNVVJXYPFBGJOEYHSUJPTWJDNURSNVAWYGKVUTNV");
    msg.service_type = 29U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.866329214626403);
    msg.setSource(29019U);
    msg.setSourceEntity(141U);
    msg.setDestination(25132U);
    msg.setDestinationEntity(45U);
    msg.service.assign("RGJBHIANPUWAOKBROIGDBDSSTUJRMFGKHELUMPANZIAWNKNXERCYJDHNSFANXTGZHETOZBSJFCCXPAELEELXUDLWZYPCYUBEVGXPWOWKMIMNPQISBRPVLTRFQRJBUCSCOKYNHECTASEBNYRKACQSVYDAKOIVXRXGPZVLGFPLVNIQZFIXQRQJGTBDGKUIHXTYPJKHGACMJWFZJDYLOMZMQVTOOVF");
    msg.service_type = 11U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.2030112451373528);
    msg.setSource(2162U);
    msg.setSourceEntity(179U);
    msg.setDestination(52554U);
    msg.setDestinationEntity(239U);
    msg.value = 0.9682288555137315;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.5906507573974319);
    msg.setSource(51795U);
    msg.setSourceEntity(94U);
    msg.setDestination(50725U);
    msg.setDestinationEntity(87U);
    msg.value = 0.7931209595013611;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.5316002001861037);
    msg.setSource(42595U);
    msg.setSourceEntity(160U);
    msg.setDestination(17759U);
    msg.setDestinationEntity(86U);
    msg.value = 0.1354524733729957;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.7048812474679311);
    msg.setSource(13402U);
    msg.setSourceEntity(82U);
    msg.setDestination(54890U);
    msg.setDestinationEntity(250U);
    msg.value = 0.1758016109148126;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.11376262829945805);
    msg.setSource(52477U);
    msg.setSourceEntity(35U);
    msg.setDestination(26454U);
    msg.setDestinationEntity(14U);
    msg.value = 0.7849155557744573;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.9992351523807128);
    msg.setSource(20454U);
    msg.setSourceEntity(80U);
    msg.setDestination(22517U);
    msg.setDestinationEntity(82U);
    msg.value = 0.6186800818196722;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.42813886605587503);
    msg.setSource(19390U);
    msg.setSourceEntity(150U);
    msg.setDestination(30149U);
    msg.setDestinationEntity(10U);
    msg.value = 0.13413255408456926;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.8142413533869948);
    msg.setSource(20042U);
    msg.setSourceEntity(97U);
    msg.setDestination(7686U);
    msg.setDestinationEntity(106U);
    msg.value = 0.5488383507156468;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.6787592752326664);
    msg.setSource(43722U);
    msg.setSourceEntity(108U);
    msg.setDestination(63043U);
    msg.setDestinationEntity(140U);
    msg.value = 0.43734959677138374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.4262372516644356);
    msg.setSource(62370U);
    msg.setSourceEntity(169U);
    msg.setDestination(41770U);
    msg.setDestinationEntity(21U);
    msg.number.assign("AWFKLTCPPFEXIOMDQOUPIPQVCOGNXWZEUNSOYIHXUDIFNCJWXLJAYVBBWSGNPOZQLTLOGCKHTHCZTNZGIGFKYKXNCSJMAMJDMRNALBDRTDHMVLD");
    msg.timeout = 63854U;
    msg.contents.assign("CPAJCGQGJMBBQCDCWLWLDYBWVPERFWTDQMWERSGNCVDMTEGDKDDKNOURZKUNAIJWDJHHPOXVXZKVPGBGEWCFFCHAMFVGLUKORZFCAUOVEYNAN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.04717031990795817);
    msg.setSource(32541U);
    msg.setSourceEntity(247U);
    msg.setDestination(9069U);
    msg.setDestinationEntity(18U);
    msg.number.assign("BLHYKUIPVAZQOAJSSIKMDOCMPWIKLZKNWMFXYADEQZWVKXBCKRTOTNATFPMCFAWMEIWBNYZVJYVLRHBAIUPHLEYXDXJUAQKGUECIVEDDFCOAGRKTPNRHDQCTQIXLITZOOOSDMQYYREWYKRHXDKNJQYWSQRJCHTWQBAMUTFJZOEFGZSCNBXHJNBSWMPPJLGTUPNUDHSRLYQJIUTOSCZFPPFBUSVXZZVCGHNILFGGDVURGGSVAXMHJNEEMBVLF");
    msg.timeout = 37508U;
    msg.contents.assign("CVTIBXNGWOJCXXQQNYITKTSUSYGMTNLDPYKMGOZKERPNAZBSZQQNBBLFZMGFFQPZMCIVUXTCOAGLDCEOOQUMNDRPWFDGUOLEZDVROTZRXHAQNNSMATUPKIJOXAMYUDQIRDHYFLRMZHBGTSNBKSVMBCBJSATVDGUCIHGGCKIUVZWQFHKJWWJWLWSQOCLVTHYVFSBVKEYDNEH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.5042770452020992);
    msg.setSource(41808U);
    msg.setSourceEntity(62U);
    msg.setDestination(27592U);
    msg.setDestinationEntity(24U);
    msg.number.assign("FNCPGZOYDDSGWLTLTAJLKXQFVOZDRJIBXGEGKSCMFYFXCROKYUQCKQOIVCLDGTTLMMRPEBFLIJVEKJNMQHLITZTWGHWGQXEJULFOAVZACVJOYMZBNXXY");
    msg.timeout = 10713U;
    msg.contents.assign("OFIDVRJVEFMHGLVNGKXPZIBXEKSRJYUGZNOGBNVVLEGLBPZPRAYPRSIJWTYREUJIVKTFZHQDBPXOFHWVNOTD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.5248891732163864);
    msg.setSource(24020U);
    msg.setSourceEntity(181U);
    msg.setDestination(43414U);
    msg.setDestinationEntity(54U);
    msg.seq = 2907887059U;
    msg.destination.assign("XKJJQNOWTDIZXEOLHPNVTUATUVYFTZAHAMEYTSAJZKVAEWPVJVCYSQZYCDLTSKMCHARNPMEFLXJDSCRMGHRKLEROIDUIFMMSEIHKQVRQWPYXRPUXRZITDXDIVYIMMFIWWVOBXTSAFYVJPZNHONHXG");
    msg.timeout = 51088U;
    const signed char tmp_msg_0[] = {107, 35, 23, 11, 68, -95, -89, 55, -17, -20, 79, -60, -127, -9, -115, 83, -92, 1, -57, 72, 32, -4, 99, -20, 59, 91, 46, -39, 21, -70, -57, -82, -118, 81, 72, 93, 65, 46, 86, -67, -13, -79, -70, 43, -100, 126, 34, -72, -26, -91, 7, -39, 103, -56, -116, 90, 60, -31, -51, 24, -54, -14, 53, -94, -30, -36, 121, 4, -16, -4, 90, -50, -115, 78, 111, 83, -28, 59, 31, -37, -1, -6, -79, -117, 54, 79, 16, 31, 123, 68, 77, -70, -86, 29, 31, -126, -112, -46, -34, 118, -13, 37, -103, 109, 91, -86, -118, 108, -92, -115, -39, 102, -105, -78, -16, 42, 11, 66, -57, -28, 57, -36, 87, -124, 115, -95, -10, -31, -52, -1, 112, 116, -114, 84, 99, -113, 70, -119, -24, -50, 68, -111, -42, 16, -100, -8, 19, -78, -88, 65, -124, -120, -4, -110, -128, 37, 30, 74, -86, -121, 33, 47, -40, -79, 19, 48, 120, -51, 67, 105, -87, 58, 111, -16, 27, 2, 82, -100, -71, 60, -91, -121, -45, 74, -28, 65, -14, -95, -30, 101, 9, 48, 71, -102, -17, 121, -15, 5, 108, -60, 45, -52, -30, 87, -92};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.3260244682744352);
    msg.setSource(28626U);
    msg.setSourceEntity(98U);
    msg.setDestination(24060U);
    msg.setDestinationEntity(88U);
    msg.seq = 226891049U;
    msg.destination.assign("OIKDQGHWDBCZWDMNJB");
    msg.timeout = 59493U;
    const signed char tmp_msg_0[] = {7, 4, 67, 81, 64, 92, 15, -118, 13, -125, -62, -56, -43, -61, -23, -53, 62, 40, -38, 81, -94, 62, 16, 2, -102, -13, 106, -27, 92, 85, -91, -43, -28, -84, -51, -119, 20, 5, 107, -11, 53, -46, -26, -90, -92, 1, -96, -21, -29, -66, -95, -91, -9, -78, -65, 84, 58, -66, -6, -15, 87, -96, -91, -95, 98, 84, 98, 24, 16, -31, -44, 1, -122, 43, 53, -98, 29, -116, 118, 36, -46, -43, -125, -114, -117, -29, -76, -115, -104, 50, 87, 122, 15, -25, 117, -74, 80, 81, 69, -98, -44, 15, 115, 64, 96, -62, -13, 106, 14, -86, 38, 3, 78, -87, -119, 89, 59, -40, -106, -127, 99, -6, 97, 32, 61, -39, -91, 10, 104, 68, 101, -49, -119, 34, -91, -51, -87, -49, -103, -28, -126, -112, -25, 3, -45, 3, 49, 110, 56, -61, 2, -91, -69, -83, -19, -107, -50, 36, -104, 114, 66, 89, -3, -57, 29, -7, 76, 29, -99, 83, 45, 111, 113, -23, 46, -125, -128, -3, 32, -62, 62, 57, -95, 43, 16, 60, -45, 100, -60, -10, 21, 85, -88, 119, 5, -102, -122, 105, -88, 22, 108, -17, -83, -65, 21, -70, -63, -116, -109, -95, -126, 64, 7, -53, 87, 44, 38, 63, -72, 19, -72, 23, 0, 16, -7, 109, 60, -99, -110, 62, -112, 121, -67, 87, 3, 33, 100, -48, -127, -117, -58, -114, -105};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.4533393297824403);
    msg.setSource(29310U);
    msg.setSourceEntity(107U);
    msg.setDestination(49843U);
    msg.setDestinationEntity(112U);
    msg.seq = 1094365575U;
    msg.destination.assign("WDIEOJAXCHNRCVHACGTYMWYYSKFLODOHSEGVZCLNV");
    msg.timeout = 35847U;
    const signed char tmp_msg_0[] = {-66, -102, -72, -109, 118, 116, 107, 90, -21, 115, -42, -94, 101, 49, -15, 53, 82, 0, -63, 41, 109, -94, 75, -116, 32, 60, -111, -102, -108, -113, 19, -19, 80, 6, 93, 36, 123, -18, 68, -92, -112, 22, -75, -94, 98, 15, -35, 26, 102, -107, 24, -13, 48, 80, -48, 104, -11, -127, 48, -93, -113, -3, 50, 58, -95, 78, -92, 126, -29, 40, 17, 113, 86, -98, 16, 55, -53, 107, 77, -94, -52, 27, 31, -51, 48, 111, -81, -74, 98, 30, -85, -102, 88, -1, 1, 62, 106, -69, 40, 119, -103, 10, 114, -12, -11, -89, -83, -13, 60, -47, 61, -5, 33, -114, 68, 31, 44, 77, 23, 118, 67, 105, -55, -47, -11, -98, 65, 74, -24, 24, -11, 124, 66, -94, 82, -100, -26, 115, 54, -61, -98, 24, 94, -2, 15, -70, -88, -39, 119, -36, 7, -65, -30, -95, -49, -126};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.7180243310136841);
    msg.setSource(37321U);
    msg.setSourceEntity(251U);
    msg.setDestination(26034U);
    msg.setDestinationEntity(60U);
    msg.source.assign("TABJAFXWKWROBUISQLJPFRVPKQKHRSLVAIKGNYNXHEDOVVEEVKGBYHTTFFNMFCXJDPNCLOJXQHVNJCATBHH");
    const signed char tmp_msg_0[] = {-17, -85, 36, -61, 68, 123, -104, -27, -118, 110, -120, 90, -28, 46, 124, -4, 102, -107, 83, 37, -31, 48, 39, 50, 2, -6, -34, 61, -92, -6, 89, 21, -10, -123, -55, -20, 24, -76, -105, 85, 22, -70, -35, 81, -45, 81, 119, -51, 19, 30, -119, 45, -116, -16, -34, -111, 23, -60, -120, 57, -105, 39, -94, 20, 27, -79, 110, -70, -23, -25, 117, 124, 109, -27, 16, -118, 71, -74, -98, -96, 40, 57, -56, -88, -80, 21, 79, -14, -103, 105, -66, 119, -112, -1, -84, 14, 51, -2, -102, 33, 120, -121, -110, 19, -117, -8, 35, 23, -37, 58, 118, 91, -21, -4, -70, -102, 39, 57, -94, 36, 86, -120, 21, -113, 106, 93, 115, 9, -59, 58, 80, -70, 29, 53, -109, -15, 114, 88, 100, -106, -70, 2, 63, -11, -33, -89, 22, -63, 4, -77, -114, 35, 109, 89, -61, 84, -102, 0, 102, 102, 122, -44, 6, 35, -115, 101, -48, -20, -106, -94, 109, -23, -60, 112, 111, -115, -117, -116, -17, 106, 49, -41, -127, 99, 55, 94, -118, 84, -77, 6, -46, -63, 77, -122, 88, 57, 0, 82, -19, -121, 12, -104, 110, -66, 120, 13, 98, 95, 90, 76, -17, 60};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.3091085550419689);
    msg.setSource(10789U);
    msg.setSourceEntity(217U);
    msg.setDestination(2473U);
    msg.setDestinationEntity(142U);
    msg.source.assign("KLCWLNVIPAMMMECTYRYXODXQZHJNDKQF");
    const signed char tmp_msg_0[] = {87, 63, 120, 46, -59, -35, -29, -80, -41, 99, -24, -54, 49, 56, 111, 23, 125, -22, 40, -74, 23, 92, -56, 63, 99, -52, -28, 87, 98, -72, -8, -103};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.9499046493423959);
    msg.setSource(64251U);
    msg.setSourceEntity(190U);
    msg.setDestination(25217U);
    msg.setDestinationEntity(110U);
    msg.source.assign("MMNQXTCFGTFANJSXBAIBIRCCRLYQROTJJCZ");
    const signed char tmp_msg_0[] = {-88, -16, -81, 106, 65, 41, 86, 106, -88, -110, 41, 42, 0, -90, 112, -12, -16, -22, 79, -87, 56, -91, 59, 65, -22, -39, -74, 22, 98, 34, -65, 40, 23, 18, 76, 3, 41, 73, 107, -88, -33, -91, 17, 74, -40, -116, -116, -88, 82, 45, 54, 68, 64, -79, -29, -80, 126, 119, -102, 60, -10, 116, -79, -63, -77, -128, 88, 50, -15, 5, -18, 32, -118, -26, 125, 93, -85, -112, -78, -121, 25, -70, 88, 57, 18, -10, -109, -40, 49, -63, 19, -23, -107, 121, 98, 7, -46, -89};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.1739380042829537);
    msg.setSource(31654U);
    msg.setSourceEntity(88U);
    msg.setDestination(35842U);
    msg.setDestinationEntity(55U);
    msg.seq = 936764846U;
    msg.state = 31U;
    msg.error.assign("FKVVGLBYSUWJMLQEXBBRRCUWAECXGPYANRUWBNVEPZBNICXKMIHLAALIXJZHPEUFJIIEYIOIEDJPITOTNTAGRYAHVEOZGZRVKTOXMTQGSWWFDVCDXEUKRPNANANGSQFDARZEDSNJMYUSRAJKUTDQUQMZMJRZQLOPLZJPHHSQMMPQSOOVGWCEZCWVKTDNMOK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.8239619915897403);
    msg.setSource(44516U);
    msg.setSourceEntity(152U);
    msg.setDestination(60775U);
    msg.setDestinationEntity(155U);
    msg.seq = 2122758691U;
    msg.state = 74U;
    msg.error.assign("MUODSXMYCNRTMVLKYGHNTFEIJAAHJBLZDOTTTEFTUMPQVKCQXCXMUZMLSZWDMHAAAXQBNVPRPDNQNOKWURORJDJWQUCSBIYSQKZFYHLKDTRKBDJGFXXNGHZMKHABTFGSKGJLZFKSUXNCKVYEOSBPBRAICBEEXZVGYOOBJIODWBDCSSIHGCWQPICVIFPANQWMPMOXTEGEQRLGRVAUUYHJRLLFLNIZPJINUSZYOJV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.49538001361381334);
    msg.setSource(50229U);
    msg.setSourceEntity(121U);
    msg.setDestination(11361U);
    msg.setDestinationEntity(2U);
    msg.seq = 2042503678U;
    msg.state = 170U;
    msg.error.assign("PEDAQQRPYCRECDQADFANUULNZOEYLAQNXTEOLDCJTWRXZWEQPWMYFEMWMRFABZGPSDZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.14823916151550387);
    msg.setSource(10857U);
    msg.setSourceEntity(193U);
    msg.setDestination(20342U);
    msg.setDestinationEntity(74U);
    msg.origin.assign("FUBZWFOFMRMBVUPSKDPFHCLWSNEGIUKOIMPKHS");
    msg.text.assign("WYXAKEKABUQEJBTQVCULDTTJEUJICXHQTWJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.45520821244362075);
    msg.setSource(57793U);
    msg.setSourceEntity(241U);
    msg.setDestination(51374U);
    msg.setDestinationEntity(85U);
    msg.origin.assign("XMNIDUDTQATAOJDGEDETZCSCPXECAJWWURCIQHMWCJLHQIZNQKIMHSMFIZXOPNMZEALRAS");
    msg.text.assign("KCVXFHQXUMAKUPQDWGCRWUPUSGALOPGIFCQJBYLEFDSIYLXSJIDXYHCDEGTJSISLAAVCZRWNWOOTMELPDWMPNTXYAKAMBEWLRQSCHJXZNETNOWQLRFDZZEJJHUVXLHQVJXBVFZTUPJEEHDGSRCFYPZPNFOMYMBNKZNHVXIQWTTGOKZIKGRPQBMQGSBUBBJUNGACZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.47977894950386024);
    msg.setSource(21541U);
    msg.setSourceEntity(105U);
    msg.setDestination(60613U);
    msg.setDestinationEntity(200U);
    msg.origin.assign("AHTUJHSOXOOLWYVEMXRYNXRTIFILIPKOMDZOFXZPSENHKJRITXDLYCBKCTIUSPBYDTBPSJVLJZLKQQJDSDBEFWENNNGVJWDEZTIFWUAWVIWVQDZOLVAVCHZHMJBHZNMWNBDYYBXQOERGDILGARPMFCSUPXUFPCBCLGYTKUZMPKHKBRCGYWQIULPQAQPEANOSVZQMMHBXKWCLGXVFER");
    msg.text.assign("MCTYMJTSTPNDCCGJHAJOYEHGINMVTHFWFBAUDNONFJPACMDNDOMUBOGVRMGJEAEIMBAIVSOWSAKLBAHIHQLSCQPCDLWFKHVLBKQRXBBKPPNIRJXTFPUXVXWXLWEJZUFUQKVIEABQIGVKCY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.2078212267012166);
    msg.setSource(62930U);
    msg.setSourceEntity(44U);
    msg.setDestination(46935U);
    msg.setDestinationEntity(116U);
    msg.origin.assign("CGOQHVWKTALYICFYDIAWBTBLNMXFFSMHBDBCUWILVENSZENMXUWMWRTBOYZJDJRJYWFCODCZGAEBYDPPRSWVHNSENZXKDDQWPVQLSXHBRZHYUGWPRCCCESVLSNVUIVZAGFTJHTKNUWH");
    msg.htime = 0.04832926991779363;
    msg.lat = 0.3807475588996285;
    msg.lon = 0.8338548285731467;
    const signed char tmp_msg_0[] = {-73, -121, -125, 7, -127, -75, -6, -84, 94, -61, -76, 51, -52, 51, 118, -80, 102, 42, 121, -11, 26, -64, 8, -69, -31, 88, 43, -34, 38, -6, -72, -56, 24, -48, 115, -68, 61, 37, 98, 95, 122, 69, 43, 116, -27, 50, 84, -50, -110, 15, 119, 26, -2, 116, 81, -28, -127, -9, 8, -108, -100};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.976631117798582);
    msg.setSource(12512U);
    msg.setSourceEntity(64U);
    msg.setDestination(58376U);
    msg.setDestinationEntity(94U);
    msg.origin.assign("WPIXIWQXZPYPHYYSUZJEBQKRXSOLODFAPKUTZYILOCGFCHEQCEOMZQEYNVYAVBMTFMCXUGVEZOIBUNTXUZJAADEOBZVNEPBZTLDSQPUHLHQNADCQXCIEWHPNUUCAKTIXJKSGKUXTQLFHQVJDFAFTSRNDFRYUGDGCXLVHGFMMBOKVTGHLPKGDWZIAEOXMYWRCTTDHNEKMRRYRIWWMFWNRLBILPRWJJOWJKLMPVMAJSOJSGSSIVSCQJYRZBVGNBH");
    msg.htime = 0.6658972827191826;
    msg.lat = 0.5552045858520476;
    msg.lon = 0.5191493841986402;
    const signed char tmp_msg_0[] = {-20, -31, 18, -125, -6, 92, -86, 13, 27, 126, -90, 73, -28, 83, -111, 99, 69, 44, 109, -88, -55, 43, 88, 16, -30, 57, -25, 44, 90, -100, 70, 119, -66, -79, 115, 10, 70, 64, -56, -74, 53, -57, -49, 89, -124, -127, -98, 70, -81, -52, 83, 53, 7, -40, 21, -96, -61, -56, 107, -30, -93, 23, -89, 96, -35, -23, 18, 8, 45, 50, 117, 16, -111, -43, 35, 100, -61, 124, -17, 20, -123, 115, 8, 42, 117, -100, -72, -22, -45, -67, 95, -83, 122, 7, -13, -122, -118, 81, -101, 115, 50, 19, -70, 116, -40, -72, 117, 105, -28, 102, -35, 0, -99, 87, 73, 61, 106, -126, -25, -59, 80, 109, -93, -13, 106, 104, 25, -106, 91, 79, -126, -79, 112, 69, 35, 26, -66, -86, -4, -120, 62, -111, -7, -125, -31, -5, -94, 61, 30, -97, 15, -15, -79, 87, -43, 20, -21, -44, -20, 77, -58, -92, -106, -102, 29, 96, -72, -72, -103, 3, 9, -121, 65, -41, -91, 28, -37, -22, -127, -47, 18, -95, 84, 22, 87, -36, -69, 54, 32, -113, -115, 86, 121, 66, -25, -78, -25, -53, -127, 0, 79, 113, 63, -60, 32, 56, 123, 120, -7, -15, -13, -27, 38, 51, -106, 17, 78, -27, -115, 124, 55, 94, 115, -102, 48, 11, 3, 114, 38, 48, -70, -48, -121, 77, -116, -22};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.8161841475771447);
    msg.setSource(11380U);
    msg.setSourceEntity(3U);
    msg.setDestination(29305U);
    msg.setDestinationEntity(75U);
    msg.origin.assign("CFJSEAIBRGRFGUNPMPYOQNCPELYLLZXNWUFSASVBEYGHAOFYJWKKLKWECWWWMYRUKPIKTIEDMBEDNIQTOCMXBPANBCCUQIOPMVOJBYTZIFXJVLFRKBOA");
    msg.htime = 0.48606006605125796;
    msg.lat = 0.314813404838198;
    msg.lon = 0.42488753179894945;
    const signed char tmp_msg_0[] = {-31, 1, 12, 67, -80, 68, 45, -66, 66, -31, 6, -107, 79, -117, -35, 55, 97, -36, -16, 58, 78, 48, 43, 55, -127, 66, -63, 75, 122, 15, 28, -3, -51, -65, 83, 74, -63, 10, 65, 44, 11, -51, -84, 86, -125, 41, -69, -7, 107, -34, 49, -85, -71, -70, 51, -20, -46, 44, 20, -40, -73, -52, 123, -58, -2, -38, 113, -114, 12, -56, -125, 22, 113, 60, 87, -78, -35, 102, -12, -75, 119, 17, 22, 73, -96, 106, -35, -18, -65, -70, -123, -35, 126, 104, 106, 56, -109, 121, -15, 42, 87, 34, 68, -13, 42, 9, 83, -82, 61, 49, 20, 65, -101, -40, -95, -121, -61, 53, 86, 110, -25, 13, 39, -38, -64, -119, -107, -6, 51, 39, 85, -64, -67, 59, 72, 34, -88, 66, 27, 52, 26, -80, -107, -70, -99, -101, -7, -51, -72, -59, 60, 117, -27, 102, 95, 39, -39, 26, 20, 98, 104, -44, -126, -66, -68, 93, 51, 18, 94, -61, -90, 77, 23, -80, 58, -112, -18, -44, 67, -75, 108, -29, 83, -25, -85, 117, -35, -2, -114, 50, 17, -67, -125, 99, 123, -44, -58, 38, 44, 23, 79, -74, -14, 101, 95, -46, 38, -18, 54, -76, 51, -51, 73, -31, -109, -5, 125, -51, 115, 13, -98, -76, 17, 82, -87, 121, -10, -5, -70, 99, 18, -60, 99, -16, 83, 92, -128, -33, -10, -118, 8, -109, 58, -99, -120, 85, 90};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.39020812854724163);
    msg.setSource(26292U);
    msg.setSourceEntity(234U);
    msg.setDestination(54785U);
    msg.setDestinationEntity(240U);
    msg.req_id = 57608U;
    msg.ttl = 36141U;
    msg.destination.assign("LVNRQNQTHMYJDIYHSRMMAEXJDSNZVXKNTPQVOLEJCWAQMKOAMIATRVJOGWDFYKGAHGMTFRGZIKWBDUIGHWOENZDTKTUPOPFCUUTZFBZWTXYCPOKSPRWEJRFSCLCTXIXPBMMELEWOQFPHGXRALZYGPYNEMULJWUINHHRZQSBYIVROWAAKSFZJJGBBDYINCSPESE");
    const signed char tmp_msg_0[] = {67, -128, 88, -73, 29, -78, -90, 28, 24, -66, 114, 14, -52, -11, 77, 50, -127, 15, 114, -10, -52, -122, 65, -52, 43, -29, 53, 80, 48, 55, 49, 7, -12, 42, 124, 38, -7, -40, -19, -108, -70, -26, -9, -39, 68, 14, -1, 121, -2, -84, 90, -107, 33, 88, -105, -127, -12, 27, -77, 4, 72, 1, 12, -78, -29, -22, -66, -91, 102, -46, 25, -34, -10, -17, 114, 28, -15, -84, 102, 20, -28, -80, 102, -36, -31, -52, 60, -39, 103, 18, -75, -67, 101, 18, -46, 69, 123, 114, 121, -13, 85, 26, -49, 65, -77, 87, 74, 66, -73, 5, -103, 34, -25, -74, -3, -35, -51, -125, -126, 114, 59, 13, 3, 6, -118, -111, 122, 114, 87, 10, -59, -80, -38, 97, -108, 40, 49, -30, -54, 44, 23, 50, 66, -10, 65, 89, 79, -65, 66, 103, 6, -52, -90, -88, -44, -71, -117, -94, 4, -19, -121, 27, 64, -106, -24, 8, 122, 96, -128, 17, 61, -26, -55, -92, -29, -6, -29, 66, 47, 6, 9, 96, -2, 97, 50, 73, 86, -31, 89, -11, -40, -18, -104, -11, 96, 37, -7, 89, 0, 87, -56, 94, -35, 18, -19, 88, 82, 7, 122, 99, 91, -127, 37, 97, 48, -5, -85, -6, 89, 93, 49, 57, 23, -59, -86, 108, 45, 24};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.9971583477876633);
    msg.setSource(20963U);
    msg.setSourceEntity(221U);
    msg.setDestination(39253U);
    msg.setDestinationEntity(61U);
    msg.req_id = 54899U;
    msg.ttl = 40414U;
    msg.destination.assign("MAMFUJHELAKIUBBGHTZUPIWAM");
    const signed char tmp_msg_0[] = {-63, 113, 73, 47, -13, -128, 52, 43, -84, -71, -42, -108, 100, -29, 69, 126, 95, -60, 96, 117, 120, -88, -128, 27, 35, -34, 17, -61, 37, -31, 65};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.17094322544784368);
    msg.setSource(5232U);
    msg.setSourceEntity(140U);
    msg.setDestination(25616U);
    msg.setDestinationEntity(138U);
    msg.req_id = 57658U;
    msg.ttl = 38066U;
    msg.destination.assign("PTYZIEHXFJIXVNSJBRCFZYWHAJDBOSZNCFFGQVEUDRWXSNAQMTYWWPNCTDVFRRAPPDDOPLTLHMISFCGBJMSIMYRVNOGYGVYWXYVMAKMCTLLWKEZBWLSOQTNAYUSZVHGJDUGGEASUPOJBJAIIHDBZIPPKHEMIFZSCFJTMRQENIOQWBUGKUCEMXKFNXHVEB");
    const signed char tmp_msg_0[] = {77, 68, 90, -101, -53, -28, 103, 51, -97, 3, 24, 126, -90, 35, 51, -55, -28, 73, -46, -85, 60, 48, -15, -118, -120, 1, -12, -101, -93, 88, 74, -118, -2, 39, -59, -46, -11, 26, -50, 45, 58, -18, -91, -110, -84, -70, 21, 99, -46, 16, -68, -27, -63, 45, 115, 114, 27, 93, 8, 53, -124, -55, -102, 46, 29, 95, -74, 38, 11, -63, 45, -85, -12, -31, -103, -19, 66, 7, 89, 91, 63, 111, 43, 84, 79, 25, 86, -5, 105, -4, 34, -88, -122, 115, 4, -3, 68, -56, -112, 111, 105, 105, -96, 27, -54, 4, -19, -77, -104};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.008037154047647044);
    msg.setSource(49156U);
    msg.setSourceEntity(135U);
    msg.setDestination(43123U);
    msg.setDestinationEntity(197U);
    msg.req_id = 941U;
    msg.status = 206U;
    msg.text.assign("XPUROHJKEMTSMFKIKRVRMEWSMLNIQFCDJMGVWDFFDHAUOGFYSOULIDICBLONBSAMVDBPIDVEVGASOXSAKJPY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.6887913717517562);
    msg.setSource(43783U);
    msg.setSourceEntity(171U);
    msg.setDestination(13903U);
    msg.setDestinationEntity(164U);
    msg.req_id = 13998U;
    msg.status = 240U;
    msg.text.assign("QRDJQTVVKNDX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.9458612215859937);
    msg.setSource(43315U);
    msg.setSourceEntity(137U);
    msg.setDestination(22787U);
    msg.setDestinationEntity(158U);
    msg.req_id = 29042U;
    msg.status = 167U;
    msg.text.assign("ZOTQNTSDIBGITVYXCWZKUZWVFCHISWDFPKRSRHPDJYNQBFKAYNPOPIBYTCQAKWLTDRGXNGFQWIAEBZXRLOEMYVVQEOAHMYYNKOECIFHLJFIFPQBURDWOLSSQXNIJXVEYUXSQCUPBPARNMHNJWAELORPIZWGTDZICUNSXGUBJPACWWKHRQHUTBDPMAVFROLMTNUVZGBDCJLDEHUKKXJLJSXEK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.4333860262659689);
    msg.setSource(23829U);
    msg.setSourceEntity(155U);
    msg.setDestination(37911U);
    msg.setDestinationEntity(145U);
    msg.group_name.assign("ADZSIKMYAXYGKQYVBOMYILTZIJAPDOKUDXNEXEMUEGJCFIQETYWVOFCCHABJWYWFBTBYHXBOKJGWCSNRNDTUDFPECGVJLZIWASKVRGLNOIVAQXCPWISMGLFZUQQUUORTFPZQMTQZSGNECJAZAOWBVWBAHHMSJKCPZYUELRFWTDLNXTBSLHJDHUDHQDFSWX");
    msg.links = 234009073U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.7420960769428058);
    msg.setSource(29429U);
    msg.setSourceEntity(198U);
    msg.setDestination(30642U);
    msg.setDestinationEntity(234U);
    msg.group_name.assign("TGXZQSOCTVYUGJREAMGVNKMSPZFWGUWEDKJQIQAHAUGFXYLWSABJDHCKZLJQIRWIMAZIUCZPEJTTQRJXWDLCTXHAFOFFCHNBPDZHGZNOGZNXJNXYRPCHTVUCPUEIZVSOHIRSKBYLLBMEKFSQEPEVP");
    msg.links = 1973887855U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.37491450458974374);
    msg.setSource(26479U);
    msg.setSourceEntity(221U);
    msg.setDestination(40561U);
    msg.setDestinationEntity(32U);
    msg.group_name.assign("PWKYRWRQUIMHYCBQWIXIXOKKRBJJHLBQBQHBTRKHXZJBKLPDZZUNDCTGTACIFCMVLSUKLWHUTJOUFYNQLNSGLDENMXPOURGEFNSCRDEAPNFGXVOHWQLZNGIBPSPEC");
    msg.links = 2079037971U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.25707542934981675);
    msg.setSource(30589U);
    msg.setSourceEntity(23U);
    msg.setDestination(45219U);
    msg.setDestinationEntity(215U);
    msg.groupname.assign("FEIWJWLKLFHBDURMELITSFYWDJBVFCWCPATQPOUPDZZUQLKHGIVFXBDASNVDNIEUJOBRNCRBSYEYCKEEZYJDLFWACDVZPUOGQYHZYTWFRMTLRJNFTRWAKZPCKHBPXKKVHNSOCENQUMCEHPGHYZDNEGQISJTRTNPMYIYABAOOMRQAUKZTALSVRMQIMNDSSUSCXHIMVMGLUHGWQXOOQJHTPV");
    msg.action = 227U;
    msg.grouplist.assign("XCLWVQIKVLIUUTEUMTTUKJCMPGQBIWOKTWTGFXYSMEIXEBGTSZCQBATIYMYGXYVFUEDJFREISMVLSJPHSXYFGLDECNZBQAPBNQWSWSRHAUNKHWHRKFLYGZUWOPQRXCNZPZOVJROCOIZAEOBNLHHNPKEGUJKMBHJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.02083520033892694);
    msg.setSource(8566U);
    msg.setSourceEntity(184U);
    msg.setDestination(39177U);
    msg.setDestinationEntity(52U);
    msg.groupname.assign("XAIQFVQUIFNXVCMIPSZBTAOORTDQKZSZPIMXVRWBYSKENDGNCHHNGVMFCDECJLHXCBPFYQOLFDKENNXQGCVKMBXUWFLBRRFNE");
    msg.action = 210U;
    msg.grouplist.assign("GQIBXHJFTDPEPTTBNVKXDXOZMILFRNXEVYJEKZAMQGRYZEDCZXNVUQAUXNDSMZCDNXMVFNCRCXVGFAYYWHBJRSIBUGJPETGBGNKDRQUWZTWMZQRLULLSUALXDJSEOVPEAPVEQRSIUIBKBSQHTJQWKZFHNCQKOBOPQTPMFBLJKYWHUTPNIJGVAROWTLOAVALDHOCIKEEIYUO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.9563567737598104);
    msg.setSource(33797U);
    msg.setSourceEntity(90U);
    msg.setDestination(31748U);
    msg.setDestinationEntity(28U);
    msg.groupname.assign("REJNEWTDRGMTCJCIPYFUIBQWALTTXZKYMLKDTXRNLTLYFEEFADLBHQKYMWNIMJVRSIPCHQVOBOXLPONKNRDWWVFNUGJFVPVTOFCBXICCCJKSBUKSLXBGCGZWXQAAVMHXUFVUOPHHZQEZAPIYWBOOMLVNUYUUNSI");
    msg.action = 103U;
    msg.grouplist.assign("XCDBVRPDHDHOSKGUWPINYEMRZNTUGZJVAILAOXRJBVGEZKCYBPMBCQGQGJMIHARQFFGZACQTWDETKOBGQYFPHEFMWXWFSJNJUFZKESNNVYEDCYUTLXGK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.9060378510185789);
    msg.setSource(48254U);
    msg.setSourceEntity(212U);
    msg.setDestination(51923U);
    msg.setDestinationEntity(160U);
    msg.value = 0.5150573612558784;
    msg.sys_src = 20119U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.03152364049910794);
    msg.setSource(6853U);
    msg.setSourceEntity(59U);
    msg.setDestination(54494U);
    msg.setDestinationEntity(198U);
    msg.value = 0.7646375689618178;
    msg.sys_src = 61394U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.7694524048700577);
    msg.setSource(19000U);
    msg.setSourceEntity(158U);
    msg.setDestination(5083U);
    msg.setDestinationEntity(157U);
    msg.value = 0.38348649257325995;
    msg.sys_src = 37985U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.9874160073141917);
    msg.setSource(41024U);
    msg.setSourceEntity(197U);
    msg.setDestination(36667U);
    msg.setDestinationEntity(225U);
    msg.value = 0.31130232847072914;
    msg.units = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.05123443259347604);
    msg.setSource(35316U);
    msg.setSourceEntity(164U);
    msg.setDestination(50172U);
    msg.setDestinationEntity(210U);
    msg.value = 0.840305178739282;
    msg.units = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.2641012653172703);
    msg.setSource(40350U);
    msg.setSourceEntity(0U);
    msg.setDestination(53938U);
    msg.setDestinationEntity(195U);
    msg.value = 0.8403350049870711;
    msg.units = 90U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.46359382744003996);
    msg.setSource(53997U);
    msg.setSourceEntity(24U);
    msg.setDestination(33347U);
    msg.setDestinationEntity(193U);
    msg.base_lat = 0.40251806289377967;
    msg.base_lon = 0.24230462988932566;
    msg.base_time = 0.08750127976631084;
    IMC::HistoricSample tmp_msg_0;
    tmp_msg_0.sys_id = 65262U;
    tmp_msg_0.priority = 57;
    tmp_msg_0.x = -1971;
    tmp_msg_0.y = 1972;
    tmp_msg_0.z = 16803;
    tmp_msg_0.t = 31342;
    IMC::GpsFixRejection tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.utc_time = 0.8923393577636535;
    tmp_tmp_msg_0_0.reason = 147U;
    tmp_msg_0.sample.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.21904671953001387);
    msg.setSource(44104U);
    msg.setSourceEntity(179U);
    msg.setDestination(55740U);
    msg.setDestinationEntity(137U);
    msg.base_lat = 0.5687112949932054;
    msg.base_lon = 0.6213950549469729;
    msg.base_time = 0.5898238261252226;
    IMC::RemoteCommand tmp_msg_0;
    tmp_msg_0.original_source = 42406U;
    tmp_msg_0.destination = 9719U;
    tmp_msg_0.timeout = 0.11336514206509374;
    IMC::VehicleCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.type = 44U;
    tmp_tmp_msg_0_0.request_id = 16176U;
    tmp_tmp_msg_0_0.command = 38U;
    IMC::Sample tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.timeout = 39149U;
    tmp_tmp_tmp_msg_0_0_0.lat = 0.23714069667115534;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.8103032478698272;
    tmp_tmp_tmp_msg_0_0_0.z = 0.9860763994173019;
    tmp_tmp_tmp_msg_0_0_0.z_units = 236U;
    tmp_tmp_tmp_msg_0_0_0.speed = 0.819030116106864;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 175U;
    tmp_tmp_tmp_msg_0_0_0.syringe0 = 88U;
    tmp_tmp_tmp_msg_0_0_0.syringe1 = 37U;
    tmp_tmp_tmp_msg_0_0_0.syringe2 = 160U;
    tmp_tmp_tmp_msg_0_0_0.custom.assign("OLXRCLBLWEXXDQQROOWCSYGAJPKVUVUURTNEJUSGINHLQRBIKARICOCEDFPWMTGHEMNDGGWAVFJPBFLETWDMFSGHMJCCOQFJVSBXLECAXNPIYVFXXPMTWRZL");
    tmp_tmp_msg_0_0.maneuver.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.calib_time = 18108U;
    tmp_tmp_msg_0_0.info.assign("APLUDIKCXDZECAOTWPBFBVNFHVZZBUTBDDJGOHPFYKNQZVJYJDRWLXMGUIHIMBHLZCTHEASGHYKLLMSDRUBJAYXPARUNWVHVZSSFQIMWCSOPNETAOCLBXCFABKXOXWQKMVGSKWZDKCUZRIQGGMBIEYMEMWIFUULQJNQRVRQJJJOCFROSOJKZUEHEFNTDRGGB");
    tmp_msg_0.cmd.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.11373332512988388);
    msg.setSource(14582U);
    msg.setSourceEntity(244U);
    msg.setDestination(54004U);
    msg.setDestinationEntity(140U);
    msg.base_lat = 0.9800035354400216;
    msg.base_lon = 0.8190727301091444;
    msg.base_time = 0.5167720272188757;
    IMC::HistoricSample tmp_msg_0;
    tmp_msg_0.sys_id = 39063U;
    tmp_msg_0.priority = 54;
    tmp_msg_0.x = -31835;
    tmp_msg_0.y = -4529;
    tmp_msg_0.z = 29919;
    tmp_msg_0.t = -30196;
    IMC::IoEvent tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.type = 209U;
    tmp_tmp_msg_0_0.error.assign("QNUHPDHDCHMRLGWJKJSVWVBKQJIOVXDNXIPLFZSCBPRXLBSXFMLNOAOEZMHWGXVOAQXUNWKRTSWBKOBMBQNTCQUBEPJFGQXPZAFHZWKPRRBPWESZKXGMYAUTPAILZLCJKLYYNAUHKGTMEIUSEFRORSGWULSHEDEEGOFNPYUWZVYAAKKOVZYYWTVZYCDTVFJOSHRLREDIARXSL");
    tmp_msg_0.sample.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.8300851324671435);
    msg.setSource(57189U);
    msg.setSourceEntity(160U);
    msg.setDestination(45756U);
    msg.setDestinationEntity(72U);
    msg.base_lat = 0.9477222281686611;
    msg.base_lon = 0.29354026498398844;
    msg.base_time = 0.899219922160931;
    const signed char tmp_msg_0[] = {-99, -18, 40, 115, 87, -28, -101, -57, 125, -125, 79, 11, 51, 8, 67, 30, 3, -64, -18, -21, -113, -127, 15, -108, -76, 105, -40, -93, 120, -40, -21, 24, -56, -109, 98, 122, -54, -14, 34, 71, -4, 82, -40, -7, -36, 30, -88, 69, -32, 91, -24, 23, 30, 104, -43, -16, 8, 120, -25, -103, 111, -89, -128, -117, -117, 104, -97, 68, -121, 20, -79, -107, -21, 55, -120, -116, -11, 78, 109, 119, 41, -94, -79, -50, 17, 52, 103, 19, 70, 48, -16, -101, -73, 117, -17, 45, 106, -87, 124, -19, -126, -27, 63, 67, 31, -11, -77, -122, -96, -81, 61, 34, -70, 119, 45, 21, 115, -121, -127, 62, -8, 25, 86, -13, 12, 97, -36, -90, 45, -6, -111, -76, 62, 45, -40, 125, 50, 4, 84, -124, -47, -124, 63, -52, -74, 103, 97, 67, 105, -80, -52, 79, 23, -101, -60, 58, -61, 8, 85, 125, 76, -4, -8, -34, 105, 67};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.19309048531532613);
    msg.setSource(37760U);
    msg.setSourceEntity(15U);
    msg.setDestination(6438U);
    msg.setDestinationEntity(56U);
    msg.base_lat = 0.7317421052748297;
    msg.base_lon = 0.682954914940961;
    msg.base_time = 0.9229711326674166;
    const signed char tmp_msg_0[] = {-76, -20, -5, -31, 34, 84, -31, -47, -94, 112, -16, -116, -43, -38, -26, -29, -59, -19, -77, -126, -88, 2, 75, -124, 34, -61, -67, -125, -1, -47, 51, 70, -84, 92, 6, -35, 114, -31, 73, -71, 28, -17, 25, -67, 121, 120, 23, 21, 49, 62, 56, 46, -25, 108, -64, 64, -70, 2, 87, -7, 41, -117, -18, -9, -1, -92, 83, -10, -48, -85, 34, -43, 69, 83, 4, -75, -54, -9, 40, 124, -110, -58, 10, 92, 7, 85, -51, 49, 111, -94, 109, 109, -74, -4, 6, -20, -11, -62, -94, 31, 80, -110, -121, -14, 93, 34, 54, -110, -99, -89, 118, -127, -112, 21, -42, 96, 25, 102, 6, -27, 84, -10, 89, -26, -116, -114, 12, 122, -126, -76, 18, 33, 100, -74, -93, -76, -9, -112, 63, -58, 94, 123, 46, -63, 67, 121, -25, 126, -32, 2, 0, 111, -55, 39, -60, -121, 126, 61, -36, -73, 94, -6, -72, 31, 89, -31, -8, 85, -121, 30, -63, -125, -16, 101, 108, -124, -16, 2, 113, 2, 61, 6, 81, 108, -68, 25, 71, 120, 118, 73, -78, -104, -15, 37, -35, -106, -114, -11, -9, -92, -86, -95, -113, 33, 112, 101, -94, 62, -2, 68, -88, 56, 78, 88, 102, -17, 12, 89, 2, -121, -57, 18, -97, 63, 105, -95, -56, 14, 19, -15, 125, 120, -12, -53, 57, 0, 81};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.6231411187590781);
    msg.setSource(38434U);
    msg.setSourceEntity(185U);
    msg.setDestination(62034U);
    msg.setDestinationEntity(251U);
    msg.base_lat = 0.23632102416945666;
    msg.base_lon = 0.6045059174974097;
    msg.base_time = 0.5267172584306024;
    const signed char tmp_msg_0[] = {-116, -7, 62, 5, -24, -46, -16, 112, 77, 80, 21, -93, -109, -62, -89, -36, -87, -88, -44, -46, 92, 63, -34, -28, 30, 39, 108, 59, 122, 28, 7, -5, 26, 74, -94, 98, 96, -75, -56, 7, -65, 73, -4, 77, 90, 53, -108, -75, 90, -22, -45, 36, 14, -82, -64, -26, 16, 53, 62, 105, 117, 29, 84, 62, -36, 20, 10, -40, 39, 105, -26, 68, -29, -19, -27, -69, -91, 96, 96, 101, -100, 45, -60, 106, 125, -13, 123, 117, 28, -33, -80, 86, -18, 109, 76, 85, -121, -17, 9, 99, -120, -120, 27, 126, -75, -93, 67, 31, 49, 121, 60};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.5016321685880651);
    msg.setSource(40642U);
    msg.setSourceEntity(103U);
    msg.setDestination(12255U);
    msg.setDestinationEntity(6U);
    msg.sys_id = 7076U;
    msg.priority = 59;
    msg.x = 730;
    msg.y = 26311;
    msg.z = 13990;
    msg.t = 27337;
    IMC::AcousticLink tmp_msg_0;
    tmp_msg_0.peer.assign("DGXHZJDBXHROOKHLMFEUWFVLZMFWJTWRIMDYNPQZRJRTOYVKFVZGWBLBQFWXPQYIGLRZODAWRGLUNYCEPPSCSPLOKLTUBBFZATNKHSSCVQGCONYHITYJSRBC");
    tmp_msg_0.rssi = 0.24809768230413531;
    tmp_msg_0.integrity = 35789U;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.7470172454030594);
    msg.setSource(51741U);
    msg.setSourceEntity(15U);
    msg.setDestination(42487U);
    msg.setDestinationEntity(228U);
    msg.sys_id = 17727U;
    msg.priority = -90;
    msg.x = -11571;
    msg.y = 18378;
    msg.z = -24405;
    msg.t = 14735;
    IMC::DesiredHeading tmp_msg_0;
    tmp_msg_0.value = 0.5376243872210796;
    tmp_msg_0.off = 0.05692846433711429;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.09156153970063585);
    msg.setSource(46803U);
    msg.setSourceEntity(28U);
    msg.setDestination(35031U);
    msg.setDestinationEntity(102U);
    msg.sys_id = 25519U;
    msg.priority = 111;
    msg.x = 20167;
    msg.y = 13171;
    msg.z = 19811;
    msg.t = 12884;
    IMC::IridiumMsgTx tmp_msg_0;
    tmp_msg_0.req_id = 437U;
    tmp_msg_0.ttl = 4231U;
    tmp_msg_0.destination.assign("THZHDXNISUJWQRBYKVSWIPFJVADYLUVOKWIDPPSHQCWSMWMGOKOXLUCZKRCIGUMCNWOTJQQEJGCWYNOWGUGTI");
    const signed char tmp_tmp_msg_0_0[] = {-110, 116, -30, -107, 95, -9, -30, -88, -106, 101, -79, -92, -49, -80, -121, -44, 53, 109, 15, 76, -91, 13, -121, -123, -114, 75, 40, -77, 13, 72, -49, 47, -63, 32, 3, -34, 108, -64, 73, 3, -86, -65, -85, 33, 125, -107, 54, 49, -8, 26, -14, -108, 82, -20, -66, 103, 120, -80, -127, -33, -82, 37, -36, -33, 55, 100, -19, -18, -18, 74, -108, 41, -21, -50, 95, -65, 51, 98, -59, -117, 49, -83, -43, 11, 36, 35, -72, -81, -73, 21, -106, -126, 97, -47, -13, 42, 47, 65, -67, -91, -64, -73, -41, -114, 32, -61, -31, -78, 100, 39, -26, -115, 7, 8, 4, -11, -33, 28, -72, -36, -104, 108, -70, 52, -98, 29, 35, -88, 59, 18, 97, -57, -107, -14, 119, 123, 13, -112, 103, 62, -62, 42, 23, 30, 63, 45, -89, -25, 53, 52, -59, -38, -3, 20, -16, 120, -96, -60, 27, -57, 22, 30, 71, -127, 106, 49, -8, 75, 35, -114, 0, 85, -102, 117, -42, -90, 13, 55, 34, -91, -56, 4, -32, 15, -17, -107, -47, -14, 46, -84, -24, -33, -116, -4, -49};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.9946480214479926);
    msg.setSource(14231U);
    msg.setSourceEntity(60U);
    msg.setDestination(25712U);
    msg.setDestinationEntity(132U);
    msg.req_id = 26196U;
    msg.type = 59U;
    msg.max_size = 36537U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.7887125213774472;
    tmp_msg_0.base_lon = 0.6256042575717488;
    tmp_msg_0.base_time = 0.8300510174200773;
    IMC::RemoteCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.original_source = 57902U;
    tmp_tmp_msg_0_0.destination = 43284U;
    tmp_tmp_msg_0_0.timeout = 0.3538876848972444;
    IMC::AcousticRelease tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.system.assign("JCGABNQGAFRTWXIFRYPKOEAMCBFKACABZCEFAYWUTJDXBQGSTVZEPPEGPXEPVSLIIWQBNQDSNNSXHGRCTSFQKWKLHHKYJKKKNJXXJMTWDOWYCUWMVMIJMQAUEUVOUEDRYGDHXOLO");
    tmp_tmp_tmp_msg_0_0_0.op = 54U;
    tmp_tmp_msg_0_0.cmd.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.7702859962596174);
    msg.setSource(19664U);
    msg.setSourceEntity(98U);
    msg.setDestination(5424U);
    msg.setDestinationEntity(148U);
    msg.req_id = 23588U;
    msg.type = 83U;
    msg.max_size = 52646U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.22091139523757497;
    tmp_msg_0.base_lon = 0.20273996289522977;
    tmp_msg_0.base_time = 0.38556028306127454;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.639894401216649);
    msg.setSource(39491U);
    msg.setSourceEntity(147U);
    msg.setDestination(37360U);
    msg.setDestinationEntity(7U);
    msg.req_id = 34656U;
    msg.type = 248U;
    msg.max_size = 39761U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.8573762218551585;
    tmp_msg_0.base_lon = 0.9511968153792164;
    tmp_msg_0.base_time = 0.5880609688315669;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.08869250563550735);
    msg.setSource(34712U);
    msg.setSourceEntity(97U);
    msg.setDestination(28327U);
    msg.setDestinationEntity(221U);
    msg.original_source = 7221U;
    msg.destination = 56941U;
    msg.timeout = 0.8833921207904225;
    IMC::Conductivity tmp_msg_0;
    tmp_msg_0.value = 0.2872785902733789;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.2863723261752672);
    msg.setSource(3816U);
    msg.setSourceEntity(62U);
    msg.setDestination(40895U);
    msg.setDestinationEntity(22U);
    msg.original_source = 17823U;
    msg.destination = 22338U;
    msg.timeout = 0.5049092611274457;
    IMC::TransmissionRequest tmp_msg_0;
    tmp_msg_0.req_id = 10107U;
    tmp_msg_0.comm_mean = 198U;
    tmp_msg_0.destination.assign("QFSGCXDGBUCEFQSRJGQYDKLRBCOYTWZHUOBHIWUGCENVYVTPGWNTJRKSLSZNYDPKHYVDRCOWSCIZZUFYLPGTDDUKAALJOAORTRMBQPSXEBLMOLJKQNJGBBHSDHJFWTQQAERQKPUZUIMJGEKEXOYLFHRXIEUQXEISYMCPIZTDMHPGFXJMXVFKCMVFNOAZDWKZFWVXNUYNVGWVMWOUHZLFBJIATNHAKRLMIBTCCIRNBV");
    tmp_msg_0.deadline = 0.10354047527898891;
    tmp_msg_0.range = 0.20442670615697633;
    tmp_msg_0.data_mode = 44U;
    IMC::Elevator tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 30463U;
    tmp_tmp_msg_0_0.flags = 101U;
    tmp_tmp_msg_0_0.lat = 0.24867674252827443;
    tmp_tmp_msg_0_0.lon = 0.9956395779177372;
    tmp_tmp_msg_0_0.start_z = 0.4380135776981523;
    tmp_tmp_msg_0_0.start_z_units = 52U;
    tmp_tmp_msg_0_0.end_z = 0.26687753526624947;
    tmp_tmp_msg_0_0.end_z_units = 69U;
    tmp_tmp_msg_0_0.radius = 0.5073454592256197;
    tmp_tmp_msg_0_0.speed = 0.31867933420599204;
    tmp_tmp_msg_0_0.speed_units = 153U;
    tmp_tmp_msg_0_0.custom.assign("CQBHJPSTNSHYWXVDESMITBWLQIAGPLEVDAC");
    tmp_msg_0.msg_data.set(tmp_tmp_msg_0_0);
    tmp_msg_0.txt_data.assign("GNSEOQIVNLKLJFQGXUGIRIMRXLKOINPZSKHRBYKJUDVQYYQQJWYAVLZQVTDLMUSEGILCVRHJSLTDGGVAMQZGUAXKZQCTPOBUXLFDWWKWSNBJIEEISGFJPZURGKXMJCFFUCPEVWHXNMSQWFZUSNWFONSHMHMWMJXTPYIAYBCOCCHITBLYENIYQMPETODVCFWZVOKZORPYHBOTLXDAMJF");
    const signed char tmp_tmp_msg_0_1[] = {-84, -61, -120, -80, 85, -57, -24, -89, -40, 112, -124, 18, -1, -74, -10, 99, 21, 26, 16, 123, -4, -25, 38, 45, -127, -75, 125, -18, -32, -17, 33, 46, -72, -3, -16, -49, 88, -91, 34, -68, -53, 118, -112, 16, -41, -19, 91, 106, 88, -110, 51, -22, 32, -17, -101, -73, -51, -6, -60, 11, 33, -43, 120, -107, -26, 24, 67, -53, 20, -64, 33, 9, 51, 30, 81, 111, 75};
    tmp_msg_0.raw_data.assign(tmp_tmp_msg_0_1, tmp_tmp_msg_0_1 + sizeof(tmp_tmp_msg_0_1));
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.4663783986414629);
    msg.setSource(20279U);
    msg.setSourceEntity(116U);
    msg.setDestination(65359U);
    msg.setDestinationEntity(143U);
    msg.original_source = 42730U;
    msg.destination = 51136U;
    msg.timeout = 0.15931534813545067;
    IMC::DesiredHeadingRate tmp_msg_0;
    tmp_msg_0.value = 0.5420848219815472;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.8095228057085063);
    msg.setSource(53072U);
    msg.setSourceEntity(206U);
    msg.setDestination(3932U);
    msg.setDestinationEntity(100U);
    msg.type = 30U;
    msg.comm_interface = 44873U;
    msg.model = 62712U;
    msg.list.assign("KFHXSWHJFWMVXQDRGLMOLYFMGIDIPVXRIHSTRAKDQTQMHAVSPNDGVMQNUESMNYXEZYCNWAGTBISUDJLPLUYHRSRFKIWPGWELYFZIEWUABJZZTKHVQXTGRTLVOEHCZFEINDFLPVBWXYMYYLQNCRLOSCBKBCZUJSUJNLZMCBBFKEXOJAJGTVEVFUZDGVQJYRHUQCPDDBZWXGNTKUSJPADPWOTNAAEGRBHOJETPMKCOKIQMQUNFCPOB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.508841700246796);
    msg.setSource(60060U);
    msg.setSourceEntity(116U);
    msg.setDestination(33790U);
    msg.setDestinationEntity(213U);
    msg.type = 205U;
    msg.comm_interface = 45424U;
    msg.model = 16061U;
    msg.list.assign("HFRTPHEZOKRFPXZQJVEVJEHXFWYQKJYJFAEDOOBPMSHNWXSXSSBIQBTU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.13319301739638145);
    msg.setSource(59077U);
    msg.setSourceEntity(223U);
    msg.setDestination(57614U);
    msg.setDestinationEntity(15U);
    msg.type = 214U;
    msg.comm_interface = 53547U;
    msg.model = 23285U;
    msg.list.assign("UJHHDXFTGQPUAGUSCSYQCQEVTKKHRWGVANIEDKWNPCPPZQLOUSDGTDVJJFJMKYBHGLILXNNBLOXOPAKDMEDXEDFTRGVQRROSVIOJMEGBFVYHWWWOUAANMXOPABXLURGFRZFXWEVTYIVQPPBMQWCWKICEIEIZYATHFZRUZCBCSFQHJYYBFTUJSYPNLGJRUVXQYOHBHZLCETBSLMNDEPWFZZDZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.43249780488145884);
    msg.setSource(7156U);
    msg.setSourceEntity(241U);
    msg.setDestination(15014U);
    msg.setDestinationEntity(122U);
    msg.type = 67U;
    msg.req_id = 3458469063U;
    msg.ttl = 48133U;
    msg.code = 55U;
    msg.destination.assign("VDVZZKSDEDQHRIEHUPCFHAGL");
    msg.source.assign("HQELYOBXTJYNKGXAOFBAOLBKVHERUYOZSVZFTPSHJEDOGWURVQHCOYFSWNSNYTQOPSAADLQOTCPNMNCGRIXAGIIWNBKCWBJKMGPLBUYCFHAXJWMGTPDCAQFPIQNRVYKGUEHTELPXGRNKLLHABZIJZTENKFZUMTRSERBTRZMIMBFJDDEUQIJFVKMTEDVPVMDHLSHDJICDKWJ");
    msg.acknowledge = 231U;
    msg.status = 222U;
    const signed char tmp_msg_0[] = {-26, -94, -47, 32, 0, 11, 74, 25, -8, 102, -74, 37, -96, -82, 121, -57, 4, 95, -128, -24, -106, 42, -36, 87, -72, -60, 123, 33, -103, 120, 89, -104, -50, -8, -60, 89, -55, -64, 76, -14, -74, 49, 62, 110, 83, 109, -62, -32, -14, 121, -59, -104, -20, -107, 54, 39, -108, 107, -118, -112, -70, 124, 57, -84, 46, 43, 6, -122, 32, 94, 87, 57, 122, 39, 27, 103, -89, -118, 119, 102, -35, -112, -112, 66, 49, 92, 44, 78, 38, 9, 85, 126};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.20716295953509878);
    msg.setSource(33767U);
    msg.setSourceEntity(119U);
    msg.setDestination(5181U);
    msg.setDestinationEntity(216U);
    msg.type = 122U;
    msg.req_id = 1681996732U;
    msg.ttl = 26841U;
    msg.code = 166U;
    msg.destination.assign("LZBAWSYCYXJTFBIIEJRLRRLQXVDLCQRURPBYOFKSXKYJWLJTPVMEFJUIMFYOTPTKUMQAAXAHDYCHNBSELMFKWABQZHIYFCDUXBAMUSVCNJDNLGDATTBOMFSYIPNENOCWKHJQGVGTIXQINGSWGMOHRZZEMLDVCWSGOGOPKPHIKKHHDAPNEGQZGDEUEZRPFFUQQUOQEZUUWASVCT");
    msg.source.assign("PTSDBAUIDDEUJWYQHODOUJOJZWXVNCZXAHAIGXRSGNVWVYUZHNPUCZWVLWCIWLNMTMOEPYXWSQIULMDYPLSKAUQFABVGTICCKELGYGHZXMBTPIRWLLBSVIGRYXJQJMHGBAXXEVPTFQSELPZRLTEIMUQYKGPRMSK");
    msg.acknowledge = 9U;
    msg.status = 134U;
    const signed char tmp_msg_0[] = {72, 97, 113, 65, -68, -49, 13, -120, -28, -3, 103, -19, -87, -70, -124, -30, -92, 82, 48, 19, -93, -103, 120, 82, -43, -72, 43, -112, -54, -43, -107, 71, 82, 93, 76, -37, 14, -128, 32, 3, 97, 2, 46, 101, -113, 121, -93, -85, 10, 51, -7, 126, -117, -15, 3, -6, -108, -48, -5, -42, 68, -7, 62, -111, 3, -14, -27, 62, 73, 46, -82, 13, -58, -9, -109, 60, 61, 44, -21, 11, -114, 93, -88, 27, -54, 31, -114, -109, -92, 126, -21, -32, 54, -6, 35, -19, 32, -76, 62, 5, -112, -71, 30, -128, 53, -63, -9, -101, 39, -68, -104, -12, 66};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.054595081984977645);
    msg.setSource(20104U);
    msg.setSourceEntity(43U);
    msg.setDestination(26026U);
    msg.setDestinationEntity(183U);
    msg.type = 233U;
    msg.req_id = 4106606406U;
    msg.ttl = 22571U;
    msg.code = 55U;
    msg.destination.assign("GUJYMBCWYHFKUQDAUFJFKJBLXXSOHYFNMHPVHGALTISEKLMEWGDIHDAIRUUZLACTQQXDQNWVVINTOVHHEBJMDYIXYICMAZCRUPKMBRCOFGBLXWAUYTGMOBVKMVYHBGSGWROFFTVPRJWG");
    msg.source.assign("DUSSELUJVBMSDYZIYKNIMKHPEDFFBGHPRQKTPSMXCRZTAENDYGNOYNZBCJNLFQRTSCHLFFRNBOVATWTVZGJLSHOBFMKTKDBMXVKAAQDINWPXNMKCEAEZOJPUAHBLICWYSKXQCZHJRZJMVOFDJECENEWCBSFWJGCXYYDAIVYDTUOPUWIM");
    msg.acknowledge = 182U;
    msg.status = 140U;
    const signed char tmp_msg_0[] = {-38, -123, 112, 89, 80, -17, 69, 43, -67, -70, -14, -109, -90, -67, 106, 69, 2, 40, 29, 90, -98, -29, 117, 116, -43, 67, -20, -72, -40, 97, -70, 24, 104, 113, 55, -120, -4, 64, -115, -80, 89, -83, -41, -21, 118, -121, 114, 40, 117, 12, 15, 37, 53, 14, 121, 98, -108, 124, 92, -112, 114, 35, 25, 28, 42, -116, 102, 43, 3, -15, 19, 67, 97, 87, -1, -62, 5, 65, 35, 86, 97, 53, -8, -92, 13, 24, 15, -31, -50, -36, -77, 72, -84, 10, 105, 78, 68, -26, 15, 99, 87, -119, -7, -74, -75, 11, 100, 32, -122, -103, 54, 89, -38, -28, 43, -103, -101, -28, -44, -41, -68, -15};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.5836761346591979);
    msg.setSource(62892U);
    msg.setSourceEntity(174U);
    msg.setDestination(64154U);
    msg.setDestinationEntity(149U);
    msg.id = 97U;
    msg.range = 0.7118289705454729;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.19561749992447475);
    msg.setSource(22660U);
    msg.setSourceEntity(19U);
    msg.setDestination(50690U);
    msg.setDestinationEntity(64U);
    msg.id = 242U;
    msg.range = 0.963870132347717;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.8968999700817046);
    msg.setSource(22629U);
    msg.setSourceEntity(202U);
    msg.setDestination(61762U);
    msg.setDestinationEntity(148U);
    msg.id = 79U;
    msg.range = 0.015857924797780698;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.02484166153754941);
    msg.setSource(52543U);
    msg.setSourceEntity(63U);
    msg.setDestination(57954U);
    msg.setDestinationEntity(27U);
    msg.beacon.assign("XMZTFQZRYSALQBSQNUNKQXBDEBGMYYLRMEUGBCOPBFDHEHXIGHUCDGJVWIIIXARHJQOYWPHRVTOXIAIMXVVLFZKAYTLSTLEXWHYPOQBPSRJZUWVJS");
    msg.lat = 0.8671404544965827;
    msg.lon = 0.023147099861718368;
    msg.depth = 0.7126915093354288;
    msg.query_channel = 114U;
    msg.reply_channel = 238U;
    msg.transponder_delay = 167U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.8403190890385596);
    msg.setSource(8592U);
    msg.setSourceEntity(199U);
    msg.setDestination(59525U);
    msg.setDestinationEntity(9U);
    msg.beacon.assign("YXCLODXRLQFQNXQPNYBCDJBBBVUJQSOZBSTWITUNLSNET");
    msg.lat = 0.11413121627137923;
    msg.lon = 0.5216564554984537;
    msg.depth = 0.897386929463538;
    msg.query_channel = 127U;
    msg.reply_channel = 80U;
    msg.transponder_delay = 219U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.3203169139200589);
    msg.setSource(22628U);
    msg.setSourceEntity(60U);
    msg.setDestination(39778U);
    msg.setDestinationEntity(202U);
    msg.beacon.assign("JMMVSJILNVHWWFKHRMWTKULZZIHYTFUPJENQHPANKORGRUJESREIMVDOYHTHVEYFODCDOIEOGKQZ");
    msg.lat = 0.1280795617017113;
    msg.lon = 0.10775084998043016;
    msg.depth = 0.6886756569634435;
    msg.query_channel = 1U;
    msg.reply_channel = 119U;
    msg.transponder_delay = 168U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.7905907236079937);
    msg.setSource(59245U);
    msg.setSourceEntity(125U);
    msg.setDestination(15545U);
    msg.setDestinationEntity(156U);
    msg.op = 39U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("LFFSYBWHJNGJYUPSIPXFHBQQEXGWDBLKJBQIVFVONITPDFHFCWHNJPYCRKLZLVZGHRYZRAUJVZAKEDIWKFIUUWSVXJZMSOQOQCPTFFUWAKGENSPWERLXLMBUXOHZGCVUUXYSIEVCUERODKMQQSBNINZATEYNQIWTWZDYBCJANMMDXIZFCKNRKNDPJGACWYOCGDAAALKOO");
    tmp_msg_0.lat = 0.4709046420753358;
    tmp_msg_0.lon = 0.5469583717897288;
    tmp_msg_0.depth = 0.542871112336827;
    tmp_msg_0.query_channel = 185U;
    tmp_msg_0.reply_channel = 20U;
    tmp_msg_0.transponder_delay = 196U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.6064474085570739);
    msg.setSource(50447U);
    msg.setSourceEntity(208U);
    msg.setDestination(39035U);
    msg.setDestinationEntity(217U);
    msg.op = 72U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.2725350678708879);
    msg.setSource(56340U);
    msg.setSourceEntity(133U);
    msg.setDestination(13790U);
    msg.setDestinationEntity(36U);
    msg.op = 42U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("NHHOKKSAMLPGNRCXDQFLEAAPNVCXTKNXXSOLZKNNJRMIJTDSUKSOEGDJSNEXIMQPYYOGRXVZQFBWJYDCRAYTHSFJYGYAXWTUHZGXUPLUQAHUGAJIZYDBWZZCLJNERMFAKQWMTNPYHZFNWZPVZRYCWDHMGPBVQLVTUCAFIIOBDCSLBSXUTOWBTHWMRZOCDDKEGPIROUIYKGLMPV");
    tmp_msg_0.lat = 0.7530890857803804;
    tmp_msg_0.lon = 0.8214436830369124;
    tmp_msg_0.depth = 0.8832262863297125;
    tmp_msg_0.query_channel = 88U;
    tmp_msg_0.reply_channel = 183U;
    tmp_msg_0.transponder_delay = 136U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.7105741869195552);
    msg.setSource(42819U);
    msg.setSourceEntity(144U);
    msg.setDestination(8531U);
    msg.setDestinationEntity(97U);
    IMC::GpsNavData tmp_msg_0;
    tmp_msg_0.itow = 2650023258U;
    tmp_msg_0.lat = 0.08698509199998616;
    tmp_msg_0.lon = 0.07911992481800345;
    tmp_msg_0.height_ell = 0.3388622350074778;
    tmp_msg_0.height_sea = 0.7423963463982753;
    tmp_msg_0.hacc = 0.24316108423895466;
    tmp_msg_0.vacc = 0.9230790642153589;
    tmp_msg_0.vel_n = 0.15966735977955127;
    tmp_msg_0.vel_e = 0.6650749357051353;
    tmp_msg_0.vel_d = 0.529216037963524;
    tmp_msg_0.speed = 0.17710474374709184;
    tmp_msg_0.gspeed = 0.01505751249490328;
    tmp_msg_0.heading = 0.9363897736643012;
    tmp_msg_0.sacc = 0.8164747618101312;
    tmp_msg_0.cacc = 0.5353549994605509;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.011325828496293489);
    msg.setSource(31387U);
    msg.setSourceEntity(97U);
    msg.setDestination(55220U);
    msg.setDestinationEntity(196U);
    IMC::TelemetryMsg tmp_msg_0;
    tmp_msg_0.type = 204U;
    tmp_msg_0.req_id = 325886519U;
    tmp_msg_0.ttl = 34400U;
    tmp_msg_0.code = 221U;
    tmp_msg_0.destination.assign("QJUZEHYRUKXSMLOPMTESYXNZEACIGVXJOJCYWHDUKWRPPBVMCYHFJNDJYGCIJGFAIURUMBDVKHSEFWDFFZIYEPOWWSLMQLFADTJAVOSEQLJHDXUTRZMLHKIEWXFANABPNGVOIEWLMFTZBRSBFCGATSOWYHVJNZOOBJGCOVSLQRTDBQNCYIALLYPIWINTZKXFBANSQKPBQQZTREUTDDIPCVRNMGPUKXQO");
    tmp_msg_0.source.assign("WAZJONGVMPPHMNURFIOTAEBIOANVZRDSJPRD");
    tmp_msg_0.acknowledge = 27U;
    tmp_msg_0.status = 31U;
    const signed char tmp_tmp_msg_0_0[] = {48, 15, -16, 26, -33, -118, -27, -94, 88, -7, -76, 110, 14, -97, 124, 72, -2, 38, -109, -117, 21, -73, 12, 102, 58, -93, -62, -53, -70, -44, -53, -119, -38, 67, 5, 119, 2, 18, 11, -107, -100, 1, 68, 90, 65, 13, -49, 85, -42, -1, 61, -108, 123, 120, -128, 95, -11, -95, 88, 89, -102, -10, -127, -28, 105, -58, -122, -11, 120, 26, -44, -79, -123, 101, -45, -120, -98, 61, -107, 7, -56, 2, -45, 12, -30, -53, -61, -108, -85, 80, -124, -95, -47, -99, 61, -100, -105, 18, -86};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.5833803290056914);
    msg.setSource(20529U);
    msg.setSourceEntity(240U);
    msg.setDestination(38515U);
    msg.setDestinationEntity(165U);
    IMC::RelayState tmp_msg_0;
    tmp_msg_0.id = 8;
    tmp_msg_0.state = -71;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.44626906246678244);
    msg.setSource(55822U);
    msg.setSourceEntity(175U);
    msg.setDestination(19662U);
    msg.setDestinationEntity(78U);
    msg.lat = 0.4816825144018736;
    msg.lon = 0.4942072829656814;
    msg.depth = 0.2877431619086924;
    msg.sentence.assign("HDWUUABQAOUQBQPXQRUSSJXYRSXTHLJXAULVEIZEQBFXDYEVNMZPTDGHCSVNGPKSWERTKYNDEIPAMUGWBORORKIMFXWZYMVJHQOCITWPDJ");
    msg.txtime = 0.364725993218311;
    msg.modem_type.assign("HTUICRWNXMAGTECNZMVFXKMUILOTCJDNHXRFNBGZZRGUURXJHAVQSUBOVDYJNBUXEJBOFHZCGVJVSDQYLECXLZVZNKFPDFGNTNCXLWKDQZPKJWLQUBMLVBOUDAWRLAOIWHEYWSPRAPSYKXPAYFLINBKQYVSDEGRZZDMEKTIYEOTMJHWATADOGKPMPLS");
    msg.sys_src.assign("IYCJOKHHNDWSJHQHTLZFSLQOF");
    msg.seq = 65318U;
    msg.sys_dst.assign("ECTLNRIJFETRMPNZOTQCFMLPSONFGAAEXGVTVAMSGRBWJIBOPVRTDJGOOUDIDYUTESVYCBUCMRHXJQLAOCWMEXPDYXXHFYJNYLQOIIBRNJMLIDRUKXGVIWWEZNBURPYZSWPOAXSGWBOQPKTASBFNTCZHYGHFFKQCZKHIB");
    msg.flags = 227U;
    const signed char tmp_msg_0[] = {16, 40, 22, -74, 44, -10, -64, -108, -120, -40, 6, 84, -89, 53, 67, 103, 28, -9, -13, 85, 0, 39, -126, -30, 18, -123, 67, -59, -37, -77, -110, -57, 113, 73, -115, -82, 44, 74, 89, 76, -68, 122, 125, -90, -105, -120, -28, -52, 119, -29, 105, 94, -22, -16, -17, -45, 21, -67, -94, 45, -106, -73, 11, -17, -59, -58, -23, -103, -103, 32, 70, 116, 112, -30, 50, -16, 118, -80, 90, 107, 82, 15, 8, -52, -116, 65, 80, 57, -124, -18, 40, 38, -6, -36, 35, 101, -77, -43, 120, 3, -74, 82, 94, -103, 122, -121, 60, 32, -100, 124, -71, -85, 74, -82, 72, 65, 108};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.7932038317452532);
    msg.setSource(47270U);
    msg.setSourceEntity(68U);
    msg.setDestination(63066U);
    msg.setDestinationEntity(254U);
    msg.lat = 0.25668547020029964;
    msg.lon = 0.817718270367983;
    msg.depth = 0.5345328987632476;
    msg.sentence.assign("BFOKKVPOCHBYJZSUUPDSFHOBRILKAHFUIIDRWBBCTETVNEFMBUJPXH");
    msg.txtime = 0.22854588557249356;
    msg.modem_type.assign("JTGGIJUXPSEJRMXSHVKENIGSZCTNTRWJLETEYSZZSOZEHAEBZUATDVTGFFLOUAMVPARWADTFKOHBVFFMTLMNBCLVDQVSYLBDWCYERBAMLDVXPWJQWTMPKAKZDBIZJUMNHGKYFVFOGRLJHKAHBUPMEXGQ");
    msg.sys_src.assign("UUIYZAIXBRRBUPOUMPCYYQYVPGSUGUGOONPTRMBGZTCHJIOUBOAUJXZUYCFNSSGQQZVROSBMNCDZFJXCDJDPLFXWNQVKFVKSBAGESQHAFZCFTFXADRFVOMLBWSQYZCATJCLRXLN");
    msg.seq = 4919U;
    msg.sys_dst.assign("TBVSRHSWQJRBWAMKLVOORJSDWXUQJKQHWEUFSDVJNIIYAVRYEPULURGYGBFMYBXYKBAUGFGLIJZZGNUQCVVPOCPOESQIHZGPFXWMRMLDD");
    msg.flags = 217U;
    const signed char tmp_msg_0[] = {-14, -87, -35, 69, 98, -88, 41, 42, 67, 0, -21, 56, 0, -93, 73, 63, 27, 122, -93, -47, -104, 83, -12, 56, 56, -98, -122, 67, -32, -70, -120, 123, -25, -111, -122, 77, 102, 32, -115, 16, 85, 55, -47, -45, -19, -79, -100, 86, -112, 97, -70, -1, 48, -118, -15, -35, 98, 92, -120, -4, 57, -75, -53, -11, 36, -112, 50, 45, 121, -11, 2, 32, 96, -64, -110, 92};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.3796849463774613);
    msg.setSource(58778U);
    msg.setSourceEntity(111U);
    msg.setDestination(48280U);
    msg.setDestinationEntity(216U);
    msg.lat = 0.08232211898942898;
    msg.lon = 0.7161941269626642;
    msg.depth = 0.33484982472743086;
    msg.sentence.assign("XCLFPPSGWATNMRDNFZTRVODZSZYGEDEXHZHUUUPCDIKAWYJDJAINFOHCNAUTEEJHYCCPVBAQRKNLFQQQOMVLHTBUWXPNSIQKRMWRADXXNUYKOXEJMBIQUUOLVTEFGPOFDHDVRIZGMQCOWSWNROBNKSDAWMRCBMJIT");
    msg.txtime = 0.4352527182260306;
    msg.modem_type.assign("PQCDMDHFIIATBANFOCSGZSLSLGXLEJLLPMJTPBYBCVUQMESQNAFERWU");
    msg.sys_src.assign("CBSJXENZORTVKPAAUGRDTPMDQNHYGEMAZALARCPKKPNJKKLYXYFIULQFJABS");
    msg.seq = 2440U;
    msg.sys_dst.assign("VLWYXCHKMXXRIPEWEXJOAXUAGIJTKTMJTVHAMQDXJNWVPOLJKKAOLZQMVGCZIBSHZQLODYBTGFWDRCDTGBYBEHUOLDGYFDEGUFBTTEQTTCURXOESAAPYJSNHPA");
    msg.flags = 47U;
    const signed char tmp_msg_0[] = {-11, -113, 56, -78, 124, -44, 69, 121, 11, -91, 15, -107, 10, 109, -125, -92, 36, 13, 56, -41, -51, -42, -97, -122, 48, 16, 55, 70, -60, -127, -110, 52, 105, -56, -104, -96, 115, -98, 47, 45, -63, 65, -69, 74, -50, 121, 125, 110, -32, 36, -14, 86, -16, 46, -52, -93, -17, -42, 18, -52, 55, -71, 47, -47, -57, -54, 11, -27, 4, -121, -76, 3, -35, -66, -121, 45, 8, 55, -113, -44, 63, -99, 29, -104, 22, 8, -78, 9, -67, -6, -79, -109, -48, -44, 118, -54, -116, 66, -47, -79, 82, -87, 82, 103, 77, -102, -100, -114, 22, -8, 91, -119, 55, 39, -118, 114, -38, 48, 126, -91, 81, 32, -55, 22, -126, 37, -35, -111, -43, 92, -2, 104, -104, 15, -103};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.43698044733356367);
    msg.setSource(40610U);
    msg.setSourceEntity(206U);
    msg.setDestination(35410U);
    msg.setDestinationEntity(211U);
    msg.op = 112U;
    msg.system.assign("TUCCDLLWMOKMTBZINADPSSWHTILRRBDQFUAIUMKEFXEWXZQULRJCJTKGMYRUVWAGVEMIXAGDFADLQYOTEEUCH");
    msg.range = 0.8703015315246491;
    IMC::MagneticField tmp_msg_0;
    tmp_msg_0.time = 0.8932943740834615;
    tmp_msg_0.x = 0.4481313350354007;
    tmp_msg_0.y = 0.004478441781438525;
    tmp_msg_0.z = 0.33748629328255564;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.2578843395787003);
    msg.setSource(41777U);
    msg.setSourceEntity(180U);
    msg.setDestination(15656U);
    msg.setDestinationEntity(71U);
    msg.op = 139U;
    msg.system.assign("IYZGCIDTUFQVT");
    msg.range = 0.7389675311999313;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.8492510335809738;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.407256732168385);
    msg.setSource(898U);
    msg.setSourceEntity(232U);
    msg.setDestination(14507U);
    msg.setDestinationEntity(241U);
    msg.op = 43U;
    msg.system.assign("PMYAYDKQFSHYIHLCRKDYLBWEHRORQEDCDQEBAIZPWUHIPLOAZUWGORMUOIRLWCNTGTEFTYUXFPOTDKKDCZKFTXVOTCBMWZOSBWLGSHPEZZIWORLGNUGKCKJFJHBNUDNGPJQEAPMFTMXASSIJVFPAMCRYSDKMNJOVRXMADVSXVUZYQBQXJETXJFAUHLQLBCUREYXVWNEPHVQJGXI");
    msg.range = 0.694350761936718;
    IMC::SessionKeepAlive tmp_msg_0;
    tmp_msg_0.sessid = 2620058722U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.9855530860784517);
    msg.setSource(49366U);
    msg.setSourceEntity(141U);
    msg.setDestination(39720U);
    msg.setDestinationEntity(51U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.26517387636619727);
    msg.setSource(1159U);
    msg.setSourceEntity(17U);
    msg.setDestination(7888U);
    msg.setDestinationEntity(7U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.13554648296168237);
    msg.setSource(32158U);
    msg.setSourceEntity(15U);
    msg.setDestination(11146U);
    msg.setDestinationEntity(56U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.5696712953601278);
    msg.setSource(13962U);
    msg.setSourceEntity(217U);
    msg.setDestination(9078U);
    msg.setDestinationEntity(136U);
    msg.list.assign("HNWPFGDQABWUZJVBPRVEFKSIHWTPCRLBLKYOP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.7786611552106072);
    msg.setSource(5445U);
    msg.setSourceEntity(151U);
    msg.setDestination(10691U);
    msg.setDestinationEntity(190U);
    msg.list.assign("GSXLNDVCHBCPALLNUOQEWVQZYNGRSJWAPPIGIKTZLUVIBTSZYUIBICPTZRQRJYNALCOXINXSXHVQRFDCFPEMTJJAPVTREHMKRPKPOVAUALEYLEKGZWMJSNJDFFBAHMMQIQDGJGUBJCWSSXCKEWZTDNSBUOFTNWPRCGYCMHFYFBWQEYIOXUTVXKXHOAUZXAMBD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.40607786198488527);
    msg.setSource(63188U);
    msg.setSourceEntity(185U);
    msg.setDestination(47377U);
    msg.setDestinationEntity(15U);
    msg.list.assign("DJESSFWXMKHOK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.7877134843594975);
    msg.setSource(7256U);
    msg.setSourceEntity(123U);
    msg.setDestination(26819U);
    msg.setDestinationEntity(63U);
    msg.peer.assign("KLNIMKMXCCSSIDIJPNVBRXDRSFROHTNLTFGMIRHAKJUBYBLFJPZMXOAMBOOOQXFQZNOBWMQHDZELCCQVGSVTGSKHPTCUEKNTDLWYXENJMFOTDGSAZIPZUYEQGJZT");
    msg.rssi = 0.7223799433665252;
    msg.integrity = 38709U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.9319445902756339);
    msg.setSource(65196U);
    msg.setSourceEntity(147U);
    msg.setDestination(36774U);
    msg.setDestinationEntity(6U);
    msg.peer.assign("LDRJJWFSCIWDTIDBKXVSQQYRTFMEEODAEXGODOLZUBSBGKTPAARVGZIGTBUZKFYHJYOXYILCUVECPUJGAPSXFPIEFSZCKTQLKLULYHXKZZNGQJMYCICBU");
    msg.rssi = 0.5597823613716334;
    msg.integrity = 3627U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.7497785039714486);
    msg.setSource(36822U);
    msg.setSourceEntity(98U);
    msg.setDestination(6675U);
    msg.setDestinationEntity(126U);
    msg.peer.assign("CSFFJSVHBCOIVYFSNPANCHCTHCIXXUVXUUKGDJKZZMMMCXYSBRXFYGAEFQGZPWIBRESXIORKZAMEEOIMQFOINRPWJYCXVUTWLRJBDIMNJKVLPNIAVUPWYQOHTBNVUEDTCOFBQZNQRBVJWPTJNATTARZSVQFBZULXUMVGZJKYUEEJXLOREBMGGNNLZHGOWQUGKCIYALJEWXHLTFMGSRCSPG");
    msg.rssi = 0.321957129687353;
    msg.integrity = 5978U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.7827852429378013);
    msg.setSource(61035U);
    msg.setSourceEntity(21U);
    msg.setDestination(50928U);
    msg.setDestinationEntity(55U);
    msg.req_id = 8139U;
    msg.destination.assign("IEMMNULVYPSQHTPHPCRENTTNJCSKMXCRRANGFMRAJHMPZEZVOUYEYNVXJCVNZLBUKDSSRUYNXQWZBVI");
    msg.timeout = 0.3766347551715614;
    msg.range = 0.9395258451033303;
    msg.type = 37U;
    IMC::UsblAnglesExtended tmp_msg_0;
    tmp_msg_0.target.assign("AQYCNUMICUGHFSYVDDEDFYEMMVZMQFXBSVHJQSZOKXDOXZONFKRRIRPIXXIDNWRARHPSZXIOZFXEWPUVEBWUZCTTVERQIVLAGOTJQBLRDKNMCJBSXAGGFPNSWUJKTZTPLKHJOGWBZLYUZKOPNRHPOGNEKJJCCESXFPLTZHWAJTWMKL");
    tmp_msg_0.lbearing = 0.26806629564477935;
    tmp_msg_0.lelevation = 0.4142980774475462;
    tmp_msg_0.bearing = 0.24695030565752563;
    tmp_msg_0.elevation = 0.7167715535428061;
    tmp_msg_0.phi = 0.11505175130187939;
    tmp_msg_0.theta = 0.9335284395326225;
    tmp_msg_0.psi = 0.4761551242285632;
    tmp_msg_0.accuracy = 0.6624101510155891;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.3169495754533266);
    msg.setSource(2445U);
    msg.setSourceEntity(153U);
    msg.setDestination(56538U);
    msg.setDestinationEntity(163U);
    msg.req_id = 41899U;
    msg.destination.assign("KTPSLHBZOYTRRGUUBIXFYSZLNQDJMPLGSLEGGUDEAFHFMGJOKGNKSKMDOHMRQWATBSDSYHPPXRGTDHIOXZQJBUHDAQXCWKZIEBCFKZOZVATRYWIIACDAVXPWQEUCRLOVNFLQBO");
    msg.timeout = 0.4170796031569488;
    msg.range = 0.21496708128354203;
    msg.type = 126U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("LQMMORQIBAZBGCTWMBBZEZDDLNFYGSQSXFURFLYURENEYMERPPUXZIFWMCGQDCVKEYIAPCUYVIMLLBQKVSTEJTLWZIKXVHNVEXJGTDTLUJQSHWAZXQIYUVJGTPQFPXKSTXAWJMDTYHRMOOBJXPROGKIVVXHDUDELVOLTUYNKJLYODOMKRGNSANESIORPSQANFGIQHCZAJONTZHRSHCSCHFDBWFAFBUCZMCHKVWOJ");
    tmp_msg_0.description.assign("VECHPZENFXAHYWEXQEPKHEQNINMUOZGIZWISBLOQGSJMLOKAUEQ");
    tmp_msg_0.vnamespace.assign("JSWFXKNJRQGPQYUARSFPGEHNIHHIVBAQUJKDLMMCGTVFCHJMYWSFEINWMBIATOEFZBOCXOIPMVQYHMVPVRXWOTXMNTVVTILYTESNYETUQRHNRZQFSBCEXAGWRTSFBIGVZJUGTLHBLIYDRVOBXWAHBKCJXWXZNZPHLGT");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("BOVFNWEDUGWCSTFLJLDQWFCFNDTZJZKOHLKPCZBPTERWIUBXAOKXVFXUZAJOPGCZTQJYGQMMDCQYALXMYXEWRTYVLILZTSVCISTHDBGMPVRWXHAGONJIUASSFPXMBMKSRZAKBRWTQHDHVNLRUXTCDJAHFKRQBUQOJYSMPEEOBCEOFSNYHLQFLIZJUHSNKINAXCPNXGBYIZWVKJYGGENUHIUUEMYAQRSE");
    tmp_tmp_msg_0_0.value.assign("TJIROXQYYMJFVAXXYTOIBONUMKUZGNFISBQZIDOWCVCBYCYHLKSXKHPOATZPUNODEELSNEMSZKWVPIKENSFOYQMPDTZIGPWQWUJXQKPMJONJZRUVFCFUBAAIDBFH");
    tmp_tmp_msg_0_0.type = 218U;
    tmp_tmp_msg_0_0.access = 126U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("FBAYBDLBVGRTTKXWQIMXQDOIAOGPCCYCVGRXJUJDEWQJCZJJVHUHKXAUFLTDMJBHKPMBZGOSCIFVWHGDAVADNUCVWUGSFYLSEQQHFGSHFILNOXWTUDYEKTMDNQOMFWZKNSPAJSNSENN");
    IMC::PlanTransition tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.source_man.assign("TEEEOLPOZCPNVXWEBKMVOCPBCLYQSNZLTJMCXHQKAHWURTXDVZXQDZVKYD");
    tmp_tmp_msg_0_1.dest_man.assign("PYXYLDPPPNCLBASZMCZHIBJJJFUEDUQTFWMCOZVXSELKVJJLVSYJWWJCOTSUJWQO");
    tmp_tmp_msg_0_1.conditions.assign("WKIWABYLGZOJUTQHJRMJDCZNXRHELPWASEOZKRHUVU");
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_1);
    IMC::Force tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.value = 0.9136945558535591;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_2);
    IMC::LinkLevel tmp_tmp_msg_0_3;
    tmp_tmp_msg_0_3.value = 0.3740424963975718;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_3);
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.006247528573830818);
    msg.setSource(49093U);
    msg.setSourceEntity(183U);
    msg.setDestination(55391U);
    msg.setDestinationEntity(167U);
    msg.req_id = 60164U;
    msg.destination.assign("HJFASXJGPCKACZIFZNAMRXTSAMAUKSNDSYFCPAGVEWVOJPMQVZXINAZHAFBQTBBWVYTCRYJWJJPRKQDVECVYECDTRGOZG");
    msg.timeout = 0.8748112169296991;
    msg.range = 0.20285159906877248;
    msg.type = 185U;
    IMC::Brake tmp_msg_0;
    tmp_msg_0.op = 21U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.7901845951068427);
    msg.setSource(55442U);
    msg.setSourceEntity(146U);
    msg.setDestination(1944U);
    msg.setDestinationEntity(78U);
    msg.req_id = 13681U;
    msg.type = 33U;
    msg.status = 210U;
    msg.info.assign("IHLSYXWBDYYAWLSRKVWKEDFWRFADICHYUKZEUUVPWCQSKFXUVMSLIZSQ");
    msg.range = 0.6737012557796077;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.9139403698048487);
    msg.setSource(29632U);
    msg.setSourceEntity(132U);
    msg.setDestination(4915U);
    msg.setDestinationEntity(80U);
    msg.req_id = 54542U;
    msg.type = 15U;
    msg.status = 217U;
    msg.info.assign("YXCZCRGJYFTVKCUKWVWKPQHLZFGTNNNOQYPKMSOANTKODLISXDJMBWNDMSWRDDPEHUXBQXKZRSMOBPAFFEQMLXKZBTTNBCYQEJVOSRAIIJAMGCIHWRTEIQAPERGLMRSUQMGUDYGFYUVLBCXQSEJUDFZQBJJCAYWOBEPNHIUWKFVGUNCHXZGGLCIXXPIHBRZTJOUTOVWERAPFADKUJYOENPBFSGLLP");
    msg.range = 0.0065524588301150155;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.011420340495598591);
    msg.setSource(58161U);
    msg.setSourceEntity(123U);
    msg.setDestination(18486U);
    msg.setDestinationEntity(251U);
    msg.req_id = 23012U;
    msg.type = 19U;
    msg.status = 21U;
    msg.info.assign("WUDBINBUAPRWGZPLLTQUBWUCYSYTDZRXNYYUJQVFARKYMSBTUOZSGJJSRCDIIOEJHCAHRPYKIFRNLKEVEHTSZAGJTTSVVEWHJNMBNQDDXCVOGYCCWQRXAWNHLXSSTDXQKXWKKZKUQDFXPGNMLUVGZZEEZOHTUBPMNAQFAROYIOAOZEVZOFGTHQEXWCMBNYBLWKWHMXPVFHBR");
    msg.range = 0.14901797881559897;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.22246217245584576);
    msg.setSource(24331U);
    msg.setSourceEntity(145U);
    msg.setDestination(10633U);
    msg.setDestinationEntity(223U);
    msg.system.assign("LXYPCAYRVMSFRPMUPNYNDGPTVLSXUMCERIVWFKKMVIBFXIEOCNUOBADXQLFVBFHQAAXVLTGZNGVRBZASRUMOJHVZZSXOPYBQIUYPJDAQCJWZLSOMIHLFRPKHWXTGMKTONRMZEZHJDKCFTYPNGWQJSBBSTUSBZCKUCAHEGWTZYGHCUEHCLQABIKI");
    msg.op = 240U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.9044525219724744);
    msg.setSource(35113U);
    msg.setSourceEntity(41U);
    msg.setDestination(35475U);
    msg.setDestinationEntity(198U);
    msg.system.assign("JXLRGYQNUCCHVPKWJCANBMFMTCZIELNULDGOVQVHPEGZISPDAUZVOSNFTLWRJYXTIBMODMQIPNKHHEUDSTURIYUZVCRKLAXJGEXRSGWXSBMWAQSAJOYPVGWOXTYWHMHYKPOJHTNAPCQSJWVBFPPBJUDDSQ");
    msg.op = 105U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.6239510166918903);
    msg.setSource(21254U);
    msg.setSourceEntity(32U);
    msg.setDestination(42350U);
    msg.setDestinationEntity(147U);
    msg.system.assign("TTBWKQWSJBZLRUXKHXMPRFWNRFOJRWDTNKMSFAHWPDZVVINDNQCSWGLFKYRMAWHZEBUGOTUZCDILDLZGTVVRMHUQHECYNOSGKEEXEWAZIZRSEHNAYSTBVJNL");
    msg.op = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.5757745316396217);
    msg.setSource(31119U);
    msg.setSourceEntity(8U);
    msg.setDestination(14361U);
    msg.setDestinationEntity(32U);
    msg.value = 27016;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.9551465724914562);
    msg.setSource(55289U);
    msg.setSourceEntity(236U);
    msg.setDestination(60621U);
    msg.setDestinationEntity(1U);
    msg.value = -20748;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.3824737472617088);
    msg.setSource(30152U);
    msg.setSourceEntity(178U);
    msg.setDestination(23976U);
    msg.setDestinationEntity(228U);
    msg.value = 6133;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.7921163843643954);
    msg.setSource(35200U);
    msg.setSourceEntity(51U);
    msg.setDestination(47930U);
    msg.setDestinationEntity(150U);
    msg.value = 0.5575992197172228;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.8145213389592552);
    msg.setSource(1029U);
    msg.setSourceEntity(2U);
    msg.setDestination(25179U);
    msg.setDestinationEntity(131U);
    msg.value = 0.892100293722062;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.9404051626124511);
    msg.setSource(21568U);
    msg.setSourceEntity(235U);
    msg.setDestination(4002U);
    msg.setDestinationEntity(134U);
    msg.value = 0.5161777721923962;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.7069573960699781);
    msg.setSource(50702U);
    msg.setSourceEntity(122U);
    msg.setDestination(8472U);
    msg.setDestinationEntity(54U);
    msg.value = 0.9415120261388225;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.8290580806850736);
    msg.setSource(25459U);
    msg.setSourceEntity(0U);
    msg.setDestination(6258U);
    msg.setDestinationEntity(251U);
    msg.value = 0.0027821729464952982;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.9942970748505918);
    msg.setSource(64566U);
    msg.setSourceEntity(158U);
    msg.setDestination(56369U);
    msg.setDestinationEntity(199U);
    msg.value = 0.13686666242728118;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.8518193015053813);
    msg.setSource(31843U);
    msg.setSourceEntity(41U);
    msg.setDestination(65077U);
    msg.setDestinationEntity(237U);
    msg.validity = 37901U;
    msg.type = 197U;
    msg.utc_year = 58437U;
    msg.utc_month = 140U;
    msg.utc_day = 202U;
    msg.utc_time = 0.0918715024583241;
    msg.lat = 0.7425731231972377;
    msg.lon = 0.39346964604651535;
    msg.height = 0.05759746524574938;
    msg.satellites = 73U;
    msg.cog = 0.19996546889715072;
    msg.sog = 0.07265393035640988;
    msg.hdop = 0.8120422018599169;
    msg.vdop = 0.45727158055769357;
    msg.hacc = 0.9814158104866677;
    msg.vacc = 0.8850544960097814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.909895712938144);
    msg.setSource(58457U);
    msg.setSourceEntity(55U);
    msg.setDestination(40540U);
    msg.setDestinationEntity(69U);
    msg.validity = 33454U;
    msg.type = 26U;
    msg.utc_year = 44939U;
    msg.utc_month = 133U;
    msg.utc_day = 210U;
    msg.utc_time = 0.744024330867267;
    msg.lat = 0.7584932278124932;
    msg.lon = 0.09146821377851044;
    msg.height = 0.5708807334980193;
    msg.satellites = 249U;
    msg.cog = 0.20831353146249942;
    msg.sog = 0.8064613698614234;
    msg.hdop = 0.4641790442344227;
    msg.vdop = 0.26627803165597475;
    msg.hacc = 0.9280140610615886;
    msg.vacc = 0.03448454681910229;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.02113191799658165);
    msg.setSource(1824U);
    msg.setSourceEntity(104U);
    msg.setDestination(23272U);
    msg.setDestinationEntity(225U);
    msg.validity = 59943U;
    msg.type = 181U;
    msg.utc_year = 61754U;
    msg.utc_month = 7U;
    msg.utc_day = 149U;
    msg.utc_time = 0.33782742358799134;
    msg.lat = 0.4857350731522364;
    msg.lon = 0.5139162524256623;
    msg.height = 0.19920327696997242;
    msg.satellites = 168U;
    msg.cog = 0.14255020055675383;
    msg.sog = 0.3815201295246088;
    msg.hdop = 0.07039832358525411;
    msg.vdop = 0.08151266799523005;
    msg.hacc = 0.10429347334708083;
    msg.vacc = 0.30945591773339376;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.05461374948132092);
    msg.setSource(28617U);
    msg.setSourceEntity(129U);
    msg.setDestination(19696U);
    msg.setDestinationEntity(161U);
    msg.time = 0.13655973808276456;
    msg.phi = 0.7739926375132296;
    msg.theta = 0.45749783212409645;
    msg.psi = 0.37895475501415243;
    msg.psi_magnetic = 0.6672246941513555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.630413089756461);
    msg.setSource(456U);
    msg.setSourceEntity(142U);
    msg.setDestination(26659U);
    msg.setDestinationEntity(231U);
    msg.time = 0.49036230282225024;
    msg.phi = 0.23267246827346777;
    msg.theta = 0.29569926065967944;
    msg.psi = 0.5056943166826903;
    msg.psi_magnetic = 0.5122917156742605;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.833326063232191);
    msg.setSource(2059U);
    msg.setSourceEntity(35U);
    msg.setDestination(9403U);
    msg.setDestinationEntity(11U);
    msg.time = 0.5929122533994555;
    msg.phi = 0.0970706441191691;
    msg.theta = 0.4795907003611376;
    msg.psi = 0.4311294713883609;
    msg.psi_magnetic = 0.7329800406548862;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.8812234874995835);
    msg.setSource(25509U);
    msg.setSourceEntity(99U);
    msg.setDestination(19925U);
    msg.setDestinationEntity(247U);
    msg.time = 0.17862586698040428;
    msg.x = 0.8670695524204134;
    msg.y = 0.2874609033202541;
    msg.z = 0.4127404043010706;
    msg.timestep = 0.5204717238269914;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.3587393752966035);
    msg.setSource(8430U);
    msg.setSourceEntity(25U);
    msg.setDestination(2513U);
    msg.setDestinationEntity(22U);
    msg.time = 0.2723108179557939;
    msg.x = 0.6593277426892111;
    msg.y = 0.726487409428408;
    msg.z = 0.5470449122616167;
    msg.timestep = 0.8205015102266602;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.6584816064779818);
    msg.setSource(25457U);
    msg.setSourceEntity(224U);
    msg.setDestination(56226U);
    msg.setDestinationEntity(148U);
    msg.time = 0.1161504558853712;
    msg.x = 0.3086556771692508;
    msg.y = 0.32484610028198646;
    msg.z = 0.1706646702111091;
    msg.timestep = 0.6797534164338964;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.5402980314852891);
    msg.setSource(25403U);
    msg.setSourceEntity(85U);
    msg.setDestination(41989U);
    msg.setDestinationEntity(183U);
    msg.time = 0.4820409480580419;
    msg.x = 0.724992037025151;
    msg.y = 0.5527480159465354;
    msg.z = 0.04336981547819119;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.3312696250078889);
    msg.setSource(5514U);
    msg.setSourceEntity(31U);
    msg.setDestination(25228U);
    msg.setDestinationEntity(92U);
    msg.time = 0.8709007417326142;
    msg.x = 0.9402724997505393;
    msg.y = 0.05724847528212862;
    msg.z = 0.6844569636639642;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.033716705137144976);
    msg.setSource(22169U);
    msg.setSourceEntity(136U);
    msg.setDestination(44865U);
    msg.setDestinationEntity(4U);
    msg.time = 0.40978162445677957;
    msg.x = 0.7227083388208255;
    msg.y = 0.44792513779169996;
    msg.z = 0.887720598880983;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.3014312234855856);
    msg.setSource(58965U);
    msg.setSourceEntity(151U);
    msg.setDestination(37793U);
    msg.setDestinationEntity(151U);
    msg.time = 0.7518407248906951;
    msg.x = 0.3583202566502005;
    msg.y = 0.09504265647623988;
    msg.z = 0.11781020648496587;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.9173340497996777);
    msg.setSource(8254U);
    msg.setSourceEntity(237U);
    msg.setDestination(19843U);
    msg.setDestinationEntity(128U);
    msg.time = 0.3931200977183057;
    msg.x = 0.19224495523902652;
    msg.y = 0.08198588934908224;
    msg.z = 0.5355871100745797;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.693003047589874);
    msg.setSource(42826U);
    msg.setSourceEntity(132U);
    msg.setDestination(10149U);
    msg.setDestinationEntity(186U);
    msg.time = 0.48474480014496857;
    msg.x = 0.7814631467446038;
    msg.y = 0.019391897282747816;
    msg.z = 0.7823492752712831;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.026383321071848598);
    msg.setSource(43423U);
    msg.setSourceEntity(246U);
    msg.setDestination(36561U);
    msg.setDestinationEntity(91U);
    msg.time = 0.8992049805808876;
    msg.x = 0.594744630173322;
    msg.y = 0.9209476585217411;
    msg.z = 0.7485679868108894;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.2650583215172161);
    msg.setSource(5865U);
    msg.setSourceEntity(250U);
    msg.setDestination(57556U);
    msg.setDestinationEntity(188U);
    msg.time = 0.6488759665827829;
    msg.x = 0.7034673399778865;
    msg.y = 0.1571648773895632;
    msg.z = 0.5036186674015447;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.690535561348661);
    msg.setSource(36774U);
    msg.setSourceEntity(195U);
    msg.setDestination(29519U);
    msg.setDestinationEntity(184U);
    msg.time = 0.7886331601858827;
    msg.x = 0.43030107075471835;
    msg.y = 0.26718237957147495;
    msg.z = 0.7291613140664889;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.5269296703286174);
    msg.setSource(22489U);
    msg.setSourceEntity(75U);
    msg.setDestination(9624U);
    msg.setDestinationEntity(33U);
    msg.validity = 206U;
    msg.x = 0.21842925951685432;
    msg.y = 0.01634393810205359;
    msg.z = 0.6639074444282002;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.8469946874228784);
    msg.setSource(8404U);
    msg.setSourceEntity(63U);
    msg.setDestination(24799U);
    msg.setDestinationEntity(46U);
    msg.validity = 231U;
    msg.x = 0.0033525946911855398;
    msg.y = 0.6739998756511791;
    msg.z = 0.1855211193038645;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.9655654602612693);
    msg.setSource(10360U);
    msg.setSourceEntity(155U);
    msg.setDestination(19157U);
    msg.setDestinationEntity(248U);
    msg.validity = 234U;
    msg.x = 0.17943050881660205;
    msg.y = 0.7231014716659665;
    msg.z = 0.69263263883347;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.158192323845463);
    msg.setSource(30642U);
    msg.setSourceEntity(39U);
    msg.setDestination(60822U);
    msg.setDestinationEntity(60U);
    msg.validity = 149U;
    msg.x = 0.3362361537624129;
    msg.y = 0.6034176499477036;
    msg.z = 0.016145307864195546;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.046083342874982725);
    msg.setSource(27058U);
    msg.setSourceEntity(179U);
    msg.setDestination(51903U);
    msg.setDestinationEntity(18U);
    msg.validity = 6U;
    msg.x = 0.014635148724126745;
    msg.y = 0.10894110425191927;
    msg.z = 0.7211117140584883;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.5398366959664362);
    msg.setSource(53562U);
    msg.setSourceEntity(126U);
    msg.setDestination(59648U);
    msg.setDestinationEntity(120U);
    msg.validity = 120U;
    msg.x = 0.40562595117937705;
    msg.y = 0.06731770972849593;
    msg.z = 0.7603041217330745;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.5082206699315147);
    msg.setSource(51597U);
    msg.setSourceEntity(149U);
    msg.setDestination(33584U);
    msg.setDestinationEntity(249U);
    msg.time = 0.26650408174841267;
    msg.x = 0.0001410124286689296;
    msg.y = 0.6918908571703719;
    msg.z = 0.5358024338442302;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.6500655626610854);
    msg.setSource(9969U);
    msg.setSourceEntity(163U);
    msg.setDestination(58663U);
    msg.setDestinationEntity(16U);
    msg.time = 0.7543898553451819;
    msg.x = 0.23505143083856506;
    msg.y = 0.5710391811594426;
    msg.z = 0.1590158240423971;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.9708576484089088);
    msg.setSource(25123U);
    msg.setSourceEntity(226U);
    msg.setDestination(46355U);
    msg.setDestinationEntity(221U);
    msg.time = 0.6850964091655182;
    msg.x = 0.054523880938823543;
    msg.y = 0.7085984536026739;
    msg.z = 0.5207642476803741;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.5966460839892359);
    msg.setSource(36396U);
    msg.setSourceEntity(26U);
    msg.setDestination(57374U);
    msg.setDestinationEntity(11U);
    msg.validity = 54U;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.08985706704074847;
    tmp_msg_0.beam_height = 0.6759944185389672;
    msg.beam_config.push_back(tmp_msg_0);
    msg.value = 0.6016892754276677;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.23939695627852653);
    msg.setSource(64349U);
    msg.setSourceEntity(102U);
    msg.setDestination(57753U);
    msg.setDestinationEntity(149U);
    msg.validity = 91U;
    msg.value = 0.9072077518413892;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.25790301574775154);
    msg.setSource(52174U);
    msg.setSourceEntity(207U);
    msg.setDestination(16699U);
    msg.setDestinationEntity(11U);
    msg.validity = 205U;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.9197274453096425;
    tmp_msg_0.beam_height = 0.9366869769967889;
    msg.beam_config.push_back(tmp_msg_0);
    msg.value = 0.376041479358978;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.26969352083213693);
    msg.setSource(900U);
    msg.setSourceEntity(112U);
    msg.setDestination(129U);
    msg.setDestinationEntity(226U);
    msg.time = 0.582501791981666;
    msg.value = 0.5039044396918967;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.4456264904402568);
    msg.setSource(45301U);
    msg.setSourceEntity(21U);
    msg.setDestination(31514U);
    msg.setDestinationEntity(176U);
    msg.time = 0.5158194808664439;
    msg.value = 0.9590132184366573;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.5550198205963944);
    msg.setSource(53273U);
    msg.setSourceEntity(52U);
    msg.setDestination(18087U);
    msg.setDestinationEntity(37U);
    msg.time = 0.6114170434186967;
    msg.value = 0.5164722629151958;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.11800231645697412);
    msg.setSource(13109U);
    msg.setSourceEntity(37U);
    msg.setDestination(27951U);
    msg.setDestinationEntity(219U);
    msg.value = 0.12725629425009022;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.5813472020687793);
    msg.setSource(58944U);
    msg.setSourceEntity(157U);
    msg.setDestination(60778U);
    msg.setDestinationEntity(14U);
    msg.value = 0.2796532397286494;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.3014582615756656);
    msg.setSource(56519U);
    msg.setSourceEntity(7U);
    msg.setDestination(45579U);
    msg.setDestinationEntity(237U);
    msg.value = 0.31074269490043904;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.6051161556547171);
    msg.setSource(38075U);
    msg.setSourceEntity(164U);
    msg.setDestination(32984U);
    msg.setDestinationEntity(138U);
    msg.value = 0.6380924876017782;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.030005033243533874);
    msg.setSource(55465U);
    msg.setSourceEntity(226U);
    msg.setDestination(10354U);
    msg.setDestinationEntity(92U);
    msg.value = 0.9529970718400986;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.276911703384348);
    msg.setSource(63626U);
    msg.setSourceEntity(153U);
    msg.setDestination(59610U);
    msg.setDestinationEntity(54U);
    msg.value = 0.5311484535649645;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.08034266834321191);
    msg.setSource(53528U);
    msg.setSourceEntity(146U);
    msg.setDestination(28407U);
    msg.setDestinationEntity(45U);
    msg.value = 0.3804736970662491;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.05792151254183575);
    msg.setSource(62462U);
    msg.setSourceEntity(232U);
    msg.setDestination(7455U);
    msg.setDestinationEntity(86U);
    msg.value = 0.17263067080500438;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.4242203036587954);
    msg.setSource(26819U);
    msg.setSourceEntity(104U);
    msg.setDestination(60422U);
    msg.setDestinationEntity(204U);
    msg.value = 0.163811217582702;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.600101591155351);
    msg.setSource(55699U);
    msg.setSourceEntity(185U);
    msg.setDestination(5024U);
    msg.setDestinationEntity(107U);
    msg.value = 0.8641122957015376;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.1784150517968084);
    msg.setSource(54024U);
    msg.setSourceEntity(41U);
    msg.setDestination(42170U);
    msg.setDestinationEntity(214U);
    msg.value = 0.008938757742663062;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.026718558498104006);
    msg.setSource(25097U);
    msg.setSourceEntity(155U);
    msg.setDestination(51385U);
    msg.setDestinationEntity(165U);
    msg.value = 0.5591701417542682;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.24785117975342785);
    msg.setSource(52252U);
    msg.setSourceEntity(45U);
    msg.setDestination(19159U);
    msg.setDestinationEntity(175U);
    msg.value = 0.8311950493594177;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.41815992712396877);
    msg.setSource(3963U);
    msg.setSourceEntity(19U);
    msg.setDestination(64900U);
    msg.setDestinationEntity(209U);
    msg.value = 0.7119723915331938;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.7879964004023466);
    msg.setSource(13544U);
    msg.setSourceEntity(87U);
    msg.setDestination(37006U);
    msg.setDestinationEntity(181U);
    msg.value = 0.737137727276241;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.14450279347067996);
    msg.setSource(40760U);
    msg.setSourceEntity(11U);
    msg.setDestination(5618U);
    msg.setDestinationEntity(193U);
    msg.value = 0.34397475040487424;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.6752620167723061);
    msg.setSource(3877U);
    msg.setSourceEntity(208U);
    msg.setDestination(42040U);
    msg.setDestinationEntity(238U);
    msg.value = 0.8921909467872243;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.4468973825630628);
    msg.setSource(11174U);
    msg.setSourceEntity(69U);
    msg.setDestination(7894U);
    msg.setDestinationEntity(177U);
    msg.value = 0.3094197214819009;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.7936047826808567);
    msg.setSource(59356U);
    msg.setSourceEntity(242U);
    msg.setDestination(59944U);
    msg.setDestinationEntity(119U);
    msg.value = 0.6079109401998029;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.3753689169555978);
    msg.setSource(19234U);
    msg.setSourceEntity(65U);
    msg.setDestination(34089U);
    msg.setDestinationEntity(152U);
    msg.value = 0.8626489808026797;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.6866638909293721);
    msg.setSource(61967U);
    msg.setSourceEntity(151U);
    msg.setDestination(21092U);
    msg.setDestinationEntity(143U);
    msg.value = 0.3490017902165905;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.5327770895258561);
    msg.setSource(63897U);
    msg.setSourceEntity(208U);
    msg.setDestination(18094U);
    msg.setDestinationEntity(159U);
    msg.direction = 0.8805809442182845;
    msg.speed = 0.27535957667625177;
    msg.turbulence = 0.027475325460170064;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.9664109621452405);
    msg.setSource(10397U);
    msg.setSourceEntity(203U);
    msg.setDestination(49793U);
    msg.setDestinationEntity(90U);
    msg.direction = 0.4270234805616324;
    msg.speed = 0.07169378121238723;
    msg.turbulence = 0.008841530279449894;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.6021017930939513);
    msg.setSource(8321U);
    msg.setSourceEntity(210U);
    msg.setDestination(60U);
    msg.setDestinationEntity(145U);
    msg.direction = 0.4894673917909038;
    msg.speed = 0.0183391486314034;
    msg.turbulence = 0.7919933211940338;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.9946073875327822);
    msg.setSource(30470U);
    msg.setSourceEntity(81U);
    msg.setDestination(47224U);
    msg.setDestinationEntity(39U);
    msg.value = 0.35868719151156514;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.4736557569790334);
    msg.setSource(48720U);
    msg.setSourceEntity(137U);
    msg.setDestination(54800U);
    msg.setDestinationEntity(198U);
    msg.value = 0.9378024806554692;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.03447451170954652);
    msg.setSource(52870U);
    msg.setSourceEntity(55U);
    msg.setDestination(64788U);
    msg.setDestinationEntity(92U);
    msg.value = 0.2861650370738983;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.3755603937867732);
    msg.setSource(48836U);
    msg.setSourceEntity(9U);
    msg.setDestination(2061U);
    msg.setDestinationEntity(34U);
    msg.value.assign("NHVYAXMGFMOXCJMUVJDQCNVIZCBCKGEFREGGLQUWQCAMDENGIBYGXWLIBTKOIJHWROSURXTRLBBTKWZWQPLIEVMCVKDDQADOMUFRNXANCSNAIVJMHYPIZYBRICUZHVYGWUOKJTIZGNAQLPSJHHUEGLXETSQXTQFANSZQHPSJYFXAFKHLYNUZWOKPVTJEEFDRKZO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.7688674999820794);
    msg.setSource(16637U);
    msg.setSourceEntity(237U);
    msg.setDestination(37852U);
    msg.setDestinationEntity(127U);
    msg.value.assign("HSVYYGELTOQUFUQFXVAXVSVCIZAYRQHRPCBSOUDULNQWNFHETDGHUDJJSTWZJQOOULNCRPTQPXLPTEFIXJTMBHYXAAQEIUSIHVRLVJWUCWWZWPEDXMOCFDDBKGWJJAZBQOEKICPWVAZLMSPXLZDIWDBFFNPMENSPBGCAJGRBAUQHSKKRGTJEINGGMDBXGMNTRMYLYKIOUOMBKLIFRVXDOBMXKZYNCTRSFTEYOQLMZNKHCHCSH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.1309058850889011);
    msg.setSource(26647U);
    msg.setSourceEntity(177U);
    msg.setDestination(23719U);
    msg.setDestinationEntity(175U);
    msg.value.assign("CHWEVYJOTCRHAQKDPWJYAXIONEWZWGTBZCZYZHEXAUZSLFDIRGKOIURAYTPTHVSIQCYXCFFMNCFGSXJTMLDJSLVSZVQRKJLYXDGRIHFPITQDJEXTDKXYCALINVUNOBRMDIA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.775083315219142);
    msg.setSource(14670U);
    msg.setSourceEntity(249U);
    msg.setDestination(23185U);
    msg.setDestinationEntity(208U);
    const signed char tmp_msg_0[] = {11, -21, -24, -113, 104, -100, 114, -17, 42, -70, -31, 32, 64, 85, -5, -48, 48, 84, -120, -73, -6, 23, -41, -95, 121, 73, -18, -109, 30, 32, -23, 56, 79, -97, 13, 77, 84, 61, -63, -39, 13, -50, 2, -119, -2, -83, 89, -8, -110, -117, 67, 70, -46, 30, 120, 46, -5, -92, 27, -60, 90, 82, -55, 40, 35, -118, -96, -85, 121, 115, -92, 114, 30, 84, 89};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.5686745186766875);
    msg.setSource(22895U);
    msg.setSourceEntity(154U);
    msg.setDestination(45620U);
    msg.setDestinationEntity(63U);
    const signed char tmp_msg_0[] = {-26, 33, 68, 16, 123, 44, 49, -115, -55, -103, 105, -125, 109, -10, 7, -1, -25, 55, 58, 119, -95, -113, 121, -46, -110, 5, 26, 71, -119, -62, -108, 93, 5, 108, 99, 11, 116, -69, 33, -47, -4, -29, 47, -95, -107, -70, 68, 2, 68, -45, 90, 92, 43, -47, -22, 39, -115, -113, -58, -20, 52, -4, -81, 9, -65, -43, -21, 107, 12, -15, 10, 16, -58, -70, -91, -64, 76, 75, -3, 103, -47, 18, -110, -41, -35, -14, -4, 66, 63, 97, -110, -45, -52, 50, 97, -128, -73, -76, -128, -81, 40, 38, 80, -40, 43, 91, -15, 107, -101, 14, 7, 60, -9, 58, -94, -73, 122, 120, 54, 61, -67, -83, -51, 118, 93, -22, 122, 69, 58, -124, -85, 125, -8, -105, 126, -9, -93, -109, 10, -58, 49, 52, 36, -48, 27, 93, -53, -60, -13, -52, -93, 100, -108, -28, 30, -79, 27, -127, 65, 79, 11, 118, 29, 123, -38, -66, -11, -17, -29, 36, 120, -36, -49, 38, 96, -88, -33, 22, -97, -83, 56, 56, -53, -51, 96, 111, -124, -8, 74, 47, 91, 120, 97, -44, 24, -17, -79, 22, 95, -102, 122, -74, 39, -103, 43, -66, 45, -105, -4, -95, -102, -97, -26, 104, 30, 68, 100, -101, -99, -108, -109, -112, -6, 114, -48, 117, -112};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.5358297160718666);
    msg.setSource(22132U);
    msg.setSourceEntity(244U);
    msg.setDestination(21618U);
    msg.setDestinationEntity(151U);
    const signed char tmp_msg_0[] = {-39, -85, 45, 96, -103, -64, -56, 39, -53, 55, 18, 11, -34, 28, 89, 117, 55, 15, -96, -84, -18, 57, 90, -13, 75, -25, 43, 54, 38, -113, -29, 41, -48, 32, 37, 34, -33, -18, 124, 68, 86, 93, -128, -38, 57, -62, -82, 110, 7, -86, -127, -126, -64, -5, -92, 90, 106, -91, 109, -108, 94, 51, 89, 98, 73, -22, -120, 102, 11, 1, 20, -45, -6, -83, 119, 55, -99, -41, -46, 71, -91, 57, -77, 75, 123, 123, 10, -21, -44, -33, 102, -3, -4, 70, -103, 10, 112, -100, 58, -86, -96, -65, -21, 103, 29, 50, 20, 42, 59, 74, -25, 13, -101, 44, 107, 45, 29, 71, 50, 52, -54, -55, 113, -31, -122, 51, -12, 84, 7, 100, 99, 53, -91, -31, 94, 13, 23, -110, 30, 17, -42, 84, -43, 114, 111, 104, 4, -103, -43, -9, -45, -107, -122, 91, 123, 111, -122, -7, -17, -18, -49, -102, -21, -84, 29, 80, -6, -87, 89, -74, 40, -42, 31, -36, 3, 52, -109, 113, 16, 92, 84, 86, -66, -12, -53, 51, -76, 72, 42, -10, -1, 89, -96, 16, -83, 62, -80, -96, -63, -14, -2, 16};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.08856345995143466);
    msg.setSource(44554U);
    msg.setSourceEntity(86U);
    msg.setDestination(27652U);
    msg.setDestinationEntity(131U);
    msg.value = 0.049902511209822475;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.2810831394203993);
    msg.setSource(22419U);
    msg.setSourceEntity(120U);
    msg.setDestination(11202U);
    msg.setDestinationEntity(77U);
    msg.value = 0.9403222719649389;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.2994855018346281);
    msg.setSource(65293U);
    msg.setSourceEntity(12U);
    msg.setDestination(53875U);
    msg.setDestinationEntity(12U);
    msg.value = 0.3716969167842922;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.10722312934317668);
    msg.setSource(43093U);
    msg.setSourceEntity(172U);
    msg.setDestination(5531U);
    msg.setDestinationEntity(51U);
    msg.type = 238U;
    msg.frequency = 2059907441U;
    msg.min_range = 36779U;
    msg.max_range = 35283U;
    msg.bits_per_point = 30U;
    msg.scale_factor = 0.6869214536627677;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.9577691862647103;
    tmp_msg_0.beam_height = 0.26121165977692085;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {-85, 26, -39, 40, 45, 22, -84, 97, 49, 125, 82, -27, -56, -120, 96, 36, -3, -54, 75, -40, 110, 49, -71, 74, 92, 78, 22, -31, -117, -79, 121, -57, 15, 17, -10, 84, 126, -48, 33, -82, -42, -79, -4, 59, -75, -107, -107, -78, 11, 30, 20, -37, -23, -51, 88, 125, -7, 81, 24, -24, -78, -83, 9, 54, 94, -38, 11, -2, 117, 64, -45, -88, 12, 3, 62, 60, 42, -99, -37, -60, -19, 110, 49, -67, 30, 57, 78, -124, -37, -45, 15, -50, 106, 69, 93, 100, -82, -128, 2, 61, -42, 51, -49, -57, -84, 84, -56, -90, -47, 82, -6, -128, 87, -5, 15, 101, -64, -77, -36, -14, -45, -28, -32, 77, -68, 98, 73, -30, 34, -103, 37, 71, 55, 0, 51, 121, -27, -112, -77, -100, 91, -33, -28, 70, -42, 86, 9, 9, 102, 103, -84, -71, -110, 12, -113, 77, 34, 91, 1, -105, -56, -125, 72, -24, -19, -34, 20, -106, 89, 12, -40, -18, -24, -64, -32, 106, 92, -97, 13, -56, 76, -54, 87, -22, 52, -105, 49, 24, -19, 104, -121, -123, 100, 56, -61, -60, 68, -89, -45, -23, 67, 16, 99, -49, 41, 24, -82, 24, 42, -88, 100, 114, 75, 125, -42, 10, 116, -96, -76};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.002115919802120003);
    msg.setSource(10713U);
    msg.setSourceEntity(120U);
    msg.setDestination(43886U);
    msg.setDestinationEntity(219U);
    msg.type = 51U;
    msg.frequency = 840377749U;
    msg.min_range = 18419U;
    msg.max_range = 54071U;
    msg.bits_per_point = 232U;
    msg.scale_factor = 0.2912238569638954;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.9442250634448285;
    tmp_msg_0.beam_height = 0.3278641622869486;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {-121, 107, 47, 83, -52, -106, 67, 85, 87, 11, -4, -128, 40, -87, 50, 77, -52, -109, -8, -63, 32, -49, -70, 60, 113, 113, -91, -45, -78, -78, -68, 81, 94, -79, -75, 118, -107, 24, -14, 44, 19, -102, 18, 107, -80, 55, 30, 117, -36, 119, 55, -58, 24, -60, -33, -107, 27, -54, 19, 122, 1, 77, -108, -125, 18, 43, 71, -31, -14, -29, -58, 84, -93, 76, 118, -56, 118, 79, 47, -75, -38, 41, -49, 97, 66, 43, 1, -40, -105, -32, 16, 14, -18, 14, -28, -10, 95, 20, 97, -33, 65, 13, -107, -11, -97, -66, -18, -54, -3, -2, -108, 29, 107, -122, -11, -81, -48, -1, 57, -8, 102, -127, 70, 30, -100, -85, -128, -57, -71, 105, 55, -93, -83, -54, 2, -120, -80, 28, 105, -65, 106, 55, -26, -16, -119, -111, -6, -10, 17, 0, -72, 124, 89, 20, 90};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.7892879566350728);
    msg.setSource(20818U);
    msg.setSourceEntity(206U);
    msg.setDestination(25821U);
    msg.setDestinationEntity(190U);
    msg.type = 201U;
    msg.frequency = 1248481299U;
    msg.min_range = 22240U;
    msg.max_range = 15574U;
    msg.bits_per_point = 227U;
    msg.scale_factor = 0.29607966932245977;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.7468938875994316;
    tmp_msg_0.beam_height = 0.7314808819911731;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {-126, -94, 20, -40, -105, 95, -49, 34, 53, -41, -37, -56, -84, -85, 125, 105, -86, -100, 11, -4, -96, -2, -66, -67, 62, -115, 102, -75, 64, -88, -124, -68, -49, 23, 55, -59, -66, 64, -28};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.6828711151081667);
    msg.setSource(44316U);
    msg.setSourceEntity(17U);
    msg.setDestination(48484U);
    msg.setDestinationEntity(74U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.04111355812045869);
    msg.setSource(57432U);
    msg.setSourceEntity(215U);
    msg.setDestination(34365U);
    msg.setDestinationEntity(7U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.3705181742817941);
    msg.setSource(4136U);
    msg.setSourceEntity(143U);
    msg.setDestination(5611U);
    msg.setDestinationEntity(176U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.9505585824732019);
    msg.setSource(22461U);
    msg.setSourceEntity(52U);
    msg.setDestination(6117U);
    msg.setDestinationEntity(155U);
    msg.op = 182U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.9742855180928112);
    msg.setSource(42380U);
    msg.setSourceEntity(109U);
    msg.setDestination(23553U);
    msg.setDestinationEntity(30U);
    msg.op = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.6022736174978945);
    msg.setSource(63133U);
    msg.setSourceEntity(146U);
    msg.setDestination(2002U);
    msg.setDestinationEntity(30U);
    msg.op = 157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.6205687285262877);
    msg.setSource(17634U);
    msg.setSourceEntity(136U);
    msg.setDestination(14487U);
    msg.setDestinationEntity(192U);
    msg.value = 0.8971634648199144;
    msg.confidence = 0.3796701130263649;
    msg.opmodes.assign("KJIBCNJVZLEYWATFDNBYCVUOFKLUGIPRGQWWZSFJLTOJTMFVSWDZRAOYYJQRMOUIMPSPZKTXHSYFHNPUKSHUDBBDYBIWDXPQQSXKVEJCAFRSQR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.9841107214310176);
    msg.setSource(10131U);
    msg.setSourceEntity(87U);
    msg.setDestination(7242U);
    msg.setDestinationEntity(218U);
    msg.value = 0.7816628663540706;
    msg.confidence = 0.9208582605714803;
    msg.opmodes.assign("UFKFUTCCQYQGFNVFSEPBLZWKFLJRWOTZEXBICBXVHPQUDTMYUYEPKQDNCJMDXOPAYBOVHFRXYOIQHAJQHCCXPGZTVUKBNZJUZIOIDKTXARSPNSEVIVXWMMYXWGCHBMOPYWZDIHRERDC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.6869002931381029);
    msg.setSource(57669U);
    msg.setSourceEntity(110U);
    msg.setDestination(22755U);
    msg.setDestinationEntity(50U);
    msg.value = 0.08634415205003809;
    msg.confidence = 0.21921550408391566;
    msg.opmodes.assign("OCNJEPOMZJODSIUUSPNXXARXUAXQFNJMEYDNIJRBPZMNTVOWLKLRFCDWKXBOHGRQBRAYUNSWXWITFKJZJUCVHYYFOFSZFQLPKEPGHCMKIOWGQRFXOQQGATNVSGYAASJIWBTBARSVTCWHUPTDEVKDKLSYRDLPHYYCMAEHRAKUIEHVEQZGOBBMZLMLZWNYGILMAVIEDDHBCLDIXIQBMPYWZRJEPCZNGJQLGSKUXVEKSFQVUHTJFTVCZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.5840455572256853);
    msg.setSource(21941U);
    msg.setSourceEntity(197U);
    msg.setDestination(24614U);
    msg.setDestinationEntity(214U);
    msg.itow = 482255927U;
    msg.lat = 0.30121833952587307;
    msg.lon = 0.5972913350852673;
    msg.height_ell = 0.6978468596977445;
    msg.height_sea = 0.9692470237945856;
    msg.hacc = 0.13283022439589642;
    msg.vacc = 0.6057026901735636;
    msg.vel_n = 0.016221240112366142;
    msg.vel_e = 0.14964393182884816;
    msg.vel_d = 0.7522916784881407;
    msg.speed = 0.4388481509689207;
    msg.gspeed = 0.6078315139911649;
    msg.heading = 0.7155707108688283;
    msg.sacc = 0.45640970193523567;
    msg.cacc = 0.018145222346983347;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.040445206790873156);
    msg.setSource(18374U);
    msg.setSourceEntity(16U);
    msg.setDestination(38773U);
    msg.setDestinationEntity(36U);
    msg.itow = 479476933U;
    msg.lat = 0.3211671107064077;
    msg.lon = 0.15200976273809885;
    msg.height_ell = 0.49061475153481493;
    msg.height_sea = 0.3825406684970982;
    msg.hacc = 0.5264768332636259;
    msg.vacc = 0.6535017581039281;
    msg.vel_n = 0.9708229092563609;
    msg.vel_e = 0.8601527178763422;
    msg.vel_d = 0.661067057295829;
    msg.speed = 0.11155653111650832;
    msg.gspeed = 0.7589527639117297;
    msg.heading = 0.2473377665450257;
    msg.sacc = 0.8063307076976296;
    msg.cacc = 0.016317454835378276;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.3550284713338302);
    msg.setSource(19335U);
    msg.setSourceEntity(45U);
    msg.setDestination(45675U);
    msg.setDestinationEntity(91U);
    msg.itow = 4007880774U;
    msg.lat = 0.46119346569094744;
    msg.lon = 0.6031774463505184;
    msg.height_ell = 0.10666476688160054;
    msg.height_sea = 0.7882953900635291;
    msg.hacc = 0.030515028025980273;
    msg.vacc = 0.36121662238988217;
    msg.vel_n = 0.7391137498666931;
    msg.vel_e = 0.5718996665856441;
    msg.vel_d = 0.7608253064236797;
    msg.speed = 0.2346940681094768;
    msg.gspeed = 0.23043002466137863;
    msg.heading = 0.011888110212945002;
    msg.sacc = 0.7968523052282296;
    msg.cacc = 0.9854175452815331;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.0661792267729493);
    msg.setSource(22926U);
    msg.setSourceEntity(20U);
    msg.setDestination(27694U);
    msg.setDestinationEntity(230U);
    msg.id = 41U;
    msg.value = 0.24144166531376454;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.7212336634153816);
    msg.setSource(6812U);
    msg.setSourceEntity(213U);
    msg.setDestination(48861U);
    msg.setDestinationEntity(154U);
    msg.id = 11U;
    msg.value = 0.7602179558214273;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.4376508459184377);
    msg.setSource(23001U);
    msg.setSourceEntity(93U);
    msg.setDestination(12150U);
    msg.setDestinationEntity(8U);
    msg.id = 110U;
    msg.value = 0.7940723331423581;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.06808892472759798);
    msg.setSource(10552U);
    msg.setSourceEntity(170U);
    msg.setDestination(6927U);
    msg.setDestinationEntity(140U);
    msg.x = 0.5012136422019224;
    msg.y = 0.5428526176939145;
    msg.z = 0.5761372399999983;
    msg.phi = 0.6747911954440654;
    msg.theta = 0.012006409377334326;
    msg.psi = 0.4448863033155206;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.9674014207418141);
    msg.setSource(33604U);
    msg.setSourceEntity(231U);
    msg.setDestination(27173U);
    msg.setDestinationEntity(122U);
    msg.x = 0.1820807536602983;
    msg.y = 0.45911301774581603;
    msg.z = 0.9425154979982887;
    msg.phi = 0.37044291958544906;
    msg.theta = 0.2674973733718685;
    msg.psi = 0.22347161688752037;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.7400925698143052);
    msg.setSource(31212U);
    msg.setSourceEntity(191U);
    msg.setDestination(61806U);
    msg.setDestinationEntity(5U);
    msg.x = 0.39013508685261655;
    msg.y = 0.07513059438286895;
    msg.z = 0.4850491135763192;
    msg.phi = 0.4813143187006198;
    msg.theta = 0.006016328902529455;
    msg.psi = 0.7486695186724064;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.3223738348540621);
    msg.setSource(26143U);
    msg.setSourceEntity(122U);
    msg.setDestination(61963U);
    msg.setDestinationEntity(202U);
    msg.beam_width = 0.8516255687862784;
    msg.beam_height = 0.647341778557311;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.5615360359239331);
    msg.setSource(54058U);
    msg.setSourceEntity(233U);
    msg.setDestination(8132U);
    msg.setDestinationEntity(42U);
    msg.beam_width = 0.2508161123568796;
    msg.beam_height = 0.5675862242673755;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.7067448602055096);
    msg.setSource(58663U);
    msg.setSourceEntity(123U);
    msg.setDestination(23897U);
    msg.setDestinationEntity(86U);
    msg.beam_width = 0.6448774436512275;
    msg.beam_height = 0.8026834426311215;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.15348021654167687);
    msg.setSource(46950U);
    msg.setSourceEntity(185U);
    msg.setDestination(63784U);
    msg.setDestinationEntity(182U);
    msg.sane = 74U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.38274181497630944);
    msg.setSource(2438U);
    msg.setSourceEntity(98U);
    msg.setDestination(1126U);
    msg.setDestinationEntity(20U);
    msg.sane = 100U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.6641667551653088);
    msg.setSource(38528U);
    msg.setSourceEntity(254U);
    msg.setDestination(63062U);
    msg.setDestinationEntity(157U);
    msg.sane = 206U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.24424930209935936);
    msg.setSource(43657U);
    msg.setSourceEntity(161U);
    msg.setDestination(57414U);
    msg.setDestinationEntity(216U);
    msg.value = 0.6903408472374829;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.9449515760942866);
    msg.setSource(26443U);
    msg.setSourceEntity(93U);
    msg.setDestination(35148U);
    msg.setDestinationEntity(177U);
    msg.value = 0.9613471663510448;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.500830618915912);
    msg.setSource(49582U);
    msg.setSourceEntity(80U);
    msg.setDestination(11101U);
    msg.setDestinationEntity(215U);
    msg.value = 0.6886774819176219;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.28583303154374173);
    msg.setSource(58637U);
    msg.setSourceEntity(21U);
    msg.setDestination(17679U);
    msg.setDestinationEntity(107U);
    msg.value = 0.1832969281899669;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.564025970002093);
    msg.setSource(10191U);
    msg.setSourceEntity(51U);
    msg.setDestination(51871U);
    msg.setDestinationEntity(173U);
    msg.value = 0.8476569810126261;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.07708813799020608);
    msg.setSource(58027U);
    msg.setSourceEntity(115U);
    msg.setDestination(31274U);
    msg.setDestinationEntity(124U);
    msg.value = 0.5351037942325946;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.3650117402449572);
    msg.setSource(48180U);
    msg.setSourceEntity(176U);
    msg.setDestination(11720U);
    msg.setDestinationEntity(20U);
    msg.value = 0.998247779259575;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.8806069534975545);
    msg.setSource(45061U);
    msg.setSourceEntity(1U);
    msg.setDestination(27458U);
    msg.setDestinationEntity(247U);
    msg.value = 0.8331167142671727;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.509597036193636);
    msg.setSource(11541U);
    msg.setSourceEntity(240U);
    msg.setDestination(38915U);
    msg.setDestinationEntity(238U);
    msg.value = 0.2383963672411713;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.7517538684138289);
    msg.setSource(26230U);
    msg.setSourceEntity(194U);
    msg.setDestination(4075U);
    msg.setDestinationEntity(243U);
    msg.value = 0.18773489091701712;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.013213142586077753);
    msg.setSource(35762U);
    msg.setSourceEntity(28U);
    msg.setDestination(51712U);
    msg.setDestinationEntity(9U);
    msg.value = 0.8732990594823774;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.06010467042389389);
    msg.setSource(58848U);
    msg.setSourceEntity(200U);
    msg.setDestination(1844U);
    msg.setDestinationEntity(236U);
    msg.value = 0.91438574816964;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.9752486658935621);
    msg.setSource(59496U);
    msg.setSourceEntity(147U);
    msg.setDestination(5977U);
    msg.setDestinationEntity(223U);
    msg.value = 0.7771879852504421;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.5581626657873295);
    msg.setSource(38543U);
    msg.setSourceEntity(123U);
    msg.setDestination(4926U);
    msg.setDestinationEntity(145U);
    msg.value = 0.8878516900940199;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.849008573517142);
    msg.setSource(52244U);
    msg.setSourceEntity(106U);
    msg.setDestination(11570U);
    msg.setDestinationEntity(206U);
    msg.value = 0.2529729146763048;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.3273145132429981);
    msg.setSource(54769U);
    msg.setSourceEntity(38U);
    msg.setDestination(56383U);
    msg.setDestinationEntity(220U);
    msg.value = 0.3128251301692564;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.581448713621642);
    msg.setSource(39641U);
    msg.setSourceEntity(69U);
    msg.setDestination(38568U);
    msg.setDestinationEntity(9U);
    msg.value = 0.38465160502600404;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.9025788662714995);
    msg.setSource(50427U);
    msg.setSourceEntity(200U);
    msg.setDestination(30400U);
    msg.setDestinationEntity(12U);
    msg.value = 0.8996863318678805;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.15223129814740233);
    msg.setSource(17752U);
    msg.setSourceEntity(12U);
    msg.setDestination(10758U);
    msg.setDestinationEntity(244U);
    msg.value = 0.5325157706223208;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.5244414603459968);
    msg.setSource(65361U);
    msg.setSourceEntity(158U);
    msg.setDestination(21594U);
    msg.setDestinationEntity(116U);
    msg.value = 0.9796007743115991;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.3625377119264196);
    msg.setSource(11299U);
    msg.setSourceEntity(216U);
    msg.setDestination(48917U);
    msg.setDestinationEntity(119U);
    msg.value = 0.2443212169314669;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.06399638475026637);
    msg.setSource(34826U);
    msg.setSourceEntity(254U);
    msg.setDestination(14360U);
    msg.setDestinationEntity(98U);
    msg.value = 0.29200427679212504;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.19803547962711254);
    msg.setSource(46541U);
    msg.setSourceEntity(170U);
    msg.setDestination(54197U);
    msg.setDestinationEntity(52U);
    msg.value = 0.3930540324323757;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.38412477285550517);
    msg.setSource(35390U);
    msg.setSourceEntity(142U);
    msg.setDestination(2662U);
    msg.setDestinationEntity(211U);
    msg.value = 0.3229700824635744;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.41026405326212256);
    msg.setSource(37767U);
    msg.setSourceEntity(136U);
    msg.setDestination(60724U);
    msg.setDestinationEntity(61U);
    msg.validity = 7449U;
    msg.type = 217U;
    msg.tow = 2474463191U;
    msg.base_lat = 0.138688806395322;
    msg.base_lon = 0.7910679072649478;
    msg.base_height = 0.5113170375596223;
    msg.n = 0.014640794553223868;
    msg.e = 0.3169634005189125;
    msg.d = 0.5632526518066314;
    msg.v_n = 0.14272468900504098;
    msg.v_e = 0.32118480253863746;
    msg.v_d = 0.9503049784588852;
    msg.satellites = 48U;
    msg.iar_hyp = 36203U;
    msg.iar_ratio = 0.8376715343391926;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.852259611821529);
    msg.setSource(35431U);
    msg.setSourceEntity(34U);
    msg.setDestination(9116U);
    msg.setDestinationEntity(165U);
    msg.validity = 17779U;
    msg.type = 44U;
    msg.tow = 4066109808U;
    msg.base_lat = 0.36406239591079703;
    msg.base_lon = 0.08839192746831426;
    msg.base_height = 0.940885426899338;
    msg.n = 0.770950208105254;
    msg.e = 0.4593060183070473;
    msg.d = 0.29364394020265794;
    msg.v_n = 0.7353134389835025;
    msg.v_e = 0.8168230430917898;
    msg.v_d = 0.13488035079269944;
    msg.satellites = 210U;
    msg.iar_hyp = 42225U;
    msg.iar_ratio = 0.4798898656333379;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.044527058172518674);
    msg.setSource(23727U);
    msg.setSourceEntity(109U);
    msg.setDestination(17101U);
    msg.setDestinationEntity(169U);
    msg.validity = 37278U;
    msg.type = 18U;
    msg.tow = 124317019U;
    msg.base_lat = 0.4694661636191301;
    msg.base_lon = 0.2534357533735139;
    msg.base_height = 0.6749093520311803;
    msg.n = 0.985113241978743;
    msg.e = 0.03594716143092913;
    msg.d = 0.5440292302582854;
    msg.v_n = 0.4300343209248133;
    msg.v_e = 0.9665973639726668;
    msg.v_d = 0.14225451536983957;
    msg.satellites = 191U;
    msg.iar_hyp = 2288U;
    msg.iar_ratio = 0.5194716267982594;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.5497463580645293);
    msg.setSource(55748U);
    msg.setSourceEntity(31U);
    msg.setDestination(62861U);
    msg.setDestinationEntity(113U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.5132913805351746;
    tmp_msg_0.lon = 0.9472233947300635;
    tmp_msg_0.height = 0.1089562656931986;
    tmp_msg_0.x = 0.9645262074093364;
    tmp_msg_0.y = 0.480268701785144;
    tmp_msg_0.z = 0.7440545844883296;
    tmp_msg_0.phi = 0.16631194109960246;
    tmp_msg_0.theta = 0.3155485596501869;
    tmp_msg_0.psi = 0.3799187775671884;
    tmp_msg_0.u = 0.3771285398694506;
    tmp_msg_0.v = 0.4128974323153364;
    tmp_msg_0.w = 0.011119434768993797;
    tmp_msg_0.vx = 0.4352585500680579;
    tmp_msg_0.vy = 0.9193095802236781;
    tmp_msg_0.vz = 0.27781384797552366;
    tmp_msg_0.p = 0.9436958946735003;
    tmp_msg_0.q = 0.6057113332389036;
    tmp_msg_0.r = 0.4433792851515638;
    tmp_msg_0.depth = 0.6210132877797566;
    tmp_msg_0.alt = 0.8910583400090295;
    msg.state.set(tmp_msg_0);
    msg.type = 83U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.30851011915810944);
    msg.setSource(7776U);
    msg.setSourceEntity(46U);
    msg.setDestination(39839U);
    msg.setDestinationEntity(179U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.31315539957034044;
    tmp_msg_0.lon = 0.5259512493433837;
    tmp_msg_0.height = 0.850644343361187;
    tmp_msg_0.x = 0.06819091107004838;
    tmp_msg_0.y = 0.054060934946449035;
    tmp_msg_0.z = 0.5730311738080409;
    tmp_msg_0.phi = 0.50965370424999;
    tmp_msg_0.theta = 0.3776569710383174;
    tmp_msg_0.psi = 0.40884101225435654;
    tmp_msg_0.u = 0.4093583955195367;
    tmp_msg_0.v = 0.4744063323369966;
    tmp_msg_0.w = 0.7281969143829659;
    tmp_msg_0.vx = 0.03353141911207569;
    tmp_msg_0.vy = 0.13742976490460412;
    tmp_msg_0.vz = 0.49597508575934757;
    tmp_msg_0.p = 0.8519855023669278;
    tmp_msg_0.q = 0.06493671459525785;
    tmp_msg_0.r = 0.8866490132575042;
    tmp_msg_0.depth = 0.04432893194006293;
    tmp_msg_0.alt = 0.3385278263976287;
    msg.state.set(tmp_msg_0);
    msg.type = 233U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.47347193315096103);
    msg.setSource(19245U);
    msg.setSourceEntity(106U);
    msg.setDestination(19708U);
    msg.setDestinationEntity(119U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.8185894070677993;
    tmp_msg_0.lon = 0.2049017450889613;
    tmp_msg_0.height = 0.6251088399011026;
    tmp_msg_0.x = 0.6575117696505117;
    tmp_msg_0.y = 0.657479884638177;
    tmp_msg_0.z = 0.8602640357970738;
    tmp_msg_0.phi = 0.08766950523904793;
    tmp_msg_0.theta = 0.9041898831090708;
    tmp_msg_0.psi = 0.8250485027066942;
    tmp_msg_0.u = 0.6061071820064248;
    tmp_msg_0.v = 0.167637168803912;
    tmp_msg_0.w = 0.827426684297136;
    tmp_msg_0.vx = 0.7560810617090705;
    tmp_msg_0.vy = 0.27999836058175276;
    tmp_msg_0.vz = 0.004003920892088786;
    tmp_msg_0.p = 0.4077875713728234;
    tmp_msg_0.q = 0.2728009906217186;
    tmp_msg_0.r = 0.27081760697333324;
    tmp_msg_0.depth = 0.09521012231307568;
    tmp_msg_0.alt = 0.660813483744872;
    msg.state.set(tmp_msg_0);
    msg.type = 67U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.8606706822926228);
    msg.setSource(16456U);
    msg.setSourceEntity(3U);
    msg.setDestination(18184U);
    msg.setDestinationEntity(197U);
    msg.value = 0.16810780250179702;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.9582212303354675);
    msg.setSource(5763U);
    msg.setSourceEntity(49U);
    msg.setDestination(10514U);
    msg.setDestinationEntity(1U);
    msg.value = 0.052008364555617304;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.30340501511164586);
    msg.setSource(43558U);
    msg.setSourceEntity(123U);
    msg.setDestination(27505U);
    msg.setDestinationEntity(78U);
    msg.value = 0.6595285159257143;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.2303798410200153);
    msg.setSource(42848U);
    msg.setSourceEntity(146U);
    msg.setDestination(38556U);
    msg.setDestinationEntity(37U);
    msg.value = 0.635236675965075;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.37176634597302216);
    msg.setSource(10801U);
    msg.setSourceEntity(230U);
    msg.setDestination(29352U);
    msg.setDestinationEntity(234U);
    msg.value = 0.6340844965015282;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.4192367707369421);
    msg.setSource(31737U);
    msg.setSourceEntity(122U);
    msg.setDestination(55280U);
    msg.setDestinationEntity(98U);
    msg.value = 0.6492656182806968;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.058858366628208425);
    msg.setSource(60009U);
    msg.setSourceEntity(239U);
    msg.setDestination(46331U);
    msg.setDestinationEntity(225U);
    msg.value = 0.9081328226865377;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.8108843552971284);
    msg.setSource(40744U);
    msg.setSourceEntity(81U);
    msg.setDestination(63763U);
    msg.setDestinationEntity(227U);
    msg.value = 0.1826153386679037;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.5816070806226905);
    msg.setSource(24822U);
    msg.setSourceEntity(17U);
    msg.setDestination(34052U);
    msg.setDestinationEntity(4U);
    msg.value = 0.020960387700878713;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.35208986348009264);
    msg.setSource(19243U);
    msg.setSourceEntity(28U);
    msg.setDestination(18485U);
    msg.setDestinationEntity(77U);
    msg.value = 0.054690486455043374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.9431967658130391);
    msg.setSource(4006U);
    msg.setSourceEntity(94U);
    msg.setDestination(2679U);
    msg.setDestinationEntity(69U);
    msg.value = 0.41820157675992276;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.30078544198701906);
    msg.setSource(61485U);
    msg.setSourceEntity(79U);
    msg.setDestination(12086U);
    msg.setDestinationEntity(44U);
    msg.value = 0.21017093558714894;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.8572879906163782);
    msg.setSource(10750U);
    msg.setSourceEntity(8U);
    msg.setDestination(47422U);
    msg.setDestinationEntity(61U);
    msg.value = 0.8334612434369155;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.682035869679908);
    msg.setSource(15954U);
    msg.setSourceEntity(228U);
    msg.setDestination(54499U);
    msg.setDestinationEntity(135U);
    msg.value = 0.7129188144378712;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.7048832764047521);
    msg.setSource(41659U);
    msg.setSourceEntity(146U);
    msg.setDestination(37578U);
    msg.setDestinationEntity(144U);
    msg.value = 0.01663642392904019;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.07276382013742111);
    msg.setSource(58697U);
    msg.setSourceEntity(16U);
    msg.setDestination(42410U);
    msg.setDestinationEntity(240U);
    msg.id = 123U;
    msg.zoom = 192U;
    msg.action = 237U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.8276316876349733);
    msg.setSource(11972U);
    msg.setSourceEntity(225U);
    msg.setDestination(5004U);
    msg.setDestinationEntity(117U);
    msg.id = 103U;
    msg.zoom = 9U;
    msg.action = 167U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.40979743499856613);
    msg.setSource(10808U);
    msg.setSourceEntity(23U);
    msg.setDestination(43222U);
    msg.setDestinationEntity(208U);
    msg.id = 70U;
    msg.zoom = 227U;
    msg.action = 196U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.973128165522982);
    msg.setSource(41068U);
    msg.setSourceEntity(201U);
    msg.setDestination(41197U);
    msg.setDestinationEntity(164U);
    msg.id = 140U;
    msg.value = 0.7249105387014021;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.459480165788117);
    msg.setSource(77U);
    msg.setSourceEntity(102U);
    msg.setDestination(22191U);
    msg.setDestinationEntity(235U);
    msg.id = 242U;
    msg.value = 0.614989024163933;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.7993749557885786);
    msg.setSource(22304U);
    msg.setSourceEntity(124U);
    msg.setDestination(56768U);
    msg.setDestinationEntity(115U);
    msg.id = 166U;
    msg.value = 0.12124762309609782;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.7074097207405642);
    msg.setSource(20762U);
    msg.setSourceEntity(147U);
    msg.setDestination(18345U);
    msg.setDestinationEntity(102U);
    msg.id = 23U;
    msg.value = 0.3136136891847585;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.78509033912842);
    msg.setSource(50544U);
    msg.setSourceEntity(81U);
    msg.setDestination(23862U);
    msg.setDestinationEntity(134U);
    msg.id = 155U;
    msg.value = 0.5665165871774388;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.18508697275832486);
    msg.setSource(58353U);
    msg.setSourceEntity(200U);
    msg.setDestination(5022U);
    msg.setDestinationEntity(199U);
    msg.id = 120U;
    msg.value = 0.43749890705424266;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.2267227698172769);
    msg.setSource(60157U);
    msg.setSourceEntity(85U);
    msg.setDestination(21619U);
    msg.setDestinationEntity(238U);
    msg.id = 127U;
    msg.angle = 0.6770132947791726;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.2583930560278489);
    msg.setSource(8912U);
    msg.setSourceEntity(233U);
    msg.setDestination(10222U);
    msg.setDestinationEntity(199U);
    msg.id = 32U;
    msg.angle = 0.5673724149311622;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.4540159033851252);
    msg.setSource(14928U);
    msg.setSourceEntity(116U);
    msg.setDestination(49669U);
    msg.setDestinationEntity(65U);
    msg.id = 238U;
    msg.angle = 0.6939685499106403;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.3679820307994778);
    msg.setSource(58502U);
    msg.setSourceEntity(174U);
    msg.setDestination(316U);
    msg.setDestinationEntity(42U);
    msg.op = 86U;
    msg.actions.assign("EXQKVTLNYRRBBOMGHBUQQEDTAMSPZTCSGFZZJBJONXRJSNQDWWKPZEJGFVHPQTWURYSWFEAEALONQLXTKYVFXISHIJQCBXBWZBHGNTNCMKTMCZTMKMGOUXTXLZDIYMXVDYRPBPYRAVAXKNVUEYWGAVLUJY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.6233031939910239);
    msg.setSource(56453U);
    msg.setSourceEntity(180U);
    msg.setDestination(60153U);
    msg.setDestinationEntity(136U);
    msg.op = 168U;
    msg.actions.assign("CZYIRWTGRRCNKKVGZXTGWEKQXABMDSMQPXOUYTAPDQQFLNNUIRJSMBILPVNBBGIWCUZHGYUKXGVNUOHJOJJAWHCCFGRHADQBZCTFFTQZVEHPHSTTUFLESIQLCVEOYQJJHZBDANSIDWTYLVFOXMVECGYTFMXPDMRAJAXKHABIMXIYGJPLPTVXLWWULYEOGJRHFZBXFEQZKYDBKKFAEBLOYVWUUM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.4436998172917137);
    msg.setSource(64555U);
    msg.setSourceEntity(30U);
    msg.setDestination(6352U);
    msg.setDestinationEntity(111U);
    msg.op = 128U;
    msg.actions.assign("VWIOFPTBERDPYLQDKEQAYXFYQBBOMVTZFSOZAKTNWWDSRGYBSJQQXWFFJVIIGKCPSRKGECHYWJCFCAXDCAGHVDLKGRKEEAPVXHTVBBHNENGJUISHWIQIOUHGMMOOXNKVSWH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.7271753096246663);
    msg.setSource(31491U);
    msg.setSourceEntity(175U);
    msg.setDestination(18535U);
    msg.setDestinationEntity(106U);
    msg.actions.assign("GSAHNLYPQFWRHGKFHWBAVLVBRSIFDOEHWZCYEQADHTFYUXCBZVBHDEYYYAITRITEDRRISLXGHJREUWPBOFJNNMCDZNPDNQJZTAUQDMOWXBMAGMOEUUSUKHMEMLVULGPBLMUXKYOVJLHZZSQAOQKOVQQCPRIZJQCVHKVYLDIVKGIPPBFXNOZUFIKXUNYJXAMGQRFWOWRVMKJATRTDNCJSWGWTEOSNSCYMCXBBJSNIPC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.8122367395339884);
    msg.setSource(5689U);
    msg.setSourceEntity(159U);
    msg.setDestination(59248U);
    msg.setDestinationEntity(169U);
    msg.actions.assign("EXBCPWDHNXIZDECMFOFHUFEIHKGFWRKYBLDZPTYILXPLHYOXTLQUZARUXKSGMVZOTHGUFAERZSWFHCAHRPWHTNIMSQKTYIOXJVRIGLQJKGOAEBLMOUPBLAZXFOZOBUQRVCWEGVKJVPAWIHKKSLSTNHQLMNQNXXCYBWSCVUINISUDJQKTNDBRZJNMCTUJPYCQRGEZEKGDAWPPNNWRJZGVAICSOYAMMSTTVPRDJAVSJDXVCJM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.2326566512568966);
    msg.setSource(20253U);
    msg.setSourceEntity(208U);
    msg.setDestination(60572U);
    msg.setDestinationEntity(92U);
    msg.actions.assign("JLVSDFLEWRBOVXXBYFXPRTGVZOLEVCAJHADZTJMUNNTACMUWUWWBMPQQSKMLQQFCIRKC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.061059830607324894);
    msg.setSource(19968U);
    msg.setSourceEntity(69U);
    msg.setDestination(42133U);
    msg.setDestinationEntity(30U);
    msg.button = 206U;
    msg.value = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.687401075489286);
    msg.setSource(64418U);
    msg.setSourceEntity(148U);
    msg.setDestination(54057U);
    msg.setDestinationEntity(219U);
    msg.button = 85U;
    msg.value = 232U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.5651122152526764);
    msg.setSource(20159U);
    msg.setSourceEntity(106U);
    msg.setDestination(38744U);
    msg.setDestinationEntity(218U);
    msg.button = 105U;
    msg.value = 129U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.588799810783627);
    msg.setSource(57964U);
    msg.setSourceEntity(117U);
    msg.setDestination(6787U);
    msg.setDestinationEntity(251U);
    msg.op = 178U;
    msg.text.assign("RVMRUUIEODFHAQOWUKKRBJUAKVDZWUSBQJBIROMFIUTBNRODIRBLXNLLRKAXIEKEWQAYIYMCJVWKGOJOACENRRLQPWJFMZTJCHTUJDNPFNWAEESEGMOETTVGIDKUM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.5243180950723124);
    msg.setSource(47838U);
    msg.setSourceEntity(54U);
    msg.setDestination(42802U);
    msg.setDestinationEntity(128U);
    msg.op = 244U;
    msg.text.assign("MXTIBBABHAJXJLGYYPBZPHCNDHOIZSBXITYTNRVLJXCWZDRWFOKEDJMYRXIVUUWUHTPCTSJSENRAEBTZHVLYAWQGZPBRLCOVEQQGVFBICLNQOWRNSQNQKGHFGIWZZTLARIKMPRWVIDOHLQLIWSYUJIEMTURQLPLMGEDFNJMXECAECDVHCQUOBPAUVFJPMYUSTKUGD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.5439373531221642);
    msg.setSource(1341U);
    msg.setSourceEntity(44U);
    msg.setDestination(26651U);
    msg.setDestinationEntity(225U);
    msg.op = 43U;
    msg.text.assign("MBFYGKEIDTZLSIHPTBRLJGBECALPZCIQQMCUSNMSYFMLPVYYZCTHUZNQGNDMIUZAPEPL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.9743319801105756);
    msg.setSource(33816U);
    msg.setSourceEntity(146U);
    msg.setDestination(65184U);
    msg.setDestinationEntity(182U);
    msg.op = 70U;
    msg.time_remain = 0.2168056790010181;
    msg.sched_time = 0.9843508812263345;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.32062376623187705);
    msg.setSource(34990U);
    msg.setSourceEntity(76U);
    msg.setDestination(24115U);
    msg.setDestinationEntity(19U);
    msg.op = 110U;
    msg.time_remain = 0.6969521042291464;
    msg.sched_time = 0.5826094886751982;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.7173657429836745);
    msg.setSource(21420U);
    msg.setSourceEntity(140U);
    msg.setDestination(41178U);
    msg.setDestinationEntity(121U);
    msg.op = 205U;
    msg.time_remain = 0.5730516346408598;
    msg.sched_time = 0.2135074439404343;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.7708122410825978);
    msg.setSource(31502U);
    msg.setSourceEntity(18U);
    msg.setDestination(1021U);
    msg.setDestinationEntity(237U);
    msg.name.assign("STCCNUXBIQQIOXENAJOYEVLJENSYMRTQABCLLKPEPEPRDLYUIJXPPDDBVPDK");
    msg.op = 28U;
    msg.sched_time = 0.6972525075397387;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.8810524966713111);
    msg.setSource(22021U);
    msg.setSourceEntity(72U);
    msg.setDestination(41121U);
    msg.setDestinationEntity(53U);
    msg.name.assign("YHZYMURIFGULZRQOTDCNPRNAPAZZJMDDGSASBFWJFVPRNSMMHXGTOWJEYMNUOWOMJHTBJRYUFSSSEWRQOCNZNKFTTIEFIBUKRGQAHUQAKXIDCEHSVAUVZQWHLYHLNVXGWTKDSNVVHMKOKP");
    msg.op = 156U;
    msg.sched_time = 0.7114636220787984;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.5266999535669814);
    msg.setSource(24928U);
    msg.setSourceEntity(121U);
    msg.setDestination(34312U);
    msg.setDestinationEntity(13U);
    msg.name.assign("RWAOJOBFMLFKHDBGKEQSMWCGOVOKASFTKLMKFSFQYMJFHONDWPAPKQFRMLEIHPEXUCJQTCGMJOAMZZEXPEPBJEHDJCXSMRGBKYYMTFLAVQASRGYTGXZDKPLANVYRINDLCVUOQHTZJULINZPXDIVEGAQJQYZVRDXXCBRPNZNUOTNCVUUUSVCUDTFHBGCBPSQFRAHWHBHLWENNAISTNOX");
    msg.op = 51U;
    msg.sched_time = 0.362173578934877;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.2761090557629008);
    msg.setSource(20600U);
    msg.setSourceEntity(40U);
    msg.setDestination(42537U);
    msg.setDestinationEntity(175U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.8811002733377759);
    msg.setSource(60479U);
    msg.setSourceEntity(236U);
    msg.setDestination(4880U);
    msg.setDestinationEntity(1U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.6741868456977493);
    msg.setSource(1799U);
    msg.setSourceEntity(192U);
    msg.setDestination(10650U);
    msg.setDestinationEntity(136U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.858833416710113);
    msg.setSource(3342U);
    msg.setSourceEntity(159U);
    msg.setDestination(64029U);
    msg.setDestinationEntity(81U);
    msg.name.assign("MVVQOQKZFXSVJXLLJAUUNOIFQOX");
    msg.state = 51U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.8021611721141819);
    msg.setSource(63U);
    msg.setSourceEntity(193U);
    msg.setDestination(58242U);
    msg.setDestinationEntity(43U);
    msg.name.assign("UENHAETOCAZSIUVKYDISWECKDBOZCFVJCNQKPJOOVKLCAKRLGJGQTXEDNAVPNEHFNWPUDWMYEQCYUGBJHFLNHWMRPNBGCZTMUHKWWIPMLHRZETTQIENGRQQRLUVMCKOQOFZYRQFHPRMDDDGIWVTJDIQIAWJUKDRGAJUXBPFOVIGHAXLSTXPBYCQNBSXLYORXBSBZZJOJTUYMWBVFS");
    msg.state = 68U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.43399022982517177);
    msg.setSource(30408U);
    msg.setSourceEntity(163U);
    msg.setDestination(5568U);
    msg.setDestinationEntity(22U);
    msg.name.assign("OIKAHHYISFCHJNGEFVKHRZLVRDYBLKUPIVKENAUZQCQXZVPPPDACMDVNTAZWVPSONFZSBOXMQTCGZCXDXYHOMQTYUOALPCKUCYAGXOLMFSZURRXJMKWPE");
    msg.state = 2U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.17179053596438054);
    msg.setSource(30630U);
    msg.setSourceEntity(218U);
    msg.setDestination(10472U);
    msg.setDestinationEntity(140U);
    msg.name.assign("BHHCMVTIAHZGHEA");
    msg.value = 148U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.5761268377579107);
    msg.setSource(59535U);
    msg.setSourceEntity(250U);
    msg.setDestination(37389U);
    msg.setDestinationEntity(77U);
    msg.name.assign("YQXLCFKMPJWTWCQKMFRGVXRHYHPTZEXETSQSYVQSRFSPXGQCJLFNJQVNUUIAGFBWDAMINNOMEWLSCYPXZIYKULZKFBRZPOKULCYKA");
    msg.value = 131U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.9061715808339551);
    msg.setSource(1182U);
    msg.setSourceEntity(180U);
    msg.setDestination(43365U);
    msg.setDestinationEntity(142U);
    msg.name.assign("PEOZRYCWXXJZIJUZVWGBIHXIBVTNUNJRUOIMWAXZKITGNDBHSGLUDPPDWRNAQKXLWKCCEEOZCXJFUEJIFPJDRSOKLTRBVRH");
    msg.value = 186U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.6698730368445681);
    msg.setSource(60854U);
    msg.setSourceEntity(198U);
    msg.setDestination(11533U);
    msg.setDestinationEntity(83U);
    msg.name.assign("XHATTGTFQXTADQVOAVYNYCHLHMIHHFFGWUISZKXRGSINZELNWPSLXTORYUSLIRJRYAVN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.4522983883564077);
    msg.setSource(50754U);
    msg.setSourceEntity(200U);
    msg.setDestination(29274U);
    msg.setDestinationEntity(3U);
    msg.name.assign("ATNSPIWOBNDJVZIRYUKGSICTQKXBEEIJDBVSUHLGFNDAWWVPCKEWMWOHNQLRHXDPLGCNXMZALOGKASLRWRANJNKRFRNIVUTBSXUJLYRFX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.6661269826351071);
    msg.setSource(57125U);
    msg.setSourceEntity(136U);
    msg.setDestination(12674U);
    msg.setDestinationEntity(144U);
    msg.name.assign("GLBZHNXGQXKOKHQFQXXJFNGWPLTHOCPVBZTUKDJFBHLWAIPPROWVHMDSSQWKOYLKUBPMNTIQQFEQXDBLCUMZYEUEFSWBJWNALEJEAPCLVVXYSMBCAGS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.6212054993504054);
    msg.setSource(43892U);
    msg.setSourceEntity(23U);
    msg.setDestination(56567U);
    msg.setDestinationEntity(244U);
    msg.name.assign("YZKIKEPYQXHNWIBLFSFXUWNSQTTDQLLREZGYIIKMHURIQUZ");
    msg.value = 103U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.9998228207389471);
    msg.setSource(7220U);
    msg.setSourceEntity(156U);
    msg.setDestination(14133U);
    msg.setDestinationEntity(174U);
    msg.name.assign("NZLLRJZQBHOCDXIQLTAHVTJXZPDWHFJGBSBHNFGCSWYMNEIDFFURZNVIAMEQRZNXHLXREELURAMEDSCLNFKTCGZPUUNKQV");
    msg.value = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.5064267307875127);
    msg.setSource(57218U);
    msg.setSourceEntity(41U);
    msg.setDestination(29457U);
    msg.setDestinationEntity(142U);
    msg.name.assign("HRFMGYNLWNLKMGEOIDFPFAQFCJUZZOYNYZFKLTHHOBRXZETOZEDPPGAXCWGMIOQIABKWTMFCQKQSABRPLLPJGGTRXVDQKSTUBSDVCWBNATZJGJCNLG");
    msg.value = 46U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.9616779083637237);
    msg.setSource(352U);
    msg.setSourceEntity(113U);
    msg.setDestination(53686U);
    msg.setDestinationEntity(71U);
    msg.id = 5U;
    msg.period = 1979158891U;
    msg.duty_cycle = 1624984499U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.5091490725227125);
    msg.setSource(50411U);
    msg.setSourceEntity(84U);
    msg.setDestination(37363U);
    msg.setDestinationEntity(157U);
    msg.id = 146U;
    msg.period = 2439497209U;
    msg.duty_cycle = 2085867161U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.146483997449802);
    msg.setSource(19521U);
    msg.setSourceEntity(244U);
    msg.setDestination(23010U);
    msg.setDestinationEntity(216U);
    msg.id = 171U;
    msg.period = 1877870180U;
    msg.duty_cycle = 3508908345U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.4461649783342052);
    msg.setSource(37003U);
    msg.setSourceEntity(140U);
    msg.setDestination(54682U);
    msg.setDestinationEntity(133U);
    msg.id = 43U;
    msg.period = 4153794556U;
    msg.duty_cycle = 4120053077U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.6441525577102017);
    msg.setSource(46651U);
    msg.setSourceEntity(85U);
    msg.setDestination(32185U);
    msg.setDestinationEntity(234U);
    msg.id = 152U;
    msg.period = 668536310U;
    msg.duty_cycle = 2390213489U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.7465886730524083);
    msg.setSource(25191U);
    msg.setSourceEntity(48U);
    msg.setDestination(19091U);
    msg.setDestinationEntity(159U);
    msg.id = 82U;
    msg.period = 127398258U;
    msg.duty_cycle = 3971809010U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.4519620870445943);
    msg.setSource(40802U);
    msg.setSourceEntity(3U);
    msg.setDestination(35561U);
    msg.setDestinationEntity(53U);
    msg.lat = 0.9204138843727019;
    msg.lon = 0.33733548460954643;
    msg.height = 0.7913593323189752;
    msg.x = 0.9293739426015396;
    msg.y = 0.6333949159466141;
    msg.z = 0.9414769306453395;
    msg.phi = 0.7633931626243665;
    msg.theta = 0.00024263272124769308;
    msg.psi = 0.40940885407803274;
    msg.u = 0.27392843395936517;
    msg.v = 0.7396951337998587;
    msg.w = 0.380090250353477;
    msg.vx = 0.6881656946777851;
    msg.vy = 0.6593337467914692;
    msg.vz = 0.9879963260781701;
    msg.p = 0.2605056358690998;
    msg.q = 0.7584149772499379;
    msg.r = 0.19323404033457392;
    msg.depth = 0.9992492169293099;
    msg.alt = 0.6128929859078088;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.0017004656760620795);
    msg.setSource(3715U);
    msg.setSourceEntity(58U);
    msg.setDestination(5140U);
    msg.setDestinationEntity(46U);
    msg.lat = 0.33612160022697524;
    msg.lon = 0.9965137356682057;
    msg.height = 0.5279436252606535;
    msg.x = 0.001409267645118617;
    msg.y = 0.020025861644090814;
    msg.z = 0.4102875739372509;
    msg.phi = 0.8551602954237152;
    msg.theta = 0.647193441167944;
    msg.psi = 0.3368261648730968;
    msg.u = 0.26667682009048255;
    msg.v = 0.11638457077699427;
    msg.w = 0.5351720955892221;
    msg.vx = 0.013663932568256376;
    msg.vy = 0.005491507830269637;
    msg.vz = 0.4929222244191481;
    msg.p = 0.5950101295352161;
    msg.q = 0.692721083082421;
    msg.r = 0.4684125735062863;
    msg.depth = 0.030002851765946748;
    msg.alt = 0.13517975249508685;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.31661909879921757);
    msg.setSource(6515U);
    msg.setSourceEntity(217U);
    msg.setDestination(25245U);
    msg.setDestinationEntity(98U);
    msg.lat = 0.6534959682804795;
    msg.lon = 0.37005385768594345;
    msg.height = 0.9352416418011387;
    msg.x = 0.8638455779809089;
    msg.y = 0.8230435070349053;
    msg.z = 0.1624428117486627;
    msg.phi = 0.9111547095606569;
    msg.theta = 0.14840523468904432;
    msg.psi = 0.22901016730124213;
    msg.u = 0.7041947771143119;
    msg.v = 0.10607817855475687;
    msg.w = 0.43801696098683096;
    msg.vx = 0.8524016291396448;
    msg.vy = 0.7993383131854435;
    msg.vz = 0.4895163277220249;
    msg.p = 0.22586605660252457;
    msg.q = 0.28514294388917905;
    msg.r = 0.6202345201603019;
    msg.depth = 0.5010051945989545;
    msg.alt = 0.272639491313705;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.7160495210972365);
    msg.setSource(21925U);
    msg.setSourceEntity(250U);
    msg.setDestination(5314U);
    msg.setDestinationEntity(214U);
    msg.x = 0.5610477418086278;
    msg.y = 0.3666971482560496;
    msg.z = 0.49646526330714047;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.8530894379455601);
    msg.setSource(7551U);
    msg.setSourceEntity(97U);
    msg.setDestination(16973U);
    msg.setDestinationEntity(45U);
    msg.x = 0.6625272458375066;
    msg.y = 0.825106695838774;
    msg.z = 0.0011614188934571112;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.48073334388844435);
    msg.setSource(1446U);
    msg.setSourceEntity(75U);
    msg.setDestination(23558U);
    msg.setDestinationEntity(105U);
    msg.x = 0.48781529315659866;
    msg.y = 0.5102390848692364;
    msg.z = 0.5554467371068456;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.22245036031531795);
    msg.setSource(64223U);
    msg.setSourceEntity(108U);
    msg.setDestination(21210U);
    msg.setDestinationEntity(119U);
    msg.value = 0.22046587792933137;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.14070662347334262);
    msg.setSource(12142U);
    msg.setSourceEntity(190U);
    msg.setDestination(60683U);
    msg.setDestinationEntity(133U);
    msg.value = 0.5769248480213979;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.331563077497811);
    msg.setSource(20656U);
    msg.setSourceEntity(109U);
    msg.setDestination(58643U);
    msg.setDestinationEntity(94U);
    msg.value = 0.4192444746537678;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.34150475731425844);
    msg.setSource(28091U);
    msg.setSourceEntity(5U);
    msg.setDestination(1607U);
    msg.setDestinationEntity(213U);
    msg.value = 0.20523102718207986;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.7536316239916019);
    msg.setSource(55505U);
    msg.setSourceEntity(149U);
    msg.setDestination(39684U);
    msg.setDestinationEntity(6U);
    msg.value = 0.8490439355067816;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.4370722400065856);
    msg.setSource(57171U);
    msg.setSourceEntity(11U);
    msg.setDestination(45914U);
    msg.setDestinationEntity(54U);
    msg.value = 0.15322271713812707;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.6445153919501194);
    msg.setSource(54386U);
    msg.setSourceEntity(182U);
    msg.setDestination(37932U);
    msg.setDestinationEntity(202U);
    msg.x = 0.13256473553459158;
    msg.y = 0.17030626216781708;
    msg.z = 0.02401700747429414;
    msg.phi = 0.03795507350006688;
    msg.theta = 0.07090933949593603;
    msg.psi = 0.8666350980189444;
    msg.p = 0.41833936392722204;
    msg.q = 0.9099362892717708;
    msg.r = 0.39858941697776507;
    msg.u = 0.5456656279013838;
    msg.v = 0.39013824004192155;
    msg.w = 0.07787043813444294;
    msg.bias_psi = 0.41514716908824933;
    msg.bias_r = 0.08687757673235774;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.6986763454269307);
    msg.setSource(32851U);
    msg.setSourceEntity(203U);
    msg.setDestination(21954U);
    msg.setDestinationEntity(116U);
    msg.x = 0.09603542769590523;
    msg.y = 0.422329774633186;
    msg.z = 0.9547636548687028;
    msg.phi = 0.08055613954202168;
    msg.theta = 0.39923954247201043;
    msg.psi = 0.989619600510685;
    msg.p = 0.8046856105667946;
    msg.q = 0.4421161538199009;
    msg.r = 0.4551819607450355;
    msg.u = 0.6905575357897396;
    msg.v = 0.5095584321207869;
    msg.w = 0.03861988339087874;
    msg.bias_psi = 0.11710223378462847;
    msg.bias_r = 0.2191748955053926;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.1642375743086768);
    msg.setSource(9060U);
    msg.setSourceEntity(154U);
    msg.setDestination(38158U);
    msg.setDestinationEntity(78U);
    msg.x = 0.6054756628073373;
    msg.y = 0.2422158254756901;
    msg.z = 0.014510905730598656;
    msg.phi = 0.8928821290144238;
    msg.theta = 0.36517697291101336;
    msg.psi = 0.7196133229744204;
    msg.p = 0.10728039778612075;
    msg.q = 0.041485868042018814;
    msg.r = 0.22505308397127355;
    msg.u = 0.9915084099821779;
    msg.v = 0.05860024410144815;
    msg.w = 0.21752400451215093;
    msg.bias_psi = 0.4055734361619727;
    msg.bias_r = 0.7218522949961989;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.16297253468580308);
    msg.setSource(43494U);
    msg.setSourceEntity(234U);
    msg.setDestination(14966U);
    msg.setDestinationEntity(49U);
    msg.bias_psi = 0.32431457580454937;
    msg.bias_r = 0.16663107186949067;
    msg.cog = 0.3731370494999746;
    msg.cyaw = 0.8358809923896895;
    msg.lbl_rej_level = 0.612058366747181;
    msg.gps_rej_level = 0.687453704306049;
    msg.custom_x = 0.1573327706143337;
    msg.custom_y = 0.858329277769506;
    msg.custom_z = 0.35529087627117095;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.11798111602365302);
    msg.setSource(17462U);
    msg.setSourceEntity(233U);
    msg.setDestination(774U);
    msg.setDestinationEntity(233U);
    msg.bias_psi = 0.11340359485412588;
    msg.bias_r = 0.9427622420288014;
    msg.cog = 0.8060760039125773;
    msg.cyaw = 0.29057730587253605;
    msg.lbl_rej_level = 0.727873999410743;
    msg.gps_rej_level = 0.10910762491038528;
    msg.custom_x = 0.774367771890728;
    msg.custom_y = 0.7235237451447971;
    msg.custom_z = 0.5150723212996511;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.5648797429042465);
    msg.setSource(9135U);
    msg.setSourceEntity(100U);
    msg.setDestination(3116U);
    msg.setDestinationEntity(25U);
    msg.bias_psi = 0.5047923989938663;
    msg.bias_r = 0.7770796873317145;
    msg.cog = 0.9713526935568391;
    msg.cyaw = 0.642606899370164;
    msg.lbl_rej_level = 0.5701982460370966;
    msg.gps_rej_level = 0.3361272941680532;
    msg.custom_x = 0.7333461914949453;
    msg.custom_y = 0.914392083721865;
    msg.custom_z = 0.9615820658661419;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.8674965787666463);
    msg.setSource(26903U);
    msg.setSourceEntity(194U);
    msg.setDestination(15274U);
    msg.setDestinationEntity(135U);
    msg.utc_time = 0.6415277162510817;
    msg.reason = 76U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.7238300641243339);
    msg.setSource(7751U);
    msg.setSourceEntity(101U);
    msg.setDestination(15791U);
    msg.setDestinationEntity(56U);
    msg.utc_time = 0.257539667809481;
    msg.reason = 58U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.15125658259764652);
    msg.setSource(5818U);
    msg.setSourceEntity(158U);
    msg.setDestination(10396U);
    msg.setDestinationEntity(101U);
    msg.utc_time = 0.43160190849578484;
    msg.reason = 45U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.012201022068944911);
    msg.setSource(27539U);
    msg.setSourceEntity(73U);
    msg.setDestination(33208U);
    msg.setDestinationEntity(28U);
    msg.id = 157U;
    msg.range = 0.17197592393417926;
    msg.acceptance = 238U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.07240021982857892);
    msg.setSource(8072U);
    msg.setSourceEntity(244U);
    msg.setDestination(19810U);
    msg.setDestinationEntity(100U);
    msg.id = 238U;
    msg.range = 0.6906665347498588;
    msg.acceptance = 85U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.10589076088604077);
    msg.setSource(56626U);
    msg.setSourceEntity(230U);
    msg.setDestination(45792U);
    msg.setDestinationEntity(19U);
    msg.id = 219U;
    msg.range = 0.8191115727156021;
    msg.acceptance = 39U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.8093624768604797);
    msg.setSource(23086U);
    msg.setSourceEntity(39U);
    msg.setDestination(2214U);
    msg.setDestinationEntity(109U);
    msg.type = 198U;
    msg.reason = 231U;
    msg.value = 0.9402433865058586;
    msg.timestep = 0.18330398498017886;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.9171477398826209);
    msg.setSource(21150U);
    msg.setSourceEntity(0U);
    msg.setDestination(37599U);
    msg.setDestinationEntity(121U);
    msg.type = 47U;
    msg.reason = 67U;
    msg.value = 0.8309270665517232;
    msg.timestep = 0.8651143218235166;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.9910095365840929);
    msg.setSource(18731U);
    msg.setSourceEntity(223U);
    msg.setDestination(46036U);
    msg.setDestinationEntity(211U);
    msg.type = 97U;
    msg.reason = 68U;
    msg.value = 0.29305940884426884;
    msg.timestep = 0.12528368884493613;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.27553561862139586);
    msg.setSource(37718U);
    msg.setSourceEntity(23U);
    msg.setDestination(53777U);
    msg.setDestinationEntity(107U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("GKCWXYZIMNUKBTEECDZZBBVCRKJRNMPSQJQTNWNHMNCSTUAJLEXKFHFHBPRQMKERXGAVKTYWSVTDZGSUDFSHQOFDXNHAIKMXNSZJJYISDLIATWYRTUVWRGOXFYWNBWMFHVNILTLAGHJCAAEHCOVLUPAOBDKGLNBLVKIAX");
    tmp_msg_0.lat = 0.19986577280612228;
    tmp_msg_0.lon = 0.7615835785582796;
    tmp_msg_0.depth = 0.9624761393349947;
    tmp_msg_0.query_channel = 91U;
    tmp_msg_0.reply_channel = 198U;
    tmp_msg_0.transponder_delay = 77U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.5826704627742996;
    msg.y = 0.3186560257158447;
    msg.var_x = 0.7188894802412498;
    msg.var_y = 0.4712536173817389;
    msg.distance = 0.7568755313348823;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.8416362738790103);
    msg.setSource(405U);
    msg.setSourceEntity(76U);
    msg.setDestination(64034U);
    msg.setDestinationEntity(60U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("EFPANOYIVG");
    tmp_msg_0.lat = 0.9124835931299543;
    tmp_msg_0.lon = 0.8615485180782988;
    tmp_msg_0.depth = 0.29672312727816264;
    tmp_msg_0.query_channel = 74U;
    tmp_msg_0.reply_channel = 182U;
    tmp_msg_0.transponder_delay = 51U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.7658012093197847;
    msg.y = 0.07349018934537077;
    msg.var_x = 0.1450543385469869;
    msg.var_y = 0.7372086157696831;
    msg.distance = 0.22648276223984332;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.2989783583503327);
    msg.setSource(26139U);
    msg.setSourceEntity(56U);
    msg.setDestination(26911U);
    msg.setDestinationEntity(252U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("RSYCDVMOQTUAXFTUOPBBZZIPFJNCKHXRTMCADNYXINZBLMVWBYLJZTCXENROYFOPFOKHVICRIQBGLXKJTHOEMOHVTMNWXHXKZXQTSGUGNGLWALJVR");
    tmp_msg_0.lat = 0.8996201380764016;
    tmp_msg_0.lon = 0.31961103349927733;
    tmp_msg_0.depth = 0.009457969334546013;
    tmp_msg_0.query_channel = 200U;
    tmp_msg_0.reply_channel = 68U;
    tmp_msg_0.transponder_delay = 66U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.5611789058033315;
    msg.y = 0.28346399320533067;
    msg.var_x = 0.5673546395359557;
    msg.var_y = 0.5964362354801966;
    msg.distance = 0.4165329362246891;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.22830288518917607);
    msg.setSource(47203U);
    msg.setSourceEntity(226U);
    msg.setDestination(27500U);
    msg.setDestinationEntity(55U);
    msg.state = 1U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.5753541004248346);
    msg.setSource(36760U);
    msg.setSourceEntity(244U);
    msg.setDestination(47297U);
    msg.setDestinationEntity(132U);
    msg.state = 109U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.4800537037222522);
    msg.setSource(48811U);
    msg.setSourceEntity(226U);
    msg.setDestination(23007U);
    msg.setDestinationEntity(143U);
    msg.state = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.2680993264984515);
    msg.setSource(48953U);
    msg.setSourceEntity(47U);
    msg.setDestination(2675U);
    msg.setDestinationEntity(73U);
    msg.x = 0.6462218124323412;
    msg.y = 0.019717103968092453;
    msg.z = 0.6464232847680945;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.3128183012366368);
    msg.setSource(43719U);
    msg.setSourceEntity(194U);
    msg.setDestination(63108U);
    msg.setDestinationEntity(75U);
    msg.x = 0.20214880392612566;
    msg.y = 0.24437818485058782;
    msg.z = 0.8317724959638734;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.2692623885818407);
    msg.setSource(569U);
    msg.setSourceEntity(20U);
    msg.setDestination(62470U);
    msg.setDestinationEntity(240U);
    msg.x = 0.6063270355274618;
    msg.y = 0.422201761615694;
    msg.z = 0.8522993211813257;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.42616037827211894);
    msg.setSource(26940U);
    msg.setSourceEntity(129U);
    msg.setDestination(27210U);
    msg.setDestinationEntity(23U);
    msg.va = 0.6096636560833724;
    msg.aoa = 0.37808130457762323;
    msg.ssa = 0.5578145330796324;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.17143225903581727);
    msg.setSource(9999U);
    msg.setSourceEntity(173U);
    msg.setDestination(61937U);
    msg.setDestinationEntity(103U);
    msg.va = 0.8158912967753728;
    msg.aoa = 0.47544831289190204;
    msg.ssa = 0.445420269186943;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.7265421078369734);
    msg.setSource(6011U);
    msg.setSourceEntity(18U);
    msg.setDestination(52450U);
    msg.setDestinationEntity(206U);
    msg.va = 0.9096311490424598;
    msg.aoa = 0.7475769362301136;
    msg.ssa = 0.9064555220333763;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.8594154580978184);
    msg.setSource(39470U);
    msg.setSourceEntity(166U);
    msg.setDestination(53302U);
    msg.setDestinationEntity(141U);
    msg.value = 0.3298136328597312;
    msg.off = 0.42779036870659815;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.4495264301731109);
    msg.setSource(44493U);
    msg.setSourceEntity(217U);
    msg.setDestination(33896U);
    msg.setDestinationEntity(33U);
    msg.value = 0.8969963811502776;
    msg.off = 0.523780039547508;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.9380361788161203);
    msg.setSource(13273U);
    msg.setSourceEntity(227U);
    msg.setDestination(5974U);
    msg.setDestinationEntity(93U);
    msg.value = 0.21319004225770544;
    msg.off = 0.5368346825517298;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.3222861146119911);
    msg.setSource(34848U);
    msg.setSourceEntity(13U);
    msg.setDestination(63893U);
    msg.setDestinationEntity(251U);
    msg.value = 0.645713988484331;
    msg.z_units = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.43208360283945013);
    msg.setSource(29110U);
    msg.setSourceEntity(18U);
    msg.setDestination(25581U);
    msg.setDestinationEntity(133U);
    msg.value = 0.9495373907000436;
    msg.z_units = 246U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.8207593244012171);
    msg.setSource(59230U);
    msg.setSourceEntity(212U);
    msg.setDestination(45025U);
    msg.setDestinationEntity(159U);
    msg.value = 0.15470071085028148;
    msg.z_units = 165U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.7623259692190332);
    msg.setSource(26475U);
    msg.setSourceEntity(125U);
    msg.setDestination(65132U);
    msg.setDestinationEntity(106U);
    msg.value = 0.05046318655494486;
    msg.speed_units = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.3427676806608576);
    msg.setSource(52065U);
    msg.setSourceEntity(151U);
    msg.setDestination(65327U);
    msg.setDestinationEntity(81U);
    msg.value = 0.2843288042117871;
    msg.speed_units = 17U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.04016504576999491);
    msg.setSource(46667U);
    msg.setSourceEntity(66U);
    msg.setDestination(64183U);
    msg.setDestinationEntity(157U);
    msg.value = 0.8072540146695943;
    msg.speed_units = 103U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.5795362538508263);
    msg.setSource(49157U);
    msg.setSourceEntity(187U);
    msg.setDestination(16504U);
    msg.setDestinationEntity(224U);
    msg.value = 0.42045238263282236;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.17389156910285963);
    msg.setSource(61086U);
    msg.setSourceEntity(160U);
    msg.setDestination(37300U);
    msg.setDestinationEntity(193U);
    msg.value = 0.898116157513901;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.3058933430444378);
    msg.setSource(55314U);
    msg.setSourceEntity(158U);
    msg.setDestination(13683U);
    msg.setDestinationEntity(198U);
    msg.value = 0.17991627648661646;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.16412484515265036);
    msg.setSource(15089U);
    msg.setSourceEntity(24U);
    msg.setDestination(25630U);
    msg.setDestinationEntity(139U);
    msg.value = 0.33620265252667014;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.4547215173024908);
    msg.setSource(41181U);
    msg.setSourceEntity(167U);
    msg.setDestination(45645U);
    msg.setDestinationEntity(176U);
    msg.value = 0.5363181155003319;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.8031815127424973);
    msg.setSource(22130U);
    msg.setSourceEntity(183U);
    msg.setDestination(33412U);
    msg.setDestinationEntity(103U);
    msg.value = 0.4067000314983502;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.9705262312191316);
    msg.setSource(14846U);
    msg.setSourceEntity(123U);
    msg.setDestination(34083U);
    msg.setDestinationEntity(128U);
    msg.value = 0.669631322223313;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.17535585980604673);
    msg.setSource(16629U);
    msg.setSourceEntity(238U);
    msg.setDestination(58711U);
    msg.setDestinationEntity(96U);
    msg.value = 0.5462410524360938;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.5508642341182489);
    msg.setSource(61582U);
    msg.setSourceEntity(118U);
    msg.setDestination(23206U);
    msg.setDestinationEntity(66U);
    msg.value = 0.4108236856094605;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.2040163570579343);
    msg.setSource(60287U);
    msg.setSourceEntity(104U);
    msg.setDestination(35845U);
    msg.setDestinationEntity(56U);
    msg.path_ref = 2829682767U;
    msg.start_lat = 0.305015657802454;
    msg.start_lon = 0.25282020588816534;
    msg.start_z = 0.5951836309055686;
    msg.start_z_units = 65U;
    msg.end_lat = 0.799390546993169;
    msg.end_lon = 0.5699461196851047;
    msg.end_z = 0.611655644069237;
    msg.end_z_units = 27U;
    msg.speed = 0.23276531296563385;
    msg.speed_units = 183U;
    msg.lradius = 0.9249072343224835;
    msg.flags = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.34823872454956084);
    msg.setSource(4229U);
    msg.setSourceEntity(53U);
    msg.setDestination(41594U);
    msg.setDestinationEntity(214U);
    msg.path_ref = 1812735738U;
    msg.start_lat = 0.6761433935597414;
    msg.start_lon = 0.06384560904984915;
    msg.start_z = 0.23032765721408865;
    msg.start_z_units = 120U;
    msg.end_lat = 0.8614640077152044;
    msg.end_lon = 0.3530051115508698;
    msg.end_z = 0.8029217049979832;
    msg.end_z_units = 105U;
    msg.speed = 0.96479984853499;
    msg.speed_units = 196U;
    msg.lradius = 0.9810884980975204;
    msg.flags = 10U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.38025994642470606);
    msg.setSource(45193U);
    msg.setSourceEntity(160U);
    msg.setDestination(18386U);
    msg.setDestinationEntity(46U);
    msg.path_ref = 2461815560U;
    msg.start_lat = 0.8416708936947406;
    msg.start_lon = 0.9066133131545308;
    msg.start_z = 0.4055263199465351;
    msg.start_z_units = 28U;
    msg.end_lat = 0.9835638366575803;
    msg.end_lon = 0.4622053023453446;
    msg.end_z = 0.37527850599476553;
    msg.end_z_units = 41U;
    msg.speed = 0.7163231264249855;
    msg.speed_units = 233U;
    msg.lradius = 0.25772780142889706;
    msg.flags = 220U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.05132769133537596);
    msg.setSource(26349U);
    msg.setSourceEntity(85U);
    msg.setDestination(5393U);
    msg.setDestinationEntity(59U);
    msg.x = 0.8654715337209121;
    msg.y = 0.9292128718797332;
    msg.z = 0.27645264028207817;
    msg.k = 0.8302985403732555;
    msg.m = 0.591697039301194;
    msg.n = 0.631234224242362;
    msg.flags = 159U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.0954070647270796);
    msg.setSource(32500U);
    msg.setSourceEntity(63U);
    msg.setDestination(61277U);
    msg.setDestinationEntity(92U);
    msg.x = 0.7943959218881019;
    msg.y = 0.0066286176770550265;
    msg.z = 0.41485533680114006;
    msg.k = 0.33156276289420794;
    msg.m = 0.10374374536094322;
    msg.n = 0.7758795228515794;
    msg.flags = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.17931913834289326);
    msg.setSource(34215U);
    msg.setSourceEntity(157U);
    msg.setDestination(12941U);
    msg.setDestinationEntity(188U);
    msg.x = 0.9892949372825527;
    msg.y = 0.12101867354369977;
    msg.z = 0.5240359111592379;
    msg.k = 0.11681324709616303;
    msg.m = 0.7072848233958746;
    msg.n = 0.8905077994111222;
    msg.flags = 45U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.2492124235152945);
    msg.setSource(40374U);
    msg.setSourceEntity(221U);
    msg.setDestination(32545U);
    msg.setDestinationEntity(237U);
    msg.value = 0.02642484121515487;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.3405891418871634);
    msg.setSource(9623U);
    msg.setSourceEntity(99U);
    msg.setDestination(12591U);
    msg.setDestinationEntity(26U);
    msg.value = 0.8537879117393143;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.07945762953396196);
    msg.setSource(14258U);
    msg.setSourceEntity(164U);
    msg.setDestination(6133U);
    msg.setDestinationEntity(93U);
    msg.value = 0.44968586333519767;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.14433469597604376);
    msg.setSource(33222U);
    msg.setSourceEntity(168U);
    msg.setDestination(20347U);
    msg.setDestinationEntity(32U);
    msg.u = 0.4301213498709445;
    msg.v = 0.1918932320945903;
    msg.w = 0.5209983986665909;
    msg.p = 0.2791575488356245;
    msg.q = 0.054626698725866896;
    msg.r = 0.5402807568953787;
    msg.flags = 126U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.9132946045905135);
    msg.setSource(29223U);
    msg.setSourceEntity(65U);
    msg.setDestination(5068U);
    msg.setDestinationEntity(19U);
    msg.u = 0.6813254574130864;
    msg.v = 0.6566320833634934;
    msg.w = 0.5738029824514254;
    msg.p = 0.8692904725086638;
    msg.q = 0.057558323041113524;
    msg.r = 0.9669475959451828;
    msg.flags = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.8731670934184957);
    msg.setSource(62603U);
    msg.setSourceEntity(97U);
    msg.setDestination(59306U);
    msg.setDestinationEntity(177U);
    msg.u = 0.16113847845548124;
    msg.v = 0.01731445136515386;
    msg.w = 0.12669357213792565;
    msg.p = 0.6807714106164774;
    msg.q = 0.44564687642421896;
    msg.r = 0.9388151726997175;
    msg.flags = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.250072924934969);
    msg.setSource(26093U);
    msg.setSourceEntity(171U);
    msg.setDestination(19989U);
    msg.setDestinationEntity(23U);
    msg.path_ref = 3701153131U;
    msg.start_lat = 0.01915411730105465;
    msg.start_lon = 0.5922831979701545;
    msg.start_z = 0.8190150629062426;
    msg.start_z_units = 221U;
    msg.end_lat = 0.46551973368906885;
    msg.end_lon = 0.16717734934340245;
    msg.end_z = 0.40007167221324347;
    msg.end_z_units = 227U;
    msg.lradius = 0.08628678938079803;
    msg.flags = 182U;
    msg.x = 0.4576298149560093;
    msg.y = 0.7054799222607664;
    msg.z = 0.05142596919551656;
    msg.vx = 0.5246471238021894;
    msg.vy = 0.2527168045230571;
    msg.vz = 0.889564991041867;
    msg.course_error = 0.7955352996022648;
    msg.eta = 58797U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.5839691218925499);
    msg.setSource(39735U);
    msg.setSourceEntity(172U);
    msg.setDestination(33324U);
    msg.setDestinationEntity(49U);
    msg.path_ref = 1872240482U;
    msg.start_lat = 0.27657825241376777;
    msg.start_lon = 0.5537794117432349;
    msg.start_z = 0.4957601114014615;
    msg.start_z_units = 230U;
    msg.end_lat = 0.07202014094633591;
    msg.end_lon = 0.5141439580946959;
    msg.end_z = 0.9136931915257898;
    msg.end_z_units = 78U;
    msg.lradius = 0.3434305242854928;
    msg.flags = 81U;
    msg.x = 0.5413800153340683;
    msg.y = 0.8202202849695098;
    msg.z = 0.6790372576490179;
    msg.vx = 0.37788363433061867;
    msg.vy = 0.7375174462254153;
    msg.vz = 0.7142369662189403;
    msg.course_error = 0.49389777486680897;
    msg.eta = 52391U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.633854249936079);
    msg.setSource(43420U);
    msg.setSourceEntity(9U);
    msg.setDestination(22508U);
    msg.setDestinationEntity(253U);
    msg.path_ref = 4098337987U;
    msg.start_lat = 0.22372512501261566;
    msg.start_lon = 0.02216901655468506;
    msg.start_z = 0.41786172632392604;
    msg.start_z_units = 179U;
    msg.end_lat = 0.4440337676789895;
    msg.end_lon = 0.8748136767025243;
    msg.end_z = 0.7184230234200315;
    msg.end_z_units = 211U;
    msg.lradius = 0.09382306607813518;
    msg.flags = 157U;
    msg.x = 0.4282080014801828;
    msg.y = 0.8747463681003238;
    msg.z = 0.5460329231559506;
    msg.vx = 0.9352753353420092;
    msg.vy = 0.05687609510646352;
    msg.vz = 0.7645902289776426;
    msg.course_error = 0.10509757249733331;
    msg.eta = 55825U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.004165829993447945);
    msg.setSource(22531U);
    msg.setSourceEntity(75U);
    msg.setDestination(27259U);
    msg.setDestinationEntity(34U);
    msg.k = 0.9597223799079522;
    msg.m = 0.9234048307986888;
    msg.n = 0.4235421290627076;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.6241070227660787);
    msg.setSource(26399U);
    msg.setSourceEntity(251U);
    msg.setDestination(61751U);
    msg.setDestinationEntity(135U);
    msg.k = 0.6423426078506986;
    msg.m = 0.4868514754187726;
    msg.n = 0.0003516456234371468;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8493889952714117);
    msg.setSource(42191U);
    msg.setSourceEntity(143U);
    msg.setDestination(37720U);
    msg.setDestinationEntity(243U);
    msg.k = 0.7055016809032014;
    msg.m = 0.5095666580663166;
    msg.n = 0.12894114652614697;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.994364937478467);
    msg.setSource(37786U);
    msg.setSourceEntity(118U);
    msg.setDestination(25356U);
    msg.setDestinationEntity(120U);
    msg.p = 0.4265195317317366;
    msg.i = 0.7414358600870543;
    msg.d = 0.03691625333334603;
    msg.a = 0.4793172338494832;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.9985964754207695);
    msg.setSource(3654U);
    msg.setSourceEntity(122U);
    msg.setDestination(48075U);
    msg.setDestinationEntity(62U);
    msg.p = 0.4135758426038395;
    msg.i = 0.42019741614002426;
    msg.d = 0.3462402687192887;
    msg.a = 0.778067724356854;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.6728819278156929);
    msg.setSource(28001U);
    msg.setSourceEntity(61U);
    msg.setDestination(27857U);
    msg.setDestinationEntity(129U);
    msg.p = 0.25597924754278545;
    msg.i = 0.24909727507200807;
    msg.d = 0.826401126228981;
    msg.a = 0.7447989732908712;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.797209901579051);
    msg.setSource(60989U);
    msg.setSourceEntity(251U);
    msg.setDestination(65145U);
    msg.setDestinationEntity(49U);
    msg.op = 184U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.5160715481741425);
    msg.setSource(54341U);
    msg.setSourceEntity(116U);
    msg.setDestination(37897U);
    msg.setDestinationEntity(232U);
    msg.op = 144U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.5628545061997008);
    msg.setSource(30847U);
    msg.setSourceEntity(174U);
    msg.setDestination(14049U);
    msg.setDestinationEntity(220U);
    msg.op = 33U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.11144167354076617);
    msg.setSource(42764U);
    msg.setSourceEntity(90U);
    msg.setDestination(64258U);
    msg.setDestinationEntity(100U);
    msg.x = 0.6460686031693668;
    msg.y = 0.7512200903638145;
    msg.z = 0.23980584394130855;
    msg.vx = 0.31978193392608123;
    msg.vy = 0.6105564191300531;
    msg.vz = 0.2617161093690159;
    msg.ax = 0.35622119206472824;
    msg.ay = 0.9694938984132897;
    msg.az = 0.06869118949483766;
    msg.flags = 30196U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.875758622161629);
    msg.setSource(47687U);
    msg.setSourceEntity(197U);
    msg.setDestination(32300U);
    msg.setDestinationEntity(81U);
    msg.x = 0.9818911247915042;
    msg.y = 0.984904457542347;
    msg.z = 0.9943496446911908;
    msg.vx = 0.3212410633921171;
    msg.vy = 0.9933289406612837;
    msg.vz = 0.5974728590603807;
    msg.ax = 0.8509927967996819;
    msg.ay = 0.1140801558964889;
    msg.az = 0.6384138487004053;
    msg.flags = 4707U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.43771530246513846);
    msg.setSource(17253U);
    msg.setSourceEntity(225U);
    msg.setDestination(27541U);
    msg.setDestinationEntity(254U);
    msg.x = 0.987330443151227;
    msg.y = 0.04256077972494865;
    msg.z = 0.8003528927905037;
    msg.vx = 0.3868930934400382;
    msg.vy = 0.877600726043408;
    msg.vz = 0.23743117658577373;
    msg.ax = 0.5599234060280105;
    msg.ay = 0.8250805311161574;
    msg.az = 0.6479419749716656;
    msg.flags = 41978U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.9561150750671183);
    msg.setSource(15835U);
    msg.setSourceEntity(41U);
    msg.setDestination(46675U);
    msg.setDestinationEntity(46U);
    msg.value = 0.4251996134147502;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.7421285572128524);
    msg.setSource(27734U);
    msg.setSourceEntity(174U);
    msg.setDestination(44377U);
    msg.setDestinationEntity(177U);
    msg.value = 0.9845244051463573;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.5740945171196761);
    msg.setSource(3333U);
    msg.setSourceEntity(109U);
    msg.setDestination(17646U);
    msg.setDestinationEntity(6U);
    msg.value = 0.1408127292159942;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.02412356495451573);
    msg.setSource(64767U);
    msg.setSourceEntity(108U);
    msg.setDestination(48251U);
    msg.setDestinationEntity(53U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 374426509U;
    tmp_msg_0.start_lat = 0.8499594161941398;
    tmp_msg_0.start_lon = 0.15361271863883363;
    tmp_msg_0.start_z = 0.38199380227307933;
    tmp_msg_0.start_z_units = 45U;
    tmp_msg_0.end_lat = 0.09325476091881324;
    tmp_msg_0.end_lon = 0.8776472460708842;
    tmp_msg_0.end_z = 0.9451698561512958;
    tmp_msg_0.end_z_units = 136U;
    tmp_msg_0.speed = 0.7019784904015226;
    tmp_msg_0.speed_units = 139U;
    tmp_msg_0.lradius = 0.5632201269369395;
    tmp_msg_0.flags = 241U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.7055631977970093);
    msg.setSource(5456U);
    msg.setSourceEntity(100U);
    msg.setDestination(41902U);
    msg.setDestinationEntity(225U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 96038820U;
    tmp_msg_0.start_lat = 0.5709005182794528;
    tmp_msg_0.start_lon = 0.2732711669510014;
    tmp_msg_0.start_z = 0.27325724547121555;
    tmp_msg_0.start_z_units = 182U;
    tmp_msg_0.end_lat = 0.6801342288528887;
    tmp_msg_0.end_lon = 0.9633389671739404;
    tmp_msg_0.end_z = 0.621444623555118;
    tmp_msg_0.end_z_units = 166U;
    tmp_msg_0.speed = 0.9722141531559928;
    tmp_msg_0.speed_units = 229U;
    tmp_msg_0.lradius = 0.8226058795051023;
    tmp_msg_0.flags = 68U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.9288464791525078);
    msg.setSource(56618U);
    msg.setSourceEntity(153U);
    msg.setDestination(34722U);
    msg.setDestinationEntity(201U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 3266391505U;
    tmp_msg_0.start_lat = 0.7660115642836437;
    tmp_msg_0.start_lon = 0.17681070160988732;
    tmp_msg_0.start_z = 0.6775103249469895;
    tmp_msg_0.start_z_units = 205U;
    tmp_msg_0.end_lat = 0.6249931660663258;
    tmp_msg_0.end_lon = 0.6262058452347368;
    tmp_msg_0.end_z = 0.2405331301136472;
    tmp_msg_0.end_z_units = 226U;
    tmp_msg_0.speed = 0.10530626889038308;
    tmp_msg_0.speed_units = 135U;
    tmp_msg_0.lradius = 0.6104497562854038;
    tmp_msg_0.flags = 53U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.9039562281890725);
    msg.setSource(41708U);
    msg.setSourceEntity(155U);
    msg.setDestination(3782U);
    msg.setDestinationEntity(248U);
    msg.timeout = 54021U;
    msg.lat = 0.7449844632359006;
    msg.lon = 0.7266909981245623;
    msg.z = 0.9201594686470606;
    msg.z_units = 249U;
    msg.speed = 0.8874334660782104;
    msg.speed_units = 201U;
    msg.roll = 0.2840717776890592;
    msg.pitch = 0.37984343651356567;
    msg.yaw = 0.2546411411547559;
    msg.custom.assign("EFQOGDIMZJVSECFUZOVWLYTVMHZOBMEEJTSUQVGKWHSBYIGFNFNAJNJGLAHPYRXQEMTKLQBKKQDTUCXGVHGSNWVXHPNGCIOPLPGQCMUXFAKAGAPKKSCJSLUXHRUVWLQENTDEZNXRHLUAOPNVSAWFRUZJPYDBLZFDKMNOITDQHDECOIZOPXVCIABT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.8009619537553748);
    msg.setSource(33198U);
    msg.setSourceEntity(54U);
    msg.setDestination(40823U);
    msg.setDestinationEntity(95U);
    msg.timeout = 59401U;
    msg.lat = 0.07708269524598765;
    msg.lon = 0.2155649499255634;
    msg.z = 0.26683886508828547;
    msg.z_units = 50U;
    msg.speed = 0.42876759941035913;
    msg.speed_units = 147U;
    msg.roll = 0.15319865845718206;
    msg.pitch = 0.7063104006165483;
    msg.yaw = 0.037229004921582876;
    msg.custom.assign("QWYXGEGWVXTFFTTRSLHJNEYTKJMQXOUKPCLDHITKZSURPHWLWBRRTFSYSQCTEBDIEYCOFTDQFXQEISPWONMFLSGVOMKVSRAKPCEBHJDJNJKYPBZCXYUDY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.881916652545934);
    msg.setSource(29155U);
    msg.setSourceEntity(156U);
    msg.setDestination(31317U);
    msg.setDestinationEntity(110U);
    msg.timeout = 21681U;
    msg.lat = 0.2381209766028033;
    msg.lon = 0.5178739287642375;
    msg.z = 0.9537542758820031;
    msg.z_units = 225U;
    msg.speed = 0.5664480843887983;
    msg.speed_units = 198U;
    msg.roll = 0.28282142291473966;
    msg.pitch = 0.9816881214021471;
    msg.yaw = 0.3282411699019786;
    msg.custom.assign("IDSPUOVSBLLMBNWRQTVOZDLVSNBJFGJNHKZJREOYCSREROHHAKDBNTDIIEBQNDUGKZECJCUHSJQFADXPEREYKXLCZYNSYKHFKMPIIAPFXGYCNSZOYMLFVUZWTMTWVUUMCMMHOBCWLAJQWCZBRPIFOHAGZELIDKYXMTJCWWJNABXTORXDVWKPGXXAVSAQLTPBICLDXVZFQUSMRHKYTTV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.2192712638812555);
    msg.setSource(54175U);
    msg.setSourceEntity(143U);
    msg.setDestination(21563U);
    msg.setDestinationEntity(10U);
    msg.timeout = 16987U;
    msg.lat = 0.24472141431643168;
    msg.lon = 0.3498442097175154;
    msg.z = 0.7719392293828214;
    msg.z_units = 204U;
    msg.speed = 0.4121504816453182;
    msg.speed_units = 130U;
    msg.duration = 34975U;
    msg.radius = 0.8204678144629598;
    msg.flags = 247U;
    msg.custom.assign("ZRDFTAKGBKOJYLCZFVWNZUWOFMYGLICHFUJMEQGJZEDBDABLVUSLWVOLEZIWKNVPTIKVDYNOROFPSUORTDHQVXYMXQOAKBRGJTCIPSXT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.5441193569842561);
    msg.setSource(27116U);
    msg.setSourceEntity(103U);
    msg.setDestination(56043U);
    msg.setDestinationEntity(148U);
    msg.timeout = 21084U;
    msg.lat = 0.032184341217189605;
    msg.lon = 0.5323500627497538;
    msg.z = 0.4817605508770708;
    msg.z_units = 51U;
    msg.speed = 0.9318414139607833;
    msg.speed_units = 28U;
    msg.duration = 6495U;
    msg.radius = 0.41719507538632217;
    msg.flags = 96U;
    msg.custom.assign("LRHSFHZNLMGUBHMSTVVASOQBJQYHNVYGVOADNRTAZQFOSAIXDCXPGOBYKMMADQSTIRYQXGRCCUJMFEXDZFWXKHLRCVUZNLMKPAWPELQWYWLZSTUTWAGWAFXIPDDFYEFKEYTGPHCPJEYZYDEFVBKCGAJKVTONAKHWKUWRFEBJJOPRWSUGBZJZJNYZNHLQCQOEDGLU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.17518249187850665);
    msg.setSource(50188U);
    msg.setSourceEntity(107U);
    msg.setDestination(41346U);
    msg.setDestinationEntity(32U);
    msg.timeout = 18110U;
    msg.lat = 0.418804046740884;
    msg.lon = 0.4232632807926334;
    msg.z = 0.8004035912738656;
    msg.z_units = 131U;
    msg.speed = 0.5150334243302219;
    msg.speed_units = 183U;
    msg.duration = 45130U;
    msg.radius = 0.4472025674589498;
    msg.flags = 49U;
    msg.custom.assign("HXYOCALONNCMKZBVCYKANHKWYDTMIUSCKVFUAUVROOXEVALZSCPMCYGNTHVSWJUDUJYLQLBCVXQKVAOXGWJKFZBIFMLIWEXFDVAPTFTNNEKIFQJGOGZSECZYQNQRUJBPNOWWDZHWSXJRJMTBM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.8095727494138718);
    msg.setSource(46235U);
    msg.setSourceEntity(116U);
    msg.setDestination(53141U);
    msg.setDestinationEntity(70U);
    msg.custom.assign("XVYPUCCHXFDYZHFJKXTIDIDPHXKCCOLJIQLQOHJOFCDCNXPFXMRYEEMAFK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.460665404185127);
    msg.setSource(22918U);
    msg.setSourceEntity(44U);
    msg.setDestination(34095U);
    msg.setDestinationEntity(177U);
    msg.custom.assign("GCKULVXCLOEMXCMRGIAMRYRASPHDBEZGXTFJKVWMLDBBZGISXSNTPJQHTXCNRVNEKZTWLLNVFRHXAGSVFTZKDQZKWKNUWMKBIKAXRTAIOWRVSSWVXIBTIDTFDLPPQZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.42811317838014795);
    msg.setSource(9175U);
    msg.setSourceEntity(100U);
    msg.setDestination(39996U);
    msg.setDestinationEntity(21U);
    msg.custom.assign("NIUSCTJHCLAHYECABJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.6614175039586029);
    msg.setSource(38060U);
    msg.setSourceEntity(189U);
    msg.setDestination(22855U);
    msg.setDestinationEntity(142U);
    msg.timeout = 18778U;
    msg.lat = 0.03871654014009662;
    msg.lon = 0.7188155009378403;
    msg.z = 0.7665708947504801;
    msg.z_units = 217U;
    msg.duration = 10757U;
    msg.speed = 0.24414815919803612;
    msg.speed_units = 221U;
    msg.type = 33U;
    msg.radius = 0.3598114054302699;
    msg.length = 0.4661980854212967;
    msg.bearing = 0.8870050237825035;
    msg.direction = 10U;
    msg.custom.assign("KFYPLRUAMBZKH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.2653667682049221);
    msg.setSource(20209U);
    msg.setSourceEntity(47U);
    msg.setDestination(15598U);
    msg.setDestinationEntity(47U);
    msg.timeout = 6303U;
    msg.lat = 0.172606661788123;
    msg.lon = 0.20579955707920616;
    msg.z = 0.700743404714935;
    msg.z_units = 66U;
    msg.duration = 25551U;
    msg.speed = 0.5840465812680011;
    msg.speed_units = 27U;
    msg.type = 4U;
    msg.radius = 0.3530256283242964;
    msg.length = 0.24524481220604522;
    msg.bearing = 0.07818987654667853;
    msg.direction = 71U;
    msg.custom.assign("QFGAEKKKNXFQPENPOGRKEDGXOIHSIMRHMNNHAODRQBQXNLDVDZTVBVNHKXFXRLVYFDBPWUGCNWPWASLLFQCFUTXEIDABMWJFIWUUASEZJEIQGVULIMKIBYMDOMUCSWCYZAJHAPTVPUIZCSOYTLHNAAHMWZGIXGZCPFMZJEZRBCOTPMTYLOKHGQFBIVJMBKHBXBSWSKOLPRUNTYRCEYZZSYQGJLJH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.913056687526217);
    msg.setSource(22675U);
    msg.setSourceEntity(240U);
    msg.setDestination(52677U);
    msg.setDestinationEntity(17U);
    msg.timeout = 20979U;
    msg.lat = 0.7440593465755427;
    msg.lon = 0.14179424642735028;
    msg.z = 0.875681747090175;
    msg.z_units = 198U;
    msg.duration = 28502U;
    msg.speed = 0.48616834171102763;
    msg.speed_units = 226U;
    msg.type = 193U;
    msg.radius = 0.12850170746584155;
    msg.length = 0.5358462857662312;
    msg.bearing = 0.7098148121969845;
    msg.direction = 217U;
    msg.custom.assign("FOZOFOCKSPKKQRQPFGDDIFDHGQGEOKWWETNLBANYCJXQRZMEXETSEJDMXOSHBVQGFLRHYSLXTQCQCRTHRZUYAAWVJVMUXNSSFEYIYMCUKQIDZOFBBVGGJGFAWQHUTKW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.335212296336021);
    msg.setSource(29335U);
    msg.setSourceEntity(162U);
    msg.setDestination(27536U);
    msg.setDestinationEntity(149U);
    msg.duration = 31169U;
    msg.custom.assign("DULNZQKEUOTLZSSGOENQAPYEHOPTMJLSZFIKRBUOWWKBWEARABKPAPVQPCUFBEXAGXORTTBI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.3709209718630865);
    msg.setSource(14720U);
    msg.setSourceEntity(126U);
    msg.setDestination(64696U);
    msg.setDestinationEntity(197U);
    msg.duration = 3097U;
    msg.custom.assign("RESRYKDTAXVJKQLJWIZBEYJELKHOUXKRUVLDAGSNRTDLIOPNQENAHMKXCKJYQPMQBDGWFIDIRMXXUAGPUMVYYYVGWFRTTOQHIIHCROKPCDZD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.641481424835849);
    msg.setSource(5268U);
    msg.setSourceEntity(126U);
    msg.setDestination(227U);
    msg.setDestinationEntity(205U);
    msg.duration = 141U;
    msg.custom.assign("MMRHHACWLVDPEJKGYCUGOTYERQPUZLKZBCOWKSKGXNVKCRRFQKGFEGMCVAYOUZZJEIBITNSBZVWGULPLMWDTZSNXCXJOTVDKLBHIBGWAJYNZGNULXRIIIFETYSOSUROSMGJLKT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.985234103915532);
    msg.setSource(7540U);
    msg.setSourceEntity(228U);
    msg.setDestination(3025U);
    msg.setDestinationEntity(76U);
    IMC::DesiredRoll tmp_msg_0;
    tmp_msg_0.value = 0.6834994655459342;
    msg.control.set(tmp_msg_0);
    msg.duration = 57351U;
    msg.custom.assign("YGVFDIVGLXSYGCZCPFJZAXRWEBJQFFIAVPGLTZUIJYCHZKUEEJGDNUJQAVMKMAUOCQWMWEZCRGKJOURURBBSLSWXPIHVYHJTSMBHHTLQDEUGNXWLJICYZUURZYYGATPBWR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.46349616287210216);
    msg.setSource(51094U);
    msg.setSourceEntity(221U);
    msg.setDestination(24975U);
    msg.setDestinationEntity(31U);
    IMC::DesiredPitch tmp_msg_0;
    tmp_msg_0.value = 0.5410852405113903;
    msg.control.set(tmp_msg_0);
    msg.duration = 29116U;
    msg.custom.assign("IHXUHLKGSGXPZWDOOHAEHENKTQJYLOJUMZIJAIDEGUOKJWNODZPPCAULFTXWEYIXYTTSVLTHRWVXPCVXSMIEMYKVKUOBNVQRJSQVNBRSPXYBSDJWFMWFQQDYFZAZQUJVECFUEYSHPVTBULAVLBEGNDPAAOLNFMXLHTXPMJMNKCQFORAHZKGNCARRIIBMOYDXFLFNKAPIGTCWSTPCURFMIRUWCDJODSLJBKQZGSQWBCEZWD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.9839062335714426);
    msg.setSource(20441U);
    msg.setSourceEntity(178U);
    msg.setDestination(35164U);
    msg.setDestinationEntity(36U);
    IMC::DesiredPitch tmp_msg_0;
    tmp_msg_0.value = 0.0406137277910138;
    msg.control.set(tmp_msg_0);
    msg.duration = 36014U;
    msg.custom.assign("AUTNFKSFITTRRMKLTZZFQMNOFICWEVNNRAQYSHOJWPOBLQGLRKUFHZPXFWWHUYEWCLLVWJWXVEZBKAHILGNKKSHUAVSEZOUGRLYGYDMBEXQLKGYCRSZHNAPWSDIDZHMQAKJBBIPXCTIAGGDJPITYVADEHFXCYVVIZGHWNEYEJBOQTBLPNSXDSDCJCXIBOZGMJNPDRJF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.8792410915141444);
    msg.setSource(39994U);
    msg.setSourceEntity(100U);
    msg.setDestination(56730U);
    msg.setDestinationEntity(133U);
    msg.timeout = 22838U;
    msg.lat = 0.6418007817774208;
    msg.lon = 0.36911493575316223;
    msg.z = 0.9610686674100483;
    msg.z_units = 176U;
    msg.speed = 0.31016084691929957;
    msg.speed_units = 9U;
    msg.bearing = 0.4091961546565881;
    msg.cross_angle = 0.03383583345530683;
    msg.width = 0.507971306507146;
    msg.length = 0.4143566137711464;
    msg.hstep = 0.9177455734069051;
    msg.coff = 59U;
    msg.alternation = 178U;
    msg.flags = 226U;
    msg.custom.assign("GPJEBQREVYJOW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.4509395057936376);
    msg.setSource(43693U);
    msg.setSourceEntity(201U);
    msg.setDestination(22388U);
    msg.setDestinationEntity(226U);
    msg.timeout = 8663U;
    msg.lat = 0.1440562041989213;
    msg.lon = 0.5977090815356914;
    msg.z = 0.44017571006634104;
    msg.z_units = 248U;
    msg.speed = 0.8507164760908515;
    msg.speed_units = 101U;
    msg.bearing = 0.8675593158505799;
    msg.cross_angle = 0.8330618289530669;
    msg.width = 0.0869444741331129;
    msg.length = 0.06467810824739673;
    msg.hstep = 0.6824083154823682;
    msg.coff = 194U;
    msg.alternation = 85U;
    msg.flags = 116U;
    msg.custom.assign("WWGPMPFZQLHEHXS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.2826803016950622);
    msg.setSource(11537U);
    msg.setSourceEntity(128U);
    msg.setDestination(25750U);
    msg.setDestinationEntity(29U);
    msg.timeout = 6735U;
    msg.lat = 0.822311295474875;
    msg.lon = 0.740672451350036;
    msg.z = 0.32802316459428915;
    msg.z_units = 222U;
    msg.speed = 0.1169215537933238;
    msg.speed_units = 136U;
    msg.bearing = 0.6065052079658116;
    msg.cross_angle = 0.20766195604556148;
    msg.width = 0.24344318225076866;
    msg.length = 0.39791949955625017;
    msg.hstep = 0.27158302920188904;
    msg.coff = 206U;
    msg.alternation = 28U;
    msg.flags = 39U;
    msg.custom.assign("QRMXBIJQLSASXZGSKIVWJUERCOPWDCFUOZYGDANCTBNPBLGZSGXPOSNSDABGZUJAAZDMAAJETIQBVHRWOFUMWCJBISYALPXQQKKBERQITFLHQPWXCVFKCXDRRFRDCPVMMKAILFFBULVWTJXHVHVZHVTWOKYMGYPUWHKNVITHKYLJGZBVDGENSZOEWEGZYXPIIFQUCKGOJNCIPLMHY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.17324844544057216);
    msg.setSource(16811U);
    msg.setSourceEntity(107U);
    msg.setDestination(26696U);
    msg.setDestinationEntity(87U);
    msg.timeout = 45801U;
    msg.lat = 0.6214684650365476;
    msg.lon = 0.11567269140709013;
    msg.z = 0.5154308894303478;
    msg.z_units = 172U;
    msg.speed = 0.49533028030240944;
    msg.speed_units = 94U;
    msg.custom.assign("GFVWAIFQJZGTTUPFMXBQJNLCOODSDYBXCQDEEIDHPJOMVZVUCTTOWLWLKDLEZPCMTUVJZNLSVFAGV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.1923088363862674);
    msg.setSource(24594U);
    msg.setSourceEntity(86U);
    msg.setDestination(27335U);
    msg.setDestinationEntity(43U);
    msg.timeout = 22125U;
    msg.lat = 0.703766178207953;
    msg.lon = 0.11173369524161325;
    msg.z = 0.9495494091129154;
    msg.z_units = 153U;
    msg.speed = 0.9138255299863663;
    msg.speed_units = 155U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.1995704622178327;
    tmp_msg_0.y = 0.4098661704652108;
    tmp_msg_0.z = 0.8084832040412799;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("REQHVCWPBLLMJKGHPQCNLYOXRBSXVFPTWQYFSUXJXPSDQEWMBVNRXGSNAEZAHYPNEJPCPVIWBUDIJAHJUVEOIZXOLPEOKGICQBUIYYAUGHWDWAFJDOIBWQTMAVFSXDWFQMQZFDRHSOOWJNLOFPRKKR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.7322233138626183);
    msg.setSource(57698U);
    msg.setSourceEntity(36U);
    msg.setDestination(23798U);
    msg.setDestinationEntity(244U);
    msg.timeout = 12410U;
    msg.lat = 0.8487225738861465;
    msg.lon = 0.9161339768441753;
    msg.z = 0.7526960664196153;
    msg.z_units = 1U;
    msg.speed = 0.41258313595652374;
    msg.speed_units = 208U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.9762748485307419;
    tmp_msg_0.y = 0.8543736595086968;
    tmp_msg_0.z = 0.5017324785430425;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("DXMEZZXRNIYBVBCPBPUMAONBFWLFTBBVUEMTUCFRRNILIAPLMFMKOGJIRQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.18051291649446122);
    msg.setSource(11926U);
    msg.setSourceEntity(55U);
    msg.setDestination(7852U);
    msg.setDestinationEntity(163U);
    msg.x = 0.5493445984222519;
    msg.y = 0.37298478033329685;
    msg.z = 0.5921878275588971;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.805035392221134);
    msg.setSource(54753U);
    msg.setSourceEntity(95U);
    msg.setDestination(15318U);
    msg.setDestinationEntity(63U);
    msg.x = 0.5879168401749247;
    msg.y = 0.9918123650608242;
    msg.z = 0.6953199772661529;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.1980811938206386);
    msg.setSource(53458U);
    msg.setSourceEntity(25U);
    msg.setDestination(12037U);
    msg.setDestinationEntity(232U);
    msg.x = 0.9769769119892237;
    msg.y = 0.8909981505233746;
    msg.z = 0.4870937255687783;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.26422162823026185);
    msg.setSource(60516U);
    msg.setSourceEntity(58U);
    msg.setDestination(31970U);
    msg.setDestinationEntity(223U);
    msg.timeout = 9410U;
    msg.lat = 0.8675782225170442;
    msg.lon = 0.8489606059052797;
    msg.z = 0.9657937394989476;
    msg.z_units = 20U;
    msg.amplitude = 0.3670371635705615;
    msg.pitch = 0.47898264079571184;
    msg.speed = 0.9596585193646493;
    msg.speed_units = 241U;
    msg.custom.assign("RAROYKVJEIGKOSFUVTOGILOIJTZFXWNETDDBHCIHJQZWYHSSOZEBLZJLAJIMAUAIIFAPVYUYFENGZDVNRONFFNCHFNXVHKWWQIQQTB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.9309690218222464);
    msg.setSource(14480U);
    msg.setSourceEntity(204U);
    msg.setDestination(50683U);
    msg.setDestinationEntity(150U);
    msg.timeout = 63966U;
    msg.lat = 0.8237152643156298;
    msg.lon = 0.9469598657488351;
    msg.z = 0.9333974308969204;
    msg.z_units = 42U;
    msg.amplitude = 0.713631401100259;
    msg.pitch = 0.14240226955463786;
    msg.speed = 0.47695914483814317;
    msg.speed_units = 48U;
    msg.custom.assign("UPZVHGAYIMADLSEKCJRNYRZFSYEFFZBNDKQTAPJFKJMQOXLMJXLMXOOCFFDKBVJGROZHNKDIJJNSWVTPLUMWYTEWVEGQWHBCJQVOMZKRXHWICHMGSWVXJHZVPTTKUPTOPGVRPJRHIEYQTOXEOEILNABLTNQSYTCQBXZEZCWDCIHACAHGPYAUUREFUKDDMNOHDSZBSXUUDYNFMBWQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.7765652201747892);
    msg.setSource(22785U);
    msg.setSourceEntity(128U);
    msg.setDestination(48197U);
    msg.setDestinationEntity(150U);
    msg.timeout = 51193U;
    msg.lat = 0.17491432994457612;
    msg.lon = 0.6640111685152141;
    msg.z = 0.6786541070440606;
    msg.z_units = 126U;
    msg.amplitude = 0.1329402808561181;
    msg.pitch = 0.021818897054755704;
    msg.speed = 0.974844195318778;
    msg.speed_units = 23U;
    msg.custom.assign("RSQPKUSTFQVKGUWIECNBEDZIOSPVFXAQFFVEVIFDZIBPCTYUKTNCTXOFIXCGMELMPXGAOWWLPIOUYNZORKAWFJAWLPNMHZAKSRQIMTHRBTMVIXBRGDTEXQQSVCXADZTJHQLKYUYLJNZJHQKYCGOCOCDWVLYIGJZLMPJPAHWHASPFBSGEXKLMUURAFQNJKZFGXGEENDUHBYDOHBUIHSTDVWRKOZLNNWYZCHRLSUXQRBVTBJJCPM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.7295573277191297);
    msg.setSource(19016U);
    msg.setSourceEntity(230U);
    msg.setDestination(41172U);
    msg.setDestinationEntity(43U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.35395605015321463);
    msg.setSource(60301U);
    msg.setSourceEntity(54U);
    msg.setDestination(64447U);
    msg.setDestinationEntity(164U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.8497756319765691);
    msg.setSource(64804U);
    msg.setSourceEntity(174U);
    msg.setDestination(18127U);
    msg.setDestinationEntity(227U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.5692973428181806);
    msg.setSource(41499U);
    msg.setSourceEntity(39U);
    msg.setDestination(41838U);
    msg.setDestinationEntity(250U);
    msg.lat = 0.7354223642999224;
    msg.lon = 0.8269758084145106;
    msg.z = 0.7918505802051813;
    msg.z_units = 135U;
    msg.radius = 0.9062087365706203;
    msg.duration = 6918U;
    msg.speed = 0.23394246722622858;
    msg.speed_units = 144U;
    msg.custom.assign("JRHVFJLVQNTLKSQAQWFMNMDQBEOKLZNKAKHQLBNUKJHEDEMWMYKVMXGATSDRXCL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.8935934527466557);
    msg.setSource(56855U);
    msg.setSourceEntity(170U);
    msg.setDestination(16991U);
    msg.setDestinationEntity(121U);
    msg.lat = 0.37491385713818404;
    msg.lon = 0.12216277854103941;
    msg.z = 0.7101257671540058;
    msg.z_units = 37U;
    msg.radius = 0.19406403402283623;
    msg.duration = 41069U;
    msg.speed = 0.09207340851042645;
    msg.speed_units = 75U;
    msg.custom.assign("KLEFYLBUDOZRREJQXRCYIWRKKHENKVLGDODSLEIZJUPODKMJDTDLZPQPLVZGYBNXYWUTNADCSNRQBPQTWM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.7486826857033425);
    msg.setSource(12388U);
    msg.setSourceEntity(243U);
    msg.setDestination(10303U);
    msg.setDestinationEntity(116U);
    msg.lat = 0.043259822593564645;
    msg.lon = 0.5826924435684179;
    msg.z = 0.5713820748910277;
    msg.z_units = 41U;
    msg.radius = 0.7227383039253076;
    msg.duration = 29404U;
    msg.speed = 0.2746665566984656;
    msg.speed_units = 251U;
    msg.custom.assign("XQNSTHXWBZEIOZDGGMJYVPLBFPQCJZKGBPQJTOUJXDHEMNZCQZRGXFMLAFOESTWDVLHRJXXMRRGYSZMAOFTOTKQBICQKBEAEUZURIRCXEQIIFJYMDLABCMWGGEYTLBTJQSPPAADHDCKJYSUPNIRMSLRKOONIJRNCUQPVWSVOYIRSLOHAGWKDLI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.42939427684865383);
    msg.setSource(14392U);
    msg.setSourceEntity(15U);
    msg.setDestination(47790U);
    msg.setDestinationEntity(240U);
    msg.timeout = 21750U;
    msg.flags = 222U;
    msg.lat = 0.2606515953520744;
    msg.lon = 0.4605009291681257;
    msg.start_z = 0.2499438544843985;
    msg.start_z_units = 51U;
    msg.end_z = 0.3654319883020506;
    msg.end_z_units = 205U;
    msg.radius = 0.9866241449784068;
    msg.speed = 0.8232516415327586;
    msg.speed_units = 218U;
    msg.custom.assign("FCZGOZQKQRVKSHTJSVEHSMVNRYNUDWKKGJSROXBEBXQJPXVSCHFWROYHNFXOTEZRQWELUEHIVMPANIKGPGBMHZCDFQO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.9792661636914752);
    msg.setSource(46660U);
    msg.setSourceEntity(61U);
    msg.setDestination(17883U);
    msg.setDestinationEntity(47U);
    msg.timeout = 60203U;
    msg.flags = 132U;
    msg.lat = 0.8110917336503211;
    msg.lon = 0.42413498985442966;
    msg.start_z = 0.8072079693383246;
    msg.start_z_units = 186U;
    msg.end_z = 0.14594993872786421;
    msg.end_z_units = 51U;
    msg.radius = 0.703702648463811;
    msg.speed = 0.43431632736104164;
    msg.speed_units = 16U;
    msg.custom.assign("FUCJBVPRGXTHLFVAXIMVSPRNYUQTUOMBSVARPMNRCWDIYIOOGIMZSVXXNAKLFCDBGOGHWQZUFNBXCWODANUUERCJTLUZGOQYLRGCYXWJGBDKURIVJMJZPIZZTWXFFQHCKJHTETJCYMATAFEDDAKLWQWEHVFLKKNJIHXOEES");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.9090796965098474);
    msg.setSource(47224U);
    msg.setSourceEntity(34U);
    msg.setDestination(33846U);
    msg.setDestinationEntity(119U);
    msg.timeout = 63060U;
    msg.flags = 7U;
    msg.lat = 0.30594856492746947;
    msg.lon = 0.49320436034461235;
    msg.start_z = 0.9016894643714504;
    msg.start_z_units = 116U;
    msg.end_z = 0.006708537335741616;
    msg.end_z_units = 82U;
    msg.radius = 0.9257649507082553;
    msg.speed = 0.13723366238334456;
    msg.speed_units = 21U;
    msg.custom.assign("RFDPWACWRUHIIOJHKYFECWWGHOGGOHDGIWFPDXLHTCTJOPDPMRHFWGXTNECRAVZZAY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.38853874851070835);
    msg.setSource(28007U);
    msg.setSourceEntity(212U);
    msg.setDestination(63943U);
    msg.setDestinationEntity(14U);
    msg.timeout = 44909U;
    msg.lat = 0.04244470222170693;
    msg.lon = 0.6599949724541772;
    msg.z = 0.5755065406584279;
    msg.z_units = 160U;
    msg.speed = 0.4001461233571979;
    msg.speed_units = 94U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.5534177357229714;
    tmp_msg_0.y = 0.6455291464904279;
    tmp_msg_0.z = 0.13179831255204588;
    tmp_msg_0.t = 0.1282334150193697;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("BBUEFNULGRHASUXOKSBPVSAEFURKXGWYMYGLVPOZTUCWEJTJSGQNQOODPULBBIGZMFKLJYCADKYNOXXZXUJMZHOINJRKPVNEJENTHRWPHEIZAOFDOLLARRFZWOZKBTWVKBDQBVFPHSFWETMJIHWZVJSTRXCGWDWKCYCYYIQUHNQSPIFAQKDEMZGREDAAUWDRCLYMVNTFHCDGSNXPFVQEPCLLAJTYITXMQXNQYVJGUHDXIBO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.3055726139168434);
    msg.setSource(41998U);
    msg.setSourceEntity(194U);
    msg.setDestination(48749U);
    msg.setDestinationEntity(21U);
    msg.timeout = 25949U;
    msg.lat = 0.4665523562806323;
    msg.lon = 0.1459286856063382;
    msg.z = 0.8241306145407208;
    msg.z_units = 224U;
    msg.speed = 0.6097341930417457;
    msg.speed_units = 43U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.06990496898758891;
    tmp_msg_0.y = 0.09792135521539036;
    tmp_msg_0.z = 0.8155627852498607;
    tmp_msg_0.t = 0.9378628819780496;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("ULOCTCBNPFHMICCGFOLMOBWJDOPTLGXESNPBZULEDGASPTQRWSGSWWBFKEAST");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.7090940103916696);
    msg.setSource(52969U);
    msg.setSourceEntity(60U);
    msg.setDestination(41910U);
    msg.setDestinationEntity(55U);
    msg.timeout = 1421U;
    msg.lat = 0.9802506754623028;
    msg.lon = 0.9457607053969354;
    msg.z = 0.34096706733987336;
    msg.z_units = 132U;
    msg.speed = 0.6081832210389747;
    msg.speed_units = 195U;
    msg.custom.assign("KMMHVBEFCQPCWKWFCRGZHBEYEUSRDPMNLEGUELUVGOFMINAUEOCCQZZRWJVBVMQLPYSUBLKGSSXYKQIBDFHRDRIQOEQUQRWEOXYOTNMYZDVOFIBTTQZNRSXPCTIQCYOXTGRBHFGAKKUAJJHMVDHQSRPDUKPJTCDENGBXNNLTXFXPVJKJAAZMXHLWXODWTFSFWZYLJORVLABFPBGZNKISGZYJNECADSHVTAPJAIHYWZLYWVSTMOCKIULJWIAX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.7765880642873031);
    msg.setSource(12466U);
    msg.setSourceEntity(246U);
    msg.setDestination(15451U);
    msg.setDestinationEntity(240U);
    msg.x = 0.5853884771540154;
    msg.y = 0.23236832237951865;
    msg.z = 0.7868828693500255;
    msg.t = 0.7415886396456337;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.25991483523752823);
    msg.setSource(9694U);
    msg.setSourceEntity(67U);
    msg.setDestination(39576U);
    msg.setDestinationEntity(38U);
    msg.x = 0.008083168616470293;
    msg.y = 0.7714990573738952;
    msg.z = 0.7211758735392511;
    msg.t = 0.43295867100935925;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.014186583928661567);
    msg.setSource(41313U);
    msg.setSourceEntity(205U);
    msg.setDestination(30052U);
    msg.setDestinationEntity(35U);
    msg.x = 0.5770662485324811;
    msg.y = 0.5630978286491765;
    msg.z = 0.4364299661507144;
    msg.t = 0.7534075128440498;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.5117024223209657);
    msg.setSource(62410U);
    msg.setSourceEntity(222U);
    msg.setDestination(50415U);
    msg.setDestinationEntity(244U);
    msg.timeout = 50922U;
    msg.name.assign("RGJTVKCTEJDOFXITIIDEWQGHZUTKVLCROHDPDJJCQQHJDNYZAVXJFGKBVPZCGFXONAORQNSBBMQURXCITAFIQGNSZPIPEZUB");
    msg.custom.assign("LQVAZSFWCUISTWFHBJKTBWNQKCTCIUFEYEDIKKQVOOLGAGUMSORLDKXBRTINTKEEAXOFWURJK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.6211737337465634);
    msg.setSource(32888U);
    msg.setSourceEntity(207U);
    msg.setDestination(24868U);
    msg.setDestinationEntity(186U);
    msg.timeout = 50518U;
    msg.name.assign("VGQXTFYATPMSSFGQGDCERFJXHMUTJUKDYQZVPKSJQRZIGDUGFMREPYCWBSDMGNAKBLOZYBBBEPBCXVKEFJDAAYZAOVWGXBCHEPTJHJKHHITDANPFVVQOEHNAIQMTAHNDQBIXTQLSIOWGNVXJJKRWFIYVYOYIDKTNMKLNIUWZASOCKRERRDVWVKFLLOGNYOMESNQMRURYUWNQBCWZMSZXXSXUCLPIGHULCDZSOPFXLJPULTL");
    msg.custom.assign("ORQRRCAVQSNJMQQFDNCIQKATJFRAKXJGGPQODOBWUAAINIUXEVXHUKEGJDPMKKTFMYHMFMWJRNYWUATSCGIHHXDZEDNMLGZWZGSNPRMRIZVVAXWHGOYTFWKEPSLPOBMYTBZPFRLCLTVAKQLBXWYZELSQYYOFDUCUOJZASETSGVCSMLCFUQZVBZEHGHHWCWFKNMQBPBTISPVI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.5444175480925373);
    msg.setSource(22610U);
    msg.setSourceEntity(100U);
    msg.setDestination(57598U);
    msg.setDestinationEntity(158U);
    msg.timeout = 19200U;
    msg.name.assign("TSJEVOGGSXHKTXOYXJOCTJVYCFEFYCHIRGQFEVVKZAZGBIKWMEFXBZFNHSMRQOVTTHKUXVWBDWASPWLEJCJYVIIQNZPFHDMPXMANCWURQNALHZQBOLRYUPAFSKMRQJZKJBITUBOKXBCKSOORDSUZUNUFHPBDJHZIWPPPNBQLSASVLEWARMDXOMSEZOLGAFZUYECANRKQWBQLGMPUAVLIURJTEYNWYG");
    msg.custom.assign("EGSGTILFEWQDVUSSJTLAVULGYRINNRGUXPUAWZQHDRSGKCNBBITBACJADPEAHNNVPGXGMIRYSSLCHAKUGWFBUPFLLVDFYTHYMHLWCGTZQEGPJZXIEVXXZWADZXOXFVOIE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.4579053571526871);
    msg.setSource(6194U);
    msg.setSourceEntity(205U);
    msg.setDestination(27274U);
    msg.setDestinationEntity(158U);
    msg.lat = 0.3372767721615667;
    msg.lon = 0.5858271522034459;
    msg.z = 0.16477855326853175;
    msg.z_units = 165U;
    msg.speed = 0.897580237705183;
    msg.speed_units = 61U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.19229360928911232;
    tmp_msg_0.y = 0.5264493648063158;
    tmp_msg_0.z = 0.8369956853009948;
    tmp_msg_0.t = 0.756709016616456;
    msg.points.push_back(tmp_msg_0);
    msg.start_time = 0.38501465389393974;
    msg.custom.assign("DLAUZOZBKNOCUKQPMKQLNMZXIFSBTBWJACPFCXRANCEJRTTOAOVFMP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.679806395293717);
    msg.setSource(2133U);
    msg.setSourceEntity(238U);
    msg.setDestination(52311U);
    msg.setDestinationEntity(109U);
    msg.lat = 0.3436705546465033;
    msg.lon = 0.754004169295182;
    msg.z = 0.2652243711929936;
    msg.z_units = 242U;
    msg.speed = 0.5585807668975525;
    msg.speed_units = 82U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.69326874349973;
    tmp_msg_0.y = 0.6877360795665257;
    tmp_msg_0.z = 0.6206151615923291;
    tmp_msg_0.t = 0.019329814186817007;
    msg.points.push_back(tmp_msg_0);
    msg.start_time = 0.8660086506186844;
    msg.custom.assign("JHVOBKJDHKNMKSXWMLQYDGOBZPUPEFFQKAMUGYNQLKAXJPQBOKFUMWJVWWJZGGSVARNTIWQHKSIRECLRCFDCZBNLXWESSHXGXTQWHIPTHICIFSEATDNYMBPZCZZFVFGSSYQOGVDRGUTDRYLZDFOYOPYCBAVPHIPAWHBXLOFLLJCUHKMDEXCPWQJNDNVLBCXRRVYGJKNZEJZSTRUTEOTIYAAETDNUZQXI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.7681827543116155);
    msg.setSource(32291U);
    msg.setSourceEntity(136U);
    msg.setDestination(42780U);
    msg.setDestinationEntity(29U);
    msg.lat = 0.9455302488175222;
    msg.lon = 0.7240249037095474;
    msg.z = 0.4943094642158078;
    msg.z_units = 214U;
    msg.speed = 0.00041296377197042045;
    msg.speed_units = 27U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 11737U;
    tmp_msg_0.off_x = 0.23597478862597;
    tmp_msg_0.off_y = 0.5112120323313415;
    tmp_msg_0.off_z = 0.20443984002815485;
    msg.participants.push_back(tmp_msg_0);
    msg.start_time = 0.20239035051299414;
    msg.custom.assign("NYWIXHMPPQOCOGOEIMHZPBRIKJTYBGUDTRBSRAMSXQCXZHPFNLRQYHGRTXRMFBBQMYSDELAIWCCVBPTBFWWPZOYAZXLVQVUNLJDSJKJIJFHDDTKYWZNNGALRZPLEGDCHEQMUKAIXOXPEVXHCMVQIMEYSOIWZRKUUVGMFCSGKTPVICBLOJOUTKXUGKAHFNQTDTHVSAFJWSVXFHUZYDCYRQVBNEBFTLUCZWFNONIZKAPSAMJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.434203556808472);
    msg.setSource(54803U);
    msg.setSourceEntity(108U);
    msg.setDestination(40909U);
    msg.setDestinationEntity(237U);
    msg.vid = 4250U;
    msg.off_x = 0.6998181037139524;
    msg.off_y = 0.4814438806575909;
    msg.off_z = 0.768473122060201;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.8230926037217746);
    msg.setSource(5908U);
    msg.setSourceEntity(178U);
    msg.setDestination(51462U);
    msg.setDestinationEntity(142U);
    msg.vid = 23074U;
    msg.off_x = 0.9191722050559373;
    msg.off_y = 0.11728770397893484;
    msg.off_z = 0.9719167104782165;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.8722946701067419);
    msg.setSource(7121U);
    msg.setSourceEntity(90U);
    msg.setDestination(30664U);
    msg.setDestinationEntity(179U);
    msg.vid = 40232U;
    msg.off_x = 0.03580151148579047;
    msg.off_y = 0.01849181037205827;
    msg.off_z = 0.6397465987194938;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.7238133151934807);
    msg.setSource(9967U);
    msg.setSourceEntity(36U);
    msg.setDestination(60387U);
    msg.setDestinationEntity(43U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.8794165840746743);
    msg.setSource(17442U);
    msg.setSourceEntity(122U);
    msg.setDestination(26528U);
    msg.setDestinationEntity(238U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.00581863163945695);
    msg.setSource(33087U);
    msg.setSourceEntity(9U);
    msg.setDestination(26904U);
    msg.setDestinationEntity(108U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.30333192898622585);
    msg.setSource(18870U);
    msg.setSourceEntity(50U);
    msg.setDestination(205U);
    msg.setDestinationEntity(163U);
    msg.mid = 40829U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.9774305230311761);
    msg.setSource(14803U);
    msg.setSourceEntity(30U);
    msg.setDestination(63987U);
    msg.setDestinationEntity(64U);
    msg.mid = 3060U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.5302764860601146);
    msg.setSource(39555U);
    msg.setSourceEntity(42U);
    msg.setDestination(9324U);
    msg.setDestinationEntity(247U);
    msg.mid = 47159U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.9774176291683405);
    msg.setSource(5221U);
    msg.setSourceEntity(71U);
    msg.setDestination(38619U);
    msg.setDestinationEntity(156U);
    msg.state = 9U;
    msg.eta = 54878U;
    msg.info.assign("MDACDMHCJIBUWGZTTYONUVXWWUIGXRYMXJQCASQFHYRVGCABGTISAURVLLPLJQIHWLQTKOKKYXXXRXCNVIJLMZDJOXSONFMMZEURMOMFQRDBFUESWVNRMXKPJTUAZARINZFPSBLPECZZCZXDLVPEMGPEAFKBHBZFPNYDWVBINROHSVWAKKFZW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.43620118134399266);
    msg.setSource(10770U);
    msg.setSourceEntity(181U);
    msg.setDestination(49326U);
    msg.setDestinationEntity(13U);
    msg.state = 159U;
    msg.eta = 46573U;
    msg.info.assign("FXTUREHWJNYWGTDGNSOBUQOQJERSGWPGZXAEALJSKHJIDDMLMTPVCCVKCMUDRWOLLQCJJSPBVNQKIOZAYXMUWQCZORMPOZYUVSXGALFBTBCKEDKAWHCXGDIFFIBPTEQJXBLTEDCXRIKFMSVHQCRMZVYDVFUPHUHDVFGAVKZUUKRHYJAXYNTIMHAYHGWPQKLZLREEIVZWMQIYTFCILONDEQYBEZZUHFNKRONSFNIJXBB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.6835305620842903);
    msg.setSource(29120U);
    msg.setSourceEntity(194U);
    msg.setDestination(33853U);
    msg.setDestinationEntity(170U);
    msg.state = 217U;
    msg.eta = 40868U;
    msg.info.assign("SOTHSHKBQLPWYXQYBNAFHMZNRQGZPPQUIHZTJBJXGEQOKUDREYMIVYEWNONVKTOJASTNFXCRMCKDJHDQPUFDZUXQMKPKWOGXVWZCDVXMIFXEILLDALBJBREUL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.26454183778331086);
    msg.setSource(59636U);
    msg.setSourceEntity(127U);
    msg.setDestination(22303U);
    msg.setDestinationEntity(184U);
    msg.system = 15784U;
    msg.duration = 22843U;
    msg.speed = 0.17599277151864512;
    msg.speed_units = 53U;
    msg.x = 0.5559529361990551;
    msg.y = 0.11029639143595105;
    msg.z = 0.2725506795190499;
    msg.z_units = 244U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.09230653902972175);
    msg.setSource(42753U);
    msg.setSourceEntity(14U);
    msg.setDestination(6489U);
    msg.setDestinationEntity(157U);
    msg.system = 22148U;
    msg.duration = 51973U;
    msg.speed = 0.2786392309645326;
    msg.speed_units = 194U;
    msg.x = 0.13611710760579698;
    msg.y = 0.8703157354891686;
    msg.z = 0.30368292283915577;
    msg.z_units = 78U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.592997306442436);
    msg.setSource(48603U);
    msg.setSourceEntity(142U);
    msg.setDestination(40876U);
    msg.setDestinationEntity(21U);
    msg.system = 28633U;
    msg.duration = 30418U;
    msg.speed = 0.6830001357884995;
    msg.speed_units = 8U;
    msg.x = 0.2769764558060054;
    msg.y = 0.05952183999718286;
    msg.z = 0.42892394893587504;
    msg.z_units = 94U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.1430755258817532);
    msg.setSource(7110U);
    msg.setSourceEntity(204U);
    msg.setDestination(61544U);
    msg.setDestinationEntity(242U);
    msg.lat = 0.5661410305435965;
    msg.lon = 0.42264210688764425;
    msg.speed = 0.1717117166115404;
    msg.speed_units = 116U;
    msg.duration = 34033U;
    msg.sys_a = 17025U;
    msg.sys_b = 59666U;
    msg.move_threshold = 0.4671347113960237;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.4858497278688185);
    msg.setSource(49845U);
    msg.setSourceEntity(116U);
    msg.setDestination(29631U);
    msg.setDestinationEntity(67U);
    msg.lat = 0.19350279189281927;
    msg.lon = 0.08510773796144633;
    msg.speed = 0.4157176340507325;
    msg.speed_units = 214U;
    msg.duration = 14763U;
    msg.sys_a = 12504U;
    msg.sys_b = 22580U;
    msg.move_threshold = 0.6681243475130506;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.45388906730160217);
    msg.setSource(39962U);
    msg.setSourceEntity(47U);
    msg.setDestination(29076U);
    msg.setDestinationEntity(87U);
    msg.lat = 0.7587317521958439;
    msg.lon = 0.879500839478067;
    msg.speed = 0.8393824718264974;
    msg.speed_units = 63U;
    msg.duration = 12284U;
    msg.sys_a = 51619U;
    msg.sys_b = 33957U;
    msg.move_threshold = 0.8459422160274993;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.8624399032935904);
    msg.setSource(15117U);
    msg.setSourceEntity(187U);
    msg.setDestination(24557U);
    msg.setDestinationEntity(160U);
    msg.lat = 0.4455163526687833;
    msg.lon = 0.07146145318768926;
    msg.z = 0.7720880583456523;
    msg.z_units = 154U;
    msg.speed = 0.9448168943633365;
    msg.speed_units = 164U;
    msg.custom.assign("VUVOLNRMADSEAUHULTXJKZFWJJLEVBINPKMGASDMDGLBWQBDMSQTHLKLVHJWVPEIZNK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.24811788740076912);
    msg.setSource(43830U);
    msg.setSourceEntity(241U);
    msg.setDestination(10012U);
    msg.setDestinationEntity(14U);
    msg.lat = 0.7857652421434077;
    msg.lon = 0.23667740044105845;
    msg.z = 0.17636845234276743;
    msg.z_units = 142U;
    msg.speed = 0.1380696755723665;
    msg.speed_units = 23U;
    msg.custom.assign("OMMUSEIVMVDXZQJOIPKKDPBVRWUDWMJXBFJJKFIQPVCMCYYCZAKVWYWZMLXLSXAZDSQEHQDFOBBPYPTNNRZHNGAFUZOHXHLGDTGAARPPHCQZXNZDUIBEQOCQCEJQHJISVRCMYBSSAULTPTYGNYTMHLJFAKQIRFLSRZZOCNEPVHYOXVKUJXXDQWCNGECFUTKBASUIBSEKMOWGGWNFLDJERRYUWVXREFMFLKNVETBJSH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.3233234135030524);
    msg.setSource(17980U);
    msg.setSourceEntity(74U);
    msg.setDestination(58092U);
    msg.setDestinationEntity(149U);
    msg.lat = 0.45995373549546936;
    msg.lon = 0.8673430937394868;
    msg.z = 0.9617160602055916;
    msg.z_units = 197U;
    msg.speed = 0.6478270438012393;
    msg.speed_units = 68U;
    msg.custom.assign("URWDMQWUEXSUSAENFYBDIOQJVQIFROAVNCPGDLKNCWDVTVSQBDXPCAMEOPOLALHGIYWORAKEMWZRNSZBKHUIXTGYWXNGUCRJTQVLLKWZROQNIJIDTTGVPMAZJPCJCUHSEMZFEIGUSPSGOCLYPYG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.2822891809203889);
    msg.setSource(48148U);
    msg.setSourceEntity(19U);
    msg.setDestination(18701U);
    msg.setDestinationEntity(235U);
    msg.lat = 0.3662921855900316;
    msg.lon = 0.8469783048152401;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.06488202542806754);
    msg.setSource(280U);
    msg.setSourceEntity(138U);
    msg.setDestination(61671U);
    msg.setDestinationEntity(176U);
    msg.lat = 0.19770677078034427;
    msg.lon = 0.36979865548698176;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.9039278140548859);
    msg.setSource(22917U);
    msg.setSourceEntity(129U);
    msg.setDestination(40158U);
    msg.setDestinationEntity(133U);
    msg.lat = 0.8283268191419128;
    msg.lon = 0.5855866926491555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.8293802500121339);
    msg.setSource(35117U);
    msg.setSourceEntity(143U);
    msg.setDestination(25591U);
    msg.setDestinationEntity(69U);
    msg.timeout = 3310U;
    msg.lat = 0.10565463495858818;
    msg.lon = 0.6567908665362097;
    msg.z = 0.8464583810328167;
    msg.z_units = 194U;
    msg.pitch = 0.1295124162508412;
    msg.amplitude = 0.017572834205376364;
    msg.duration = 43898U;
    msg.speed = 0.7004011702240771;
    msg.speed_units = 82U;
    msg.radius = 0.6496871425598075;
    msg.direction = 28U;
    msg.custom.assign("XKQKHHGIYFEVLZYIAJAMNQPDHPEFWWNYBPSZBYUELLUQOOEITTKHNOXRNCRKOMVJQJOXABQEEWZGDG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.8982781409069465);
    msg.setSource(6807U);
    msg.setSourceEntity(107U);
    msg.setDestination(54046U);
    msg.setDestinationEntity(118U);
    msg.timeout = 24536U;
    msg.lat = 0.3749572207304708;
    msg.lon = 0.5155481110175189;
    msg.z = 0.5736602168714375;
    msg.z_units = 143U;
    msg.pitch = 0.6863136508099786;
    msg.amplitude = 0.6137594031561191;
    msg.duration = 7743U;
    msg.speed = 0.07226125546251139;
    msg.speed_units = 73U;
    msg.radius = 0.5315034589998459;
    msg.direction = 183U;
    msg.custom.assign("GOIFBIJQVZEMVZGBCJERYPNZZVDJLATPESFNUJLBALRQAWPIFQBOLYCQRFWQURGWGTTTMIYLRJRYIUWWODZENMLDDHSNZEFSMOUPNRNLUXYFWUHETVGMADXAEGPGMQQHBCKWVAYRHUBIKSLNOVPMTBOBJVHKSXXBXIXSUKHDFKZJPXWKBLPVIRMFYATMCCHXPZSZETJGWAGZKKSPFRQDVAOSCO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.28984155235418574);
    msg.setSource(46457U);
    msg.setSourceEntity(112U);
    msg.setDestination(34542U);
    msg.setDestinationEntity(209U);
    msg.timeout = 60455U;
    msg.lat = 0.9002716497707897;
    msg.lon = 0.6681860042353169;
    msg.z = 0.9505257756246122;
    msg.z_units = 216U;
    msg.pitch = 0.8436252606672893;
    msg.amplitude = 0.18039788330178697;
    msg.duration = 59659U;
    msg.speed = 0.2388049061642452;
    msg.speed_units = 23U;
    msg.radius = 0.7055612013236784;
    msg.direction = 214U;
    msg.custom.assign("AMFKSFNJXKCAARWNAODTXHOWSJBIOWQCCNRXMPLSYEUEUBORXEJRJTVPGZCLNEVVEAFXZQPUZCSYKIPBIUQTXMZSBMBCAHLYOLRBMYZRJRUTGGVTMUQDYKLYFEIQKGRZKKHLBQLYWEHMOIGUHFPTDD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.38947157316664704);
    msg.setSource(45720U);
    msg.setSourceEntity(1U);
    msg.setDestination(60234U);
    msg.setDestinationEntity(58U);
    msg.formation_name.assign("QJUWMZXGCPWMQADBQIVFKJWINLLVHRBPPCCALXKXJHPTWLZIIVSUCMRQAFQTUXDUDRLRTOEGWLPESGYYRODXTMQNGLKTABJRFHDJOXHSTEZWJTSHXVVQXPXFMOVMDRGEZTNCKBKHBKSUMBNPOZWTOSUUAZBRYHWAMYOQGVNZFFYGON");
    msg.reference_frame = 211U;
    msg.custom.assign("HRPCDGULKBPCRTEZHQCKROAXMAVKVAFXCJYEJFWYSTVNRSLMPXTUIWMWUSITDOZZHNLVLBFIYBABOAAGQAFIUPQYPDZFPZO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.17339623499698975);
    msg.setSource(11691U);
    msg.setSourceEntity(84U);
    msg.setDestination(28686U);
    msg.setDestinationEntity(3U);
    msg.formation_name.assign("QXVKFEJKXYZXDGMARNQOJVNWMZDEBABERYEFCIBEUYWOMVCRIDCTSUHVSBAVGXYIBCPKSNVSJPLTHIUASXXKHYQOATAGFPNCIQLHRCZZUJKBDMNDKGWSPQYWGVPXIVESJFYZJMQOKELFRGOQKAMULBMWXYILHLPFIGTWNHRBVBLJURD");
    msg.reference_frame = 105U;
    msg.custom.assign("ZDAZTCMMDPRKVYZIARMTGITOWKOXMLMSDFJBLTHFTJXEHYMGXPBTQUWDGDLLWYXPBCFZALBJYAXIAKQWSKDEWFOCKKGOIDIFSQMJJUEOKVFAORJGHHEJYDNPCULRRQYPINGVKSEKRXNYQHPVNBXQHCAQONFURWJZGTRSUMLSURCZXHWSQCYCYDNSBXVPPIBHPWI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.4292470229622478);
    msg.setSource(22505U);
    msg.setSourceEntity(133U);
    msg.setDestination(7934U);
    msg.setDestinationEntity(132U);
    msg.formation_name.assign("NWMKQBFGXUNXHCIWQNHRCDHFQIVNKOJOEZWQAMEOLVOOYVSLEKSAXDXZJGBWTCMQEBKGPRAVKZHAFDCGIZLGAQPDFKDNLBAYWYQJQDVGREV");
    msg.reference_frame = 107U;
    msg.custom.assign("RFZFLHOBBKFLBYLKHIBOEMYTVTZCBLYORWCECKPJXOOUGZZEBBLJTLBHIBSTOCMWFDQZII");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.026329641936057246);
    msg.setSource(15651U);
    msg.setSourceEntity(248U);
    msg.setDestination(23021U);
    msg.setDestinationEntity(58U);
    msg.group_name.assign("LMHAHQWTFJYWEILPBNXSDTWYTKKCBMLJINJPCMTJPTFPSWOLQJLVZZMSPSFNVXHEUONVHRGAGIMIXWVRERXYDLWYUCIZQPJCNEARZMAGEZFFKJZKHQLVXYOWYJUKEEHFCOPIOFLWCSXAAZDDXBKDSDOVOYBSFGOJVTAPDYWGVEBMAHUGYTLAXPHQAIIORENQZDKRFQYNUBNKUCVTJG");
    msg.formation_name.assign("UVWDRYOXRENKCSLSGBPLBXXVJPXCWLKCMVXUWZWSLATEOBWUMCEHDHIPOZAMARVGYFAG");
    msg.plan_id.assign("JQJNCFFRIHIIUNNGMFOMIXXWUJOHOMTJXXNAMTBFKVYYSTPYJNBKCZWFAHVAXTML");
    msg.description.assign("RAZAPUEXHLBRKHTLFMOKQXHECYWBTPUZDUCSOWNDTBPRWCWAUJSUZETGYJVTHQQPKCZRWYQNVYGXOBISEXRPNSKJVGGGMDAFHQIUMYWOEMBGMSFLLHAZLCNPHFQWZELDSFNLDGIXTCRQEXPKDKFBMKLXEBJFQGZV");
    msg.leader_speed = 0.7236839478734091;
    msg.leader_bank_lim = 0.6704439097617163;
    msg.pos_sim_err_lim = 0.0971306641972276;
    msg.pos_sim_err_wrn = 0.36194633561111933;
    msg.pos_sim_err_timeout = 52982U;
    msg.converg_max = 0.08529307024423971;
    msg.converg_timeout = 7088U;
    msg.comms_timeout = 38733U;
    msg.turb_lim = 0.5017635094712305;
    msg.custom.assign("DSRHZSBWLDZYFTHJIQAFWCAEKMHPBZDFMAFONUE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.8318074502656314);
    msg.setSource(59526U);
    msg.setSourceEntity(207U);
    msg.setDestination(36836U);
    msg.setDestinationEntity(210U);
    msg.group_name.assign("NFGBGUAWAAVOCTJOGYXNAJLXJBSPBFIZSKNVZHWXTFDVCWQTKQXEXIRQKSOKKSJBMAKPALRRLMUMTNVDNSFVUNKHBNQIVIPPAOALIJNAPQDZULWRBSYQZNFHHOJCFUHIUTBGBE");
    msg.formation_name.assign("NDYPMKXBNFGWXGTATJBTFQVVJSHIONHMLEKNWAPRLOKRMRYBCYEIAREJHHRVTKMKOPJMQSCKLNDWFOQDPCLMYWAIVOVUXUWTEZOEEJHKEOGFOBHYSJJDLUQYDSYSZLJMLXKRSQLCITHYQSNRZCEBMJXCGDYPGPNQZAXFLIVDVFNNBPBTFDWHQMZFDPSUP");
    msg.plan_id.assign("YFQDEFGJKNWFCPDEXSROYHNZJGOMVCMRKQYPOBIENIJKGHPXNARQWFCUOUWFQAALTESJRNZBIVYGLSWFOHTIUUFUDVFEMDTMLBWVQWKRPXZAKAKOVCCSZBNMEYMVYXZULXXWAPYPTKJVIJHUAIXFMRXLBIRDZTBDYKGYSATUSPGFNELVMWADTEHOBSRTEPDSMCMSEVLLQHTQZCDNRATZCKBRHJOHVCOBUIGXUYJKGPZDOCSXBQNNZWPJ");
    msg.description.assign("ECYZRNNFFSLLBLNRRMGUVHMDOSVPTIFOELUXQVHVZOTCNSKOUJAIWSIOPDKFPIVJPMQLIDNOPCMVSWBOABELJLBUQMTMABYCQQUOYPHCZCGWPWCNPGZZAIDHRGFWBPKEVMXMIRRXNMHAPTZKUNYIKBJJXYQZDHMZOJXXYGTGJK");
    msg.leader_speed = 0.3938806880453364;
    msg.leader_bank_lim = 0.11869662248526625;
    msg.pos_sim_err_lim = 0.8137656703227238;
    msg.pos_sim_err_wrn = 0.8282431698222669;
    msg.pos_sim_err_timeout = 32352U;
    msg.converg_max = 0.5075552948385534;
    msg.converg_timeout = 64115U;
    msg.comms_timeout = 15041U;
    msg.turb_lim = 0.16297088029600837;
    msg.custom.assign("ZCBINBMVWSEHBLVCGYPNXUBERTRNBASXGYZOZPHDZHUGJYDDAPSJFRJFZNEFFHYMLSOVUYLPKMWUXYICGODNTXYRHK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.13322574686421262);
    msg.setSource(46416U);
    msg.setSourceEntity(136U);
    msg.setDestination(39125U);
    msg.setDestinationEntity(7U);
    msg.group_name.assign("ALOTSVRQWLWWALQMUYTGNVTKEJYOCZHPUZMLHD");
    msg.formation_name.assign("YMLNVQSQKUOIWMQCBHUPFDFZYRIJXAKTLFUJVSGEJABPOIZUDGMHBFYAKTBRSGQDKNKZYGVHCOXSSLNJMEBTMAFUIYNPOUVATYBXCVKDVKDTNF");
    msg.plan_id.assign("YYNDLUSFPMDXAPVLCPQPLNZQNEUWBXZWFNOAIZBYMBVXJSYOKHPQVURIMIYBIXICUSUEJIMQKSKCEFQXUCBMAYNRCTDGTIKXZJLGGRGSGRHOSQSHJRXOFEXANUMVQWBSZLQWHFKNZZEYXHRPKDPZWDGJKJMTYDGHTVZLGHMEODUTUOGIXWWBWMCUHZTAPKQJHFJWARPONFEVOABTCAIL");
    msg.description.assign("CMGLRAHXYUXFTLHNSCUHQWVYKGWWEOS");
    msg.leader_speed = 0.11630352971786628;
    msg.leader_bank_lim = 0.5907762996694739;
    msg.pos_sim_err_lim = 0.6316890071003646;
    msg.pos_sim_err_wrn = 0.6516418922683427;
    msg.pos_sim_err_timeout = 52067U;
    msg.converg_max = 0.06317897851536725;
    msg.converg_timeout = 7137U;
    msg.comms_timeout = 24780U;
    msg.turb_lim = 0.574615345252635;
    msg.custom.assign("QOSVGSQWOLKAYDRTOTAHQCDYXXIQJLJINJUPFQYQTGTUCGIKYRUTNVEXYOJZEHOCFZBKPEIYLLIRYMXPYRSSWVQUCFJCILKTAZBADVNGZGPYNDBNLOQA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.3294682400545791);
    msg.setSource(13820U);
    msg.setSourceEntity(145U);
    msg.setDestination(41766U);
    msg.setDestinationEntity(120U);
    msg.control_src = 59143U;
    msg.control_ent = 114U;
    msg.timeout = 0.1896290442542924;
    msg.loiter_radius = 0.4118631220233422;
    msg.altitude_interval = 0.40569576033868926;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.5359015691492388);
    msg.setSource(22231U);
    msg.setSourceEntity(191U);
    msg.setDestination(55373U);
    msg.setDestinationEntity(78U);
    msg.control_src = 54703U;
    msg.control_ent = 9U;
    msg.timeout = 0.9455842130275088;
    msg.loiter_radius = 0.7339282127011908;
    msg.altitude_interval = 0.3321960575468942;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.8202145844015141);
    msg.setSource(5456U);
    msg.setSourceEntity(31U);
    msg.setDestination(46367U);
    msg.setDestinationEntity(70U);
    msg.control_src = 33080U;
    msg.control_ent = 169U;
    msg.timeout = 0.7747658221602249;
    msg.loiter_radius = 0.16142493028327898;
    msg.altitude_interval = 0.31642371010433434;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.7770475165298109);
    msg.setSource(17521U);
    msg.setSourceEntity(134U);
    msg.setDestination(22020U);
    msg.setDestinationEntity(254U);
    msg.flags = 106U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.19334222906175635;
    tmp_msg_0.speed_units = 152U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.6623987066841088;
    tmp_msg_1.z_units = 98U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.7797440842498095;
    msg.lon = 0.26136379375801844;
    msg.radius = 0.5072322300458534;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.13078087038885433);
    msg.setSource(2495U);
    msg.setSourceEntity(40U);
    msg.setDestination(52665U);
    msg.setDestinationEntity(10U);
    msg.flags = 203U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.1870914245324783;
    tmp_msg_0.speed_units = 36U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.15064506285182588;
    tmp_msg_1.z_units = 46U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.6714019982014632;
    msg.lon = 0.7677169911041263;
    msg.radius = 0.26824911866891166;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.7480158448086845);
    msg.setSource(22541U);
    msg.setSourceEntity(18U);
    msg.setDestination(41532U);
    msg.setDestinationEntity(186U);
    msg.flags = 68U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.5964140154236601;
    tmp_msg_0.speed_units = 164U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.7794136643203843;
    tmp_msg_1.z_units = 100U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.31907872574700324;
    msg.lon = 0.6150545863675941;
    msg.radius = 0.8778283004222979;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.8381816959897613);
    msg.setSource(57600U);
    msg.setSourceEntity(108U);
    msg.setDestination(57636U);
    msg.setDestinationEntity(126U);
    msg.control_src = 40674U;
    msg.control_ent = 62U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 175U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.08044712469012172;
    tmp_tmp_msg_0_0.speed_units = 180U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.8042351594849136;
    tmp_tmp_msg_0_1.z_units = 39U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.7684096206330673;
    tmp_msg_0.lon = 0.5233643666511606;
    tmp_msg_0.radius = 0.31247784292781966;
    msg.reference.set(tmp_msg_0);
    msg.state = 165U;
    msg.proximity = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.08773333697896946);
    msg.setSource(523U);
    msg.setSourceEntity(230U);
    msg.setDestination(29707U);
    msg.setDestinationEntity(161U);
    msg.control_src = 54150U;
    msg.control_ent = 11U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 151U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.386383770231713;
    tmp_tmp_msg_0_0.speed_units = 152U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.14348035583436836;
    tmp_tmp_msg_0_1.z_units = 202U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.8750605792112843;
    tmp_msg_0.lon = 0.713467795572505;
    tmp_msg_0.radius = 0.3954194227479608;
    msg.reference.set(tmp_msg_0);
    msg.state = 227U;
    msg.proximity = 112U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.2079259282357886);
    msg.setSource(30148U);
    msg.setSourceEntity(194U);
    msg.setDestination(8726U);
    msg.setDestinationEntity(221U);
    msg.control_src = 9431U;
    msg.control_ent = 147U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 20U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.04578342792417445;
    tmp_tmp_msg_0_0.speed_units = 251U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.36163913505639433;
    tmp_tmp_msg_0_1.z_units = 254U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.32396311967861513;
    tmp_msg_0.lon = 0.4514835856791466;
    tmp_msg_0.radius = 0.9664874113273912;
    msg.reference.set(tmp_msg_0);
    msg.state = 10U;
    msg.proximity = 74U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.16756045329751068);
    msg.setSource(34347U);
    msg.setSourceEntity(67U);
    msg.setDestination(36841U);
    msg.setDestinationEntity(141U);
    msg.ax_cmd = 0.5856811366552307;
    msg.ay_cmd = 0.13461006848153922;
    msg.az_cmd = 0.8945664554690494;
    msg.ax_des = 0.6592812791494298;
    msg.ay_des = 0.16819050394242152;
    msg.az_des = 0.8765612166440129;
    msg.virt_err_x = 0.6154715646041552;
    msg.virt_err_y = 0.5950836394873887;
    msg.virt_err_z = 0.46127296413406527;
    msg.surf_fdbk_x = 0.9717222306869372;
    msg.surf_fdbk_y = 0.6455945472957767;
    msg.surf_fdbk_z = 0.7204833052837758;
    msg.surf_unkn_x = 0.8011497955037935;
    msg.surf_unkn_y = 0.9700985211433083;
    msg.surf_unkn_z = 0.6973271452790143;
    msg.ss_x = 0.4923027802067277;
    msg.ss_y = 0.7308550779011204;
    msg.ss_z = 0.6030998360325034;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.029852026930218045);
    msg.setSource(44970U);
    msg.setSourceEntity(7U);
    msg.setDestination(4247U);
    msg.setDestinationEntity(249U);
    msg.ax_cmd = 0.9901001327668181;
    msg.ay_cmd = 0.049996131686075196;
    msg.az_cmd = 0.24038573937539898;
    msg.ax_des = 0.3218344796361907;
    msg.ay_des = 0.7674812081133908;
    msg.az_des = 0.13203117966270417;
    msg.virt_err_x = 0.9721130388716512;
    msg.virt_err_y = 0.8376238526610729;
    msg.virt_err_z = 0.10083372231985155;
    msg.surf_fdbk_x = 0.37608489450992344;
    msg.surf_fdbk_y = 0.4384253199013858;
    msg.surf_fdbk_z = 0.42991578677233633;
    msg.surf_unkn_x = 0.06437520667960506;
    msg.surf_unkn_y = 0.7848550291117854;
    msg.surf_unkn_z = 0.11430974045214182;
    msg.ss_x = 0.8714766770049691;
    msg.ss_y = 0.2919874029522779;
    msg.ss_z = 0.04470208109095808;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.9533240821251397);
    msg.setSource(34494U);
    msg.setSourceEntity(46U);
    msg.setDestination(19671U);
    msg.setDestinationEntity(187U);
    msg.ax_cmd = 0.9504243601324163;
    msg.ay_cmd = 0.6472813041394266;
    msg.az_cmd = 0.8922441695003862;
    msg.ax_des = 0.9686148792227552;
    msg.ay_des = 0.04685374734440584;
    msg.az_des = 0.6446412499665051;
    msg.virt_err_x = 0.40189146387127617;
    msg.virt_err_y = 0.5207439411139089;
    msg.virt_err_z = 0.04449250501079727;
    msg.surf_fdbk_x = 0.9516202526965183;
    msg.surf_fdbk_y = 0.23907836094151869;
    msg.surf_fdbk_z = 0.33356497983756983;
    msg.surf_unkn_x = 0.47455685716794727;
    msg.surf_unkn_y = 0.21772892403024702;
    msg.surf_unkn_z = 0.2993969951879575;
    msg.ss_x = 0.15283677431467957;
    msg.ss_y = 0.48457282547823133;
    msg.ss_z = 0.9267239995965879;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.21904419850142398);
    msg.setSource(31579U);
    msg.setSourceEntity(111U);
    msg.setDestination(61404U);
    msg.setDestinationEntity(9U);
    msg.s_id.assign("VEGASVFJQFAEMJTYQHQXEVWQQXVNKUHNXUYZLCJUULOYCMFPJOXSASUTDJBFFYQCMPMXLZPKGFLZTSSKEAYZQBTITEEPXNIGIMRIWPTWZICUBKVAGZQPFNJGYBOPGIYAMDTJSBWWSODDKJXCPSGKGEOWTSDHKFDZMWEHOYHNLOKAHBWNLHDONFRAQRRLWLTWMTBLHCXRXCVAVVKICBZVDIJMUHOGEORMRNBLSFVQPNZCZRJYIUPHNDERR");
    msg.dist = 0.17276697405154473;
    msg.err = 0.8245369911706154;
    msg.ctrl_imp = 0.7243279100286395;
    msg.rel_dir_x = 0.9862957272018804;
    msg.rel_dir_y = 0.2287817246377325;
    msg.rel_dir_z = 0.38117606888376243;
    msg.err_x = 0.9601045624749845;
    msg.err_y = 0.12921617401115282;
    msg.err_z = 0.3637088160571387;
    msg.rf_err_x = 0.23344398744015082;
    msg.rf_err_y = 0.9574763047204918;
    msg.rf_err_z = 0.24316142938205454;
    msg.rf_err_vx = 0.9951556612187595;
    msg.rf_err_vy = 0.10004749383657241;
    msg.rf_err_vz = 0.7128803675749061;
    msg.ss_x = 0.08473859122326532;
    msg.ss_y = 0.2989455756807329;
    msg.ss_z = 0.059962778723155585;
    msg.virt_err_x = 0.2001528117368946;
    msg.virt_err_y = 0.2081762063135375;
    msg.virt_err_z = 0.5276671829855644;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.8226285792675906);
    msg.setSource(28862U);
    msg.setSourceEntity(82U);
    msg.setDestination(4048U);
    msg.setDestinationEntity(78U);
    msg.s_id.assign("ZBGRIXQTREIEYKAXYNJHHZVWVQDMXLQLSJWOQDHUPTGIGAWIKKLMSWDUGODAXMIOWYCXEBIKZVCKUICKSPNHQWRUUFFHM");
    msg.dist = 0.03597174754727139;
    msg.err = 0.11812801110911786;
    msg.ctrl_imp = 0.045537699798890996;
    msg.rel_dir_x = 0.4991472773188289;
    msg.rel_dir_y = 0.4568573979294772;
    msg.rel_dir_z = 0.5343578542230566;
    msg.err_x = 0.7840830648950071;
    msg.err_y = 0.0724765747502556;
    msg.err_z = 0.24517582951564498;
    msg.rf_err_x = 0.024714264050715085;
    msg.rf_err_y = 0.7942162486785307;
    msg.rf_err_z = 0.41402695597070793;
    msg.rf_err_vx = 0.3037094857858521;
    msg.rf_err_vy = 0.3001622589589432;
    msg.rf_err_vz = 0.8111865855753476;
    msg.ss_x = 0.13317325982349282;
    msg.ss_y = 0.031149212061690967;
    msg.ss_z = 0.36611277755507676;
    msg.virt_err_x = 0.25822559000550993;
    msg.virt_err_y = 0.044583596062369946;
    msg.virt_err_z = 0.44479559246864997;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.2320091119439759);
    msg.setSource(15837U);
    msg.setSourceEntity(93U);
    msg.setDestination(2399U);
    msg.setDestinationEntity(238U);
    msg.s_id.assign("OMKIYPMOUIBQUXSUUODEPOCZQVJYILARPRGHSZYLBVGFOQPXCTJEANGPXOBJZSPXQLGQKNUNNVHGDVYWDFPCYIRWVFVYN");
    msg.dist = 0.3484917213932778;
    msg.err = 0.38493179886050466;
    msg.ctrl_imp = 0.005217463366701924;
    msg.rel_dir_x = 0.5017678041273271;
    msg.rel_dir_y = 0.6147012994017823;
    msg.rel_dir_z = 0.9571172211106617;
    msg.err_x = 0.3433469933264852;
    msg.err_y = 0.05108011779997623;
    msg.err_z = 0.39924121016920433;
    msg.rf_err_x = 0.5709206042014808;
    msg.rf_err_y = 0.28467097544973097;
    msg.rf_err_z = 0.8127218050174302;
    msg.rf_err_vx = 0.14721741040619374;
    msg.rf_err_vy = 0.3273466700652524;
    msg.rf_err_vz = 0.5324477136277678;
    msg.ss_x = 0.46566782155830433;
    msg.ss_y = 0.40389490861100064;
    msg.ss_z = 0.8124847145277384;
    msg.virt_err_x = 0.1269940608173813;
    msg.virt_err_y = 0.9695779151375673;
    msg.virt_err_z = 0.8991106709811489;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.1288602240902772);
    msg.setSource(16133U);
    msg.setSourceEntity(239U);
    msg.setDestination(23401U);
    msg.setDestinationEntity(131U);
    msg.timeout = 29677U;
    msg.rpm = 0.2069260504769791;
    msg.direction = 24U;
    msg.custom.assign("UQMKEUKFTMVMIFMCWDOLNSEXCXZSDTZPURDQVXYCZGJFKQZWPZYHOJBHQRABKDNDYZNTYMYUMDCR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.8839432460986583);
    msg.setSource(30266U);
    msg.setSourceEntity(45U);
    msg.setDestination(6223U);
    msg.setDestinationEntity(246U);
    msg.timeout = 24996U;
    msg.rpm = 0.519336443701438;
    msg.direction = 50U;
    msg.custom.assign("XKEVRZCSDNIAIGJPBJQWRUPRORGSENYUSHZBXZQMCOAQIILIDVAVRACJDXJJNBWWGUASBPGKQIDKDZFUTFOKUYGKHMQGCHWHDQMRHHBNAOUZIRSGKYPYPWXXFVCZCLYCCZSILRA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.3118804112515047);
    msg.setSource(53421U);
    msg.setSourceEntity(228U);
    msg.setDestination(18950U);
    msg.setDestinationEntity(2U);
    msg.timeout = 62155U;
    msg.rpm = 0.8164600850681695;
    msg.direction = 125U;
    msg.custom.assign("UWVPOMQKHJNOJYEVPHUL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.3269391808754092);
    msg.setSource(4552U);
    msg.setSourceEntity(222U);
    msg.setDestination(56863U);
    msg.setDestinationEntity(56U);
    msg.formation_name.assign("VIOJYUZXGLQURNEIOOPHXIACFZNCLMELTMQWAKDVILJSTTHMDYYMLNTOURMXFBBKWMOGINOLDFGDQNIJCNBVARCUALSZEGPULKXEWOPKAVCJQDEZPMWEBCIRSPUUAYKBJKOEXAZVBKSNFGMUHCWOGGWZDFVRMGYQNZVRHHSJZBBVTVDYCWJQHQTRKVEHAJMDXSTJXTLQXZIFFTXWGQPFNCDFBSWUAYOYCWHSKG");
    msg.type = 60U;
    msg.op = 54U;
    msg.group_name.assign("YZCUJKQIOJIDPSCAIBPWHFMDLRSURAGHMJCJYGLUURNRBJZFACQLACBUADNXEUFGSBQQRLERNZLGKVVNXKTAIPFHFSGFHQHPAEUWKEYEKDOIOZBSYQLGORYPZXVVVIEPLPJWFZGUWHHDSNSTXTVKHGQWMNOFMEZMY");
    msg.plan_id.assign("GIRRHNAZHRGORNSTYWRMZIADSPXNDUJLGDQFLEMMYYRBVWQPTBSZNRIUCHPLOPEWVZZBTKCYXVDFYVNHBYLJCJUMUTFITWABFXVSOKCHSWPOXMAEEJOQTJXUYLNUIKEHPXMYTW");
    msg.description.assign("SNFZXPJDKTDIBCBVLHZDLSOTYQNGBSOPMAPJACHDSFORNTZGDBGKRXMRHOJTITBSWVKNHJGXISYQXYGSAJINVOIQQEHMEUWXSWURUYXXHPCFVMAMOSCYXWGUFOFVVBLLHTIXJVCKWGNMRZCKERUYZRPINALVFPDALEVJWJ");
    msg.reference_frame = 86U;
    msg.leader_bank_lim = 0.809262491998024;
    msg.leader_speed_min = 0.6928710621755058;
    msg.leader_speed_max = 0.24458596933168564;
    msg.leader_alt_min = 0.03686608661647861;
    msg.leader_alt_max = 0.10420921002618566;
    msg.pos_sim_err_lim = 0.23460705903791867;
    msg.pos_sim_err_wrn = 0.7039534736176505;
    msg.pos_sim_err_timeout = 41475U;
    msg.converg_max = 0.8910594978186152;
    msg.converg_timeout = 17897U;
    msg.comms_timeout = 4345U;
    msg.turb_lim = 0.18327569012668798;
    msg.custom.assign("UUPQGZNWDFLHPMNOBAYCAPEFDKIUNXNVRYWBPGVUAJHOLSPUOMRYYGINQJHZKBIEZETDERM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.32240969512084816);
    msg.setSource(46319U);
    msg.setSourceEntity(159U);
    msg.setDestination(48541U);
    msg.setDestinationEntity(153U);
    msg.formation_name.assign("BVUDLCNSWQXAMQPIXDNTWHSVELYWKZZDVZRMSDVZVESGPWONVZYVDCUJXEOOCGPHEUJMPAIGJDMQOWEDAELIQLMALCXYYCKYDFZHUPCQSQRRJPBQYHCCFICRFPTZCBLKRFBUTYUFGJXEMXIMSTA");
    msg.type = 211U;
    msg.op = 136U;
    msg.group_name.assign("ERJTYBHAOWSSWWAIAPXLWUAJGVHLPCOZOVJVXGKOGPJAYBDEMBVIVXWKULANEXQQEWAHTEXEHGPKMOTNKCQPGLNRSRMWFVPFBDJRGIIFNJNKBFYDSKXPVDQLJHTDTOTMTQLXPAIQEMGFHMYCZXOFUGACZLGQHFQZDSHMCNBXCSCEOFYUPHACWBMRIDRZIRYOCFTQTCKYIDDISSWEUYZ");
    msg.plan_id.assign("EGOHRHTKIUQSXJHYQBVBLLTVFEFTWJDHRNRDTUJSFODFJGYRWRAVWVNEKOYIUIJICYP");
    msg.description.assign("GLOBPTMODHHKBRTFYUKJGVUNEKAGIWPCWZQQPADGEVOCMECJXHNGGTPNNBYAQYYYKTYPKMLWOHDNWJRXPFZJAXWVVZBTSUGVJVLMLLBDRXMHYHYVRBDEUKCSXUSENFCDEDMDRJSIOZVCONKRUSKUFKQJUWHAXYIHEBCSZXJSWQCCCAIZSGUQQNGFLMNIGIETNQPFLTFORPWTLDVXJXIZWELMVZZQTWHISSUIQ");
    msg.reference_frame = 55U;
    msg.leader_bank_lim = 0.4607984973296031;
    msg.leader_speed_min = 0.9878194961095592;
    msg.leader_speed_max = 0.1778734061259477;
    msg.leader_alt_min = 0.06377201489896878;
    msg.leader_alt_max = 0.9123286136536835;
    msg.pos_sim_err_lim = 0.5431516078730666;
    msg.pos_sim_err_wrn = 0.9661803179598258;
    msg.pos_sim_err_timeout = 22597U;
    msg.converg_max = 0.2921026065427531;
    msg.converg_timeout = 43012U;
    msg.comms_timeout = 34336U;
    msg.turb_lim = 0.05369549275814678;
    msg.custom.assign("NBXIVKUESILIWABWYCBVWTEXSZCSYIIERLMQQGVRCYRZUWSZQLUADFLBPKUJHFKKYYVXVZODNGAXZZMLGHNLJGIPACQEJQBMURSXNWUFYUMAHHGWDD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.9950645998972631);
    msg.setSource(21167U);
    msg.setSourceEntity(147U);
    msg.setDestination(23602U);
    msg.setDestinationEntity(72U);
    msg.formation_name.assign("RKACVOUROYQNWWKEDE");
    msg.type = 215U;
    msg.op = 195U;
    msg.group_name.assign("ROXCBYADLXMWAWXLRXNYGVMEOJUIVQKRDOKIUNXQXPTEIYJKICLCPUDYCOWLGBQCVBDAUULMFFHSPTZSXXGAZETWPRYTOVHAMJRTODZKPUFSEJOSKQWJRUEWJZAITCDLTABYZZVMQCEIRAQJHTJMADCWICNGYOIGVSJVTMQHFGNFITENHLORIKPEYSMBBDZHBGSFGDFOJLHQUYPNHNAKP");
    msg.plan_id.assign("MVFKFQDFPQDXSMXKYGU");
    msg.description.assign("BYIVPMPFKJMEMZZEWVGOQMLGWAELXLJCPZXCZVXVARIEIDHXAESFZLSRJXEGRGUMOBQSHQZYSNKPWSMGRNXXIPCUXDRPXTHSPBDMDK");
    msg.reference_frame = 106U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 54324U;
    tmp_msg_0.off_x = 0.2824733835008879;
    tmp_msg_0.off_y = 0.6114433712560283;
    tmp_msg_0.off_z = 0.2830224094134288;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.6331803321117976;
    msg.leader_speed_min = 0.9600999852651702;
    msg.leader_speed_max = 0.6833536778881742;
    msg.leader_alt_min = 0.3321723363609711;
    msg.leader_alt_max = 0.0015305196517244601;
    msg.pos_sim_err_lim = 0.46757497720689;
    msg.pos_sim_err_wrn = 0.262917380807396;
    msg.pos_sim_err_timeout = 1297U;
    msg.converg_max = 0.9463040006762752;
    msg.converg_timeout = 38541U;
    msg.comms_timeout = 62311U;
    msg.turb_lim = 0.6236201961724575;
    msg.custom.assign("CUPGQIRBIKSSJVOFEXQEDBHCJGAYMFGHMVKBBCEYELIQWHVWCHNTAUTAFMAONHPRRGNPDXVNILKYSFITUJBMJSSLLYXATQDZMCVEBBUQJUYRNRLSZGPVPQOVVORKRQBZMABDEFIDOXOLWMQRNATDUWAFCQTYWRLWDOYGKGLZUJDGXJHZFIPVKJFUPWP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.31329538783753874);
    msg.setSource(61546U);
    msg.setSourceEntity(101U);
    msg.setDestination(28151U);
    msg.setDestinationEntity(95U);
    msg.timeout = 31119U;
    msg.lat = 0.2095192149769609;
    msg.lon = 0.13187464611118305;
    msg.z = 0.3058073020672484;
    msg.z_units = 214U;
    msg.speed = 0.5667326115548131;
    msg.speed_units = 188U;
    msg.custom.assign("LIGLMPTJXHJQBHGZPHNGQAXYSNGMTJZVBLGZDCXPRSBOKUJVONSSNUDABWDBAALCOWHBIEKZSUVUBGXBFYHXWYAQF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.8877200480290999);
    msg.setSource(41675U);
    msg.setSourceEntity(21U);
    msg.setDestination(43031U);
    msg.setDestinationEntity(23U);
    msg.timeout = 3685U;
    msg.lat = 0.43783753757274846;
    msg.lon = 0.515796985152683;
    msg.z = 0.2983168769334784;
    msg.z_units = 238U;
    msg.speed = 0.5302012928732135;
    msg.speed_units = 120U;
    msg.custom.assign("YJIZPEDXDYBOJEBFCCHFRHBLMKSZLFTXXDSORZLFFNXVGYGPPURIIAGEGGZGOTDRNKQQNRBLXXMPMQKAUJFKQSUDWKYXVALCWEHKOCODVTNANEGHAMSJHKTUROAICPMOJFGYWHWTPDCWJPEKBCBWZJNYZPWAMXSMRILCZEXYQQCQIYGTUXRVBQUCBZIFWOSDAYLQSSOWIJRRDUT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.022476370012821656);
    msg.setSource(52433U);
    msg.setSourceEntity(128U);
    msg.setDestination(62150U);
    msg.setDestinationEntity(0U);
    msg.timeout = 62747U;
    msg.lat = 0.3739526806951934;
    msg.lon = 0.4469476451915918;
    msg.z = 0.20230085678538934;
    msg.z_units = 162U;
    msg.speed = 0.04729187796014522;
    msg.speed_units = 174U;
    msg.custom.assign("JNEKARLNRATHIVJCSGQZZQRNCOFJHZFTELWAWUWQAZQDCVUHIKCIEGNWIIZGLPMTYGZCRESMZLQPTDVYELCFTGKXWBXWARFLDJJOQQPRPSLRTCNHUHSBYTKVDKWNPJSXKBDGJVBYDUTRXMHFQJYENGIMUDTYVUALFFHFCHOOUOWUPJBXNSFXYIXGEWHTESYXBGLIVKJEMNZFOBBGKAVBMMDRKPCSOPMOMOVQHSAMEDYLSAW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.6931431319585013);
    msg.setSource(14480U);
    msg.setSourceEntity(95U);
    msg.setDestination(31735U);
    msg.setDestinationEntity(227U);
    msg.timeout = 23234U;
    msg.lat = 0.1537346567259884;
    msg.lon = 0.07807992843701317;
    msg.z = 0.7943701986092491;
    msg.z_units = 40U;
    msg.speed = 0.5068749415374671;
    msg.speed_units = 17U;
    msg.custom.assign("XTUGYGDKWCVFOMNTNWUQVCSPQXKGFVCENUIJBCHEPFLJAWNKAZQGDXCHKHIFBRGIFSJYISRYYPSVRHKXRLONFINPGNTZMSSADXWXFLGROTFMLHXWBEUOLJYJVWODQUQCQKUMWOSTQYMZJEMPENSZLJOKPRJOVO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.7401855123339833);
    msg.setSource(48300U);
    msg.setSourceEntity(160U);
    msg.setDestination(7639U);
    msg.setDestinationEntity(204U);
    msg.timeout = 24451U;
    msg.lat = 0.31902694653085395;
    msg.lon = 0.5380786641945556;
    msg.z = 0.7314201076912619;
    msg.z_units = 65U;
    msg.speed = 0.7883514445365855;
    msg.speed_units = 236U;
    msg.custom.assign("FRQAARHZWXFVVYHBOMYHZIOUVBIYIZJDQCJGHQBOKTBSMOFAAZBTZKGXEPNLLGYDIPDLUWRVVLWXNCZNRZYIAUYUVLZBARWBEIKSVAQEGWSZUMCTTAPXWTNXJOFLVDILMENOXDPGBGKRDSKQOEPSQSHAGXYWBFNMNTXOIERLWPHMUCECVTGMGNDFHRWXMHDGOJNCJKEKTCRSKKQQJCHW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.21184747135330073);
    msg.setSource(48881U);
    msg.setSourceEntity(197U);
    msg.setDestination(63462U);
    msg.setDestinationEntity(113U);
    msg.timeout = 7579U;
    msg.lat = 0.2631229801937853;
    msg.lon = 0.10215061004508674;
    msg.z = 0.6880652845746406;
    msg.z_units = 68U;
    msg.speed = 0.18625963383462407;
    msg.speed_units = 70U;
    msg.custom.assign("DMFGWHLIIYRJFCZBMJEMDBRLUNTBHFZTKZYKXJIWPPDAWQTUAXGPNPSXQPBOKKQSEBCZCEWIMKIDAPQRJBJFSLBDADZRIQFKCVQYOSGVZMWUNVZCPMAGNKYGNUUYXVATUFFPWSTPAOTNTBDVXMOWRXWXAKIJYXRGMEGSZDQLQHYICHFOECRHEETZOKUIXOMH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.8823419761958136);
    msg.setSource(59296U);
    msg.setSourceEntity(224U);
    msg.setDestination(20995U);
    msg.setDestinationEntity(98U);
    msg.arrival_time = 0.8078220063437005;
    msg.lat = 0.5634780737401974;
    msg.lon = 0.9649542156746506;
    msg.z = 0.5676884201896194;
    msg.z_units = 157U;
    msg.travel_z = 0.8496032184481669;
    msg.travel_z_units = 250U;
    msg.delayed = 95U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.6717521124731676);
    msg.setSource(24223U);
    msg.setSourceEntity(151U);
    msg.setDestination(27826U);
    msg.setDestinationEntity(205U);
    msg.arrival_time = 0.10494275563828848;
    msg.lat = 0.5848708912118213;
    msg.lon = 0.6128083336311668;
    msg.z = 0.5888707600451749;
    msg.z_units = 132U;
    msg.travel_z = 0.9454856717901373;
    msg.travel_z_units = 174U;
    msg.delayed = 237U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.7142562201439964);
    msg.setSource(23116U);
    msg.setSourceEntity(229U);
    msg.setDestination(40352U);
    msg.setDestinationEntity(81U);
    msg.arrival_time = 0.2947093452065146;
    msg.lat = 0.7582567760814324;
    msg.lon = 0.3863514887114269;
    msg.z = 0.8335664852718876;
    msg.z_units = 139U;
    msg.travel_z = 0.7442900349102792;
    msg.travel_z_units = 94U;
    msg.delayed = 234U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.8781580289560731);
    msg.setSource(39870U);
    msg.setSourceEntity(242U);
    msg.setDestination(13356U);
    msg.setDestinationEntity(91U);
    msg.lat = 0.8994631349296252;
    msg.lon = 0.9995225200159225;
    msg.z = 0.5187837744435225;
    msg.z_units = 96U;
    msg.speed = 0.4259478953376883;
    msg.speed_units = 90U;
    msg.bearing = 0.01893270597762331;
    msg.cross_angle = 0.29647139027286473;
    msg.width = 0.7407609074936203;
    msg.length = 0.38390942622837165;
    msg.coff = 251U;
    msg.angaperture = 0.018031109558866998;
    msg.range = 13717U;
    msg.overlap = 144U;
    msg.flags = 79U;
    msg.custom.assign("HUZCWIQCDVEVAXRLRBUGYVXLIADYEXOYJHEVEYJCINNSZPSJGMNSFNKKPYPWMYFXBNMUQLTJSIUXCQJFHUBSPWZJRNABTRMUYRLDXHGGSMASZBTKSKLVKWOOUJFMGGSSGBIMOVKCPAVWTTMPWQDDTRZRNHTRLTLHJUFAYXTCLAKBUNPFOGZBFLDHIUMADRNWDXO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.9270125576406953);
    msg.setSource(3846U);
    msg.setSourceEntity(218U);
    msg.setDestination(30857U);
    msg.setDestinationEntity(107U);
    msg.lat = 0.20801770655423513;
    msg.lon = 0.47602008737227763;
    msg.z = 0.9339279957302032;
    msg.z_units = 56U;
    msg.speed = 0.10597447796839055;
    msg.speed_units = 144U;
    msg.bearing = 0.4120003470388137;
    msg.cross_angle = 0.2600466911504924;
    msg.width = 0.822196786766055;
    msg.length = 0.8376859877200918;
    msg.coff = 94U;
    msg.angaperture = 0.641332849095099;
    msg.range = 44150U;
    msg.overlap = 89U;
    msg.flags = 139U;
    msg.custom.assign("URUFVYZEVKEAEBGUFNJOMQBFWF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.5803863599042968);
    msg.setSource(36026U);
    msg.setSourceEntity(156U);
    msg.setDestination(15816U);
    msg.setDestinationEntity(248U);
    msg.lat = 0.10148963777043452;
    msg.lon = 0.17101258152429055;
    msg.z = 0.44644365528808094;
    msg.z_units = 208U;
    msg.speed = 0.7791133996042046;
    msg.speed_units = 142U;
    msg.bearing = 0.7352898524272894;
    msg.cross_angle = 0.604955223636222;
    msg.width = 0.11435372165257551;
    msg.length = 0.934531068041404;
    msg.coff = 97U;
    msg.angaperture = 0.9829991046339507;
    msg.range = 820U;
    msg.overlap = 167U;
    msg.flags = 235U;
    msg.custom.assign("UWDJOAPQBXKYCJGMMQEOXJFWTSAXNAVREJGMKVAAYGUSTUPZIDVRFWXHIRDOHXMNISBTDRFWXSOBRPNQNDGIMKCJTDEFNRDCKXTMHBEZLAQKJZCSVZEIJHPUOVV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.0902848035539845);
    msg.setSource(59753U);
    msg.setSourceEntity(94U);
    msg.setDestination(24197U);
    msg.setDestinationEntity(155U);
    msg.timeout = 45440U;
    msg.lat = 0.979550633847501;
    msg.lon = 0.23431068696350565;
    msg.z = 0.17906403575796725;
    msg.z_units = 227U;
    msg.speed = 0.944155081258248;
    msg.speed_units = 158U;
    msg.syringe0 = 169U;
    msg.syringe1 = 208U;
    msg.syringe2 = 41U;
    msg.custom.assign("DWVXEYZNLTVNYMIWOGYXHADVUCSUVJPQDGSELZIWEJDZHIAWKRSXAKZQRDBVUNHNZBITVDPSBEBWUEANDLOMXZPLMXJHFLMHOMOTSPAACCXJFAGJTJQFTJFJBPWJCBCCUUUNMQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.6374966130308459);
    msg.setSource(53083U);
    msg.setSourceEntity(156U);
    msg.setDestination(53434U);
    msg.setDestinationEntity(148U);
    msg.timeout = 45870U;
    msg.lat = 0.5119788933933201;
    msg.lon = 0.9218321338741917;
    msg.z = 0.5212380772659039;
    msg.z_units = 109U;
    msg.speed = 0.8620271943841831;
    msg.speed_units = 21U;
    msg.syringe0 = 218U;
    msg.syringe1 = 194U;
    msg.syringe2 = 10U;
    msg.custom.assign("JKZUIBSXHTKXIWGQLEMEBMSAIGRCYKDQVBLJWFBIRVIDGWOMJKNPAZBDCDERLQKLUTGCGLJOQFHPTRJCVSNBMNFWDYPNQVREDTQCJCUEUVXHVMRHYTWDLFADTWNOAVTOFVITSGPFPHNHNGYKMYMYCMOHZYOEVXZSUBTIWMNQQAAAXXUZROZUXTEERRAQRXWKI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.44565927480804446);
    msg.setSource(22313U);
    msg.setSourceEntity(143U);
    msg.setDestination(51058U);
    msg.setDestinationEntity(217U);
    msg.timeout = 43877U;
    msg.lat = 0.9342529533593744;
    msg.lon = 0.6865336156648427;
    msg.z = 0.5025362576406355;
    msg.z_units = 239U;
    msg.speed = 0.8604277684630296;
    msg.speed_units = 181U;
    msg.syringe0 = 165U;
    msg.syringe1 = 207U;
    msg.syringe2 = 149U;
    msg.custom.assign("ESWGWFNHVQRAGSFYYLTUUIOPGKDUXAIIPKDVEHVHJWSHPKOXEGEQFSSXXOYGOXWTNERQUVXPJPTHJLIUTMSENZRVRIQCDOXFCGJPDSMLVIOFKIMFCHQOGKXAABDTWMCVLWLJKYIQUSPZUHQZMSQXABRXNJDOGEAAUZOHJDWYCJNCBTANWZSCFZUZIKTKBRFLYBEANVBGMNVFUGDARBTMBPCLIZMJCZB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.9709630548894955);
    msg.setSource(58190U);
    msg.setSourceEntity(158U);
    msg.setDestination(48742U);
    msg.setDestinationEntity(17U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.4492122135986636);
    msg.setSource(56968U);
    msg.setSourceEntity(30U);
    msg.setDestination(35556U);
    msg.setDestinationEntity(184U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.8644029125106446);
    msg.setSource(53253U);
    msg.setSourceEntity(155U);
    msg.setDestination(35102U);
    msg.setDestinationEntity(115U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.30131478550239876);
    msg.setSource(56748U);
    msg.setSourceEntity(50U);
    msg.setDestination(56041U);
    msg.setDestinationEntity(225U);
    msg.lat = 0.023381159638659277;
    msg.lon = 0.9273189941324256;
    msg.z = 0.5852037265457889;
    msg.z_units = 214U;
    msg.speed = 0.6042250818544329;
    msg.speed_units = 223U;
    msg.takeoff_pitch = 0.9610813330514727;
    msg.custom.assign("EANJYSKHGTHCZRFSPEGLRGDDMSCXELSOIAIYHMCCXAPENLCEHYIEIJNVZLRHIOKQCPEJCCQVZWOLRMPDTFIOUGNDPKQNTOFAMFJAKWUYVSAEJWNAHFEQBTDE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.8715231423789754);
    msg.setSource(58425U);
    msg.setSourceEntity(1U);
    msg.setDestination(18499U);
    msg.setDestinationEntity(175U);
    msg.lat = 0.24765148754178068;
    msg.lon = 0.49492695659957064;
    msg.z = 0.2735005978396501;
    msg.z_units = 151U;
    msg.speed = 0.9938116048726253;
    msg.speed_units = 64U;
    msg.takeoff_pitch = 0.4620993217664796;
    msg.custom.assign("SNVDASEOKAIFGOVJQKCSVVYBCRWKMHAMWHSPXBJCRLEQQJOPXTDTLKHSBKCPWVHZUBLOMAFCZAYIJMTRMHGRFXFURIPGQHXENTQDPUTLLYHNNMYAZMZWZULWOYSYTJDAIZTJCOCLQSEAFRXOJDNOKNUCFXDIZFIRDJBCXCIYDFVKYGVRBVGKWKBEADTIQIWLSTPTSUVQIG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.8806884519414203);
    msg.setSource(56841U);
    msg.setSourceEntity(73U);
    msg.setDestination(6937U);
    msg.setDestinationEntity(92U);
    msg.lat = 0.3988636484977659;
    msg.lon = 0.40394634903212556;
    msg.z = 0.06059090984005744;
    msg.z_units = 199U;
    msg.speed = 0.8832238769585509;
    msg.speed_units = 76U;
    msg.takeoff_pitch = 0.9748781042605069;
    msg.custom.assign("DHESARUDTEOJMZIOYXHVAARXNGXXQPQJTGGCNRZTCFLNRDXYCEOJMBFFUCKZIEBNQZIGAJBEPGOFPTYOBPRMFJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.42362100413593884);
    msg.setSource(46999U);
    msg.setSourceEntity(221U);
    msg.setDestination(40448U);
    msg.setDestinationEntity(228U);
    msg.lat = 0.9005403804798892;
    msg.lon = 0.45261462099795746;
    msg.z = 0.5522482094539325;
    msg.z_units = 186U;
    msg.speed = 0.9612762928095305;
    msg.speed_units = 76U;
    msg.abort_z = 0.23569983182280074;
    msg.bearing = 0.004304830816669325;
    msg.glide_slope = 151U;
    msg.glide_slope_alt = 0.43734107182119797;
    msg.custom.assign("OOTUSLHXFJKGWHHFWISAPSBCBIZRYLVPDZIXMTTDSRYANMEBHRXGGVCQKNOHSMDZBCRTPOPOYEIKDHBVLIRAOZOPAOHLNKDEFEYC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.7495312277460988);
    msg.setSource(45669U);
    msg.setSourceEntity(92U);
    msg.setDestination(16270U);
    msg.setDestinationEntity(230U);
    msg.lat = 0.15034250058164522;
    msg.lon = 0.009976243764940995;
    msg.z = 0.9732906121323927;
    msg.z_units = 13U;
    msg.speed = 0.316452556240978;
    msg.speed_units = 49U;
    msg.abort_z = 0.30298935986001396;
    msg.bearing = 0.8688317351481212;
    msg.glide_slope = 22U;
    msg.glide_slope_alt = 0.24877706793465892;
    msg.custom.assign("KCPEWOJLMNPBZUVAXQBYNLSHOWHQLVQOKETVHHZFFVLICKQWUJJYEKGRFAMIJMQUYGSSTADAQYTNOXJDRQZULDOZLEYDIZGSZSGYHKZBHKKBAWCGJQPRJSIVJHMGRYNTPRXEPRIAEAHWKSNWDXIIQZUPGGWUDBBXSCOFAGRNETVGVSLRNEATPRFCZIXBSVVOIFDYJWMHTCAORXTFZCPMMCDKVFCEOQYFPN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.32904279808038306);
    msg.setSource(940U);
    msg.setSourceEntity(180U);
    msg.setDestination(3447U);
    msg.setDestinationEntity(129U);
    msg.lat = 0.42259911298710584;
    msg.lon = 0.4411251079524653;
    msg.z = 0.6485063218804656;
    msg.z_units = 158U;
    msg.speed = 0.7479449481716862;
    msg.speed_units = 162U;
    msg.abort_z = 0.5033515289875117;
    msg.bearing = 0.529450774766737;
    msg.glide_slope = 36U;
    msg.glide_slope_alt = 0.3980038681118546;
    msg.custom.assign("LBZSXDDDHWKDOIJQOFFNJVFPLYAWVVOSHZPURUKLVCQPZKMTSHVZRSJFPDLAKBFYFZSVUYMHRKEXEZTJWNZGQULOMYAFSCFARRRXTPCVPWVYQUXSWSVHLMBNXNNCUBCQNMHLEKNUOVGFUCBJWIKSPDQTMLTZYIDOQINCAXREHYHMHEDSGTRKJGADKQDGFIGXIHMPRXXGRTXZAEUCETCZBBYPJBQYOAOLIMIICOPGNLQYKBJUNTWOG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.48923139464098975);
    msg.setSource(45350U);
    msg.setSourceEntity(72U);
    msg.setDestination(4197U);
    msg.setDestinationEntity(32U);
    msg.lat = 0.8563019716277458;
    msg.lon = 0.8292173940435559;
    msg.speed = 0.8012251768898232;
    msg.speed_units = 96U;
    msg.limits = 78U;
    msg.max_depth = 0.7383373228281257;
    msg.min_alt = 0.7880446824731016;
    msg.time_limit = 0.2425912390895395;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.1541907139708547;
    tmp_msg_0.lon = 0.6241694053262391;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("XNBBAYUKARHMVWSFQKRWKBHFILNRFOGTSUJUGYDUXLMDXBGEJOFUIYJGHSNHADFNWSYCKOEQRZHAOIPDOHIZZRXCZKQIJBOUJJSIDXEMOVTPWJOMCEZFKQMLAPDYNRGQEHCPILWYGGHTCAEWTZYQJIIAOBTBWHTTVAUQUZGNEBSVEKQCDYDPLDNGRKSXEPASPVLNCJZVRLSGWMB");
    msg.custom.assign("LAPVOCSVHATZEXZAIMLJHAMWZYEYEYPKDGNOHYQPCTVAGLBVQQUHMPWJSBIWSK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.6796580531150929);
    msg.setSource(22059U);
    msg.setSourceEntity(117U);
    msg.setDestination(45843U);
    msg.setDestinationEntity(212U);
    msg.lat = 0.46097882694221637;
    msg.lon = 0.019922933466674286;
    msg.speed = 0.4632954669003053;
    msg.speed_units = 34U;
    msg.limits = 154U;
    msg.max_depth = 0.8152305549566027;
    msg.min_alt = 0.8041496577917039;
    msg.time_limit = 0.8375455107706715;
    msg.controller.assign("ZJTTRHUZEFRFFDYNCDJHJLUXLNWDLNTBOJOEOQCBBKDKWUPZMWZWXLPALOCDCMJIPVPERAKNCSLPGWKBESKIHIGLJHAUPKTGIUITMBCGHMQOGBMHMYDFBRUBNDPSUNKMYFDSOHXFFBVWCAJQXFIGSRIZAWEFVSOOVTQQVQBYZYGYTPWPIVACNDXGULMVYSVUYDQK");
    msg.custom.assign("QIJLSXFIZICBVAPHWVOWAUPTKWGGMOHKRAZZGJZMHVPWHQKMADPMBACALQKKBVEFUXFWMKCUVWQKSELTBEARYDOPTCDGNNKXYLEWSFOYRDARJTIUZJYSJYETNFORIFBWSEVSVQNLQLNQPXJJHCHBTYCUUNHDGUTZRMRJPFYNDSVJOMILOHVBCODWYBLXXTJFVZQQFSGX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.3340987963611013);
    msg.setSource(11866U);
    msg.setSourceEntity(138U);
    msg.setDestination(12254U);
    msg.setDestinationEntity(37U);
    msg.lat = 0.17367716965074176;
    msg.lon = 0.9000975757564461;
    msg.speed = 0.5308863560514097;
    msg.speed_units = 41U;
    msg.limits = 112U;
    msg.max_depth = 0.3920363139721076;
    msg.min_alt = 0.555035541691248;
    msg.time_limit = 0.5680252762728598;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.031482485084959655;
    tmp_msg_0.lon = 0.8016660449540509;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("SEKJRJFJBGNATGXVQYTWLPEM");
    msg.custom.assign("MQHYXBGOHWIOHMUZBYWPRZPUYRLMFNGZUSWNANFQHZJLKIYUTWAEROSVXFKQDRVHWJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.029271231948912457);
    msg.setSource(2883U);
    msg.setSourceEntity(109U);
    msg.setDestination(45407U);
    msg.setDestinationEntity(126U);
    msg.target.assign("GCNYMODKPRRSXGVNXNPNXBTDUYQXSUZQJJHGY");
    msg.max_speed = 0.07554192189699838;
    msg.speed_units = 246U;
    msg.lat = 0.6445794514673125;
    msg.lon = 0.9353340754892732;
    msg.z = 0.590507168269957;
    msg.z_units = 235U;
    msg.custom.assign("UHJHRYLOEVZCKLWVHEAYWZAMUCTKXEOJNVZUYRYEESGUTJDWBXIGVFGMMAVYNAMWIXRPAGLPLLDOFHXPBDPDUNNZIJVKFKPGRMSZNTFYAOBQTOQSYLBDTHHEQKANRPBNWBMUMMCGJRC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.992561911501979);
    msg.setSource(62670U);
    msg.setSourceEntity(1U);
    msg.setDestination(10246U);
    msg.setDestinationEntity(229U);
    msg.target.assign("SJNKTDXWHKXOSYWPZPBISGHYXHKQAPQDZKGINGUFGTNJQMTIVOEFEPDSIJYCWEBHLJXNVDMWSQTNBKLXGCNKXJSKQWWLYRLHGGUVZDIVLBDTQTRVBZUTOMICYACSMBAFYJNVFLCLPAKJBSEKFAOQADYO");
    msg.max_speed = 0.7135246404115605;
    msg.speed_units = 142U;
    msg.lat = 0.14674135461194704;
    msg.lon = 0.7416602236340528;
    msg.z = 0.6909666195938682;
    msg.z_units = 216U;
    msg.custom.assign("DGFLNBSTFKKALCENASHYSVWKNDRXOPUVAXRDEBGWDCAFIEGOSDIBZJCIEBMBWHYCMAQPUXPNVATMQRKHYDOQLMUSLQJTYFLREGFZZGJWWJHOFQTNYUSHHATZAOFUWGOEDLZVMCNMBVOYWFCJCSMJITHOFNPHMU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.3058967100765022);
    msg.setSource(39800U);
    msg.setSourceEntity(194U);
    msg.setDestination(57364U);
    msg.setDestinationEntity(63U);
    msg.target.assign("KPDZJWOXPWQGULIMNMOZTFITFAYWCYR");
    msg.max_speed = 0.9767079990130386;
    msg.speed_units = 100U;
    msg.lat = 0.3823080863084627;
    msg.lon = 0.3780253703062125;
    msg.z = 0.4928426676958757;
    msg.z_units = 56U;
    msg.custom.assign("FFJLQUEMLKMHFQQHFWPJLWUYBTTJVSPFUBGFHNNPROWYBHTWVALDGBIZFGWWNATSDKEGUMLMOQUOWECHXVRIDTDBUSZXLVABXHBGSNIEXNFZIEQMROVKXXCBJEXCRDHTOCRBKQIDQTEAWZCNMGSDCHIRYTCJFOYLREZEQWCUZXGAGBKCPPLTSVMQVOAPJPJXKYSSCPTJUMKJKJRYNOHINAYKFZVLA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.8849233864701175);
    msg.setSource(1903U);
    msg.setSourceEntity(249U);
    msg.setDestination(10953U);
    msg.setDestinationEntity(110U);
    msg.timeout = 18834U;
    msg.lat = 0.7649866946926986;
    msg.lon = 0.84309195000788;
    msg.speed = 0.7937493676927219;
    msg.speed_units = 83U;
    msg.custom.assign("FNSQMCBCIOWNSBTIFHWRF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.4299032987710216);
    msg.setSource(49843U);
    msg.setSourceEntity(70U);
    msg.setDestination(56428U);
    msg.setDestinationEntity(82U);
    msg.timeout = 56183U;
    msg.lat = 0.9607824518897623;
    msg.lon = 0.5281352143523321;
    msg.speed = 0.7058608274822231;
    msg.speed_units = 83U;
    msg.custom.assign("ZFMGFWCNLQOBEBSFLWXYXIIMFQDMLPBRATCPHXGYUYDFCGLUYAKKYTOVLVZXBHTOEOGCFWTNQXVMAIGCJESVLGRPDQLOKYKFSJVSFVTCXWINJDKEWEPUUWXJKBZKSOIILWOZQDVCJRZWANWERJBPDWXTYAVSUDHRHZBLHRVCTRZNQUVAKUNCNHEPZNAHMDPS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.5233799457195434);
    msg.setSource(64942U);
    msg.setSourceEntity(13U);
    msg.setDestination(10347U);
    msg.setDestinationEntity(35U);
    msg.timeout = 78U;
    msg.lat = 0.6829413384051151;
    msg.lon = 0.2992856854716006;
    msg.speed = 0.9242094126123481;
    msg.speed_units = 53U;
    msg.custom.assign("BAXZCGOLOROSXLHLTHJMAJKZJQGGBZXTPKIPOCPTEXMXZDAOWMIQWQKYWDDGEDQSZUJXVNSXIJCFMHFFWZNININULYWSFTCKZQRSNJFLPVEVFKVVPOIUMWBCXABLMVPOGYQQHUDUTOBHVWW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.2801933438630342);
    msg.setSource(41884U);
    msg.setSourceEntity(105U);
    msg.setDestination(65160U);
    msg.setDestinationEntity(145U);
    msg.lat = 0.0385089679546865;
    msg.lon = 0.37798626779885536;
    msg.z = 0.5494579727779034;
    msg.z_units = 86U;
    msg.radius = 0.1457681570339785;
    msg.duration = 65155U;
    msg.speed = 0.7959081368994628;
    msg.speed_units = 180U;
    msg.popup_period = 25595U;
    msg.popup_duration = 50302U;
    msg.flags = 206U;
    msg.custom.assign("FOLPNSQSOAUOVVZZDDYJAKLAHWJYKVXBNQFJTFUESOXZMVXCFJKZHSXLKPPBKBHRWGUATFNDMECCOIKJNWBXYJGDQHPICRGYRVVTTUUECLZRWNTFYNJICGFSXWDYWLWNDMIRMRIAQAWRYBPYMTBHKUGUHJEZQGOZEVUXLCFDSVMDIMABWSTZSNBHKYX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.8097000584596812);
    msg.setSource(42513U);
    msg.setSourceEntity(249U);
    msg.setDestination(21865U);
    msg.setDestinationEntity(145U);
    msg.lat = 0.9904669776543118;
    msg.lon = 0.7734635148279947;
    msg.z = 0.34630323032172905;
    msg.z_units = 8U;
    msg.radius = 0.2890644434853491;
    msg.duration = 28813U;
    msg.speed = 0.10404416348972545;
    msg.speed_units = 145U;
    msg.popup_period = 3784U;
    msg.popup_duration = 56364U;
    msg.flags = 121U;
    msg.custom.assign("AHXAZQPXINJPCYRYBICCUIBFSULNJQTGSDVHLZJDXIAWXKFAEXBHFYWERRCSWSZQFMGQYGRVLRMZFTMOBYRZUKMUEEVZHDIGRURGXKUHRELQMKGOXIDCLPEFOWYUNDZLPBWGHOFWLAOOLTMXOBAEKLPIOTNAGCNJDQIDANFNHFCYUQEBPCINJXTVGRDU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.9502564823074587);
    msg.setSource(50072U);
    msg.setSourceEntity(22U);
    msg.setDestination(41755U);
    msg.setDestinationEntity(48U);
    msg.lat = 0.4279264506838938;
    msg.lon = 0.8005396201596368;
    msg.z = 0.8684188488875242;
    msg.z_units = 137U;
    msg.radius = 0.9212491142419844;
    msg.duration = 52007U;
    msg.speed = 0.7947670121590173;
    msg.speed_units = 175U;
    msg.popup_period = 9492U;
    msg.popup_duration = 25803U;
    msg.flags = 152U;
    msg.custom.assign("HFLVCXQTLNDZJGWSMBWQDGNDHTPBNFDSEHTMXONKAOYQCCPALVBKVZBMHARQQCAYUTVKWGDZCZARUOALONTJUPUSZKKHUHUKFMWCTWRBIJBWJBZEFEZKQYOGIZXLZNUWFQLIPVCXUXPJHFXIEGWRKDUETGOMFPVNYGIJXNCIYESAKSBLARPZLMISTVDBSNUCT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.32773144917207986);
    msg.setSource(28628U);
    msg.setSourceEntity(183U);
    msg.setDestination(35605U);
    msg.setDestinationEntity(138U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.4015883206892542);
    msg.setSource(14815U);
    msg.setSourceEntity(185U);
    msg.setDestination(10919U);
    msg.setDestinationEntity(42U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.33361339506453747);
    msg.setSource(3754U);
    msg.setSourceEntity(22U);
    msg.setDestination(49461U);
    msg.setDestinationEntity(139U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.4765106212836845);
    msg.setSource(10030U);
    msg.setSourceEntity(142U);
    msg.setDestination(7022U);
    msg.setDestinationEntity(166U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("CYROXNZPFAVJLMKBRFTZWZEMVUAQELFVKQFHAUUEZACETCIQBPIPCNDGXPRFHQIGMSMRWVIWKAPYREHHDKXDEPJBXQCDJZZPBTACJRUG");
    IMC::CompassCalibration tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 26233U;
    tmp_tmp_msg_0_0.lat = 0.13830508800358698;
    tmp_tmp_msg_0_0.lon = 0.8121875734294189;
    tmp_tmp_msg_0_0.z = 0.9010072341805319;
    tmp_tmp_msg_0_0.z_units = 41U;
    tmp_tmp_msg_0_0.pitch = 0.0666455539510068;
    tmp_tmp_msg_0_0.amplitude = 0.641688858388676;
    tmp_tmp_msg_0_0.duration = 23712U;
    tmp_tmp_msg_0_0.speed = 0.1013075601167901;
    tmp_tmp_msg_0_0.speed_units = 185U;
    tmp_tmp_msg_0_0.radius = 0.7368039176352651;
    tmp_tmp_msg_0_0.direction = 92U;
    tmp_tmp_msg_0_0.custom.assign("XXMDUUHHIBLPFQFUWETYAAYUSHRFKUIGDGJQMQBRRKKBKHPCESWJLIPGWCPMVTZVVDBXGYZJQCZJPFTLYNYOQXTJACEKSQTPXTWELSDRSVZYVMF");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::TrexAttribute tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.name.assign("OQAWVCGURZYEGCPUNNTSVNJKBLIULPSMEJQGQWOHQZTCGOYYXZYRMRNMHSINQJRRHJTWKHVLEDKUQQXSHTVWAWT");
    tmp_tmp_msg_0_1.attr_type = 117U;
    tmp_tmp_msg_0_1.min.assign("FINOYAAUYXTAEGDNSZRXXFRWIRTMLDHDSMGMDIDOFYHOCCJVJUFCLHKCALQERWTEPURXHZVSVJFXWQZAXNPJGEALTCQLVKJPFPTOFBDNDKJIGMYNBDECYIAQBOTCQZEKYVRHKHKIVCOVNJDILRCFGFGZRMAHTFHQPUJUJIVSMEGNPAZSSWVZNOMQELWBYGIKUWQSMKWBOSZDTBLBHNMSPKXXAQLG");
    tmp_tmp_msg_0_1.max.assign("RPKVYEJSCCDKMSPEDWBEEKWMWXDQBYYVKWXXIQNFBCGTAOJRUBNFPCTNOCJQUCVODRUQKUUYOODMWIZPBMLSGDUPCRPGLKNGFDXJOASBLAYHTIJMXATPOXLGHCOSZZFNPAYTEKRIEMAJAFFBZYJWSAXZKGGRMCUHTZMFEVOZVXEHULOIJQUVHEYQEZVRRHDTNIMDPKNTGXHUGTLWYDKRWNINHJMQVVNCSXWBWT");
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.15897253975173498);
    msg.setSource(17581U);
    msg.setSourceEntity(76U);
    msg.setDestination(58692U);
    msg.setDestinationEntity(52U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("RFZWFDZOVJQXLMYUKIMXKPRBU");
    IMC::RowsCoverage tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.9210636207477862;
    tmp_tmp_msg_0_0.lon = 0.6430237046622899;
    tmp_tmp_msg_0_0.z = 0.16559612905885834;
    tmp_tmp_msg_0_0.z_units = 53U;
    tmp_tmp_msg_0_0.speed = 0.35658719637895775;
    tmp_tmp_msg_0_0.speed_units = 44U;
    tmp_tmp_msg_0_0.bearing = 0.5584305462533774;
    tmp_tmp_msg_0_0.cross_angle = 0.2502474571722402;
    tmp_tmp_msg_0_0.width = 0.48159472174534057;
    tmp_tmp_msg_0_0.length = 0.9606465265388135;
    tmp_tmp_msg_0_0.coff = 142U;
    tmp_tmp_msg_0_0.angaperture = 0.30612997646165796;
    tmp_tmp_msg_0_0.range = 11069U;
    tmp_tmp_msg_0_0.overlap = 23U;
    tmp_tmp_msg_0_0.flags = 139U;
    tmp_tmp_msg_0_0.custom.assign("RDVKTCMDAUJZJBERYMZNIFODHQUKNQQTRSLTSKPZNCQVLTVWUFBEMBFLUIYOZKFBJZISSBPLTHNWRWUSHOZVHYFHOKXCPENZQYTAIMSVMOICWZFXGAGKUMYLEHHVOCWQELYSCPWDEOHGDARBJYUSIBXUTXWARACBPNDFWQXKYLPAEQATDPYPTVOAGDQBMGACFDXKFGKJJXIISQNHPVVWGJIDNNLLWZMYGMXVCGJX");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::UsblModem tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.name.assign("VWTGYZHTGCBXOOUAIWPBYNDULAESLMVUQSEJTNSDOTVGPYVBAIFXDJPOMJKAGVNERIZI");
    tmp_tmp_msg_0_1.lat = 0.3066401780064173;
    tmp_tmp_msg_0_1.lon = 0.3612689403702436;
    tmp_tmp_msg_0_1.z = 0.7669413872385911;
    tmp_tmp_msg_0_1.z_units = 225U;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.24277220958776058);
    msg.setSource(14334U);
    msg.setSourceEntity(156U);
    msg.setDestination(53259U);
    msg.setDestinationEntity(43U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("EZEVNEOGPVSQIIQKIJDOMWSBAJWJAFLMWLYTPXUFVTLXRICFEDYPUNNCVLDZOFUHLSBHXRPAQCPOFDRQPGYDACJCHEOYVFAYBMKNYVHSZBCNVKSGLATDFHGPHRMUNTUTAGORJKKXWDMUCQEEJWEEFIAKTPLAMBYKKXRWRSQZNNXZVNGPSZTJVTHMU");
    IMC::LowLevelControl tmp_tmp_msg_0_0;
    IMC::DesiredPath tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.path_ref = 617331648U;
    tmp_tmp_tmp_msg_0_0_0.start_lat = 0.5775696335669541;
    tmp_tmp_tmp_msg_0_0_0.start_lon = 0.9686106143441546;
    tmp_tmp_tmp_msg_0_0_0.start_z = 0.04525487549742735;
    tmp_tmp_tmp_msg_0_0_0.start_z_units = 78U;
    tmp_tmp_tmp_msg_0_0_0.end_lat = 0.14455370629707176;
    tmp_tmp_tmp_msg_0_0_0.end_lon = 0.25917480029612483;
    tmp_tmp_tmp_msg_0_0_0.end_z = 0.31501276671975054;
    tmp_tmp_tmp_msg_0_0_0.end_z_units = 126U;
    tmp_tmp_tmp_msg_0_0_0.speed = 0.02255361791044863;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 188U;
    tmp_tmp_tmp_msg_0_0_0.lradius = 0.6071706424307179;
    tmp_tmp_tmp_msg_0_0_0.flags = 126U;
    tmp_tmp_msg_0_0.control.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.duration = 40290U;
    tmp_tmp_msg_0_0.custom.assign("HDZVPBSIWMURGSIWOWATRDIXFYAEFZGLQKTMLNXFPSEHKOEQCLXYIBZAOYDBIYLQJONAQNERRQXFQBZTTSEEPKYOMHKWFBSQNFGMCSOXUGNUYBMVDYCINDGTLWCMCPHQUHVULLWPJGHYRJEYWJOZUKCAKZIRBACDGJSFBILWCROEPVHFKXZAGGSETCFVSKJZBHLVNUCAMMAPRMMFQSNXIOTGRDWUJBVHPJJKN");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::NegotiationData tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.mmsi.assign("JASYRQINSKAJBCIWXXEGUYIJLSKOZVZCFVPJLFWZREKFMKHEXZTEPKYIHRHWGWJTSHRDOCTLNMCQTUBPBHYNPLFXFNWGYMTGVURJKUUEGJCMCBZPYFNMAHKECOFSMDTYGBRZIDBENYGULUCYDOWLNAVXDXSRWSQWOFPXIWPQKVXOQNODUALAMMHTEVIOBUPSIVNATAB");
    tmp_tmp_msg_0_1.cog_int = 0.10140150909235679;
    tmp_tmp_msg_0_1.sog_int = 0.3516392796170875;
    tmp_tmp_msg_0_1.state.assign("BKAHYLASSQLAKFUZRMXSZWILZGVWQWRMEDXVBYFYMFJBUTWLXQDSJOXEOIYOVKTNSOVPVRMVKKJKVWONXSUIXVABAQNBSSBAGPXTYFFRKJCZDTUIJCPSYYXUHEPFNWEIOZBTZICNPEUQJNTPMAPCNURBJKFGTLXCYYNJMAWOGWDRHJKDIRQQMCQGDDPYOFZDLCGRGWAUNMFPGHTIREEK");
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.7591395637146999);
    msg.setSource(29883U);
    msg.setSourceEntity(23U);
    msg.setDestination(5653U);
    msg.setDestinationEntity(70U);
    msg.timeout = 16643U;
    msg.lat = 0.4471250465305303;
    msg.lon = 0.5959106376835089;
    msg.z = 0.6518562417252077;
    msg.z_units = 193U;
    msg.speed = 0.42392759642171796;
    msg.speed_units = 90U;
    msg.bearing = 0.21261779377894896;
    msg.width = 0.47169580428871194;
    msg.direction = 60U;
    msg.custom.assign("MNOBGLCKUIRPLJTYRDKRTQUASJLTKTWVXSVKBERNAZDGZGCQOLVCLNPQYRDUKMIVZEIYCQNIYYYJNDJZHIPWEFXJSWZRIOEXHTGFVDHBKNKJBMUVLFDQRZMBCOJQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.6457780099488079);
    msg.setSource(17688U);
    msg.setSourceEntity(251U);
    msg.setDestination(48643U);
    msg.setDestinationEntity(140U);
    msg.timeout = 22259U;
    msg.lat = 0.5511473450534783;
    msg.lon = 0.27100528098729015;
    msg.z = 0.3862268942309962;
    msg.z_units = 145U;
    msg.speed = 0.521972463414526;
    msg.speed_units = 95U;
    msg.bearing = 0.9763007037234283;
    msg.width = 0.5392300013179531;
    msg.direction = 48U;
    msg.custom.assign("APZXROCTGDOJXDWZWNTTLCVZPMDUIWQFYVXLNGZUNREPYKUYWSPRHCBGRVASHQAVRJVGMMIEDNGQATTCOAZVLAOHYSQTBCBBRZGKCYZUCNLGXPHVWBSMEIUUKRHYZYAXHKZXDGIEJKKYFSNDPLMNDRTBJBZSXOOVIFQQXLCAEIPHOQSJMWSFBFEUVUPBDPWLYIUXMEDNPJNLOEDBSK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.3838632801998385);
    msg.setSource(37332U);
    msg.setSourceEntity(48U);
    msg.setDestination(16392U);
    msg.setDestinationEntity(86U);
    msg.timeout = 26211U;
    msg.lat = 0.5665779078439539;
    msg.lon = 0.39437670264776803;
    msg.z = 0.35643526958456273;
    msg.z_units = 137U;
    msg.speed = 0.686815968126961;
    msg.speed_units = 17U;
    msg.bearing = 0.8713836177911685;
    msg.width = 0.6318019994245109;
    msg.direction = 242U;
    msg.custom.assign("WKAJPOFFVDSMTZNTZOXRMGZLPQXMAUAFEWPSFOENTGWLECZXQNMGRSTLDLMIUJAEGGHWPJFRHHOUDTBYMOWNFARZJIRCIFAVJEXNDDBAMIYMDQWUPMXBQLGNVKVYZEQLACIGTFJSOSZBQNCRUSUZYLKEYLEQRVQTFGCBCYYWXODCHORZVAW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.6274031373239501);
    msg.setSource(9527U);
    msg.setSourceEntity(92U);
    msg.setDestination(4403U);
    msg.setDestinationEntity(104U);
    msg.op_mode = 178U;
    msg.error_count = 91U;
    msg.error_ents.assign("IWPQBNVBMTNFYMLDZJPIRAXMNKMDISXEX");
    msg.maneuver_type = 29703U;
    msg.maneuver_stime = 0.35322402500195493;
    msg.maneuver_eta = 60227U;
    msg.control_loops = 741012687U;
    msg.flags = 150U;
    msg.last_error.assign("VMJNWILYPBKKBQGFHRRLVJEKWAZEHLHCXDTFRIAVSNSPBMFCBKYXNPYLIMJKRSGHSMCLBQXYZWQHKKUVSWNJJOYIAQOCZYGRVUWCUMIOAQPSQACGMTUICDOXHSUJHTUXPWRWOOIAJXIMCIJVSLFPHGLZTXGDZNGZPWXEUKHITGBMTTTT");
    msg.last_error_time = 0.9891866565534371;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.5011189464042743);
    msg.setSource(30593U);
    msg.setSourceEntity(177U);
    msg.setDestination(52773U);
    msg.setDestinationEntity(230U);
    msg.op_mode = 37U;
    msg.error_count = 23U;
    msg.error_ents.assign("ZQFUTEGDTGNOAWNRYLVXNQEQSZOCYBMHYDKLWZTVLKYNGQKQHSHTLFRGILANJMVMFIDLOAKXNTZZBRAPJPMMFXCVCRQJRDCOMNDPQGWZVQGRYLXIIXFBHRULCDHSPJTOOIXEEYDHHYKZEYAUSCKHSXIIDKVWXETQBXVFBEPYHWGSFRIIISCWSAWPCVSBEOLNEKSUZQJMCKGWROYDJBUPZUGNVBUNJJUTJUDABZJTEHXPWCMMATVW");
    msg.maneuver_type = 52007U;
    msg.maneuver_stime = 0.9132574457318957;
    msg.maneuver_eta = 53586U;
    msg.control_loops = 1089744631U;
    msg.flags = 163U;
    msg.last_error.assign("NMUZKIMRCDFOXUNYYUZEJJPDFHPSCBUKSGVNAZQCQNBWZAJQUHQSEWTBLIEKLJZVQJQGDKSGVIBKKVCOCEVIPTFUPLIXSMANRWASZHTDRAOJMMBFICZHCXFDYPMSLEFUTNBFYUOHKOWGHTPTHWFMUXTWGROXPQODKVHRBYJXBCJLASLHHRNXGELAZJUJWEEOBVZIYWTQNLDRLCPRAIQNNKQGWFOCIVAGMRTMLVVDYRS");
    msg.last_error_time = 0.6573867409000718;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.958152340557801);
    msg.setSource(59141U);
    msg.setSourceEntity(90U);
    msg.setDestination(20210U);
    msg.setDestinationEntity(18U);
    msg.op_mode = 20U;
    msg.error_count = 241U;
    msg.error_ents.assign("RJWVBIQYYREJUMFFWYZKCXNTWSXDZXBCPDATCCCUSWHYFLXAJGFIGPFBDHNUAXRJQKXOMMQWPXRUPFEDYIHVQMHYQBNFPTXKWRPXBGZDLXKHZCMBRJGLKPTWKLTOASOMVEZN");
    msg.maneuver_type = 46199U;
    msg.maneuver_stime = 0.28667548643121843;
    msg.maneuver_eta = 62430U;
    msg.control_loops = 2257009421U;
    msg.flags = 58U;
    msg.last_error.assign("WSPLIRGAPMRZUTAOCILBFFOCETWQTIFXUXAFZSESBM");
    msg.last_error_time = 0.8153332319360809;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.14141286201637726);
    msg.setSource(56005U);
    msg.setSourceEntity(208U);
    msg.setDestination(1984U);
    msg.setDestinationEntity(162U);
    msg.type = 92U;
    msg.request_id = 28482U;
    msg.command = 3U;
    IMC::PopUp tmp_msg_0;
    tmp_msg_0.timeout = 50062U;
    tmp_msg_0.lat = 0.4325535717452561;
    tmp_msg_0.lon = 0.4495242448630705;
    tmp_msg_0.z = 0.7471361750997358;
    tmp_msg_0.z_units = 227U;
    tmp_msg_0.speed = 0.539129763407994;
    tmp_msg_0.speed_units = 223U;
    tmp_msg_0.duration = 61364U;
    tmp_msg_0.radius = 0.10927512653063542;
    tmp_msg_0.flags = 52U;
    tmp_msg_0.custom.assign("XNTCSZGHRLHAYYWHTYSKRUHPBKMQTVINFQOKHCDVQPTPITBEAFPYBQAUCWGFXIEUJSABCFQRRFDBKZIZVJCTHSWOWGUWWUEEKYBKZZZCFEVDLHIXCSWRCJZGKXRFDVCNKLXORQSYLODQ");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 59705U;
    msg.info.assign("AFWYTVRFOMPGXSWSECQKVYMBYPSVVSQHJLDYXYZJWTODGRTRDRUFABUEANRDHXFMAUKVYBVFNJCBDJLKAEVV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.2929326349645277);
    msg.setSource(53855U);
    msg.setSourceEntity(190U);
    msg.setDestination(34613U);
    msg.setDestinationEntity(250U);
    msg.type = 246U;
    msg.request_id = 65433U;
    msg.command = 200U;
    IMC::FormationPlanExecution tmp_msg_0;
    tmp_msg_0.group_name.assign("BRMMHTRSWXYRFBUAAQPFWKROBZYPFNADLTFKQWCLCPTENDTDVXCVGDYFTFNLELZBGJEDIFTISOORYQCZRDMTVKZOANHTOWJVSSRBESXZJPRRXZUCVQYTBVIHQMPHUMSJYEMHWNHVGHYEZWFAJBNIPNUXBUDXLSTGPKJLOJKAMSPCVSBUGONIDWQIAWGLLWZJFQDHZLMEKYOGGXUHRKOPKAEGIKEYXSWCNCHJQFIONVUDXCICEPLJVA");
    tmp_msg_0.formation_name.assign("QTUDFMSTVRNTDZGVYEDPIOHYGJGJLJFVXWUFINMGLOPXRFRFTNLEKWZGKJRZEWCAVZMIHBVPLVKQVHQKPERWSAWYWTDQBQMOIPZKXZBSIIWQSQCCROXMLPGOEAVNEOXYOKNKAXHYEIHARGMAAFYPUOUEAQMHUQBRDPNUCLXNNVIYWDYJNPACJGSUFCUSJWMLHFKMBLOUSEHCIRTKYWDSJILXBTQVZDDHSCMLHDOCTBETP");
    tmp_msg_0.plan_id.assign("FHTJEORVBZDJIKHELXBHUBXQQLGEOCWQCLOWBJFOVUOQZELCSYYNYXKVOTGANPTUIZJFLRLIAMWPPXKGDIMRAZLSWPJCFSISPGJWIDRRHJMRPJFBLYBYQYKYIYKMDXKRCMSEZZSAHFXGWKRDXVVNOI");
    tmp_msg_0.description.assign("NDVTCOBLUHGAQOZGZILOPIBPOKXLBEUHGUPGKZEFQOAVQWQRNQOUYBEXPEZSYCJSZCBLCAFRIDKOHDDFVSTSEEITMBPIHJMPKTRWRXSHDNORJQFYPGMBYKHDFQABNCTAMWTNNAANOUGFQSTMJI");
    tmp_msg_0.leader_speed = 0.28879849755376863;
    tmp_msg_0.leader_bank_lim = 0.5920445413648717;
    tmp_msg_0.pos_sim_err_lim = 0.9474382163085882;
    tmp_msg_0.pos_sim_err_wrn = 0.19519905943362792;
    tmp_msg_0.pos_sim_err_timeout = 24795U;
    tmp_msg_0.converg_max = 0.32743412937769645;
    tmp_msg_0.converg_timeout = 52809U;
    tmp_msg_0.comms_timeout = 39282U;
    tmp_msg_0.turb_lim = 0.4843472256247865;
    tmp_msg_0.custom.assign("AVDNGANJKVHZTQXFLZVICJDORKACNCMYVMTEEHMXYXOIZOTEHRUVTVPFDHJTEBDTDZGNWABWHYOWCSWUWYXLIRISFHOQRNPZDLLUUGRNQTBSMMKBACZMZVPKKYAGCVKSJGNPGDQZARPNFHYXLXIUSCOZTMLIBSTIAXISDVMDQWBYLUJUNCFQKRFUQJOBSIPUCYIFZJQNQPOLEEQGLSWPYWBBELJ");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 49583U;
    msg.info.assign("YKSESDMRWEPNKFNJZTYLVJGQJKZODKL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.18712481152140215);
    msg.setSource(52674U);
    msg.setSourceEntity(88U);
    msg.setDestination(35183U);
    msg.setDestinationEntity(153U);
    msg.type = 249U;
    msg.request_id = 39770U;
    msg.command = 9U;
    IMC::PopUp tmp_msg_0;
    tmp_msg_0.timeout = 48218U;
    tmp_msg_0.lat = 0.191649114351223;
    tmp_msg_0.lon = 0.9785895306397663;
    tmp_msg_0.z = 0.8167758488635753;
    tmp_msg_0.z_units = 191U;
    tmp_msg_0.speed = 0.6972643321672563;
    tmp_msg_0.speed_units = 75U;
    tmp_msg_0.duration = 25956U;
    tmp_msg_0.radius = 0.2506753174337182;
    tmp_msg_0.flags = 228U;
    tmp_msg_0.custom.assign("UGGUCSCTBXRCZXMJWFIZCQJVEIDOKTMSRRPWSLCLLPQYINVMDJYWHBVCXLUDPHXVGZLCTYBNYQPSRWIKTEQYBIGQBOPOKNFJTE");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 49244U;
    msg.info.assign("FSLVZMNRRCCHWFAGFGLEBGKBCHPVTXZUNPQHWEQXAFGKNKAXLWXUOMXYUXK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.14011244297863845);
    msg.setSource(57683U);
    msg.setSourceEntity(240U);
    msg.setDestination(61525U);
    msg.setDestinationEntity(231U);
    msg.command = 98U;
    msg.entities.assign("EZLKUKDXDLWBBHNXGPVFFJWLFCCRZJHSOYPLDSGHGRKGGBGSFXJLYEYGXZYOIMNAEQYGLAPNWWMBWMTUKIKAURSCFXSMWRDCBIQSQXUUKXYDTCHHPBMQUIWQUBAVPACMILVSHQYBESFVDIVYSIZXBSOOTPMNUOCJKJIERKZKZTWOOVTNBRLJURZHZMIFPDQEVNKHRLFTFAEN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.4354893035464241);
    msg.setSource(21456U);
    msg.setSourceEntity(180U);
    msg.setDestination(11438U);
    msg.setDestinationEntity(76U);
    msg.command = 74U;
    msg.entities.assign("YXMQJPBEMKRIGVQZGJDKDYVUPXQGRTGO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.5339293579905213);
    msg.setSource(33140U);
    msg.setSourceEntity(127U);
    msg.setDestination(27148U);
    msg.setDestinationEntity(4U);
    msg.command = 14U;
    msg.entities.assign("KYOQYNNPIMQGPANUKPKZBSZWFHMCJLNZHFNMFDAKXWATHVDHIVOZBJFQVSBZMIUCDVELPAVTZUOAMWXKSHFJTGMUEKMAWEBBBZJTYWODQSYPXXNFOYSIGQGEGBVXOPDPXCEZZOXSHBX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.4954413790008272);
    msg.setSource(60090U);
    msg.setSourceEntity(24U);
    msg.setDestination(4344U);
    msg.setDestinationEntity(76U);
    msg.mcount = 108U;
    msg.mnames.assign("BDADQVYNYIWXBGHIVTRGPVSYURYAHZVXPFDPQAQGEJFSMTQTCSMLNHCCJSZGDZHOFARJUWXCZCWMEQUBXRLLRBATWMMDOEUWZHJCSLXDUOPSTAOBXEKSPMTDWYVCWHETCOVFIZASGHWKONHEVOYMIJNEZXREXGKPSBNJNHYETJBNDRNCQUGPINRMAOQFUFFFAIPQVGPKOJ");
    msg.ecount = 166U;
    msg.enames.assign("RPSRHUJHZXMIBMZEVCBSOKDRIVFTXWQRSYBRDZZMLGCITQWMAJHJWFKGOCSFNOOQCXDMVERIGWPYFIQTYNIAGBNPMPIWAKKPBS");
    msg.ccount = 226U;
    msg.cnames.assign("KQPYEOMVTQVFUPSIYUXQLCESFIWBONEA");
    msg.last_error.assign("EUSXKNMJDGHVHMPLXGRNXTWRWANWKMYDKZRUDCJQCEBNKXBPAUXSRSWRUHIJLLPABQPWQKSGXEFVGIIHDZVSORHYZTMVEPOILEDAHKXSGDAZZCQCRFMZSKNPJVQFANNPOZVYNTBFVUGLVCJ");
    msg.last_error_time = 0.20658782118504349;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.4263073346048948);
    msg.setSource(32076U);
    msg.setSourceEntity(159U);
    msg.setDestination(56517U);
    msg.setDestinationEntity(63U);
    msg.mcount = 130U;
    msg.mnames.assign("BPBJATCYQVYVZXBCDZAFJKNVJWPCTCWDJEIOMANAZYHDPMYMTCNSZOFAKDANKYX");
    msg.ecount = 151U;
    msg.enames.assign("LAKFTXJBVCHDTCL");
    msg.ccount = 208U;
    msg.cnames.assign("TWCXMUOOLEIPXJFRJHSMYHSRKXYTAUTZVNSMPUSOQBKTFMFJRHMOOCDYKWIGDBI");
    msg.last_error.assign("MXVDVOLUWSXVZPNJFFLKIOFKSRHIWRWHQZYGGRYROZAL");
    msg.last_error_time = 0.658483414453428;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.3481524288423148);
    msg.setSource(23723U);
    msg.setSourceEntity(128U);
    msg.setDestination(58150U);
    msg.setDestinationEntity(81U);
    msg.mcount = 249U;
    msg.mnames.assign("YNREYFJZXMZEIP");
    msg.ecount = 244U;
    msg.enames.assign("VTOETATFLDYWGGVHHTLRWDCBTKMKPIZLOXJUMYOTLNTWJSYYIAHOGIPBBXIQHJCHZWBSUUINPJBMEWIGYGLCUJARWCFPUXJCNASZMMQVVCMXDVAFAGQKBWQAPRGKEZQLUNVRSRSIEHZJUJPFTNFRAWSDEXVRTQVHDYEZGAYOLKPKHJBBXMMPRCXFKIQKFHNFQSSLOJCQUCOXLAUDDEXBVROTZFNICOPPWOXG");
    msg.ccount = 152U;
    msg.cnames.assign("IESWGZIGQZB");
    msg.last_error.assign("GEJHJSYCTQNRZ");
    msg.last_error_time = 0.6140269430581602;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.3404056528214572);
    msg.setSource(39728U);
    msg.setSourceEntity(2U);
    msg.setDestination(40823U);
    msg.setDestinationEntity(203U);
    msg.mask = 124U;
    msg.max_depth = 0.5665213668685352;
    msg.min_altitude = 0.10796382769666335;
    msg.max_altitude = 0.22378378611056937;
    msg.min_speed = 0.12158215563307917;
    msg.max_speed = 0.27917343623878;
    msg.max_vrate = 0.34757251671204104;
    msg.lat = 0.9428029875832464;
    msg.lon = 0.25790777354835304;
    msg.orientation = 0.24763830361100914;
    msg.width = 0.6246038710056278;
    msg.length = 0.8080971654224594;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.6243640534280553);
    msg.setSource(11615U);
    msg.setSourceEntity(152U);
    msg.setDestination(36179U);
    msg.setDestinationEntity(187U);
    msg.mask = 2U;
    msg.max_depth = 0.802458758470958;
    msg.min_altitude = 0.7619081439147241;
    msg.max_altitude = 0.15667109787015632;
    msg.min_speed = 0.8214432736765991;
    msg.max_speed = 0.8230169566804084;
    msg.max_vrate = 0.8415276675467982;
    msg.lat = 0.45028300636649365;
    msg.lon = 0.915448499516217;
    msg.orientation = 0.18092582485814912;
    msg.width = 0.5334191335356392;
    msg.length = 0.6047269210898921;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.9858323576091911);
    msg.setSource(50505U);
    msg.setSourceEntity(233U);
    msg.setDestination(12372U);
    msg.setDestinationEntity(154U);
    msg.mask = 33U;
    msg.max_depth = 0.22193378283505572;
    msg.min_altitude = 0.1463366075042457;
    msg.max_altitude = 0.7281814774718269;
    msg.min_speed = 0.12376342061799983;
    msg.max_speed = 0.6001043792898606;
    msg.max_vrate = 0.7558393673843955;
    msg.lat = 0.2218880327785968;
    msg.lon = 0.1949322545487273;
    msg.orientation = 0.04691256824001733;
    msg.width = 0.25073458516290026;
    msg.length = 0.810083689288971;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.00910608691149295;
    tmp_msg_0.lon = 0.2282969054698657;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.32048977222800634);
    msg.setSource(31674U);
    msg.setSourceEntity(125U);
    msg.setDestination(57036U);
    msg.setDestinationEntity(84U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.8851251588104025);
    msg.setSource(31469U);
    msg.setSourceEntity(95U);
    msg.setDestination(25708U);
    msg.setDestinationEntity(208U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.02132103320472445);
    msg.setSource(12471U);
    msg.setSourceEntity(63U);
    msg.setDestination(62519U);
    msg.setDestinationEntity(159U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.7674198528639418);
    msg.setSource(16323U);
    msg.setSourceEntity(45U);
    msg.setDestination(57002U);
    msg.setDestinationEntity(66U);
    msg.duration = 34272U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.45259327738699984);
    msg.setSource(50666U);
    msg.setSourceEntity(40U);
    msg.setDestination(4153U);
    msg.setDestinationEntity(137U);
    msg.duration = 31860U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.002652181211671434);
    msg.setSource(15623U);
    msg.setSourceEntity(131U);
    msg.setDestination(48962U);
    msg.setDestinationEntity(1U);
    msg.duration = 1100U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.8249192512236613);
    msg.setSource(10483U);
    msg.setSourceEntity(139U);
    msg.setDestination(46892U);
    msg.setDestinationEntity(80U);
    msg.enable = 249U;
    msg.mask = 2103757455U;
    msg.scope_ref = 3246910157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.1917255131529505);
    msg.setSource(14869U);
    msg.setSourceEntity(61U);
    msg.setDestination(27971U);
    msg.setDestinationEntity(122U);
    msg.enable = 80U;
    msg.mask = 730999680U;
    msg.scope_ref = 1712233316U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.22843988288527328);
    msg.setSource(58569U);
    msg.setSourceEntity(249U);
    msg.setDestination(58251U);
    msg.setDestinationEntity(12U);
    msg.enable = 175U;
    msg.mask = 1449671080U;
    msg.scope_ref = 2200940678U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.7031386130329002);
    msg.setSource(45935U);
    msg.setSourceEntity(51U);
    msg.setDestination(34993U);
    msg.setDestinationEntity(103U);
    msg.medium = 181U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.925835722085609);
    msg.setSource(48921U);
    msg.setSourceEntity(225U);
    msg.setDestination(21799U);
    msg.setDestinationEntity(167U);
    msg.medium = 115U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.9489010216884454);
    msg.setSource(43671U);
    msg.setSourceEntity(179U);
    msg.setDestination(10371U);
    msg.setDestinationEntity(56U);
    msg.medium = 69U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.6357840055810522);
    msg.setSource(54666U);
    msg.setSourceEntity(197U);
    msg.setDestination(27495U);
    msg.setDestinationEntity(141U);
    msg.value = 0.5801387003285184;
    msg.type = 130U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.7727847997770395);
    msg.setSource(26838U);
    msg.setSourceEntity(62U);
    msg.setDestination(55446U);
    msg.setDestinationEntity(114U);
    msg.value = 0.22366657006137758;
    msg.type = 161U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.9916470851498648);
    msg.setSource(61258U);
    msg.setSourceEntity(58U);
    msg.setDestination(25257U);
    msg.setDestinationEntity(204U);
    msg.value = 0.39188264196463374;
    msg.type = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.26823299324535776);
    msg.setSource(47810U);
    msg.setSourceEntity(70U);
    msg.setDestination(974U);
    msg.setDestinationEntity(65U);
    msg.possimerr = 0.16773793343337062;
    msg.converg = 0.4816903906074381;
    msg.turbulence = 0.49284369402975936;
    msg.possimmon = 175U;
    msg.commmon = 172U;
    msg.convergmon = 185U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.9161534994674265);
    msg.setSource(23247U);
    msg.setSourceEntity(57U);
    msg.setDestination(61383U);
    msg.setDestinationEntity(19U);
    msg.possimerr = 0.18647995731151012;
    msg.converg = 0.1920927309121231;
    msg.turbulence = 0.4218097813674756;
    msg.possimmon = 135U;
    msg.commmon = 195U;
    msg.convergmon = 248U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.05815548960819528);
    msg.setSource(60207U);
    msg.setSourceEntity(119U);
    msg.setDestination(47361U);
    msg.setDestinationEntity(216U);
    msg.possimerr = 0.44948790556521057;
    msg.converg = 0.5713640480285375;
    msg.turbulence = 0.5729249815910509;
    msg.possimmon = 65U;
    msg.commmon = 184U;
    msg.convergmon = 86U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.5865517659511899);
    msg.setSource(8454U);
    msg.setSourceEntity(114U);
    msg.setDestination(59774U);
    msg.setDestinationEntity(90U);
    msg.autonomy = 96U;
    msg.mode.assign("XTGSSKHYNTRBSLUVMQHPHRUEPFLXCBNLTZPLMNUMCCWYXVRBTJRZWHJAKXLQAXSVEDPGYUWLLHVBSEIUJYDRVIFMGTFFXZBDRWKIQOFWDNFZZRHHAISDDNLOXWJUJGHWKQRBMPOBQIOMKLXIYAUYFZXYTERTJANQOFMCSYZVVPDKACFCLEVS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.27833737408576187);
    msg.setSource(20786U);
    msg.setSourceEntity(220U);
    msg.setDestination(537U);
    msg.setDestinationEntity(213U);
    msg.autonomy = 148U;
    msg.mode.assign("WJHHZWMSZAFGJQJKXTTYBZDQVWYUMARNWVTHEJPRIIODKOLLCMJNLXCRXFHESDXMLEIOPAHQCPRRJOKYBNISSULPXPXNJUAONUGGWXDIQKLSLFPTEFKEBKJYOUNVZBILFBZSZTMRKCFVQNEZICWYCVBYDUXJEFHGARXHCPARABGGEQTYIQQHXUBUMOASSODSMUPTEGWWHYHVLCKNMC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.4097194475786783);
    msg.setSource(11836U);
    msg.setSourceEntity(220U);
    msg.setDestination(6403U);
    msg.setDestinationEntity(126U);
    msg.autonomy = 47U;
    msg.mode.assign("OGZDCMEZRYIPZSWQGYDMFPEWTTSCAYNQTRAEHKNBWJTHBOCVPJBUDKGHKSWAGYEPGSWFCDUHGFZWQRYMEXGLBVNVRMXAXLFIGWAYSPCLBQSLMHNOLIQIYOFKVCMAZNTWGGAKSOBKRXDCAIOWLXZLMPFVSZKYQTOLYPBUXDRRHYDJVTPOUMILRJJCEOWBNNNQXNX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.5105430433804666);
    msg.setSource(27748U);
    msg.setSourceEntity(160U);
    msg.setDestination(64178U);
    msg.setDestinationEntity(250U);
    msg.type = 81U;
    msg.op = 195U;
    msg.possimerr = 0.8830457495326333;
    msg.converg = 0.07650574833904156;
    msg.turbulence = 0.9252832157974534;
    msg.possimmon = 150U;
    msg.commmon = 105U;
    msg.convergmon = 183U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.26502792380186246);
    msg.setSource(63404U);
    msg.setSourceEntity(135U);
    msg.setDestination(54420U);
    msg.setDestinationEntity(124U);
    msg.type = 247U;
    msg.op = 30U;
    msg.possimerr = 0.3504239471042333;
    msg.converg = 0.8359448499884387;
    msg.turbulence = 0.9666299478367059;
    msg.possimmon = 73U;
    msg.commmon = 154U;
    msg.convergmon = 14U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.5016887638815519);
    msg.setSource(46813U);
    msg.setSourceEntity(90U);
    msg.setDestination(25263U);
    msg.setDestinationEntity(21U);
    msg.type = 104U;
    msg.op = 215U;
    msg.possimerr = 0.438193849689846;
    msg.converg = 0.4848026151220731;
    msg.turbulence = 0.7541649904193645;
    msg.possimmon = 53U;
    msg.commmon = 59U;
    msg.convergmon = 16U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.2729583613757861);
    msg.setSource(56072U);
    msg.setSourceEntity(95U);
    msg.setDestination(10252U);
    msg.setDestinationEntity(30U);
    msg.op = 204U;
    msg.comm_interface = 97U;
    msg.period = 58331U;
    msg.sys_dst.assign("PMKESMSFHZFWILWWLHKWJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.25806778804439934);
    msg.setSource(41207U);
    msg.setSourceEntity(33U);
    msg.setDestination(36220U);
    msg.setDestinationEntity(96U);
    msg.op = 101U;
    msg.comm_interface = 151U;
    msg.period = 3676U;
    msg.sys_dst.assign("ECFDKQRYWISTYOLQG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.8779142790476735);
    msg.setSource(49219U);
    msg.setSourceEntity(54U);
    msg.setDestination(46250U);
    msg.setDestinationEntity(132U);
    msg.op = 154U;
    msg.comm_interface = 134U;
    msg.period = 59351U;
    msg.sys_dst.assign("VEBHTIIZUCLCGWIKFEPRWEGATNXTAJJEUSJIWQJHPSGAKZERXKLZWXGHMAPLUUKANXFBDAMSBZSBQGUNYFQTJJBPVKFYLSAEYTPPQCIWNBKCLQWBRJOHCBQYJDSTKVOYVYUIDSNHLDNYFHYURHHDMVMJFLGMUCQHWCMXHQDMZITDRVQEOGFGZKMSPDBXOOJUC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.6103845410807829);
    msg.setSource(65328U);
    msg.setSourceEntity(161U);
    msg.setDestination(13408U);
    msg.setDestinationEntity(87U);
    msg.stime = 2689546648U;
    msg.latitude = 0.8992053061962967;
    msg.longitude = 0.40547866785198616;
    msg.altitude = 61975U;
    msg.depth = 22116U;
    msg.heading = 16830U;
    msg.speed = -13130;
    msg.fuel = -91;
    msg.exec_state = -126;
    msg.plan_checksum = 58721U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.5683578080413166);
    msg.setSource(63247U);
    msg.setSourceEntity(11U);
    msg.setDestination(50890U);
    msg.setDestinationEntity(18U);
    msg.stime = 153807123U;
    msg.latitude = 0.7529339321472671;
    msg.longitude = 0.33931697871274324;
    msg.altitude = 58644U;
    msg.depth = 23690U;
    msg.heading = 56085U;
    msg.speed = -12008;
    msg.fuel = 47;
    msg.exec_state = -90;
    msg.plan_checksum = 42481U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.8800513950587838);
    msg.setSource(48687U);
    msg.setSourceEntity(50U);
    msg.setDestination(52758U);
    msg.setDestinationEntity(206U);
    msg.stime = 3898853820U;
    msg.latitude = 0.5068240861637208;
    msg.longitude = 0.376988112432052;
    msg.altitude = 7893U;
    msg.depth = 49915U;
    msg.heading = 17740U;
    msg.speed = -25799;
    msg.fuel = -62;
    msg.exec_state = -49;
    msg.plan_checksum = 59458U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.23151176952665564);
    msg.setSource(26736U);
    msg.setSourceEntity(65U);
    msg.setDestination(1187U);
    msg.setDestinationEntity(135U);
    msg.req_id = 54875U;
    msg.comm_mean = 245U;
    msg.destination.assign("EMGIVQQHAYNVPULEMPQAKWFJEMRKQFUURZHKHBLDCVXTJQXOEMYYFJLTZRJUHFRBBFDCBJWQBZSNOMANDLFFCDKPRZFQHCACTIKRTDJISSVBTYGZCXKLSFKHNMUOSRCXAZAHOAIBQDLMSUSIOSPZGMMIO");
    msg.deadline = 0.4725543424118105;
    msg.range = 0.34928346612156336;
    msg.data_mode = 156U;
    IMC::DesiredRoll tmp_msg_0;
    tmp_msg_0.value = 0.1425650500140495;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("PLWDNXLCLDSHTONCYJXUJJAHALQRMHKKRJLBZBGZGXTLNXPWUUPZDOEBSRDGQMICODENUEWIDATFCWMQENMPFFZSYKHBQAMHQBBYWGXNLKPQQFTIJPCGHUZBWXZUIWJYAUNJLKYVITHFMOOAKSIRECIPZGTQSRSAQIANDYDVUEJZVWGSBZMEV");
    const signed char tmp_msg_1[] = {-44, -13, 67, 104, 52, -103, -29, 44, -52, 114, -40, 78, 60, -124};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.6174069333212457);
    msg.setSource(52275U);
    msg.setSourceEntity(143U);
    msg.setDestination(2181U);
    msg.setDestinationEntity(219U);
    msg.req_id = 27713U;
    msg.comm_mean = 88U;
    msg.destination.assign("AZEPWJXYCTODOKGVKSXIRJEKMTVFIVLEGTRAJIIYYNQJVWAEXSJUVLHCNKYKVDLPEIKGJGSMQHUOXLENIDMQSQZSWFBTWCTGDAFQQPIWZAZNMPFPTMKMENCPORHEMZZSBYQPMKKXADLUGAXVULBSQRLOEXCCYYBFFGJ");
    msg.deadline = 0.591551254817689;
    msg.range = 0.24278204300664663;
    msg.data_mode = 211U;
    IMC::Force tmp_msg_0;
    tmp_msg_0.value = 0.977209592961849;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("FRAQTHJVTOHMFNDCUXCAJMWSSLGWFOBTYYKWVFVZGEQKAIXDXBIPCJEYNFWTPPNTDCANGKVLAQAEBDRZLQKVTDUBYDRGAYSMCYTOKFPMOMBBNZJMNXTBLKRLALEGFDPZOLFQDVPQTKUKWVH");
    const signed char tmp_msg_1[] = {84, 80, -55, -117, 60, -88, 40, -40, -90, 92, 98, 57, -108, 111, -57, 75, 84, -56, 23, -55, -26, 57, 50, -73, -64, 93, 73, 52, 122, 52, -24, 111, 86, 126, -101, -119, 70, 104, -40, 7, 94, 13, -1, -27, 68, 4, -64, 70, 119, -72, 56, -99, -72, -52, 35, -123, 52, 47, -53, 52, 113, -1, -56, 45, -32, 56, -54, 4, -126, 109, 78, -10, -43, -22, -77, -57, -68, -47, 25, 36, -127, 113, -25, -38, -124, -83, 58, 84, 23, 76, -55, -5, 126, -8, 69, -16, 5, -40, -72, -119, 103, -125, 96, 123, 30, -113, -22, 43, -92, 54, -88, -57, -3, 96, -9, 52, -68, -77, 61, 25, -104, 29, 32, 12, 4, 68, -61, 107, -62, -14, 29, 86, -18, 27, 92, 94, 14, -50, 94, -105, 2, -41, -43, -44};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.8052003398542009);
    msg.setSource(61353U);
    msg.setSourceEntity(190U);
    msg.setDestination(37293U);
    msg.setDestinationEntity(61U);
    msg.req_id = 51304U;
    msg.comm_mean = 172U;
    msg.destination.assign("QMQSXAOOQWWBIIVGMYOKDHJPTKGVZTXRG");
    msg.deadline = 0.39178325035182937;
    msg.range = 0.3192804662391432;
    msg.data_mode = 48U;
    IMC::SaveEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("ZLJPCFKHTBRVXLKZLRZLXDEIKXUBANTWDJNVASWKJOYSPVJBXAPLJBUWDNGUZFYQDJRHDFPGAGXIHTEMTZHQNMYMKMRSFYPXNIDMYCTOOLFAGZAIZPRDGCWLAFOQBZIOJQOCEOASQSXSQXILXMFEUUIPRV");
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("VRPMEXQNZDVPBMVRUGLIFMJNWUHBHKPXKZQNFVJFCQWBTAGDQTIEVYOVBBZJLDJERDKRVIXUXBNAHBITETLKSNQISCYFSGKSJYWKQDIJMLSFXQWZUPAHEKAZOLOWHXCQPXMAWQMBAEHMSYGFPIZOPGNUASUUBOBSFGJNTGCTTEOZWSJXYCMZUMHDXACHERLTACPC");
    const signed char tmp_msg_1[] = {18, 90, -114, -19, -38, 6, -33, -32, 123, -36, -72, -70, 68, 125, 51, 0, -69, -21, -16, 99, -81, 119, 92, -87, -68, -53, -56, 77, -114, 121, 116, -64, -47, 39, -30, -9, -48, -110, 100, -105, 84, -42, -112, -78};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.9342957959743358);
    msg.setSource(9535U);
    msg.setSourceEntity(176U);
    msg.setDestination(4348U);
    msg.setDestinationEntity(13U);
    msg.req_id = 12563U;
    msg.status = 152U;
    msg.range = 0.02462023369757449;
    msg.info.assign("KGNMPIMICMTXXNOBPLOVBLMSOXPPVQDHDRBGMRYTRVQEEUCOYPMGJXATYNJQQEXOKDWWPVZNQTSUVAOFZFJUTDMHECFMNFVIKE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.6747270305084181);
    msg.setSource(3388U);
    msg.setSourceEntity(90U);
    msg.setDestination(50662U);
    msg.setDestinationEntity(158U);
    msg.req_id = 10720U;
    msg.status = 65U;
    msg.range = 0.8812618683994157;
    msg.info.assign("URAAKWMUYTSZIQPPKFNTQEGAXQFPTLTOXMXPFGMLIMFSRLUYVFYIPQNIZANBJCLVPCROIUCSHRGADZJWWDJTEKRQPGJIASQUWADYHLZJILSCHDSTKHPHMKENWDLWXFRXLXSUSBEIKCMFERXYHEGBNNDGBTIZQLVLNOWZJTEAEFWXOQSTHXXKFJOPJMGOYDGQYHHBRBWDIUVYBOZJNCFZGDYVRKMZV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.647876840184681);
    msg.setSource(54216U);
    msg.setSourceEntity(240U);
    msg.setDestination(51649U);
    msg.setDestinationEntity(221U);
    msg.req_id = 47827U;
    msg.status = 169U;
    msg.range = 0.29140525887045965;
    msg.info.assign("OZRATYDCCZJMXFLKPOTMZBBOEMOFGUNPTIQJZLVIWZRUPIHRDEHYAXBKJCF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.4409188030066291);
    msg.setSource(44705U);
    msg.setSourceEntity(15U);
    msg.setDestination(63697U);
    msg.setDestinationEntity(187U);
    msg.req_id = 38222U;
    msg.destination.assign("REXSSIXDDPYCCOWTOVHVIKYUQBLFPLHDWEBGWSXOEIPAMXOFNRIZFTPBTLINLYJMUHBVCSSFWAJNNRECSWGBQQUMVDFZRRHEGPDRWFIQKTPLNAZTA");
    msg.timeout = 0.42399097531241414;
    msg.sms_text.assign("VFYRDZEDPSUKJVPOBDORLVHXIDFZKXOGMSAYKLGASJSQUVYURRNJCQHLDKPSXTGMDBYUDEYJJNXNWJARCZVONKKAVWLBWDAGXPGTQWLYRLNMNIWKPUZCLJNFEQTVITHVZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.3331073569072208);
    msg.setSource(49529U);
    msg.setSourceEntity(192U);
    msg.setDestination(44681U);
    msg.setDestinationEntity(57U);
    msg.req_id = 21046U;
    msg.destination.assign("QZHICZKCPWVLFCDNMGRPRHQWSKIWOFUPVMXGVVEOFPODLXQUOGPHMHTSCSUERVVNVMRJQADWIGAYFISXIUSNTLODLNUVCMYAKJPKPYGOFALSTBZHLETTISTWUNHLUMXXCWMZYDUJPYZTHGJCDCYZJZBBONCBUZRMEKNXMFKG");
    msg.timeout = 0.4274272710879782;
    msg.sms_text.assign("RWANSBPLQJWCBVMPJCPFLNIPMLYVQCIYECKXUPCBFZJQETCECAZGLYTMLASMBUGBMLBF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.8510501029979944);
    msg.setSource(56942U);
    msg.setSourceEntity(147U);
    msg.setDestination(9180U);
    msg.setDestinationEntity(215U);
    msg.req_id = 26941U;
    msg.destination.assign("AKBVAPUKNKXWWQJKCLVRNFWDCOAKIERATWATPDWRYXCJQTISVOHLIQNEXMMNDGAPTJXXYZJQTCMFQXEPAILQOFFIGYHJQUBGRCWHEJRWOREFYWZLNYQ");
    msg.timeout = 0.8188179014568625;
    msg.sms_text.assign("TBZFOIXCCMKAILLJCIUKPXKTEOWGYGDEWSMFMVULUBTTYUPRWNWYFCHXEOWD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.2539358384585424);
    msg.setSource(63852U);
    msg.setSourceEntity(120U);
    msg.setDestination(32214U);
    msg.setDestinationEntity(10U);
    msg.req_id = 6678U;
    msg.status = 164U;
    msg.info.assign("FTMASOUJRXFKHLEBXUYMFUEJMOCBGYCQRELZLRXIIKMMDBQBGPYGTXZVKCWIKQDSJONMSKRDHUFNGAPIUWHEBZSTVVCYVNQLCBYMZUBJEKSWELHHNAMSLZKPNXDNPPRVKLIODTWFPAJANFYYZFAKLGYITFUQZXZHVMGYCWJYCRWDLRLBHDTOMXSIGERCGSRETHQVJU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.6551931091990819);
    msg.setSource(52776U);
    msg.setSourceEntity(152U);
    msg.setDestination(55936U);
    msg.setDestinationEntity(66U);
    msg.req_id = 60700U;
    msg.status = 118U;
    msg.info.assign("INCMNHYXTACEDVAXWZWSLHVJIXSPSZQXBQOWKUULANRULTJANVHJCGOGVAWDAQAS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.9898693964338757);
    msg.setSource(17919U);
    msg.setSourceEntity(90U);
    msg.setDestination(54724U);
    msg.setDestinationEntity(131U);
    msg.req_id = 16022U;
    msg.status = 142U;
    msg.info.assign("LQKNZGYFKDABQUKSPVTDBDMQCHAASVFKYMRNEVNXPCZFIFNRBLLYKVVTRJWRZPWPDEOHVEEDGXUUBWOOS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.13172159131701078);
    msg.setSource(15894U);
    msg.setSourceEntity(170U);
    msg.setDestination(8309U);
    msg.setDestinationEntity(99U);
    msg.state = 90U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.9744781386335246);
    msg.setSource(6969U);
    msg.setSourceEntity(19U);
    msg.setDestination(20055U);
    msg.setDestinationEntity(173U);
    msg.state = 200U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.10557633100397001);
    msg.setSource(15480U);
    msg.setSourceEntity(8U);
    msg.setDestination(11358U);
    msg.setDestinationEntity(215U);
    msg.state = 30U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.27629309010152114);
    msg.setSource(19754U);
    msg.setSourceEntity(231U);
    msg.setDestination(64680U);
    msg.setDestinationEntity(231U);
    msg.state = 64U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.6844744418281736);
    msg.setSource(5094U);
    msg.setSourceEntity(24U);
    msg.setDestination(26618U);
    msg.setDestinationEntity(28U);
    msg.state = 239U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.475991673838029);
    msg.setSource(26442U);
    msg.setSourceEntity(85U);
    msg.setDestination(50231U);
    msg.setDestinationEntity(97U);
    msg.state = 174U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.6361535759955858);
    msg.setSource(62813U);
    msg.setSourceEntity(32U);
    msg.setDestination(2212U);
    msg.setDestinationEntity(131U);
    msg.req_id = 3410U;
    msg.destination.assign("IUELKLHDURIYOXBEZQGMRQSGHJSEQQLVLWCXFAQCKCJJMANZDYCZSWBMNLCJWIOLQZMVVGNFRATMPZMGTGPVUQZNHLKVJXFDQPVCHOLJINRBVHLFFKBOCUIJFYOXKEUPMLBVNDNNBGGCMSJRTAWUPIARWOIDIFAXAWZNCWATXMURZKTXFBBXDTIYSHHPGTJDBPOX");
    msg.timeout = 0.5637697565002222;
    IMC::Alignment tmp_msg_0;
    tmp_msg_0.timeout = 43376U;
    tmp_msg_0.lat = 0.9766227667438148;
    tmp_msg_0.lon = 0.8362754333146072;
    tmp_msg_0.speed = 0.4552079063713962;
    tmp_msg_0.speed_units = 232U;
    tmp_msg_0.custom.assign("MXBHPRUBGZQYXFHBUTIVSERDJKYCHOJFWUZAPNDQFHFXTLNWXINSLKORXFPJCWCCEHWFGILQGONYGEOEVKAJMZBAWPZTXHWKMMIDYOENLUVPNZOERXMFSYVKSDBSFSZGKNEQFPZNCIDUDIEETCILTYQJAQIMMTMSGJPANPOBRRBABEUQQXOYCLUGHLYAZ");
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.05917502890188675);
    msg.setSource(48727U);
    msg.setSourceEntity(73U);
    msg.setDestination(32835U);
    msg.setDestinationEntity(233U);
    msg.req_id = 2689U;
    msg.destination.assign("FTNZATJRNHWBDITVBGVYPUSLGXFNOQDZRERXGANWBMTGEWFEZMQWNPQULQRNWYEBSTIZKHATVTQCMEHHJRKXGJRDPOVLQWDZIEMHTCBSSCFDHXKYWKMPLUHBGWY");
    msg.timeout = 0.171510910691965;
    IMC::TeleoperationDone tmp_msg_0;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.8296447332781665);
    msg.setSource(17391U);
    msg.setSourceEntity(159U);
    msg.setDestination(63156U);
    msg.setDestinationEntity(38U);
    msg.req_id = 62468U;
    msg.destination.assign("KJIZRXECRFHEUWKFUTJIYUSBJNFXPPVRIKZOFHQZUQHZLOTMVHMVGPPKEXBDEZMYATNJTNPNIQSHLWGMZWOVKQOVGCA");
    msg.timeout = 0.9566359615131799;
    IMC::SmsTx tmp_msg_0;
    tmp_msg_0.seq = 613941227U;
    tmp_msg_0.destination.assign("HKVMSSKOSJNTLHYXZUFNOBPGJIDEXLYXIYBQDENBUIJTADEEABUZUBCCUOUIMHDKBMSOVIRJWRGJCFROCHMYGRPPAKBAYKOIXTFFPL");
    tmp_msg_0.timeout = 52943U;
    const signed char tmp_tmp_msg_0_0[] = {-109, 122, 102, -77, -56, -60, 30, 19, -53, 35, 125, 45, -34, -127, -59, -79, 69, -5, 123, 50, 20, 120, -8, 124, 93, -43, 59, 41, 30, 84, 33, 48, 111, 3, -98, -115, 54, -94, -39, 24, 37, 57, 42, 98, 102, -39, 44, -101, -59, 68, 13, 18, -121, -13, -24, 112, 22, -47, -13, -73, 91, 49, 46, -98, 43, 17, -104, 65, -42, -128, -66, -84, 110, -75, -101, 106, 88, 114, 60, -106, -82, -9, -21, 79, -22, 41, 0, -62, 117, -29, 108, 67, -30, 2, -80, 87, 80, 76, -69, 22, 49, -8, -13, 40, -20, -128};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.16201362431354493);
    msg.setSource(51431U);
    msg.setSourceEntity(200U);
    msg.setDestination(59466U);
    msg.setDestinationEntity(134U);
    msg.req_id = 26482U;
    msg.status = 230U;
    msg.info.assign("SNGLHNKUTFQJDMPALEZPYHBGDBCADVMJISV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.08201301933797467);
    msg.setSource(14943U);
    msg.setSourceEntity(184U);
    msg.setDestination(19588U);
    msg.setDestinationEntity(203U);
    msg.req_id = 8339U;
    msg.status = 217U;
    msg.info.assign("EGAOHKDSRLSJSATRBFDWNETUQDYDMPIMILCLIOOYEGHWSPVUCYFWHQBEXVYOOABJBVUQFFDZTSQVYGJKHMOPSBTGPZZOTWRLNGRNVDZMCJIBQYJZMHHYWBXKGBSXQLQOICVUXWNTKUXQVTGQME");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.5027497542652505);
    msg.setSource(18481U);
    msg.setSourceEntity(206U);
    msg.setDestination(6445U);
    msg.setDestinationEntity(131U);
    msg.req_id = 1758U;
    msg.status = 103U;
    msg.info.assign("NHQUAIEJPLBADLTWYFGYJXOSAJHTKBHOAXVTZJHXVMMKZIHXIMKNWTGVUVKQCXKCVYKSWCLFUMHYRPQZTMYVNFLMDWIFDIBSLZXQBIEMIYBDDQCNGZULAPMVLZGJBRHREWNZKSFPUZBSGDMWUCPSRXRPFBATTHJJJJAGUNORHOBSVMURQNYIFFTOEUGAPQNQFQRVGVTXOCXGQHDXWEPYISEYYJLEPCDTUKLERNZEPCZDKANOCSWBGKCSAO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.906546555716918);
    msg.setSource(46161U);
    msg.setSourceEntity(148U);
    msg.setDestination(3370U);
    msg.setDestinationEntity(85U);
    msg.name.assign("TQZSZYTNINURWEWGDEFNKEMWUAZNTPCIDLWOQXFNNHEXFUYYSTOTGIBWKDBTRIAKGXCGLJZPCJXBSPOAUFRKCEBVPHCMWYQYDKPZIDCSRZVKVANXKYFSQSVDKQMVVZEFWLNAXPXIVFLEDJMBOGWYIQC");
    msg.report_time = 0.9787624783011377;
    msg.medium = 96U;
    msg.lat = 0.41002375553418213;
    msg.lon = 0.6167531686733302;
    msg.depth = 0.6238129934524959;
    msg.alt = 0.7778812993716849;
    msg.sog = 0.31618750944219187;
    msg.cog = 0.4210673608223935;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.10862393583059327);
    msg.setSource(51900U);
    msg.setSourceEntity(148U);
    msg.setDestination(33721U);
    msg.setDestinationEntity(216U);
    msg.name.assign("YUTTHDOVCZHSROZJLVKXQEEYDBZMNUIHQQFDZZKAZBARMEEYHAWELGCIGNOKPETDTVUUTCKZARNVISXFOKCKLKBYGWDCJRYWJQ");
    msg.report_time = 0.8841943455868869;
    msg.medium = 55U;
    msg.lat = 0.2893245034365035;
    msg.lon = 0.9228045862251967;
    msg.depth = 0.6446550689947749;
    msg.alt = 0.6665019197191718;
    msg.sog = 0.04323006876245139;
    msg.cog = 0.25938735869264684;
    IMC::StationKeepingExtended tmp_msg_0;
    tmp_msg_0.lat = 0.04667300029484245;
    tmp_msg_0.lon = 0.3345791366735803;
    tmp_msg_0.z = 0.45842155581281674;
    tmp_msg_0.z_units = 10U;
    tmp_msg_0.radius = 0.6923306540303558;
    tmp_msg_0.duration = 20512U;
    tmp_msg_0.speed = 0.2220460770775854;
    tmp_msg_0.speed_units = 237U;
    tmp_msg_0.popup_period = 17640U;
    tmp_msg_0.popup_duration = 18061U;
    tmp_msg_0.flags = 67U;
    tmp_msg_0.custom.assign("ZNJGPLHZOCJOETPHUDMEJUKPRQTECHBMXSJXLQAOKCFVAE");
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.09506886392253788);
    msg.setSource(45128U);
    msg.setSourceEntity(191U);
    msg.setDestination(44949U);
    msg.setDestinationEntity(163U);
    msg.name.assign("EAUNYANGBACPXTHTTKYBDOMZRMAFYCQNDIWGXCQFIDMZCFDRCWVMTQASYQXQKXVEENSVJKBILAPATRKJFIYNLMORJEHEEFOBZZBARUMCFGPLADOTGKUCIPSOMWDLGGXWJKYFMEHLYSBVPDO");
    msg.report_time = 0.26872761757231034;
    msg.medium = 152U;
    msg.lat = 0.6807985249285571;
    msg.lon = 0.4378523299258713;
    msg.depth = 0.3794660579863064;
    msg.alt = 0.7631219770612326;
    msg.sog = 0.42533637985036565;
    msg.cog = 0.6005256942715655;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.9617523234998058);
    msg.setSource(20064U);
    msg.setSourceEntity(103U);
    msg.setDestination(19199U);
    msg.setDestinationEntity(77U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.5610956256725054);
    msg.setSource(45591U);
    msg.setSourceEntity(2U);
    msg.setDestination(55268U);
    msg.setDestinationEntity(113U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.9830795413586595);
    msg.setSource(56132U);
    msg.setSourceEntity(10U);
    msg.setDestination(43714U);
    msg.setDestinationEntity(9U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.6775204722321306);
    msg.setSource(62177U);
    msg.setSourceEntity(191U);
    msg.setDestination(38945U);
    msg.setDestinationEntity(245U);
    msg.plan_id.assign("ZAKCZZEDDDOQMGLQTVBULLPFEDWGWVGCDQMNJSIVDCUMWB");
    msg.description.assign("JSZWZNXHHAFZEDEFHJIWICCSLWJHBSPBSBWZMFYTHZOUVDQALLTFDCAMXNE");
    msg.vnamespace.assign("JMDXBRJYFHDECYLQYWYNZDBFEEPIRZMNWPMQCQZLYUXGKGWUTBISNNWJJMSSKHVDHRNFDUOOI");
    msg.start_man_id.assign("RJYKHPLEKLJGROWOQSGZWHBGXNZGKQHJKMDLTWJTDTAIPTPFNVMJOWFPREZVWTAKNOSOZBBIRKVSUQRKHOLMIFUCHYCLSDSUXQVAXHNINLUQUKHCFIBNEBDJMJYOKZUYFJCXOANDQTTNFTSPRCVZBGPAAPEXIEXZHGYBEXCPIUYCVYHYTDVPZSVJKEYWEDFNL");
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("NMVEEWGNALZFFHLRFQOMMYOOHFNHJFJDLDADHCWPZLXMUYQDICHBIUNQAHEWYBXTNPHZIQIPOZKVVCCRTBUUIVSAPELNJ");
    IMC::CoverArea tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.4239412422669705;
    tmp_tmp_msg_0_0.lon = 0.41353111773704143;
    tmp_tmp_msg_0_0.z = 0.6193052909151198;
    tmp_tmp_msg_0_0.z_units = 170U;
    tmp_tmp_msg_0_0.speed = 0.34663023143137595;
    tmp_tmp_msg_0_0.speed_units = 186U;
    IMC::PolygonVertex tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.lat = 0.8709366400898398;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.6565079645077082;
    tmp_tmp_msg_0_0.polygon.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.custom.assign("QMHTIEIEANDGVLZHBTJQCIZVAYXSNSTWAHFPSKYASZKMHPECGJXUMJEPEZVPWTBMNBMSZONHLKVUDCCKGXRHEBFQRLUFLXKDHNGYOLHRUQCYQHLUIOVDJIHKPLTVZADYPOGXKMBCRDFJGKWTFGMFB");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    msg.maneuvers.push_back(tmp_msg_0);
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("DVYSZYHOJOXIXUYIYDCGUNRTTSBHUMWGTTWECQCRWAITIEBNDQIGZWEWKADQEIQRCXSEDFRWNXMWGCQKPOOMDZUMQFJGLXRBXALKSMCKJULSMBDJLLRNPMGLEVFJJPRIELRMFNNFKZVOOHOWVVPVLSUKOKTGPUNKRAHJFCEINNEYZKHHGAAZJXSQUCQADFRGVYSPXMEHSZTTZPYDNCXWKOLWFXBBZJOGAYCB");
    tmp_msg_1.dest_man.assign("JJGLBRPBPNOTTUWCBEMBFZGUAXLXHKEMYTGYKQJIQVQSNOIODXDSBZYCSEFTUNMKEVJUXCIVVHEJWXJKLSMZLIMPIKLKEGWLBDACTDGJSWES");
    tmp_msg_1.conditions.assign("ACXEEHSOTVTJHNTMXUDGRLVJPLOQXUCIPQZPXKWMOGSIZTRKFDYGCYTNOKQAIQYAWFLUWSMRTJDBICVRKILZEIFMGJFMJVCYJEREEYREGRPGNIMPUNOVKPAIAHBGXYWDNRGDDEKKS");
    IMC::Tachograph tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.timestamp_last_service = 0.13891452043568375;
    tmp_tmp_msg_1_0.time_next_service = 0.12585903478649607;
    tmp_tmp_msg_1_0.time_motor_next_service = 0.6327351333464849;
    tmp_tmp_msg_1_0.time_idle_ground = 0.7322922993181616;
    tmp_tmp_msg_1_0.time_idle_air = 0.0885223076268491;
    tmp_tmp_msg_1_0.time_idle_water = 0.3236130049923549;
    tmp_tmp_msg_1_0.time_idle_underwater = 0.04057637648759449;
    tmp_tmp_msg_1_0.time_idle_unknown = 0.15260234830972352;
    tmp_tmp_msg_1_0.time_motor_ground = 0.0667587652598669;
    tmp_tmp_msg_1_0.time_motor_air = 0.3341591873994918;
    tmp_tmp_msg_1_0.time_motor_water = 0.5785776960027095;
    tmp_tmp_msg_1_0.time_motor_underwater = 0.8161021091338471;
    tmp_tmp_msg_1_0.time_motor_unknown = 0.4202203020225519;
    tmp_tmp_msg_1_0.rpm_min = -14280;
    tmp_tmp_msg_1_0.rpm_max = -7444;
    tmp_tmp_msg_1_0.depth_max = 0.531869713906458;
    tmp_msg_1.actions.push_back(tmp_tmp_msg_1_0);
    msg.transitions.push_back(tmp_msg_1);
    IMC::DmsDetection tmp_msg_2;
    tmp_msg_2.ch01 = 0.16679358020275148;
    tmp_msg_2.ch02 = 0.9517655987111056;
    tmp_msg_2.ch03 = 0.6283206332665318;
    tmp_msg_2.ch04 = 0.013776643553704115;
    tmp_msg_2.ch05 = 0.7811650416127058;
    tmp_msg_2.ch06 = 0.5526257201543031;
    tmp_msg_2.ch07 = 0.9365231186640253;
    tmp_msg_2.ch08 = 0.25136430585800673;
    tmp_msg_2.ch09 = 0.3761477503984071;
    tmp_msg_2.ch10 = 0.14461291418536948;
    tmp_msg_2.ch11 = 0.13422809035604077;
    tmp_msg_2.ch12 = 0.695222117378451;
    tmp_msg_2.ch13 = 0.4010603070593636;
    tmp_msg_2.ch14 = 0.7799100803363905;
    tmp_msg_2.ch15 = 0.42607025915833063;
    tmp_msg_2.ch16 = 0.09133062869442077;
    msg.start_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.8631977002623522);
    msg.setSource(14749U);
    msg.setSourceEntity(178U);
    msg.setDestination(63745U);
    msg.setDestinationEntity(71U);
    msg.plan_id.assign("WXRCMWEKMZSEEPIOQJLYQIDRVEUQMBTULGWYTFYEJXLTAPABKNLCFMVDUFBZFYCERWFXHDUGOJIAVFKGBIPM");
    msg.description.assign("URVAGDVRKAXOSWEHKPDRZTMWNCYFOVSZJFNTWKQLIESHDG");
    msg.vnamespace.assign("AGCWQBNICSURZDIMKZXUWSIPDXZPNJIWYFKRYLOPBHATHXOIYSAKVWVBPYLDMRRJDNZXRUXDCMJILIVGVGESOUFSRYLGFHRGJCTKQETFVVPTYJKZOUYEQFAQDJJAQLATF");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("JWWMQCMGLOWAMJUNNWERLSOQHYFAGMKEFNCJBOXSE");
    tmp_msg_0.value.assign("DZTTEHWTZUNPNHJAPMYYIWDECDCBSZNLBGHXYOCHQTBVRXOCOEYGRPFRCUDAHBZPESXRWQFVBPRBROZQFGIMCQXIMOAOEIQDVXJSALUAMVOIUMGGFSZXXVRTDREIYCQUOYFLZM");
    tmp_msg_0.type = 219U;
    tmp_msg_0.access = 228U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("SNMFMEZBRCKZVXIMQVFRGUNNHGUBJAPBQGRATSFELGVDXDCSFKTYLO");
    IMC::PlanManeuver tmp_msg_1;
    tmp_msg_1.maneuver_id.assign("WYQMKUCNRQPJCEVNEHQDJHTOGRSTEYZVEHALQPQDWPTJGWJLIONFUDPIHXNOUAQGWVWALRHICFEDLXCGIQ");
    IMC::ImageTracking tmp_tmp_msg_1_0;
    tmp_msg_1.data.set(tmp_tmp_msg_1_0);
    msg.maneuvers.push_back(tmp_msg_1);
    IMC::PlanTransition tmp_msg_2;
    tmp_msg_2.source_man.assign("QVJXFLXEOGUSKVVDSXWNYVAHJAYIDSSOVTMCCARNXPCKBCXKNZNDTRWBKPGSAYDMJGENOGNPZEEWDJUEXIFJVUGJSBMHKQQVSRBXUOUZACIOZFDYYRLREWASYYGBRLIQSOPMKRPWLQNOB");
    tmp_msg_2.dest_man.assign("WYUUYJEJODNNBMMGGTTDHVWVCBDHWUTCGKZTFWFJQLHRBXNVXLFXZNYSCZIVUCYOEORVLTAMKHIGBWLIOKRRUQAVPPPFSGSDAKPMMGDSZZOFCHUAZZNQMMWXHKBREPFLSKPTEXDZGZOHFVYYWIBEXNILADXDNEUEERSGULFLONIRKDPDPJFCGZSJEIRVSNKNFQJUJYLGOTRXMQOSJWKIIWVYAHACQQAXCQTYLTVYIHBRSEBPUQAHMWBBQCO");
    tmp_msg_2.conditions.assign("DZGECMEOWZRSYHMGREOIMMBKUAAXJUBMFPI");
    msg.transitions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.7816361631674984);
    msg.setSource(2384U);
    msg.setSourceEntity(70U);
    msg.setDestination(34277U);
    msg.setDestinationEntity(85U);
    msg.plan_id.assign("VNIALWEOTGMMLZOVGURPXFURYMPIYQIJFHDFBBAXRPNVKBSDZDWZGKHBBFSGIRSTREQMYFQXNVSGXIRKKNXVLTZWGUUDDWIBGKQNLOAJXNBSMHZCTPLJHOTLDTYZMKYPTIOYWEUGJJBZNCMIVPGDFRAOTYJWHZXL");
    msg.description.assign("RVTIJIRYKRPXYYARTODGDGNXSYHLUHSWLVGJBRDXQEHEZOGPCENQZWLVZQYPWUIJZNBXXREVSKZWMCNFHLWMLMSFXKDSZUFUOAZWPKUDH");
    msg.vnamespace.assign("ZCQFOQVGRFOIHYDHZSVGHJBUYDWEUISZSKVANRWZBFMOYJKAHRJBMOELTTFCYQVKUZMKPUQFXKCECLOZJRMWWWVPOGHLHPSTQCKUTEEGZGNBSBILHLNDEGDMUAMHPYKAXPAQIXMSOVECIGTNDYXHQXRNYRZTFFAZNQJJCBEKVFZWCJKGURLGUAVQMXDYWESPLDAJVRIJITFNW");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("JDPODBACQVITVFAHJESXFHTUDXAIWXYOVYLFUIOOCIZDRCBPKVLXZFKGZJSEZWEOJCWVSBHUSCUXFTLJKYTDDBXERIYYCFMBEOVPYXESNZZMSRLNQXEWVQLXGKQBXQLJJISNQNOPZBGGAGZPMQLNTIWMYHHITVYQWGVQLGWKHKUDRCHUHOFUCUOAWJGASBKQSKVAWCLTUPPFHATHTBNMMGNPNMMJZFJKTBMIOR");
    tmp_msg_0.value.assign("CFLPRSVMPKJJNHHUMTOUCTSYNDKVUWIXZMJKJEMLTHDEKUOJIZWLRNGFKDSUOBMBOSAJRLPDZTSXGCMNFWQHOVVYGTCBUTDJEXAENBEIYCIXRUT");
    tmp_msg_0.type = 251U;
    tmp_msg_0.access = 57U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("MJESDGGDQICPJRNJSPSTKYWBDQOLOVQDLUHRIXPFZDOWHXSPHAVECFWIKZLVNSBJUHZRLXDPSR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.17952788231692784);
    msg.setSource(33903U);
    msg.setSourceEntity(84U);
    msg.setDestination(4825U);
    msg.setDestinationEntity(253U);
    msg.maneuver_id.assign("MJLOZFEMMZQOPCULJYKOLCTWWCJYDXHFNJ");
    IMC::CustomManeuver tmp_msg_0;
    tmp_msg_0.timeout = 21760U;
    tmp_msg_0.name.assign("TOUSCOJKCBWDUQWAENAWOJJRSXXWFIBVYSIDQQNURIEHLKQOVGUYENTFGHQCWILZHQTPOLIPWWFPYHDXEZFXRUNVCWFMHCYPFTKWMOMLRPLAZAALYGZDEMOSRDBSLPMDREPAUECVKACZDZFNTHHXJGAXCEAXTUZ");
    tmp_msg_0.custom.assign("PALVLQVSVKVXRWUNBNIBCEOPNPDROXAPTFDHZAFTRZJGJDZSSGCQRIICUHQGXGPEPCJM");
    msg.data.set(tmp_msg_0);
    IMC::DataSanity tmp_msg_1;
    tmp_msg_1.sane = 220U;
    msg.end_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.20849678264589788);
    msg.setSource(1069U);
    msg.setSourceEntity(227U);
    msg.setDestination(3349U);
    msg.setDestinationEntity(157U);
    msg.maneuver_id.assign("MWGFGXZTIICQFEEZRSETDBRUDHCVKLESQKFNTFRRAGJCKSHKXUXSYQZFIAOVEUTALMJZPUXMMLJEPVXNIYETFNWFMHIPLVBTNTSQVUDEJURPJYOOOSQZWAAMWMCTGDABFOMOJZQVHIRSXNHGGCNAJLSLJEKYXPBKPYLOMISYNVKMCHIYADZQDHZPXCDVCPWZN");
    IMC::FollowPath tmp_msg_0;
    tmp_msg_0.timeout = 10286U;
    tmp_msg_0.lat = 0.830157844507744;
    tmp_msg_0.lon = 0.6309602301193026;
    tmp_msg_0.z = 0.8680581243971532;
    tmp_msg_0.z_units = 226U;
    tmp_msg_0.speed = 0.3570666839309623;
    tmp_msg_0.speed_units = 55U;
    IMC::PathPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.x = 0.9068246843674239;
    tmp_tmp_msg_0_0.y = 0.34995482609764594;
    tmp_tmp_msg_0_0.z = 0.4956954355664903;
    tmp_msg_0.points.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.custom.assign("YTEMMHTEQNEARFAHFWBDJRUBIHTJOZHPCNSEPWWRSLNCRTJMXKXSNOSYGOZCFHWWOUJEXNXVKARKYHROIICXZWREPVYXGQVEKFJZDFJWGRGWZISLNLKCITUMMGCUAZOSABDCQFSVQRTVBNTOQOFFYPUBUMICKTVTIDDXIWPUSPQGLIUVFBJXZUADANCTGHPMZBKVEAORHPQEAKMZ");
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.6174479757258201);
    msg.setSource(36491U);
    msg.setSourceEntity(75U);
    msg.setDestination(61373U);
    msg.setDestinationEntity(92U);
    msg.maneuver_id.assign("XWHAIVVCIDPKIPSJLSWCIDYKWIFYGJPSUJNUULMRUBKTBOJPZOJDZALQFNTSKZMSRJTJGRXMZXTHBBAFPJUDMIMAAQRACIBFLFVSDNEKWGONBOYHGMPTRKUVDLVCVQHUQUWXSSQWWEPKZSXLRBGHOSJHNQXTMHZHKVGRLBBQHYHXE");
    IMC::Dislodge tmp_msg_0;
    tmp_msg_0.timeout = 41130U;
    tmp_msg_0.rpm = 0.7148147468035501;
    tmp_msg_0.direction = 54U;
    tmp_msg_0.custom.assign("CPDCCVOHTXRTLBECDPFEMIDCRGIVUDM");
    msg.data.set(tmp_msg_0);
    IMC::LblConfig tmp_msg_1;
    tmp_msg_1.op = 146U;
    msg.start_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.5933383662496947);
    msg.setSource(59946U);
    msg.setSourceEntity(231U);
    msg.setDestination(45246U);
    msg.setDestinationEntity(209U);
    msg.source_man.assign("NVJZYPOPPYCVXJEXQRJPZRCYUVBKRJZGYSBSAVEIEFJLPUWUHVZRXYVHKOWKSO");
    msg.dest_man.assign("ECRDZJNFFSHPRNUWOSXXYOZCATPJKMSL");
    msg.conditions.assign("ASEDVFVNTFKUOVIAKOQBTMPWDQFMXAMLE");
    IMC::PopUp tmp_msg_0;
    tmp_msg_0.timeout = 31064U;
    tmp_msg_0.lat = 0.8391379892679728;
    tmp_msg_0.lon = 0.6093841658058903;
    tmp_msg_0.z = 0.2882629258588606;
    tmp_msg_0.z_units = 96U;
    tmp_msg_0.speed = 0.39447109337533226;
    tmp_msg_0.speed_units = 114U;
    tmp_msg_0.duration = 38229U;
    tmp_msg_0.radius = 0.9903854672375197;
    tmp_msg_0.flags = 26U;
    tmp_msg_0.custom.assign("GIBXHQRBTVLIJKTFKPSMJOCADMICNSBUQUSNTNHMKXSOZBCETPFNSWVBGZIXZHHAEIWMVKGUDND");
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.872281412375063);
    msg.setSource(28227U);
    msg.setSourceEntity(29U);
    msg.setDestination(6775U);
    msg.setDestinationEntity(48U);
    msg.source_man.assign("BDHZSRKGASGYJSKRFIZSEDYZAJOYJILXFXMHKQZCUPGOUTOIBVTEBEFHVRRPCULTLACQSEQEGHHMULTPZNJFQSM");
    msg.dest_man.assign("NQDGQDQJHAHJAFQKLFPKYGIYTWBGFAOKHUWSMMOTFMIWXUNOFAILCLXQRENZPFSVHJL");
    msg.conditions.assign("IADTWSZRNEJUOTIBMIEPSUHQAHMHCKEUONXKMKXNCDIZMINPDXLSDAYWXFOOQVTKVOVBHCWROHXFZRRXNAEYLASJFTZOLDUQGZCNYFSVWAUFAEIQTMJHIJMKNDXLYNXMWRFGF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.7697650603286038);
    msg.setSource(13031U);
    msg.setSourceEntity(31U);
    msg.setDestination(15296U);
    msg.setDestinationEntity(143U);
    msg.source_man.assign("VOMRWFZDKZEVIBCJQTVWCPRRWJBYZTAUMPFIMQUQODHQJW");
    msg.dest_man.assign("SNVEASKEJYUXJTXMPVXHJKMFAXBMYTMYVQAAIFDPBCHZNTWOMCUIGJPPDSQQZOIKDFOPSLMFAJGPSGURCBOMWHZKWSBEWLRHGUZFFARSPIVOEABNHPGDRBXWWZWETBJKZLAHRTUNAHKVVDNUZQPJCCDUGKIYKIZQNOCLEFTDEBHC");
    msg.conditions.assign("DFYZQBUMIHQXIKCQCYEBVTFRPXOTUZZHLTYGKFAXEWCKYGUZFYMWKIDNIFVXDGXZNNTTWLEANWUDJFRKDCDJXVOBMKW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.2537984210628248);
    msg.setSource(57145U);
    msg.setSourceEntity(77U);
    msg.setDestination(51948U);
    msg.setDestinationEntity(99U);
    msg.command = 98U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("DLUOSMCNCJVUOFRZISTJMWRCBFJFGYQ");
    tmp_msg_0.description.assign("FGXCCUGFZQ");
    tmp_msg_0.vnamespace.assign("MGMZFDJIYUILITYENQUGDJCUNSQXPMQD");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("GDSGIOLFKBUYQNHRZXIAIFHNUROPKGKRMS");
    tmp_tmp_msg_0_0.value.assign("FVTLJNBNPKEORALVIMWPLA");
    tmp_tmp_msg_0_0.type = 66U;
    tmp_tmp_msg_0_0.access = 45U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("PSIRWYUIQEXMRWLVDAYAVCYYJNXBMQSPSFNLGWSPDTKGDEPETTQPZEHJSJKQJPQOHTBXQJEPPQBTOLUDHMAVISMIYHLNFZAKFCXKZGGJLKJFDTGEGNQBDRQFJHCROFEOSGKDIWAUVQIOMPMTYFGIZNAXIMLSCWOFZUYCEBEWZCOHJDAEIBZDNPM");
    IMC::RemoteActions tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.actions.assign("SCVDAABNFYDREUKXHRWKRDSXMOVCOZSTQJZVBJYMGHKFITGLULBFHGVDZXSRIYTVQQMWYCFWIKVISDEDFKAEZKXQVMHIXEAPZYNLEPVRMCJX");
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    IMC::GpioStateGet tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.name.assign("DZMTVNJKGPCDJSIDCOESABVKPEBCDZWFUZPYZDUGBJBJXZYEEXKXVZFJUVXTNGBFRGAVCAOMKSAAQSLABVLHOLXUMHZJRRXLSEGYRWNGIWQLBANVISFTBTYOQSHAORQSVMMTDHZUXQFHUSIYBFHWHHNXBEI");
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.9258605361313733);
    msg.setSource(23723U);
    msg.setSourceEntity(227U);
    msg.setDestination(17388U);
    msg.setDestinationEntity(216U);
    msg.command = 102U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("NIFNTCUYASJSJYNAKRKVXKNABPZTAPPXHZQEPWUUQDSCVNSKPBAZQCCAFRZCPISHFOAGYMUWLLZDIWBMBDLKCVEJMRQLEKGYFYXUGFRGBLTOJPEYNDURJYBWNVVVSWZOXHMXHANXRWQBHLOFILTSOOMEYQEORMJNRDCIGUBOTJQYHMWIRLTWOLGIRVFWWDTEDSQX");
    tmp_msg_0.description.assign("NQZYQHDATHSFYIFHVBIRPOJQZYCDUQIKVVMZXNVNIBKAXJNZJIXHLNJHFESPEQPHGWSSYPFSNOIWWUBJHBRRFOOPMETKURKUQCBQJODGANCHZRRSQTJVVRDVLNXOKDFXFECUG");
    tmp_msg_0.vnamespace.assign("TORABIQQLXHTBFJLDJSZMFNVUUMEWNKVCLYLJDYBQUENOZPHNFIESNRYJWCZJVQTGABWBPYAOWIVKGLUUQZKAGRIPMALXATQRWHBQVDATEDXPYBYLZNPKHIWRVCOCDKZNJHGALCJELMUBMZWEVIBRPJCIIFAXMPSNTVIXFXMDDMFSUFYFSCEDZHFUUJYOPGSKKYGCYRVBDULOOGENQCSEH");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("QDPZDMXSFMEBLMSIHAZKJVPRCOBOVBHKDDRVUWTYCMULHPLQIBFEYJLKABPAFLCCDIEXNUEQEWQSOZIJDTHQTCWQCUQABEONNLWXXDVEJIGSIRGOTOXUJ");
    tmp_tmp_msg_0_0.value.assign("SFGXUISEWJDWGYJOTVKSCBEOKLDBRDJUVEMZFXKQIAOBEEHIPPJXSHFXKGALFTVVLZAMACQOCAIKWQBHKYNSQFSGGBBDZTDVEYLWMFKCENLNOUKGILRROWBXYPCUXRIMUMZVRMMAWUJDYLYSZNNEUCAHDJQVTOZAXLPLRQIVVKJIPACTHQRERMHJDGFTHP");
    tmp_tmp_msg_0_0.type = 194U;
    tmp_tmp_msg_0_0.access = 2U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("ZVKVLHTHEYQSRCYGOTETVYEESHIIMWCXUTIMHPMPFVOJJPUYIXRJFJFUPDNAZDPUFOXKBIEAQKLANXYDLOLMPJFEWJSDPHGCCWAQWXUAYXKGGNZJDIZLKJDBYIMMKNKJFNBCGDCPHZAVSRPZWFVUMSDDVGSXTTHWELAQMWONSYASQERAOGUJKZGZBBLKRNZPLUFBMURQBQQWOBHYXEOVEHSBHOCQAFBRWNXRWDIUXRLNSCTCIVGCKFLTQTY");
    IMC::PlanManeuver tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.maneuver_id.assign("JBEPPRQSYNKNWQEKWLNHSBNVAIEDFNLWJTCVXGNABSHDQTTOVVTDUZRUCICUJRVDSZLFPGBZVMFEUCTMJMLJMXYDYFPWPUZYBNGCXJJMUYEPGKZRUGHK");
    IMC::Alignment tmp_tmp_tmp_msg_0_1_0;
    tmp_tmp_tmp_msg_0_1_0.timeout = 1620U;
    tmp_tmp_tmp_msg_0_1_0.lat = 0.2851595167280937;
    tmp_tmp_tmp_msg_0_1_0.lon = 0.20023858145463758;
    tmp_tmp_tmp_msg_0_1_0.speed = 0.4956944320450237;
    tmp_tmp_tmp_msg_0_1_0.speed_units = 167U;
    tmp_tmp_tmp_msg_0_1_0.custom.assign("EXKXNLUTOCFKJJKOHMS");
    tmp_tmp_msg_0_1.data.set(tmp_tmp_tmp_msg_0_1_0);
    IMC::FollowReference tmp_tmp_tmp_msg_0_1_1;
    tmp_tmp_tmp_msg_0_1_1.control_src = 9984U;
    tmp_tmp_tmp_msg_0_1_1.control_ent = 12U;
    tmp_tmp_tmp_msg_0_1_1.timeout = 0.2809972426327726;
    tmp_tmp_tmp_msg_0_1_1.loiter_radius = 0.9306401978403779;
    tmp_tmp_tmp_msg_0_1_1.altitude_interval = 0.16634296922573877;
    tmp_tmp_msg_0_1.start_actions.push_back(tmp_tmp_tmp_msg_0_1_1);
    IMC::Magnetometer tmp_tmp_tmp_msg_0_1_2;
    tmp_tmp_tmp_msg_0_1_2.timeout = 14500U;
    tmp_tmp_tmp_msg_0_1_2.lat = 0.07703865818149014;
    tmp_tmp_tmp_msg_0_1_2.lon = 0.6555309615157701;
    tmp_tmp_tmp_msg_0_1_2.z = 0.15553028159279336;
    tmp_tmp_tmp_msg_0_1_2.z_units = 109U;
    tmp_tmp_tmp_msg_0_1_2.speed = 0.6398633380280966;
    tmp_tmp_tmp_msg_0_1_2.speed_units = 5U;
    tmp_tmp_tmp_msg_0_1_2.bearing = 0.9373986029864193;
    tmp_tmp_tmp_msg_0_1_2.width = 0.903753197094091;
    tmp_tmp_tmp_msg_0_1_2.direction = 253U;
    tmp_tmp_tmp_msg_0_1_2.custom.assign("QDIATBISQLWODLRHQFPCJNHKZZXWXVBHQMMEFLRLNKBEOBHHGWIBQWWMZZELXCWXSSDRUJJKBZGJTCTVDJYPTZDINMFPQIWVEAVVNNRYMCLXZMKVNPJABGNTESSOHAHXSYDGRJCJYOFLFSNOICSTMQAWVLKFOUUSCEBYPPUOKWXIXCOGBJYGDLJSPIWUULFENHTHODFYUUITPGTRGURPYZABNEYKVQMQKUHA");
    tmp_tmp_msg_0_1.end_actions.push_back(tmp_tmp_tmp_msg_0_1_2);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_1);
    IMC::SetControlSurfaceDeflection tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.id = 201U;
    tmp_tmp_msg_0_2.angle = 0.392045584690737;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_2);
    IMC::CrudeOil tmp_tmp_msg_0_3;
    tmp_tmp_msg_0_3.value = 0.7210876938424778;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_3);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.3657986370856968);
    msg.setSource(2004U);
    msg.setSourceEntity(39U);
    msg.setDestination(18822U);
    msg.setDestinationEntity(149U);
    msg.command = 199U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("LGFRRWOGVOXIOLSRPAKYSNEBEZQMCPGJIVRJHNXSHDOLEARHPUJLFZJLHSNMSJCWBEZOGVKYUKIBWIYHOTFAWVWMDOYUEVTXUCTQCPKBBKSWKNAJAXMUFFIRNZOIELYCZJQNYUPBVGFYPSAKPFTDNTAUPWGHJZWDDRTKILMZCBTQXXJIEAUUVJWXLFBSGGVCODEDQNRHQEIKMBAQNMSEZQNYXKBHPQXC");
    tmp_msg_0.description.assign("MCLMBEGWNGWAUBSBFTTDCMIKCDTEVKQSWSXVAPWHZUGRHDLWZPLHYZJPKDXMTKUNYJFYOKQBXPOPUKQLEGQHOKEFVRYZPCYBWJHHTCDAJXPLONJLENJBFGEIUHNGECRFTWEGOYBMNVDSQNGGAMKBZTWOQHDRWMIOKRNRQFAEYAWITSQXFYAPSVJLAVXDTIDCOULXXZXCYORJMSUBKXINHSOCUIDI");
    tmp_msg_0.vnamespace.assign("QFJWKGOFNJIEBUDBCHABRNLHLHPFRPTYISAHQAFBXYQKYCSMOUCPNIZREKGXQTFPOARNKSCIQUVMCLGXYVVSBEMEZUDYNTKUQRAWVHWKKOZZXQNBHWRHSJMLPDVYIZFETGDSGWWPICWDTEPUOTBOHFJWLYQKSWTXAUDVVNYQURZCNMFXBNALESDXHLXOBPMLMOJMIVIJCJCKZB");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("VGRZLUYMSDWTQOLEBQRZKEAHDYERGQATNHOAKZSEYVHBOKPAEOUXZGKCHSUYXCJELZGJLPNNVJFGCRADMQWPWMWRPEFCOKKGMJFYMSCTHOOTIQQAPFFIRXJPC");
    tmp_tmp_msg_0_0.value.assign("RDCBAIACZCLSGWIBHFAKZRVWWCHHGDYBDXBPRJTTNCJJLLCLPASQIHSRJVUFPKMQHZUEGZTYGTCPEWVOOXPUWUINSNCMEPPKZVDAKXMGXBQFXZNYDYTKMJRRLMBQKLPSQOSVHOJFGIWNWWBVAOEXFRIGKOMYMQNUHITPTUGAAZNMVSFYLYNHGWRENESVMPEUBZWLHQOSTAUJLANEICZEDO");
    tmp_tmp_msg_0_0.type = 234U;
    tmp_tmp_msg_0_0.access = 185U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("EJJRYWEFAZTVDVFYUPMUKCQMESROJDOYKGYSOWNQLHIYYSQZITSJHCITIANF");
    IMC::PlanManeuver tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.maneuver_id.assign("HWAXJFLYTOXSZFZBVKZMITHUSCQMVSAXXPXKHZYIKRMGFIEABUSBUKUKZGPSHYTIAJNMRZSWQBWZICRENLUOCDGVJTABPMBIQOYSECDSOGNLDDFEJPURCNDCBLIEWCOWKYIZKRWATWYOYVFHQSVFUEJRMDMRZCTZNFDVLDXLXNSCKOQFMBFDLNIPEJUOYWHEGTXVNLBJXBWTPQUGHX");
    IMC::ScheduledGoto tmp_tmp_tmp_msg_0_1_0;
    tmp_tmp_tmp_msg_0_1_0.arrival_time = 0.858874975307338;
    tmp_tmp_tmp_msg_0_1_0.lat = 0.05036873374826878;
    tmp_tmp_tmp_msg_0_1_0.lon = 0.5090178601159046;
    tmp_tmp_tmp_msg_0_1_0.z = 0.542630849942131;
    tmp_tmp_tmp_msg_0_1_0.z_units = 112U;
    tmp_tmp_tmp_msg_0_1_0.travel_z = 0.06775762057004153;
    tmp_tmp_tmp_msg_0_1_0.travel_z_units = 91U;
    tmp_tmp_tmp_msg_0_1_0.delayed = 220U;
    tmp_tmp_msg_0_1.data.set(tmp_tmp_tmp_msg_0_1_0);
    IMC::PathPoint tmp_tmp_tmp_msg_0_1_1;
    tmp_tmp_tmp_msg_0_1_1.x = 0.3813796453384465;
    tmp_tmp_tmp_msg_0_1_1.y = 0.7010090793489463;
    tmp_tmp_tmp_msg_0_1_1.z = 0.08191018553917606;
    tmp_tmp_msg_0_1.end_actions.push_back(tmp_tmp_tmp_msg_0_1_1);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_1);
    IMC::PlanTransition tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.source_man.assign("TTJUOVCYKHSUQUDZMYPECMXQMCMQONWCCYMVEPVNWFSJQZKXSWROEIIFAFXTTKAEIIXUXSGJQSMRRFGKDDDOHOQREAKFELTLNTIAVYTPFWZBSAARACJEXVLHFSOAYOUJBQRVBEOZLQTIKIYGGBCMRGKZJRBYEYXLUDMVSNH");
    tmp_tmp_msg_0_2.dest_man.assign("GKJYTUXBVBNVXBODKENSPMSQOVUPNRTGKAFFRDFLJWCPIZQZFNVUVPIWYLDKVCVJQABTNIXVBGNHDLUXCUMDWURLFEKTWHREQLYRJZFSANEPPLJKZTMAJGMOGKYXEOYWNDIZSJCQGTTMNSBGBNLAJHOFKPWKRVZCABMXUBLHLHHTZEQVSDZEIUCWIRGFYOWCEPIMDQXWZMOMYAPAFEARDPHYHJOXGCTHRYIJSLHFQOQGKEDXCRUUSQCA");
    tmp_tmp_msg_0_2.conditions.assign("AWWJNTHELEIXRCUKKGREAYFZAGLVQCZFPOOZBHMSOYKAQMCDXKYGBZBFECLLPBGEYLPIERKANLYRPTFRXQMSZFSTFWQEUDPGOCVSTVOMYOKHWJHQXKNJVNDBJSRSVGDEIZWXKJBZVILSXXVHMNWODCYLXYRAFULTAXTFTODCVWAROZMUPTRMGMQBADHIUIQUGCUXKUEDLQMVBIJKZHDWWA");
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_2);
    IMC::LblConfig tmp_tmp_msg_0_3;
    tmp_tmp_msg_0_3.op = 58U;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_3);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.54088393697694);
    msg.setSource(25016U);
    msg.setSourceEntity(238U);
    msg.setDestination(33426U);
    msg.setDestinationEntity(88U);
    msg.state = 188U;
    msg.plan_id.assign("OSEVCHHXMDRVJLPYUHDJQJQBIKVHSJSTRFQMOQWJKURPGZNPNUFNZNWISITAGCVJQARMOUZEOPQUXGEWAGYQBGLLHJHCIYXIMKBTWWJFRUAYVWYPSMZJXFTFZFKHUYLDMRFSZJGNFVQUDWXTPBZPCRGNUDXLOTKLBOCWEKLCTDTNDWAVKDVACNCENSYEUGYPIOXOCWQZSQAEKTVPCBDIFXPSABMHRXMBLKBZEERITSXMYIFLYIOE");
    msg.comm_level = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.6205859304580227);
    msg.setSource(13964U);
    msg.setSourceEntity(109U);
    msg.setDestination(38474U);
    msg.setDestinationEntity(105U);
    msg.state = 40U;
    msg.plan_id.assign("OEQGVBKJWMGQNVTQPPWMXTTMREULTHYEGOOINZCIQVIMBGIHZXQFFPCRPVDHJBAYEJBDCVKEVLCUWWLENAJGXFWCDMFQAFUKJJBGMPFSBVEUDBQK");
    msg.comm_level = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.869235589732559);
    msg.setSource(54640U);
    msg.setSourceEntity(161U);
    msg.setDestination(12954U);
    msg.setDestinationEntity(104U);
    msg.state = 199U;
    msg.plan_id.assign("UYQRVXEHWUFVKIYJILDBBSCXJPNUWAFUCTEDNKSTISGVKRJVTIDBQAFJJHSSEZVWRMAXLVVKAHKXLXTCVZHFOFEWMOROFIRBCZPRPQMHGEQQAJXBTSNPPYMDVCIMPUOGGLTGAQTPKWYNMBNELKMUAGDQEKFUDYROZXEHPDGWDVRCOSHYKXUCYFCPNGDM");
    msg.comm_level = 226U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.8335219057686284);
    msg.setSource(48020U);
    msg.setSourceEntity(192U);
    msg.setDestination(2312U);
    msg.setDestinationEntity(247U);
    msg.type = 171U;
    msg.op = 195U;
    msg.request_id = 25743U;
    msg.plan_id.assign("USONPOHTRCLHZIYHOTXXBOPWPJLARVTXYGFYJPLHEZSPZJKCKNJUISUAPEASVEVRAASSDJNUOITRFVV");
    IMC::Tachograph tmp_msg_0;
    tmp_msg_0.timestamp_last_service = 0.7898759133655004;
    tmp_msg_0.time_next_service = 0.11310551712344918;
    tmp_msg_0.time_motor_next_service = 0.2978654969077469;
    tmp_msg_0.time_idle_ground = 0.10448429918530378;
    tmp_msg_0.time_idle_air = 0.3950935378694542;
    tmp_msg_0.time_idle_water = 0.8533524963888042;
    tmp_msg_0.time_idle_underwater = 0.32451787497529294;
    tmp_msg_0.time_idle_unknown = 0.5928327379272476;
    tmp_msg_0.time_motor_ground = 0.04056173986795886;
    tmp_msg_0.time_motor_air = 0.7880763507073685;
    tmp_msg_0.time_motor_water = 0.28493400808931146;
    tmp_msg_0.time_motor_underwater = 0.30807274215614877;
    tmp_msg_0.time_motor_unknown = 0.6765977803658669;
    tmp_msg_0.rpm_min = 17008;
    tmp_msg_0.rpm_max = 14167;
    tmp_msg_0.depth_max = 0.9674967386369646;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("IRFRAJXVIDQVMRAEOSOOTFKMPIDOLILAGJMEMTWBGJNGWZTVZOYRLKZIFV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.7774322087296778);
    msg.setSource(24621U);
    msg.setSourceEntity(193U);
    msg.setDestination(29400U);
    msg.setDestinationEntity(138U);
    msg.type = 24U;
    msg.op = 181U;
    msg.request_id = 38969U;
    msg.plan_id.assign("LHVEIGWATTAGKDWPDEYNOOUQMKGBCUZAHQVSJZOFHTTSGXWQFCB");
    IMC::OpticalBackscatter tmp_msg_0;
    tmp_msg_0.value = 0.6119113186817614;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("MMUEGVMVDHJFWHUMWRBZBPMNBZJRNVZYHBVRKOKAYIORMATLWKXXIT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.17540240985585953);
    msg.setSource(21236U);
    msg.setSourceEntity(177U);
    msg.setDestination(11659U);
    msg.setDestinationEntity(220U);
    msg.type = 220U;
    msg.op = 238U;
    msg.request_id = 47188U;
    msg.plan_id.assign("IHKRTWALVZVERDRJCJSNSQKAXGTHSYWNWXCUQTGIYUKHOHFOBOENCTVZUQDCFQJYBPBLHCPLQVLBKEBKLZQSOJZELZQXXTYXDKODVBIOEFSLJKIVXQXIUTJPQAIUEUBADYNTILFRKULSMJPYUOVSTGCSLFDMWZHMDRFACNRNTXMAPGQGDBJVGMOGBNPNOYUREWWWMUCHBASARPPKXMXACERIHKGGIMJPIONZVPYDHRMJYFWCSAENFEZFTHZM");
    IMC::HistoricSonarData tmp_msg_0;
    tmp_msg_0.altitude = 0.8726899290104423;
    tmp_msg_0.width = 0.12608724927408232;
    tmp_msg_0.length = 0.41271274783459044;
    tmp_msg_0.bearing = 0.20930186257696815;
    tmp_msg_0.pxl = 27959;
    tmp_msg_0.encoding = 82U;
    const signed char tmp_tmp_msg_0_0[] = {-15, 86, -43, 46, 31, 27, -127, 74, -52, 35, 12, 110, -65, -119, -56, -45, -55, -70, -123, -12, 98, 88, -11, -100, 3, 7, 113, -116, 2, 109, 21, -18, -90, -39, -86, -42, 97, -2, -126, 88, 122, -66, -65, 117, 64, -10, -123, -29, -98, -69, 55, 118, 116, -60, -128, -116, 56, 82, 32, 55, -18, -118, -40, -97, -27, 86, 45, 92, 113, -13, 90, 7, 26, -2, -40, 117, 36, -101, 2, 104, 20, -46, -63, -15, 85, 100, 11, 62, 74, -81, 4, 98, 74, -9, 70, 32, -113, 71, -50, -32, 125, -11, 97, 7, -70, 9, 61, 66, 108, 105, -113, 124, -56, -85, 9, -38, -29, -47, 23, -9, -35, -99, -93, -72, -28, 87, -22, 37, -123, -102, -59, -80, 33, -103, -98, -85, -30, -31, -8, -23, 9, 101, -38, 113, 60, -36, 97, 116, -65, -101, 43, 100, -57, -111, 9, -28, -27, -101, -81, 5, -10, -112, -29, 48, -94, 37, -48, 56, 110, 45, -96, 72, -36, 60, -93, 72, 80, 77, 77, -18, 75, -19, -87, -73, 53, -126, -11, -74, -103, 46, -23, 68, -105, -86, -44, -62, -29, 58, -8, 38, 67, -49, -8, 70, 118, -2, -123, 42, 59, -96, 54, 34, 55, 114, 46, -67, 0, -60, 115, 114, -101, -48, -114, -68, 20, -100, 53, 118, 123, -84, 105, -42};
    tmp_msg_0.sonar_data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.arg.set(tmp_msg_0);
    msg.info.assign("YACAKOQDLLTIGOYZDLBYLAAKNMYPOHWFTTSSWJIAPKFCEAVLPNMBIKPGBBEWJYMZFNHTPCGZNEMPVNYREENSFTVNITVZSGSBRBOJXGHSZWVJMQUCAMWTBDANUOXRWOLBQDRMOHWOXRYSA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.30095340263330805);
    msg.setSource(2454U);
    msg.setSourceEntity(8U);
    msg.setDestination(15786U);
    msg.setDestinationEntity(39U);
    msg.plan_count = 32286U;
    msg.plan_size = 3647998160U;
    msg.change_time = 0.013862861766183787;
    msg.change_sid = 27529U;
    msg.change_sname.assign("QJTKJKWEYWHQTILNRDICQWSYANGFXYJVTYLDFAIVIGHZOLPVQSSVSFMAEYJNAOOBLBYPJUOHLJG");
    const signed char tmp_msg_0[] = {25, 105, 13, 96, -25, 21, -27, 81, 54, 0, -124, 33, -1, 18, -111, -72, 47, 72, 16, -37, -18, -111, 43, 74, -55, -19};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.11931795187963479);
    msg.setSource(27773U);
    msg.setSourceEntity(167U);
    msg.setDestination(19214U);
    msg.setDestinationEntity(54U);
    msg.plan_count = 33838U;
    msg.plan_size = 483524572U;
    msg.change_time = 0.851825655086154;
    msg.change_sid = 12443U;
    msg.change_sname.assign("AICTOFJVPOUGRWQXLLUMHSPOZRTXSIRSPBPAWLBRVKQCYYYHYINZOGLAEZBZFXDOICYRCJTAGFXDNOEELGJIYCEBHDDKSWKAUHTZKMVWUUGYDGVXZUIAQSFAXSGEQ");
    const signed char tmp_msg_0[] = {45, -109, -83, 31, -59, -89, -49, 22, -104, 82, 23, 22, 17, 37, 102, -40, 37, 70, 63, -3, 110, -86, 53, -84, 104, -62, 28, -91, -48, -100, 49, -116, -28, -49, 56, 116, 106, -75, 109, 105, 39, 104, 17, 85, -127, -71, 119, 120, -3, -10, -44, -37, 32, 76, 124, 59, -126, 84, -11, -36, 125, -62, 119, 122, 67, 7, 15, -24, -13, 21, -38, -64, -84, -109, 48, -115, -52, 84, -27, 125, 122, -72, -60, -75, -111, 110, -114, -35, -32, 83, 13, 85, -38, 44, 83, -110, -68, -7, 13, -4, -72, -83, -100, 92, -121, 36, -73, 5, -113, 105, -15, -121, 59, -67, -56, 0, -102, 78, 107, 15, -49, -38, -27, 91, -94, 20, 92, 113, 114, 39, 77, -41, -44, 16, 46, 90, -99, 62, 95, 94, -39, -77, 118, -47, -11, 110, 126, 59, 12, -44, 38, -114, -14, 32, -4, -90, 101, -21, -13, 39, -33, 18, 32, 2, -60, -24, 21, 6, 123, 79, -41, -118, -25, -89, -9, 6, -32, 35, -47, 108, 15, 75, -10, -45, -48, 119, 41, -93, 79, 44, -33, 105, 11, 58, -112, -120, -48, -123, -12, 33, -82, -3, 82, 37, -112, -26, 100, 19, -29, 58, -34, 91, 42, -43, -13, -11, -21, 0, 13, -119, -58, 64, -35, -37, -70, 3, -75, 5};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("ENORSPWKWNWWKCQNIPXVYPETMVAPUSWFFBAGJB");
    tmp_msg_1.plan_size = 38659U;
    tmp_msg_1.change_time = 0.19484458360031554;
    tmp_msg_1.change_sid = 16617U;
    tmp_msg_1.change_sname.assign("UGILYVGTXQLBOPYJMTYZINOJETGICWPKKUBVCTHEKKPADMJOUDMYPNBDRDLXOAUZLUCXHAYBRCJIUXGJSDEQRPMKIALMPJFLBNHBURPFZURBOHYNHSZGQBNWQVHXWCRWXZYVFCHJECRVEJWLTPRWSJNBFZZ");
    const signed char tmp_tmp_msg_1_0[] = {-112, -71, -61, 84, 54, -21, 92, -31, 59, 116, 100, 114, 92, -39, 29, -76, 22, -59, -19, 111, -35, 32, -9, 80};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.3678469045809213);
    msg.setSource(41829U);
    msg.setSourceEntity(227U);
    msg.setDestination(33025U);
    msg.setDestinationEntity(200U);
    msg.plan_count = 21814U;
    msg.plan_size = 2690582322U;
    msg.change_time = 0.6756269995638634;
    msg.change_sid = 5549U;
    msg.change_sname.assign("QIOJXJVKZRADWWDJRPX");
    const signed char tmp_msg_0[] = {-45, -51, 100, 83, 119, 112, -97, -15, 107, 43, 121, 64, 12, 9, 11, -104, 125, 25, -124, 60, -17, 112, 42, -104, 118, 77, -18, 100, 30, 85, 52, -78, -57, 122, -87, 116, -42, 16, -69, 124, -6, -10, -113, -127, -86, -70, -61, 41, 28, -66, 60, -19, 97, 106, -109, -26, -95, -107, 110, 91, 113, 53, -112, 90, -74, -88, 101, 80, 118, -88, 96, -1, -79, -8, 64, 53, 28, -36, -110, 13, -56, -127, -44, 54, 126, -22, 100, 43, -103, -103, 37, -2, 48, -2, 22, 68, -39, -62, -94, -13, 48, -76, -100, -42, 69, -113, 99, 15, -107, -54, 66, 61, -45, -123, -127, 114, -66, 75, 79, 87, -76, 35, -3, 1, 74, -23, -46, 5, -127, -49, 72, 58, 32, -18, 45, -122, -62, 97, -65, 125, 58, -50, -34, 125, 70, 23, 80, -19, -119, -3, -1, -13, 22, -101, -69, -69, 72, 15, -81, 13, 44, -3, -29, -67, -15, -14, 105, 97, -126, 123, -105, -12, -122, 16, -7, -121, -20, 81, -118, 81, -116, 7, 7, 15, 45, 99, 93, -10, -25, -62, -75, 78, 67, -41, 125, -81, -76, 18, -65, 118, 7, 93, -76, 10, 45, -60, -93, 15};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.7982564776732463);
    msg.setSource(11573U);
    msg.setSourceEntity(29U);
    msg.setDestination(59563U);
    msg.setDestinationEntity(82U);
    msg.plan_id.assign("POPFEHDFDDNGTNKGWCYFWQLYOWVT");
    msg.plan_size = 19098U;
    msg.change_time = 0.4612557155717846;
    msg.change_sid = 35469U;
    msg.change_sname.assign("YBYVPENBDKXUAFWGUCJJMCJVKNZHZZMYEDYKMHGUNNONQSAVSNLMGJFQSTLYDVQYZRTCUBXWAOLQRUWDHIPFHWIXJYPONODKTTRCLJIRFVCFDKGHGSSZEDFAMFOWWHHAIDVIWPCXJVCFTEKBQQ");
    const signed char tmp_msg_0[] = {55, -96, 17, 61, 79, 91, 4, -79, -19, 97, 70, 20, -96, -83, 96, -46, 26, 2, -93, 70, -7, 57, 42, 19, 28, -123, -66, -72, -39, -99, 88, -91, 120, 2, -19, -87, -24, 40, -119, -41, 111, 33, -43, 11, 99, -61, 83, 7, 64, -35, -6, 123, 55, -61, -67, -88, -111, -40, 47, -102, 95, 57, -47, -2, 45, 82, -11, 60, 103, -109, 49, 47, 67, 103, 25, 93, -113, -40, -52, 75, 116, -47, 114, -111, 58, -108, -22, -22, 89, 99, -58, 103, 59, -58, 41, -114, -95, 10, 43, -91, 104, -10, 82, -67, 76, -126, 71, 93, -112, 117, -113, 67, -6, 103, 29, 2, -113, 30, 121, 5, 117, -44, 71, -78, -114, 33, 115, -118, -54, -65, 34, -64, -125, 41, 121, -112, 122, -118, -40, 38, -127, 71, 123, 45, -6, -96, -62, -89, 110, -111, -120, 31};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.5510550516545091);
    msg.setSource(43952U);
    msg.setSourceEntity(160U);
    msg.setDestination(27328U);
    msg.setDestinationEntity(252U);
    msg.plan_id.assign("QWZTYMCGBRYZKDEBWBLLPYVXFOWDGMEVVSRSKVJSTWAUPVVZOOVZMAOBYKLIBSIDJLXUEUFKQXONGGXFUJOGB");
    msg.plan_size = 15291U;
    msg.change_time = 0.45427056306137903;
    msg.change_sid = 51518U;
    msg.change_sname.assign("TSLAYCDBFHNCFCYALHUXZTMRGOFKKKZCGBDRDOBQSTTFQXKSTEPQRUCQQNYXRRAINKHXUYOTIPFFJEIEJRWMZZLM");
    const signed char tmp_msg_0[] = {29, 41, -104, -29, 42, -50, -92, -109, -103, -12, 40, 6, 2, 62, -14, -2, -2, 4, 60, 87, -114, 6, -27, 18, 110, -21, -59, -122, -117, 20, -69, 104, -59, 125, 26, 125, 33, 79, 123, -22, 125, -89, 34, 103, 123, -128, 59, 76, 117, 54, -118, -81, 93, -92, -118, -28, 72, 4, 122, 102, -105, -73, 41, 54, -7, -19, -118, 119, 97, -124, 80, 96, 12, -107, 82, -51, -92, 15, 126, -74, -47, 3, -29, -93, 96, 5, 74, 27, -114, 125, 6, 116, -61, -19, 37, 120, 18, -82, 48, -38, 69, 83, -105, -95, -108, -30, 113, -62, -120, -42, -105, 19, -108, 36, -120, 126, -31, -124, -102, -43, -21, -48, 78, -122, 74, 21, 99, 12, -57, -15, -104, 125, 1, -12, 30, 80, -101, -84, 76, 29, 63, 57, 21, 88, -83, -122, -12, -56, -53, 28, 31, 39, 42, -48, -128, 34, -71, -80, 80, 72, 29, 10, 49, 35, -95, 66, 122, -110, 76, -104, -41, -9, -97, 10, 60, -83, 106, 78, -51, 31, -79, -34, -114, 70, 21, 54, 99, 17, 52, 63, 66, 110, -95, 93, -116, 37, 113, 32, 46, 114, 52, 39, -14, 73, 124, -32, -7, -102, 72, 89, -40, 86, 29, -103, -82, 101, 121, 66, 110, 44, 53, 36, 86, -102, 39, 65, 86, 20, -18, 54, 80, -16, -71, 79, -64, -3, 28, -57, 15, 14, 74, -46, -50, 108, -101, 0, -54};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.6832784483875837);
    msg.setSource(5536U);
    msg.setSourceEntity(199U);
    msg.setDestination(21099U);
    msg.setDestinationEntity(133U);
    msg.plan_id.assign("WAXXAKIMQTFMDCGCLJIYNGIGIBMNXVEYAERNWKAYSBBOOQOQLZYKIFCBFXHJFDTSESZLRVZYMJUVBFCOAMWDKYZQLOKNUHQXABPLDSUGPFJRPFSPEFMATQHZQPJHHKEQWNRUEPUIXGWJPZYOUZIWXAYGUTARHZXECFQGLXJNBRTCUVZAKDGOTGMNINMJGJSESTLLCJWLPDVUHBKDQRO");
    msg.plan_size = 60689U;
    msg.change_time = 0.7570180145593918;
    msg.change_sid = 50283U;
    msg.change_sname.assign("MNJPYNUMHDZSVUIGZBOQKNTRL");
    const signed char tmp_msg_0[] = {52, -100, 54, 73, -54, -94, -114, -68, -95, 10, -67, -82, -86, -118, -11, -26, -101, 118, 53, -2, 84, -115, 123, -31, 56, 75, 12, -121, -46, 34, -125, -124, -31, -30, -126, -14, -123, -34, -117, 26, -28, 46, -45, 32, 37, -14, 106, -61, 86, 123, -35, -15, 35, 40, 110, -92, 85, 61, 74, -38, -95, -21, -43, -65, -17, -52, 113, -63, -52, 106, 62, 49, -90, 39, 91, -110, 57, 71, 119, 9, 32, 91, 23, -46};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.25733261670966756);
    msg.setSource(2874U);
    msg.setSourceEntity(109U);
    msg.setDestination(45844U);
    msg.setDestinationEntity(165U);
    msg.type = 176U;
    msg.op = 60U;
    msg.request_id = 31686U;
    msg.plan_id.assign("YPVWANYKTGZEXJRKVJLARAMVXHCNCEZHBRTAXIMURUQUWZWUSROTTJ");
    msg.flags = 15814U;
    IMC::NegotiationData tmp_msg_0;
    tmp_msg_0.mmsi.assign("IOZMBZSIFCZEEGVLKPSWWGXWSYW");
    tmp_msg_0.cog_int = 0.794691889623166;
    tmp_msg_0.sog_int = 0.12360530640359435;
    tmp_msg_0.state.assign("QESPXOXYMLQUUBMVRRKYNTPDWIIMEWBNATKJMZTCFJESSBH");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("DXTJHYXOTKILIFCCIG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.9224827748902299);
    msg.setSource(18830U);
    msg.setSourceEntity(182U);
    msg.setDestination(40360U);
    msg.setDestinationEntity(64U);
    msg.type = 208U;
    msg.op = 125U;
    msg.request_id = 1851U;
    msg.plan_id.assign("MWQXNXYYOHHRXEBFTDWOQKDVAVYKMLAULGDGGFPMNJIDLHWOKTYKZHEAZWVPNCTRXJFGPRQXOTIILJEILCRIFRJOLPOVRIXZAXDKYXEQMTURHNRGMNFNJBZDWCBYASPUWHHSVZEQSVPZZBCUKTSYBKUGKQTB");
    msg.flags = 55869U;
    IMC::AcousticRelease tmp_msg_0;
    tmp_msg_0.system.assign("XWTDYGGZDKBOCLWCLSYULIJEVPBIDECUARSJSTIFBPNYPAOJWEVLHOXUQUPLBBTPHZDNO");
    tmp_msg_0.op = 185U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("WGCFUWSXNHHDRADPARLHLYOPJBJEYCOMISPIINBIXTDMDARZFQRNHDMYXSZVHSTYWOQPCPFEYWSGOXYKRIWWZMGAIABLNBDCZRFBOCAFEFVKRNJLMGW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.15152782797261866);
    msg.setSource(32892U);
    msg.setSourceEntity(104U);
    msg.setDestination(3552U);
    msg.setDestinationEntity(65U);
    msg.type = 115U;
    msg.op = 28U;
    msg.request_id = 51960U;
    msg.plan_id.assign("IYGGFOZAGONGTFYLXQLKJWXNQACIXEOBVQLJYHFMSLIZUTKKXKLFYAZVATCHCICWUJOGAYQZEJCBWOWBMLBXPOVZNTHSJVQRRRMUXKMEHIVCRSUENDLCVIBPMPDFEVJRSVBHINYZJCTGQOHDZHPTUIPMQWYVXNZELCUQGLADKPBIARGEQNWGRSTKFSPAPZDMKFEIY");
    msg.flags = 29755U;
    IMC::Redox tmp_msg_0;
    tmp_msg_0.value = 0.3205932622067823;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("XRSEEZPPZKIMZFJNICDTAEBAZKLOVMRTELZQOVHBHHXOOKPHRMIIQMGNYQNLSVTPUZXTRBJWBNCYWMGQEOYMOJSOTZSXAXLDFPFCMTNUTLHCKLYKPFJIJASU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.6392407835980994);
    msg.setSource(53871U);
    msg.setSourceEntity(246U);
    msg.setDestination(38321U);
    msg.setDestinationEntity(243U);
    msg.state = 168U;
    msg.plan_id.assign("QXERXMGZLNBAAQUUGGAWVSNZHUMXKKYYAFCWOISFBVUXJZXRYQXCZDDCSSTBPUAQCDLGABE");
    msg.plan_eta = 2118472012;
    msg.plan_progress = 0.8228492276407191;
    msg.man_id.assign("JXYYMKLZHUIJTUVGYQQUIEDBDMZKUFFJETSYZAZAQNOOVDTNNVOVXNGJWWRGPCFHHKPGTLBSPJOANJIWAEYBAWRCMQGFVFAGFHNOLNOSGBCOKZSUGTDPDKCAXDYJXQCEMVWLHRPCPSRMIZERBIXHYXOFFXDKMAOSNHWHDOBAJCEFGYLTEDXPETVSCMFBBIIUKIGMVSJMWCZJNRYIXERDWKSXARLTYKBQUCVRWWQVZTU");
    msg.man_type = 7304U;
    msg.man_eta = -782367913;
    msg.last_outcome = 173U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.579295125066894);
    msg.setSource(847U);
    msg.setSourceEntity(4U);
    msg.setDestination(23853U);
    msg.setDestinationEntity(22U);
    msg.state = 226U;
    msg.plan_id.assign("QFICRQSJBFNVKJJANOAOBDRCQWYNXBBPMZHGMEUYOMBVBLRYGFKVLTOZBEOUXICGZUDXVNVMTWSDTCWNZOIKXPFNWGSIEIGBXJZPUDFTPFIZPBYLHEMDCRTQMLLRTMSLHLJFQAYMSKFEOWIBQNAROVRVJUZQCSOEHRKUXHWXALJAVGGEDYMAANCSELSKCFEJVZSXFGUTHWIQYKHWVLDNTYXKH");
    msg.plan_eta = 1627749270;
    msg.plan_progress = 0.8587795062780164;
    msg.man_id.assign("LUTGEPOJLVGTOMIQPNOERXTUEYYBWIWOUUWBMXVGALHLVHEQYXTCCPGDMAZXQYNYIUWXALHLWIZMSBGPAZNQSSEGTKVJEWLFSZEBFAQTVPSEJHBMNAFZCVVTPGPKRSJZGCXQMZVTOUDKBZKOKKIDNTHHRRGSUNBSCNRDLPMBLYQJDQAWJYDAJ");
    msg.man_type = 51282U;
    msg.man_eta = -1351611156;
    msg.last_outcome = 189U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.0930197790395334);
    msg.setSource(46378U);
    msg.setSourceEntity(235U);
    msg.setDestination(4002U);
    msg.setDestinationEntity(18U);
    msg.state = 39U;
    msg.plan_id.assign("SZHDWMZKJKCNKGNOIUEHGGUVRQCEMQWXEZIOYTPJAZUAEQKJVSKEXKDZYZORVIWEOITEDJRPIOSBWVDV");
    msg.plan_eta = -536677948;
    msg.plan_progress = 0.31219888014484476;
    msg.man_id.assign("ZTSQTJREYUDVHOGBXHYCKOCWPKIWADPVLPAFZUSTZNALETRAVTVDPBNH");
    msg.man_type = 47475U;
    msg.man_eta = 1701984109;
    msg.last_outcome = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.45653710098464584);
    msg.setSource(27660U);
    msg.setSourceEntity(211U);
    msg.setDestination(62916U);
    msg.setDestinationEntity(144U);
    msg.name.assign("HSZPYCYFVQZUMCZBJDRAMFQEMUFMPGWDKOPEJJXDVQNIOYEQKJXLUL");
    msg.value.assign("AQKYPHGMVMRELCYQIZYTQNRFZMFJGYDEDATJPPEMMWRSVULFIGLLOVRQLQKQWOAAVXJCVGXMHDOACLFKLZWSFSITOMTMYKUOEKKGHUICDEQNPDQVCSPZRWBRFJWWMBJBPOMZFVLYPSXAOUXSZINTIXBINSPBTEFACRNDULOKEUHCJWNNVSJUWIGXTZYKZXWDTNTSLTHBSFCOUGOAWJEDIBREJENCYYRKNZXBXKJHGZBGDHUU");
    msg.type = 132U;
    msg.access = 239U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.12926750657885855);
    msg.setSource(14198U);
    msg.setSourceEntity(120U);
    msg.setDestination(14558U);
    msg.setDestinationEntity(161U);
    msg.name.assign("RRLMVVWGRUSALVAEJFBPESFYSDDFSZEDGTUUUCMQLOQMEHXKTXQFOVMQDZJKUPILSTJNVNGHATDWYXLCUNWKPNANXJNKQJDTRITUCMKZHHTQCHALLXMXPBYRNQYJGSIYGKUKRLPWYIXZRYJIZOIKPUCCEXBAPJZZZJKCTBOQSOBPANYFSVSOQBOSALTCAQMWDIEPLFBREMIIDWYJOGRUTVXNOEE");
    msg.value.assign("JXPAWDLWZNERHMVGOVHBRUWYTQGGTFUGPBTNTXIJZUTOGHZJDHNTKGNNSEKFSCPVBWARGWCKSLORESUSZCMGQTXFJEBLHURSJZABABWMPSSMCFEHNFUSOVJZKXVEFOLMBWKQDIYCTMCHCLHQLKXOHUKUJVDNYYYJLOXUWBHCBTNPMPBYPFIFDWVAZJQIZAIJV");
    msg.type = 123U;
    msg.access = 140U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.2711906072267237);
    msg.setSource(46095U);
    msg.setSourceEntity(107U);
    msg.setDestination(32337U);
    msg.setDestinationEntity(8U);
    msg.name.assign("MHQQYTKHZDCMSNRVQLDVREVUTEMWAPFLURMOOILBAZWTRXWPKDOPISMEYQFOPSUCZOJPXXKAWKBGGSZDUVQNVFFXXWRHNTSNHEGHYPKBJVQGSCLHKAIZGBWEUGXCSGOEYKTWZDOZFFEMIEUZLSUJNBNXTVRYXJTFYRUCDUDKPNIZAYRQVFZTXRDMALPPGCYCMW");
    msg.value.assign("UMYQBUDCEHDCABJPYILKTFCYKWOVJCSZMMVWQQZXBXQMGAAYEWHOTUXNNKMPARETVXSKBZRDLYIPDSONRUZEQFOISHSFC");
    msg.type = 140U;
    msg.access = 44U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.5752709100063431);
    msg.setSource(2087U);
    msg.setSourceEntity(78U);
    msg.setDestination(19117U);
    msg.setDestinationEntity(68U);
    msg.cmd = 68U;
    msg.op = 179U;
    msg.plan_id.assign("GXAZRRULEQOCZIDXWADHHZAMXSEBFFMFXNTLWLIDXMGRBCCAVDHQRGNJHXVANQMPIOQVYYZGUYJTZS");
    msg.params.assign("XQYVAOVWGEXNEORMZOCRRHCEJVFCCGOAJADYYSANUHZXLGQWTAQINPUEGRBFCOQGTQXTIQSFZPDRYFXNKBRIDKMLLLQYMYOTXG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.7482472386041641);
    msg.setSource(18415U);
    msg.setSourceEntity(88U);
    msg.setDestination(5719U);
    msg.setDestinationEntity(189U);
    msg.cmd = 59U;
    msg.op = 109U;
    msg.plan_id.assign("NJYMMTDUHAQVAKBUWQDOYEXLBHAUDBRSQEVIQFEJHGKPBDZPZAFCPXACVMEYGUONCYJQRTCZJTFQLNWCEONHIORTALGNOSGPTLFQCHRRMCPDVFSWKKCYEUIIJVZOIFUMVRXUTXJKZIDKSPFQHNAEZPWRUWNMXIXEYLEYNBBWCCZLPUQKKO");
    msg.params.assign("NZYAHIVXLKIBTUYJUQMPBCLYDPAGTPRGUBZVVAYZGTTOAOQOBCBXPPUSWSFJDXNMTHZBY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.8622850277604815);
    msg.setSource(57137U);
    msg.setSourceEntity(160U);
    msg.setDestination(22287U);
    msg.setDestinationEntity(226U);
    msg.cmd = 250U;
    msg.op = 141U;
    msg.plan_id.assign("CRZQSNPSMOKMUESBDCKTKOREVGUFIQKBDKNIEPZXOBHYWTHGLHTPAXAXYOZNGBDRLYRZGXDJNOHAPRCEDGXJFQQMAGKXMUVIIQWBKLYZGFAIBWUYLCYFNZPMUFUWYHPRBCQWIEXD");
    msg.params.assign("XKMYWURDFZSAXIJZCNEJAUPVCEXKDGYDNMXYTVEGHXHDWJVGQVTYYORIQMZMKLCZLUOTFIDHEMMREVRIPJQFTRUBZKIADWYRGSFCSSPLNSMNSCOYUTIGVVQLUJYLEYWQRLZLOHUGHXVKSOWHYWTRCAPBRPXBTSWJASBOIGDKUOJIGZTF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.6292368976499509);
    msg.setSource(47884U);
    msg.setSourceEntity(139U);
    msg.setDestination(59U);
    msg.setDestinationEntity(12U);
    msg.group_name.assign("NKXFIQTHNCXUEHCMLPPASBBJFCCDZSUSAYWRGEIUFUPAOKDTNOBSDPWGGYYZIDQJZREKPQYFYSEFBGMSECGLBFZNHFBXOVEVWFDKJXZQVSVQKRWJYSMTNJINCEHRIUCWJUKMHJBAODRAIEZPRRQNIWFMOPQZETYTMZPAUMPXWVACXX");
    msg.op = 12U;
    msg.lat = 0.6392636572975893;
    msg.lon = 0.35089598416238843;
    msg.height = 0.6040111528271948;
    msg.x = 0.5295665720304684;
    msg.y = 0.45750042204302865;
    msg.z = 0.8074032295403458;
    msg.phi = 0.8976667161103612;
    msg.theta = 0.5301067988666954;
    msg.psi = 0.49147520412974366;
    msg.vx = 0.4960698285427291;
    msg.vy = 0.6290973165360346;
    msg.vz = 0.14645283101030093;
    msg.p = 0.4635776184936222;
    msg.q = 0.4461516788538591;
    msg.r = 0.5794009145139714;
    msg.svx = 0.7668985539559726;
    msg.svy = 0.8356308871259099;
    msg.svz = 0.6789313507235406;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.5011989225566215);
    msg.setSource(57322U);
    msg.setSourceEntity(206U);
    msg.setDestination(57442U);
    msg.setDestinationEntity(169U);
    msg.group_name.assign("RHECMKOBDDKWWRFWEHZJEMITZJHNYRJTMRDFKDUPBSWNBPAGNFOHGACMEYIZAYJIZCXEKV");
    msg.op = 51U;
    msg.lat = 0.1030563124682452;
    msg.lon = 0.7146988974985254;
    msg.height = 0.2578821143521094;
    msg.x = 0.7913497662313075;
    msg.y = 0.06575679715180005;
    msg.z = 0.031241261920906815;
    msg.phi = 0.22089216399834044;
    msg.theta = 0.9238667554891891;
    msg.psi = 0.9503126560150239;
    msg.vx = 0.7183126982587336;
    msg.vy = 0.597465607836463;
    msg.vz = 0.3717615542773761;
    msg.p = 0.46883773407996865;
    msg.q = 0.326601898713631;
    msg.r = 0.4464677856258852;
    msg.svx = 0.8874541806852967;
    msg.svy = 0.8906102388569964;
    msg.svz = 0.4976004456761308;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.14730170501744544);
    msg.setSource(22584U);
    msg.setSourceEntity(197U);
    msg.setDestination(59752U);
    msg.setDestinationEntity(241U);
    msg.group_name.assign("QRLQZYDLKEHRHXFEATAELWQBLBRSKKY");
    msg.op = 65U;
    msg.lat = 0.9534740728357785;
    msg.lon = 0.14175077807771397;
    msg.height = 0.12958858277540297;
    msg.x = 0.1607820613009765;
    msg.y = 0.23016764645016285;
    msg.z = 0.16784098808333203;
    msg.phi = 0.5658362213034575;
    msg.theta = 0.49180058421011863;
    msg.psi = 0.7113730260597185;
    msg.vx = 0.47452129551358446;
    msg.vy = 0.6798225290567256;
    msg.vz = 0.7496476504406948;
    msg.p = 0.874129902778322;
    msg.q = 0.9256571824359575;
    msg.r = 0.025502544616628264;
    msg.svx = 0.29901775936107133;
    msg.svy = 0.654167689287263;
    msg.svz = 0.8142428830478445;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.3871903609183762);
    msg.setSource(22666U);
    msg.setSourceEntity(161U);
    msg.setDestination(13755U);
    msg.setDestinationEntity(69U);
    msg.plan_id.assign("ZDAYPASCHQQZTJPKAPNNCYQIOJLYSBEDPMUSOIBALKMOQSRRIDHUYFAHKYMFCSZCUTJVRFNJYOWDKKJNMBAWXQNLWTBEMGGKVVLZOIFCIAZTLXQNGSRQFBOMZWIDNTYLDWGRGTOIFPEWURZYZKPHXEIQTDTJUGGWLFAXWHLCCFKPRVXAEBRHEGREWBGIXHBVSQOVKHTMBXZXFIYGJPDHNZQXPECSUYMLRUXEDJMHSOCV");
    msg.type = 252U;
    msg.properties = 217U;
    msg.durations.assign("NWWLHEIABYUJNWPSFTSVHZXKDEAOZYYSNPBGMVLGPDPQQAJKDVUBCQHVDKAFNZJFKGEZWHXEWHUDODFCJLRU");
    msg.distances.assign("YOEVNMVNVZHOCQANDMPRFUHOBLBLYIUWEWMRRGSTWMOPEFACEVZOXFDDRHQGPHBDAUDLSSOZJRCWYNQSYVNFZCEXDSRTHPDGQSXRQEZHNANEUKJLFMAAKKBCFQSUGZGVBIFTMQKYGJKIFWEDBLUAYBKSEXPFOTXPZQJTLBJGWMKHJXMWNUMTSHUICIGRJBLJWKTBISTIZGRDPUOPDLFWVVOAYXUOQCAXJKVJYKPAMNHRECIYZIIYXTWCXTQ");
    msg.actions.assign("LDWOJYYIQUKDQFCIFKZAMRDAGAQGTKNQKCHWMNBDDXCGWJMFHNXYCKTZJKSIBNPEDZVERYBTQFMWCBEBSPMOXFRUMYSWRFUHNDNETUTPGHOAMWWZSEVIKSVEJYLFWRLCSRLXALHCSOHEZWS");
    msg.fuel.assign("WQYQGFBCRIRSGSBVEYGNLPXFELSOXDUICPPMCTHCZXCWOJSKEUVNZPUDFFTBTJPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.7655672772193984);
    msg.setSource(31515U);
    msg.setSourceEntity(110U);
    msg.setDestination(61207U);
    msg.setDestinationEntity(84U);
    msg.plan_id.assign("YCBYRMSASPULQWHGJGFFQEOQRDAGTNCEJNINGXHSLUWBXVDYAFOORPZSXFMKEOSUWZRLQQGFCPXFNLACQCUDYGHDTDLZWHUUEGMKRMYTJMVUVCDAPGHVJRVBZYPBBHWKWVYNXFOXBOCZPIQZLLTXYPFFNJEJNYKOIAHCJZPSSUP");
    msg.type = 99U;
    msg.properties = 117U;
    msg.durations.assign("IUGQSLLTWCJSKCSUXRKHEKXAGNIOMVZBZYLOOBIMQBNYJYJXEGOWUVTYTLGMIUJVRKREWEVILVAJNCXUPREGCZFFSIJJLKFVHFKMRZCKPRGIWNMTYDXAQYFNYNEUKTTPZGDOXXVPONDSBBRQHCOBHKSQOPHTMNPVDZZBTWOWLPAAVNGYATHROZRIMBXHYAJGQKLIDX");
    msg.distances.assign("TYJERLJCOFCDDBHKKQXSJYFVGZZDCRYXJJCWLMEKHHLE");
    msg.actions.assign("UJRQUQOCFQZTWVZKFUBTDBXYFLQPVILIGHFRZOEEQNTGBPNQTNTBYPAAPYCJINCXVMSSSWNZUOCAUIVZVMJJMOXLJNWQFROGEWHEYVSBUGKTZXOTUMKUAKHRISKDWALBOGEDWJLALIEBAD");
    msg.fuel.assign("EMLWZCVKGYRPDLHVWOXZXAEHQJSXXOKHDCUSRAXLMWTRUEFEGHNLJTEPDXJDLXFBOQGGFNIOWIYGIXPKBNEXXPPPUACIRUKVFWLEBTCKSYYYGVTWHUZQDJFAMKEHNBTRZTTPAWVUBDNQUYALSQABVGKCCNHMJDYUIFQOLSDRZMGNQJHJICABNZUMFWOAQMSFHRHGYZTICKMPOERREQTJLOKIISVVSCPODYZFOUYBMFJJDANPQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.7598855351569599);
    msg.setSource(49038U);
    msg.setSourceEntity(204U);
    msg.setDestination(39050U);
    msg.setDestinationEntity(171U);
    msg.plan_id.assign("SXFYUCZNEOOVPFPTRHUOGINCWVOWBEAWQHUQDZPUFKFMCNJKYQLPQAOCVQCWNKRBVIHDBKJGTHJIANOODGNZMWNZPFDUGJ");
    msg.type = 41U;
    msg.properties = 135U;
    msg.durations.assign("WDHRFSOCESHJBRFOQMLVTDAYEJBFKFXR");
    msg.distances.assign("MDEEILJOBOLVBPOSEBYTWJAEOXIIRIQSCYUXQSYPGBOGULRJYDFVHBVPHGV");
    msg.actions.assign("HIDUJVHKXOWRHYMGWVUVCJPQCYEGZGMSKO");
    msg.fuel.assign("MIUYYLYZAWFXQJVXGWMHFQXDN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.13415902867149043);
    msg.setSource(38120U);
    msg.setSourceEntity(63U);
    msg.setDestination(59199U);
    msg.setDestinationEntity(70U);
    msg.lat = 0.11126498396950024;
    msg.lon = 0.555286946947471;
    msg.depth = 0.760278761077552;
    msg.roll = 0.8231355766965299;
    msg.pitch = 0.4522546871416002;
    msg.yaw = 0.6676819816596783;
    msg.rcp_time = 0.8106614942893579;
    msg.sid.assign("MDYWCGNKCHATMVBFPMOWLIUWRZDWEWYZYHAJIIVKOJTVPQ");
    msg.s_type = 179U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.022004441787530693);
    msg.setSource(25634U);
    msg.setSourceEntity(193U);
    msg.setDestination(32668U);
    msg.setDestinationEntity(72U);
    msg.lat = 0.33758851040148874;
    msg.lon = 0.6315221479128716;
    msg.depth = 0.2678367624972515;
    msg.roll = 0.7899754333334428;
    msg.pitch = 0.28771987579220204;
    msg.yaw = 0.23715685801955055;
    msg.rcp_time = 0.6509791903249239;
    msg.sid.assign("VXZDJGFTUVXZAGJNWKACMRRPQKKZYKQSJCSNVOMEQMZIPVOYUBDWMCYHHPXLBOIGTCCQLDSIEAFLRFFDIAIOTFARBFWDBV");
    msg.s_type = 189U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.5851857315313932);
    msg.setSource(22638U);
    msg.setSourceEntity(207U);
    msg.setDestination(43872U);
    msg.setDestinationEntity(28U);
    msg.lat = 0.7341510835022841;
    msg.lon = 0.5820634101204974;
    msg.depth = 0.9260296776463209;
    msg.roll = 0.3154030211018197;
    msg.pitch = 0.7713796367956789;
    msg.yaw = 0.2870178643439283;
    msg.rcp_time = 0.5810867059577625;
    msg.sid.assign("KCMRRIQLXOTHMHLHLHQVIGTOSLXBBXWZPRBEYJBRKNCLQPDDLYROJQNYVTBLDDDXWZFEVSPMURBFSS");
    msg.s_type = 137U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.045732126257346906);
    msg.setSource(50563U);
    msg.setSourceEntity(163U);
    msg.setDestination(47507U);
    msg.setDestinationEntity(243U);
    msg.id.assign("LZJVMIJAUVSOQCSQFRLTRDWEHNKKAPVMWSDCCRHIFYXBSONNWUKLNXKUGFOSRWIZZUWN");
    msg.sensor_class.assign("UZGDMOEFPYAFYPRCKIJHVMYDCQOYZTHIBCVZYRSILRJMRYBWAAQTZIBJKEDQDPWDBMTRISHJSYIGEBKXBZNGMNSIXVXMGJTLWGFWHUCMXETSLKZMVKPIYOWJSLPOHNLTCBRNPWPIQDGCUOEMKULGCQUUCOEBWSZXYAB");
    msg.lat = 0.3357441382699967;
    msg.lon = 0.7938760989916204;
    msg.alt = 0.4971698682704637;
    msg.heading = 0.8757814508336578;
    msg.data.assign("DJPOSSLFVJQJRYQXPHTFAPGKGEEDAIJDBSMNKXIOBTZXIFZGGOMPUHDPCBPKGIGMNUEERMVMCWQTESVYQLVPHWAXXUBVBBHTLKURMOHLNQWLERSBDOYOGXQXQZWGIKKYSFNYNJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.8695516471685966);
    msg.setSource(57335U);
    msg.setSourceEntity(246U);
    msg.setDestination(21417U);
    msg.setDestinationEntity(4U);
    msg.id.assign("KDHYMMGAMDURQKNZWCORVFUPHFGTTKBAOOQGGPVFBERWZRSBSHXTBKZJATNUZZDQAVJEMSYSCQYYRTENUDUWFGLHCVJBFHPNYHHQIOLNONVLWZPQWTLKUNTGCHVZESJEZICLTAXYCIIAPYWWBQNZHCWLHGIBIIFIXWFLYTKNVDPEOIADJFSEQPJA");
    msg.sensor_class.assign("CWMSQSNSKBIIVZFRJJDOJNGUXP");
    msg.lat = 0.4307533717957125;
    msg.lon = 0.384472119572282;
    msg.alt = 0.6302207108277181;
    msg.heading = 0.3905744699241639;
    msg.data.assign("EFKERNJIWYSESKUDKJSYKASOVRXGPUOMUSSVBEATBHCHIGMPTMHBCEWIYJDQBFIVBRCJBTGZCJZPAQKXAPRWWGYLSFVTHFTNEPPVTZHWXHARMVJESBNOAXNBVCGUQCOOQPNARMUHWJFODMGIOVFCLYGDZWQYQORQHNUMRR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.4662093651921355);
    msg.setSource(57521U);
    msg.setSourceEntity(151U);
    msg.setDestination(60162U);
    msg.setDestinationEntity(219U);
    msg.id.assign("SAWSFAOBDWESTKRYFJCDUKZTKHPLDYLUHJLQUAZWDBLTTAIISSQVQFZNETXBPRYCMNGQMXLXKWCG");
    msg.sensor_class.assign("IDSXAZEEULIEPBIDJIGIGNEYNNKXAXFWLFCTFMMBFYPRFTQHMXARMYGBXFDLBSWACCHJGFMRYPXBKMXSDJOTONVGQJVLIQDLSCOOORTWKTYIDKBYMEGQBRUCPDUUURGPAPHHBEDZQHMUAPLFJJWVLANNYSUWFNSSKXDVQATZKNGEZVUJNSHCRHTOCZYECVQOBVUZOJQHSIKHSOICEW");
    msg.lat = 0.9365207179279169;
    msg.lon = 0.6828787578006206;
    msg.alt = 0.8064758508559987;
    msg.heading = 0.9010032985116162;
    msg.data.assign("OFYSBOMFOEBXWOIKZJJXHLDCMJUYKPHZPECXVBTNKRYQCZNSFMUFTVIYWLYMDGFVYAQASRXJGJOHHWFPDXCDNWOZAMEUDPXCRUXCKFPGQLTMLCHGACNZTWDVJAVPQPIKEUBKLOMHBZOBUAAREYBNIMGDQQHLYPIDYPFK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.8809638076781401);
    msg.setSource(42486U);
    msg.setSourceEntity(72U);
    msg.setDestination(24183U);
    msg.setDestinationEntity(15U);
    msg.msg_type.assign("FCMTBDVWTDYOMDIYSUGONIKKSJZJFMUMSWFXVIJHVWTLMZACNFXQZOJFRHHPIXHZDVPBLAGCLECHMPOTBNBPDBUFAGZFHXIGYAREHDUGDGNKQARDVSDYJXACOTGWLKQCZECLZVXLVSPSCEGEYALBURLIMFQUAJWYHKIWLRPFJJRXYUXQGBUOYWQTHJISPRYOTCKTTNPKQENOLYRBCXEHOKVFQZINSSQWVKZZUDMNPWISRAVP");
    msg.sensor_class.assign("JGKQNJSJQWWKNTOZGBSNQJAWYDKVMFBGUYOXSLLDBEDLMBOYRKRHXUVPDLCQWJRGJXMJTBNUNBSZYFEDZTFKLMBAUFYADZKSFUCMNDVANEEVPPHFIPCGROVABSCAARMPXYSOCNPUOZPAUZETIJKLZQNXSOHXHRGOEZDCWTIFRTWFQXWGEXIQIFTDWGVULOWMWFEXPMEITPBKHHDIHILQACXUGYSEGIJCIQYJLPHHQCVV");
    msg.mmsi.assign("VXZONUQMZMESGJVHXTYOZJCVEGSWSNSKOWYUQJDNWHNOHDCFKBQXYIHEAVBSTVKLDNJSISFSUKGHHANGIPMKUMPJACLDMIUQ");
    msg.callsign.assign("GFEPZTVWDCDQYOIHLDCXIFEWNABLXHXGODETXWUATIUCNAALJBZLFSHYJQHNWYOQVHPOFDKKAYIXERRKBOMGALUZGNEWMVHRYIHWUNROGQMJYPNVCZDJPIDQUAFJUJGCLUVRJRTFRZKSGMOFKZDUNXEDRIPPETJPSSKNMSDVKYGUCPEXIWZGQNTLCTYMMPQHNAAQRWOBSBLCSXYTFVKVHSKMRJYIEJMCBTAFZUBXMBQO");
    msg.name.assign("QJCKPEIXMCPISOVNPOWGSESJUOFXVBDSVZCRIBTWZYDZBPLTVKTTWTOIHRFUGXXZDFQZAPYVYOHYGUAEZXUOFVJWSSRDEDANVNEWWWQVRBEWOHIAKOZTMPRMDRCJIJRFBYEYUUYSSWOJDXZQAGSLCNTIBLBARHPJSPKGUVFIQTGPYFHBKUMMMZHMCTLA");
    msg.nav_status = 33U;
    msg.type_and_cargo = 112U;
    msg.lat = 0.6122335016806101;
    msg.lon = 0.7457639969077692;
    msg.course = 0.6938642361587889;
    msg.speed = 0.3364758001567292;
    msg.dist = 0.08251552675995533;
    msg.a = 0.6916444373639886;
    msg.b = 0.6466950195590784;
    msg.c = 0.8907849780748224;
    msg.d = 0.15034575369167202;
    msg.draught = 0.7460834649982688;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.9080301841856921);
    msg.setSource(41749U);
    msg.setSourceEntity(131U);
    msg.setDestination(35689U);
    msg.setDestinationEntity(145U);
    msg.msg_type.assign("PMXKCEZSTPSHMEOYCWLVHVOFRSEKKIUVMPALPEMMQZALIDVWYSXNIQBJEAIVTDNKXQUTWDNUIFDVYLAGRKLAFVCRASMROFULHOQSXWUXDUOBUDDXSMBSUNDEJNOHNFLXICCTDCSZWYAEPZGOXPJJBFQRAZNCWGQUYMRGQWUIBBXZPGYTOFPEKBNYKZDFHEYWGGHAVHKCYEJIXJWTPT");
    msg.sensor_class.assign("VBREKWMMOQLTWDRUMKLBZGIMKEZYSMRTBHAIQQZRVDVAPSHPHIOEYSWJEAEGYWVTFSITXNNEAAXYNAQSYXRDQYMTXAYLQNGJAVESQFPVPLTFGJPRFOXTZYXSOIZIQRLEKUJTGKJUFXFPHQHIJVLPZRHBRIHCGKTHWDBUFWOZBBPSPOZWOCDVUHNMDZACNGGEYGUCOCDQOWCUWIJDTALFMEJCDBFUBH");
    msg.mmsi.assign("VLXWSHESIALYGWENAUNXRINMLVUNORSMXDAEWRKGTUDDBZUMCZCHWNYRNPCJLJZKGZXDKCHHKXVFJZMWYGZWUWELKBZLIGTUCFHMXFTNQSDTKZBYWSSGIVEXYCDSHKRXDIYNXANMYAJELLBGHOBRPETBILQPPVWOKJCAJOPJERXQATKGYODJSRTPRCDSFORHOGMMYYJZFZKJUMFAPUEUFVQBBSAQ");
    msg.callsign.assign("LXEYGPJCUNQBA");
    msg.name.assign("JQLCQXHGMLDZSDJKVMOEYFWZGFSDMETLTLNLVMVKHIMDXRKVUIHATEPXQ");
    msg.nav_status = 173U;
    msg.type_and_cargo = 187U;
    msg.lat = 0.39520309736029113;
    msg.lon = 0.577314164264997;
    msg.course = 0.5497586694391402;
    msg.speed = 0.9028912649413662;
    msg.dist = 0.17513133549685855;
    msg.a = 0.3461899078360122;
    msg.b = 0.08668714332439131;
    msg.c = 0.13341636147900593;
    msg.d = 0.062034601742299245;
    msg.draught = 0.7877401477924073;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.8003181184612417);
    msg.setSource(59429U);
    msg.setSourceEntity(105U);
    msg.setDestination(65525U);
    msg.setDestinationEntity(116U);
    msg.msg_type.assign("PXFGRRVMTODJQULPSKBWOQTEOSTHTNKZJANTVLNIRZDNDTJZUKKZPYVNRJDLQOSSLUBGIGNYQQZZXIIYJAKMJGIJXDFZASFXPSGEGCKHCDNVMATIQRXUBJPDPXPWC");
    msg.sensor_class.assign("KWVSLQJWADFRH");
    msg.mmsi.assign("INCGZWHUZDBSRPNTTAOB");
    msg.callsign.assign("FHFOEVNDQKJBZFMOSO");
    msg.name.assign("LZEKAZXZSZQFCABKQCPWZIPSPFUFBDKLNAXHEISVGNWDNVUDIEAPPRWYPLJUXG");
    msg.nav_status = 191U;
    msg.type_and_cargo = 27U;
    msg.lat = 0.1549734650972695;
    msg.lon = 0.11293316446322021;
    msg.course = 0.5686191225831109;
    msg.speed = 0.40106383606535656;
    msg.dist = 0.19304636593986835;
    msg.a = 0.36298228200279303;
    msg.b = 0.3620705008290478;
    msg.c = 0.9007370166744847;
    msg.d = 0.2042042046304181;
    msg.draught = 0.26222736860269813;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.009007285386351427);
    msg.setSource(22352U);
    msg.setSourceEntity(179U);
    msg.setDestination(17633U);
    msg.setDestinationEntity(226U);
    msg.id.assign("OYVOQTWTFFPQTNLIIOIRIHCBSLUZMGJGDSTZAGINRAQWSUFGCPAFEBWIZHCMRPHFKKXAOBEFHJQJXOQKSXURYLTSMOCLVMZMMXHRVNXGIRDAMUYIJENZPTLHQNFSKWZUHQCZFVOHDEJYNWVESUHVYPEBGANUFWKBULYOBONMXLTAPYDZKLNQDIXPUJLSD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.5987703997512945);
    msg.setSource(9085U);
    msg.setSourceEntity(67U);
    msg.setDestination(29315U);
    msg.setDestinationEntity(202U);
    msg.id.assign("BJQSBBHBHXWFOIURLTDNYZKIGWYRFKSNLYHTJKRLLFLZISACLGCSRPVGWWKRZJXWVTEHYIDFZNGFEXHQUJUZTPOQEPONXVPBDKXPPMJXDKHDFNEUDNKTDAWUICKGPCLTQB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.5983208947950797);
    msg.setSource(43338U);
    msg.setSourceEntity(107U);
    msg.setDestination(62673U);
    msg.setDestinationEntity(26U);
    msg.id.assign("HPNYVKXROGFLHZJQRGXXTCBGUJFBVMUXSUAALCCYIRUOOU");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("QWGDGIGWSKNWAUXIIZYLYERBMCAITUFMADKVGMTSVNDQFYLPWZFJBESMNXFYPBUQUEWKVWRTOBGGLUNVMCLGKSOHPRZKAEXHYWTTHURCMBZZDLBTSAJOCDXYFVONLHTQOXJYOQCJJQHUDHHYYDGRPAKWOSKICVZFJFHLPEVMERLOJONMBAITPACSCITZSMFIHRKDPQ");
    tmp_msg_0.feature_type = 253U;
    tmp_msg_0.rgb_red = 2U;
    tmp_msg_0.rgb_green = 222U;
    tmp_msg_0.rgb_blue = 181U;
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.48182305131541303);
    msg.setSource(45355U);
    msg.setSourceEntity(15U);
    msg.setDestination(38563U);
    msg.setDestinationEntity(60U);
    msg.id.assign("WMVCTUWCAEFGAMRVZGQUJTZUUXNJSEFTHOQQJACJNGIXPEBZLCZKQCDONXBGOVDOKH");
    msg.feature_type = 235U;
    msg.rgb_red = 208U;
    msg.rgb_green = 66U;
    msg.rgb_blue = 110U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.9263603699131089;
    tmp_msg_0.lon = 0.8897058570023992;
    tmp_msg_0.alt = 0.288626250818811;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.46234042912066);
    msg.setSource(11013U);
    msg.setSourceEntity(29U);
    msg.setDestination(45435U);
    msg.setDestinationEntity(192U);
    msg.id.assign("CHGQBESAZRUQYKUTGITSDGIRHLTZPYYOQJRDWOATBZECBHUGKSXDGKBMMLWDFOWXUPNRZYVFMYZCRWLOQDPDEJOTXDHMIBFAYNBZHENXLGVHPXYVFHLPBOOQNAQKYSNDPRKYRAFNOGXBNTWIENTLJUFWJAJCUIEWVFZVSHCNKPZPJIMKXPXGNJUTCXJPJFOQDOMSMVEYKSGWEBXLRSCITUECWZQGVTMCUH");
    msg.feature_type = 179U;
    msg.rgb_red = 125U;
    msg.rgb_green = 93U;
    msg.rgb_blue = 90U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.8139446322397945);
    msg.setSource(5373U);
    msg.setSourceEntity(180U);
    msg.setDestination(50714U);
    msg.setDestinationEntity(252U);
    msg.id.assign("NXBVEVGMENIQRLKVYNHDWSATIYWHPOGXEKVUUNINZRP");
    msg.feature_type = 230U;
    msg.rgb_red = 63U;
    msg.rgb_green = 93U;
    msg.rgb_blue = 155U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.8374561223793625;
    tmp_msg_0.lon = 0.948706302753137;
    tmp_msg_0.alt = 0.5408166934931162;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.46559490339660714);
    msg.setSource(52104U);
    msg.setSourceEntity(117U);
    msg.setDestination(40864U);
    msg.setDestinationEntity(14U);
    msg.lat = 0.7652418338067782;
    msg.lon = 0.4393326789787244;
    msg.alt = 0.2892772147256756;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.08153338822472189);
    msg.setSource(17474U);
    msg.setSourceEntity(77U);
    msg.setDestination(40935U);
    msg.setDestinationEntity(48U);
    msg.lat = 0.9626224432851593;
    msg.lon = 0.9031374708177825;
    msg.alt = 0.4798881466771502;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.28694067239915944);
    msg.setSource(46001U);
    msg.setSourceEntity(122U);
    msg.setDestination(56175U);
    msg.setDestinationEntity(69U);
    msg.lat = 0.3791450707975176;
    msg.lon = 0.31734758697868515;
    msg.alt = 0.8892973909302029;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.7846574970793518);
    msg.setSource(38718U);
    msg.setSourceEntity(105U);
    msg.setDestination(14149U);
    msg.setDestinationEntity(21U);
    msg.type = 163U;
    msg.id.assign("NAKUNBAUQUYUEHGAXRSOVIEPFQEQZIBTXZMLKVJHUMMRSDNZJFKDDUKNYRIOTBPIGSHKVHFBVTAAVXOZCYEMPQPOWQIPMRYWWJHOPMHLWILBLXVHQXDUCRSECWTQCNZTYEDLATXDNUJBOJPSGGUZCJISNJLWFHSKFCFBSWGDTFMRTOMTVGLBBGXQC");
    IMC::SetEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("ZYNPDHMSVUHBCGZYLNIUFOQNPDDFUQPKCSJCLCYFGOQCIPRUKAWWORGDWZUBJTCLUFHMOKBIGHHVHRXWRPIVCYYEIIZZVMBYBAEJTXFYEMDAYVZAKEUSSELTCDHFENBVHIAEAWWGJQTQOVXVXDMKWQGDAFKNBZPBMSXUSYSNOSLMRLQOHYTIMCBTMRETKPTLPCGTMXXJKJZORRQGGGJSXRDIOBNQNFLPFKA");
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.21612808149650586);
    msg.setSource(34096U);
    msg.setSourceEntity(96U);
    msg.setDestination(40168U);
    msg.setDestinationEntity(22U);
    msg.type = 180U;
    msg.id.assign("FBELKYERWWQERTEXSNSNVPZCKXLJUUBDTMGPQAWVIGHEUUBFWILZHDETJXRJCYIPBTTODOAEHMOYMCGAUYCYRTMMJPCGLLIOBRQJDNXGZRKAHQGQDPZIXNXLMG");
    IMC::Event tmp_msg_0;
    tmp_msg_0.topic.assign("JSXDDYOYUPGMTKOVZSNAHJZPJRZQWWNEEQBVRKTBQAUYSLSRICQSOVQDHFOGOAJMZNKBIIKGQVXPNFESLDWUSZFKCWMTADJKCIYIYECPPGOKOXFDHIARMFBIHYPVYYHZVXHHADLTVFHTRZAKWEMAZEZVIANVOHMOEGELMBDUCRWGBNLOPILMMWXXPGFSNRBDRYCUFSGJXU");
    tmp_msg_0.data.assign("JGSHEKHIAUTDLXBZNVEUMEGSAONROLFREFRUQVSIQHOXUXODHQBVKDUODFYTJWBGNMHMOCPMWBWUTLZQRCOJCKGGPJJRTSKQYSZNMUPCAFRAEDWIZGYFKYQCCJFONPXWFVKDOTJYSYVNXTIKPFYTOXHLAIHNNERXBCDJTRGFISQQVFHRQILTAMUTSBLEWAZUXWPXZLBBAZPMZNSCQWCVGDBAYNWYDKDVKXPLCGYEIZBZIVAREVHMJKWLHMJGS");
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.37091321328440274);
    msg.setSource(5229U);
    msg.setSourceEntity(2U);
    msg.setDestination(12321U);
    msg.setDestinationEntity(168U);
    msg.type = 225U;
    msg.id.assign("KFKDLBOAOPQHYMJDQNQXQTKXFINEJOEYDPKZWIBAGBWIGXZEBSOQCQCAGGGHEZPVOKWTBSTCPEHYPFKYFMSXGLNHUKQURAYMHMGMTRDQJTZINXSTJWBXVMNOHUVQIBJWAUUNIMFLOUYFCDZJDPGYYCPLFSLUSZXDFSACJKVWCODZUVKXITEPMWLVOLLUHRMZZRLNQETTRSIYZCDRLVCBTCBXOGAINEHNKJUVWAAYPJNSHAHMJPRS");
    IMC::FollowPoint tmp_msg_0;
    tmp_msg_0.target.assign("BSBEGQWAJQDRYEZRLARFFMFFEOQMTXLLSMUSYOWTZYKBZWJRZCGXHYELOQVBSEKPUJICMIWWXZNLBDQKCJNNPNTBHDLYQMWOVFXUUGZUIEPAPCKZANJGWIGBA");
    tmp_msg_0.max_speed = 0.9760368302801891;
    tmp_msg_0.speed_units = 167U;
    tmp_msg_0.lat = 0.6721688906267337;
    tmp_msg_0.lon = 0.30074521388568665;
    tmp_msg_0.z = 0.8088947891146937;
    tmp_msg_0.z_units = 16U;
    tmp_msg_0.custom.assign("PNTSUQFADNOBGDQPGVEMODJDYKJPFFBWWCWNDRRSYNPUQGCCUJZLMBEIIUHWUEAXKYRCFIJXDAXTHVMJQIOZILNBQHUHMYODJJSXXYEITVACPMPYRGRKUYNNIGKQEQIDVBBZYZLDCAVSGWWJCNVSKRTMQHTXSHZKZOTTMPPJFMWAEQSWOFCAOWPGFITK");
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.8895507750270785);
    msg.setSource(8875U);
    msg.setSourceEntity(187U);
    msg.setDestination(17216U);
    msg.setDestinationEntity(28U);
    msg.localname.assign("YZXDQVOTHZRAZQJGLREDBIKEUWUUQSDGMCCNMNBTSCXXIEOXYHGTEBFSTHIOIJRBPJQVOUEQWBAAJKHXEGMNVKMUFVXYBJHGUOGOZHAHNCPWMPOVCDNADAYOAJWFQYIVJGYPXDDTIVPVIFBZGFGT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.7027890475809027);
    msg.setSource(43846U);
    msg.setSourceEntity(15U);
    msg.setDestination(56896U);
    msg.setDestinationEntity(65U);
    msg.localname.assign("XUXWJKRLFYBELRGCITUJPZRBNTLUYPFCNXEJQBTPVEXXNRIKPJWKFUFAWWNKNLHHEQYUQGIUCSMJSDCTYFLCOSSXDOHFMDVCFLEWTQJREYBPHKVJAKCVBJOXWP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.2562493611443192);
    msg.setSource(35225U);
    msg.setSourceEntity(21U);
    msg.setDestination(54665U);
    msg.setDestinationEntity(78U);
    msg.localname.assign("PPIPLKKWQZNKSZMUBZUJXWBRQHAGFFYWOVJHEJNWGTHXAMBUXUQQAYWOFNSBSLNBXTHSVNTIIOROECDQMTDUBICQWDPSDTHRYUXOWLNRIJICHDFNCSEUJUAATWYNOWOCGJCEAJNSOVRCOQLPMXQFLIBDLJFGWREXMXKTMFQPT");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("MXJFVTSYCLRUJGCBDMRAHUCWFVDFO");
    tmp_msg_0.sys_type = 24U;
    tmp_msg_0.owner = 4097U;
    tmp_msg_0.lat = 0.43927570923948855;
    tmp_msg_0.lon = 0.7561442011845839;
    tmp_msg_0.height = 0.5549836281654993;
    tmp_msg_0.services.assign("ORDZTEXQOGTQJAGRYJWBDPKMRIQLGJHPFFCXNSDAVHIJZELGLAEKENDWDUSDPBICMNPYFEZEGKAC");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.8126832403678474);
    msg.setSource(63289U);
    msg.setSourceEntity(75U);
    msg.setDestination(12648U);
    msg.setDestinationEntity(74U);
    msg.timeline.assign("CLDVZULSWWXZKEUGNJXORUHUKJCKGFBUIVYUKHQROBSKWPIELCREICAAGDKLPVJQGQCDRBZHXZFBCTWVNXOWTTLISFWQUTSJBBPYNAPIGQEXYMNMRZWVFNVHZSNVMXIVTJRDFKFWHJKPYHBGROKADLIBLSJJQLOSJCGMIBOPAIFCRZWPBYAUMTIAMZSTCNDPOXMGQFNXDYDETANESPE");
    msg.predicate.assign("FHJUBUPHNSVDPOSEXISKCJKVZIACJNAWISYWWHNUMCFUZLUHQINOAGFCFIQNLFLWOTFPOTTFYIS");
    msg.attributes.assign("LEHQYWWVMPZJNWSGOUVXABFAFDJFRWSXKUXLRULDP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.6867778561257074);
    msg.setSource(60951U);
    msg.setSourceEntity(87U);
    msg.setDestination(27728U);
    msg.setDestinationEntity(50U);
    msg.timeline.assign("WZLJXDYWGGDHIVIGBRMDGIYDYTIM");
    msg.predicate.assign("TTQBISKTFMKERJIWCKRWPCHGCMQUGEXVZNMJMYZYSNONNCBFQYGLOMYQVMXBNYHWRHXSPCJUFJLKXWZEURCEKRPOHWJRIZTEPQZOHJVJKJFYKSZUILPDYTWAQGESDNELDUCQDMQEVHFMVGRZNUOXGTYVLRUSDHDSUAYGTZUOZRXDMOVVICTAFSH");
    msg.attributes.assign("LBTUZFGVIWZGNPSVCQHEEOVWROLSBPSLKYBVXJJXOEAPABWIGHPXWMSKXGCMDCLRYYMLRHINLUMMFOKXXADMZIFICUBSQTQRYTZFFVFOIXPPNHNPTSOUASGGPJZJLHEYNAJECAERHQRNFJDKGGHJEEUYDICWBRWUZDNDEHJCZYXGQQQKVATSOTOPCYAKZVCFDWHTCGKR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.10739648224169862);
    msg.setSource(57637U);
    msg.setSourceEntity(174U);
    msg.setDestination(3935U);
    msg.setDestinationEntity(170U);
    msg.timeline.assign("QRLXRMIJCEBAVWIMDTADNVLOYGYWTNSHEGZWQYBVXWHFAKYMJTIWYSTDSTZESFZVJKPSPBCCNUULZFWDGWJMRX");
    msg.predicate.assign("YVNCBTJPAESRFODCCDLGHFLDXJNEZLCNCCTTSPHMQILQXVRXRDUUJATLYABRJMOUPTUOOSZWVWIIEDVDVKPUJAKECROLYIGHQEJEQYEZMPPXYNUJOZEWKTB");
    msg.attributes.assign("JHUQULLDAUGEGZRZSYITSIJFQZUJQYMHRIYDVXXJWROROFWBPHDQGDBVPFRZPKZKQPTTBTCZONBUBAYVGXCBFWMZNOSLHORXLPYBXFMWNVCTGJNTCAPGMNSAALIBYVVKTCUEAEDLCUPPOMQWZLILIVQEEVFYEDHCJKVOKFAISJEYJQRBAKKXEFRSGWJXUNWUGEXDYDF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.18604183068379443);
    msg.setSource(43490U);
    msg.setSourceEntity(250U);
    msg.setDestination(45842U);
    msg.setDestinationEntity(106U);
    msg.command = 35U;
    msg.goal_id.assign("ILSBCBVTYROIFAMHFEINLMXBYBBYTZRCXMMNPVAPKQZDBCLXRGLAYUKJORJLACJQKIXUORSFCGNXMKTWMBPQKUPHIFPKTGTLYODGPVUQNPQFFTXIOMAZMSVEDKIFRZJVEZWVXURKADLYHKDIEZZIUASGEEWPOJGQWDNEAHCYZNTVSAGJMFQHVXHEBJUNWWECOU");
    msg.goal_xml.assign("BFZYTOHLXBJSLUBBBNUGQAJPGLNPRBMOAPFDOUGMQXKUISUIDCRUSVMJGWVZOMDFJLRTSYUPHBWZQTLOFWTPAAPMHLKGDAHPCLEOGENQG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.6640246723924852);
    msg.setSource(53990U);
    msg.setSourceEntity(203U);
    msg.setDestination(10681U);
    msg.setDestinationEntity(135U);
    msg.command = 147U;
    msg.goal_id.assign("ZPPIWNYQGECFMIPSFKMPALPMOD");
    msg.goal_xml.assign("MQZRILRHBDTINXYICEXBNTIHGPKKZGHMNWPALQXSVABAEAJYLTIZNFDPOLNZDIHJTJUGFNXKYSKWRKEHUUZRQWSTEAWZZQTVDXWGYZBGLVYDPCJEKLRHMJCACRPSFX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.974700131296365);
    msg.setSource(54114U);
    msg.setSourceEntity(200U);
    msg.setDestination(47566U);
    msg.setDestinationEntity(236U);
    msg.command = 43U;
    msg.goal_id.assign("TGXXEXUTKORHLKDXIOHMZGNQPUSBNBNDBQCUOJDVVLFLKWYQARGRHKANTHDZLKVMPTKRBMBROJWMCTYFYDHJCDTIIJNMSUZTSXRJCIDVOAWDFSQLKCPJDQZRESABFHMSEEUQBGGPYVLUFCHGRWLEOENPRSVQWALWIIEXVPIJHNZBVZAETVFFXBKKWMYYQGJOPFCZFPCMXSYEGWQMAJSMGPXLVAYYAJXNUUWHUBFGOIZAUINTZIPLOYRHOTDK");
    msg.goal_xml.assign("WLQYEKGLYOQDBFLDTZGGYQQONHWYO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.8302793857009593);
    msg.setSource(40832U);
    msg.setSourceEntity(146U);
    msg.setDestination(57536U);
    msg.setDestinationEntity(166U);
    msg.op = 127U;
    msg.goal_id.assign("IRPVGVGJNR");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("QDDAOIONLOPCNYCTQLMVKBBDEBEKBLRXNTZISWZJLM");
    tmp_msg_0.predicate.assign("UEDBGWUUAKAJ");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.7119954792119003);
    msg.setSource(29823U);
    msg.setSourceEntity(63U);
    msg.setDestination(58040U);
    msg.setDestinationEntity(24U);
    msg.op = 111U;
    msg.goal_id.assign("YGTJPZVXGSNPBMPJKUCJMGXQMFOEUXFAEGMKNKYDOXWCKIUVNDODEPOYKVCCZPLWNJTESXXHKKHLLRTDTSAWSBXYEWRJGIQNRGHIIFZCUXBHAZMMDFPG");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("QDZHBBBOYJMVIIFHMHBJUFGOZXXR");
    tmp_msg_0.predicate.assign("HVMIVXOSGPRPMNOAVRNODRODQMRFXGBEKAPZATULKYIFJSXLQXSAPCFGKKNBWKJWDCSLAOKAJJSSEKONTUHWJFGTHTYPKQZTQVYNPUZDORWSHPFJDCBXOBUMYCFLZXHWYVQEWUKFTPESUHJCZDQRIQLCILUITFXWTUGBVBXERRAIORJNZDJCIAJIXWRMNYPUYBSLASHEHMGYXZDEQEHNBNLGGQVFDVCVLDOFEZQYMIMZHT");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("UDQPXTDVDKEOYNBRAVJGVENHMWEQAMCYNRAAISFYFMRTKYVYYZNXAMFBZOYQWNXFX");
    tmp_tmp_msg_0_0.attr_type = 194U;
    tmp_tmp_msg_0_0.min.assign("ZSTXNYBHCOZHOVVSVMMPQPCLBCKIKGJEYDNQHSW");
    tmp_tmp_msg_0_0.max.assign("RXYVRGMBSRSNIDFIMBWDSJRUWOCZHSQOTBOORVDGLCUMKTUAHLNQYSDGPYXFCJLXZDSRUPJQHCBXMKUVKTRUXBCMGOMGLCPAQIWTINPWINYYTLWXYQEEPHOUADLZWXMUWTUIFFKFHZOCWLJGNVDYEGANQVZGNCZEGOEUGVIITSRHQKMSAFZQKAXHVBRHFQKTTRJBJOPJYJEBFNKOXFT");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.7180751422999014);
    msg.setSource(48058U);
    msg.setSourceEntity(206U);
    msg.setDestination(5346U);
    msg.setDestinationEntity(157U);
    msg.op = 141U;
    msg.goal_id.assign("SDNFPWBWRWLWXGCQNYTCIXSNMVQMNLLZZKEJWHVAEQLHMZHUJQYGIXQCZBDBXMPNPADLWSGCRPFYL");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("JSEVKKFCCIZCJJWNYSCKSEEMTFXZGATSZJOTPYBEZMQZOUDTFUGSDGBACLXVMWMBYTBHFFEVMGFEWWLWKAXJGZURERPLYNNIXXIHKODUBPOB");
    tmp_msg_0.predicate.assign("NGIPHIFQWZWLKBVQHVATZWJBTQXASXIOHRXOVLNZNWKIHMYLOGXCOFKRJYSWATKNEGQXVOMVSXYEFZLRPHZQCZAQWKCOOHPZYUBMMAVMJKLDTWFSPRFWJQWUTECPBYTIMKUUDACSQHMMSGIYAGBTIHVKHXROUDGRTEEEPYFDDSVJGBFQVUNNCCN");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("DKXYUVCPINIISDNATZFGYAXNSVOGVMHIXNTRSYHGQZEXTDKDIZSJXWWCXGFMFEKVYZRHRRFDUVJUBIKPHAKZXOGJTJOLMDBFVQBAASPOCIHFZLNKZHLYOQFMCBSLWNAWDQMLPBMLEXCHAGPETJYGBYVFJRBUQPPSQTAJTBRXRTEZLNOSJWTCNMRILXWUOOMPOU");
    tmp_tmp_msg_0_0.attr_type = 167U;
    tmp_tmp_msg_0_0.min.assign("LXUOGVZYQFUGRVWCWPDXHWRFRORGJBKRELNPZMCFUUJXNPENWIKZFHSAKSJKHSVHIBVOMGBKUDBMKMKNWPTGKZWNZQOIQCIAIXHUMYPUHBSQARJ");
    tmp_tmp_msg_0_0.max.assign("UKSLXGUEFOHJZSWDILAJQJWAPUFJLSZTYIUNKMOTREKAQLCEPTBJYEUCZUSYYHQDGGIDDMBZXAXVTQYYNXVMIPOWGDEGNABBQMVRPSKKCFAYCVWCRZGRHJYFOFBSRVNHPUOXYTXWZ");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.2908923876382109);
    msg.setSource(54079U);
    msg.setSourceEntity(186U);
    msg.setDestination(29109U);
    msg.setDestinationEntity(203U);
    msg.name.assign("MAZNZFNZUOJLDGPSRECZMHKRKRIPEICVWJTOBJEBFDUXBPVPFYLPAMFXFXIHARULVGLCLZDVDKMQUTTCKZFOXRBPMOCYTEQVDNOLPINDFFEITRGYNLJOSEOUARBYIGKEWWHMAWSAYJWCDQXLCBBTSUCV");
    msg.attr_type = 242U;
    msg.min.assign("JQYICYAGUUUEDECKVNLXAUFMTPVBHVHSYMANZRFIIEGPX");
    msg.max.assign("LVFXPJCPBTVDAERQICUUSFSDAKBXTHTNMXFWQYSPTAWFSZYGHPNAZKZSAWLQNEHZMJIUINITWRGJDDMQIGVNXGNSYHRPFDCZGYEWHSMYKEROTCLPCUQXWOBHAMPRKXZOROIVUWBRFRAKOQRLHBWNLPKVN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.8562870521060488);
    msg.setSource(62842U);
    msg.setSourceEntity(23U);
    msg.setDestination(33385U);
    msg.setDestinationEntity(96U);
    msg.name.assign("ROIEUFUCYDFNHRRMIZPPNPDKYOAJDJKMKRLTBTDTIPBYOAAWCYVCVGCAAPQNDKPNEBSDJKSWBZABLGSZLBLAZWCQCGQOKKURWQHVFYWRQSLVUUETEVOTEVUJHTINSLHFUTXHOBRYWXEWDY");
    msg.attr_type = 27U;
    msg.min.assign("TMDAAPSHWDCMARHNVPNNKPRHZHAYTKGQYXWJMLUJRMXJSPJMLWXQBWFALVJOXOXSYWRR");
    msg.max.assign("SKTKKMVUFCJPOZDSOEIKYYXXWHHLDRFSGPOFMNOLRUSQZDOBBVFDBWUSPIDXDQJVEYTLAOCMLMQUXBYFQOENKSKSGWAFONCDPSVDVWRBGLIXRIZZLHULTQMTZJILDMARZVLYVNQNKFATUENDZJTBJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.582591379495867);
    msg.setSource(19913U);
    msg.setSourceEntity(201U);
    msg.setDestination(7505U);
    msg.setDestinationEntity(180U);
    msg.name.assign("QZAXXPMTKEWILSRYISCMWMSKFZVGQNGJHJESKVGHTQNHULICGUEZQPBDGUMNCUSAFTRKLCFJXYGZXQCIHUUPYSAIXKIREQXYHXDSAUATGMBWODHEAYHVMHHSCJKLYRGYONWJKCEODRPB");
    msg.attr_type = 91U;
    msg.min.assign("OAIYMZLAXPBLWTIJOUYFXMSILEMEGURNYQKMWDJTAWRTUPZKMYJANWXENDKYKHFDSKVXZPGUBNHQPGCJWUBTIVKBAJXNHYPIVUSLVUCFTNIRGURSTDGHLEGRBFMOGESAPCFSYGCBIUGBNVJICOVJHHDKLADLGYKXFJYQRSDZTHSBEOSLWIRBSYPXEXCRQNWC");
    msg.max.assign("RERNMRUYPCQFQWKNPZHUIOPEMYHANSKFJTUTXBZPOABNCASRMYTXLABVVOBTSBMPVZUXLCFYZEQIJQSBFMFCSQSIGOBNCFLHEDVLOVGRQQIEYJRDJBRFNZIIWUGODWMXTQVWCSFAGTLNPWUKCWKYHXYDNXWAOESCPYXHXUPKDEDCFZJFHGGYLUMLVJCXNPKMDDZAUWNVJTTOTGKRPVRDJLWOZAIKQDLWTQAHXJGBMJEBL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.6908187866735785);
    msg.setSource(49936U);
    msg.setSourceEntity(46U);
    msg.setDestination(19526U);
    msg.setDestinationEntity(169U);
    msg.timeline.assign("GDWIVMJRWNEYSZKMNMVNJYROPGAUUXHPHUZFIEEBOBHTLBJWOGSGBWMGDGEJUNLRBTARWHVLSKLVFUXMCXAJKDCZJKQKLTLVPSIYTXCVWPREZCMLWCUIRVJKCAYZKRTSRMQHQWZFOGTSDKOO");
    msg.predicate.assign("PKDWSKRIRBEPHOBCAKPFZOSWUMTPDTPQNLMAGYHIMLZZRYDOYOWHSAEUTLSGBSXDLLINXMWQNVUGIYWZSSCVOIERWAJUZVCWOANTAJTJIJVVUQKKRYWEJEDQQKKZIDTRGOUFXBOYDQAMCSYZCAECMFNTPGRMRXQPQN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.889366482653635);
    msg.setSource(42031U);
    msg.setSourceEntity(215U);
    msg.setDestination(14883U);
    msg.setDestinationEntity(33U);
    msg.timeline.assign("KESGWCRIYYWJXBXKCRBBLQGVTRLFJEDOACDIWXMYZYWDRHFDMUHTNLAGYHHKTTWGEVJAQPHEVBUCVKIDRSXOKAPKCQQKFPMNKOYDCLHFXTZZSNXGRUPQNTLTDKIJFSSJOGSEYDMJZNMVYRSWXVBHHUAC");
    msg.predicate.assign("GFHZRAWSQGDSSDDNCETJRHMOZYJNQHDGWLRVSQHLXCBOFQVROIKMNAMKHYCTRNZQWUMNRJIWWPGBHVPYIDYLEIYCFPZFWBJXTJVDFGPHLRWYJWNECSITXBBJHGEZIOQVLVNMYJCYTLEGAOXDFMXIWPKLAVXMPAZOAUQFTMTA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.44743465327270526);
    msg.setSource(27910U);
    msg.setSourceEntity(136U);
    msg.setDestination(39982U);
    msg.setDestinationEntity(112U);
    msg.timeline.assign("BLWMHBLDBLPPQSKOYZYIWXSQQYZGAOBUEXJAJFCOVSSMEEZFAAMICETTRWCEMVRMALQVQKLUVISKFAMYIQVROGARORYVHTJKTFBKWNPZDLSWTTVZHUJCTQNGWVDNNTCXMUFGUJFSRUENFXWQ");
    msg.predicate.assign("LCDHBWCCGVXKJMFSIYZKWQVBPPDOJYKAMIMAXKVSFFYQRVZCENWWJMLZNTOCZTVQ");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("MEWTGLQQCHPKXAZRGMANKZBLCDYKTPONVYUTJHSWSSSZVKOQPLFFRJLNBQMDHPYJNLVAMYXPHOMYJUNAYUPBXRUIRGFGSJIZOEDAVKFXEUBBHEKJRHNGTCGTDVQALOXJIEYUQWJFSVIFRIU");
    tmp_msg_0.attr_type = 154U;
    tmp_msg_0.min.assign("FOOGIWLUNXHWHKFKOUWWQJIYWXTOIHAMFDASNPHGODDRYECGBJZQFGNYJBKGHPJUAJIFTMVTQIHXPDGDBOFMAULAOCMNTVSVBGZUEYCZUXKSJACRHSWPUNLMWXNQAOGUFRTYFHMSLIARNDVCAADGITERLWCKQRLEVSCTGEBOZNUOZDSEC");
    tmp_msg_0.max.assign("NGGDTEHULCHPLJYFYGKAXCK");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.3997397652410928);
    msg.setSource(29653U);
    msg.setSourceEntity(112U);
    msg.setDestination(65244U);
    msg.setDestinationEntity(138U);
    msg.reactor.assign("QPPMAYYUADQNCSZXHXIYYYKVHJELUNAXDCYYUVGNUGEIJKDAMZIXCWHFWASXLFNPFISQPRFUHAQTQWBBYHIOKJCVFMGBDXEMSWPGKZHCOAURCIBUMAWHLOSJKSYQXOUCLRDWLVMZPBPIDXGEKHUJKNKVZJWAENIVPQQJSTEVJDWBWZNFRTOPTITJCELNCVRZEHEJZRLDIYBRLEGFNVLZULXQGKBTWCMFRSDHGSPSMOVTQNFXKOMMGFDTBOOT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.7703796953415428);
    msg.setSource(44233U);
    msg.setSourceEntity(75U);
    msg.setDestination(47911U);
    msg.setDestinationEntity(101U);
    msg.reactor.assign("LLTVORXXWUTGICARSKGXKPNMRPIDJSBSGVAIQCANHMGPFEHCABWOZHZQUWFOQFVFUEKBKEKSXAOVZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.25467452780436184);
    msg.setSource(50519U);
    msg.setSourceEntity(121U);
    msg.setDestination(37815U);
    msg.setDestinationEntity(150U);
    msg.reactor.assign("PHZXNWNDCXSQACLDNTOZOXIWHVTBUTNABTGGUZFQWMJGQWRBSSUTNPRNLBOBNPJJWVBZJVXHVOYLACYIQKVLJAGEKBEFMNTPFVDRYQYEOX");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("HXOVMBYYPNOULNYUTKATFFSXJSPLDGZXBPVUFKILZLMBAVUXNWRZQFKLFSMCXDNBEEYPFZOMCJLEHZOEJJTTUJEZGGQKQVECSPHNHAKWKSUSQTVNIAWKYFYLWHAJJNQGVHDDODUDOFHIGKGTWPCZBOGHMEWRUABKYUIMPEDEZEQYCPNWRQVPYTMIV");
    tmp_msg_0.predicate.assign("MEXPZDFCAEANJTDYCNWJBSPBJATVHXFIKFKJZXRQHBLATHRUHJZUQBSFJPZLKTQDAQSYLOTBULOVGNADONRV");
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.5570774708765541);
    msg.setSource(36009U);
    msg.setSourceEntity(244U);
    msg.setDestination(52837U);
    msg.setDestinationEntity(55U);
    msg.topic.assign("IJNNVIZETSTFFEFOACFWEQVWRYIPGDTXBDBLKKVWKDXSPCHRABVWHO");
    msg.data.assign("WBAXAZIGJCOUZMPBDETOCDFHHFSSBNAWVICKECQGJYBYFPQCRINVREHQKAJSWUXNSWMQCOQVEJAOUVH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.4785312403784907);
    msg.setSource(49874U);
    msg.setSourceEntity(48U);
    msg.setDestination(39264U);
    msg.setDestinationEntity(209U);
    msg.topic.assign("DSNWOYXAVJYZFLVQLOZNQRNXPJTKZCRNAFPHYYZGSSZRTNSIJDGMTMLVEJYKQKCTFXXEOBIKTICAVLPNWAPAPQJBWUAIWAAIEGHMDEKYDSDUHAIPFUBZXEQUJOLUKMMIKBYDGQWZHHVDKSJ");
    msg.data.assign("CFVMVBNLIFIOSFJXLCLJYKWZNGPDVRBZARFXHMQBOCDARHDQACSZRJSBOKTGLGODQOFWKSINLGHTEHQPZVOYHATCMPWZCMNAWPPSEUNQEQILWBNLUELOINMCVNIYNIDGDVDGIXYIZHVUDFURYTTWRSJKOBFXRSESXAYPKOVJXDCVKBBHQTJIXSPUPUTKKGFGWTRLRMJUFPYAVXMUOJZZMUSREYCBWHXFEMDAQUZEHYTTAKXWJAWQYPCNZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.29509042213979453);
    msg.setSource(28315U);
    msg.setSourceEntity(190U);
    msg.setDestination(13644U);
    msg.setDestinationEntity(22U);
    msg.topic.assign("EZPEDECFVHYTSCWJGLFRUKRVWMVMYWJXXTWFJPMKDIKBRFZXHTDYCGCWUTUMMAENUUUNQHSTRXKXLCQZXYYTBSHHDMATIAFBFRTIBCPSGMQUIDANESBWISNAJGPG");
    msg.data.assign("GCKSBKZBEFYZQOJAPVXXSEGJQLYIVFUCGPYZUNWWFXMUVYSJVBDEQESMVLURKJLHQBOUNBDIXFZPWDYPDQRWJWORNVPJPBTDGXZJKEHIANLTTAVLLMIZQYRURMDVENSDXUIHTACZGPGNBWJRWSIYCWABAXUEASDUNBZYHATHEPRHPMICOCITWDQKJGFBOTQSZVLGIVFIPZNAAXOMKFCCELCHTRGOGOHCKML");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.9917664675640951);
    msg.setSource(62095U);
    msg.setSourceEntity(115U);
    msg.setDestination(3887U);
    msg.setDestinationEntity(128U);
    msg.frameid = 16U;
    const signed char tmp_msg_0[] = {111, -55, 62, 38, -61, -115, -109, 102, 36, -53, 21, 65, 78, 121, -78, -97, -92, 74, 121, 105, -86, -71, -77, -82, -30, -91, 63, 108, -39, 101, -29, -47, 0, -113, -73, 68, 61, -123, -66, 22, 103, -121, -94, 118, -42, -31, -37, -116, -96, -92, 95, 32, -67, 23, 17, -99, -18, 110, -124, -1, -96, -52, -64, -23, 25, -54, 10, -112, -97, 36, -94, -48, -7, -52, 37, 41, 15, -103, -69, 77, -11, 31, 3, 16, -59, 119, 58, -43, -47, -106, 111, -81, 96, -78, -128, -8, 74, -67, -103, -80, -55, -33, 121, 89, -102, -34, -31, -77, 25, -119, 31, -5, -8, 125, 29, 44, -60, 39, -13, 15, 57, -63, -108, 59, 34, -120, -114, 87, -20, -106, -39, -96, -39, -32, 99, -15, -45, -41, -1, -74, 105, 31, 51, -41, 91, -95, -126, -65, 122, 3, -23, 51, 55, 109, 73, 88, -125, -57, 105, -60, -43, 10, 9, 88, -20, -9, -34, 102, -66, -122, 29, 86, -79, -92, 96, -71, -66, 67, 35, -71, -31, 21, 85, 38, 60, -48, -120, 43, -35, 106, -47, 87, -53, -27, 82, -47, 47, -104, 46, -62, 115, -122, -17, 94, -44, 62, 126, -118, -90, -99, -87, -54, -108, 112};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.6235017103963051);
    msg.setSource(22730U);
    msg.setSourceEntity(18U);
    msg.setDestination(6193U);
    msg.setDestinationEntity(184U);
    msg.frameid = 12U;
    const signed char tmp_msg_0[] = {-100, -50, -59, 49, 52, 2, 56, 49, -19, -119, -73, 80, 4, -62, -36, 24, -39, 119, 101, 103, 84, -89, 28, -39, 41, -73, -107, -65, -87, 123, -21, -123, 109, 85, -47, 23, 98, -42, 7, 119, -30, 90, -14, 21, -45, 115, 97, -22, -126, -65, 6, -79, -114, 91, -53, 61, 76, 100, 122, 10, -23, -122, 63, 67, 84, -60, 5, -80, -5, 23, -103, -70, 73, -94, 104, 10, -62, 96, 100, 105, 68, 54, -86, 43, -34, 120, -12, -88, 9, 90, -64, -55, 13, -63, 39, -51, -18, 18, 51, 28, -55, -101, 59, 10, -42, -1, 12, 91, -53, -27, 89, -14, -49, -54, -56, 106, -80, 44, -4, -9, -58, 125, 36, 10, -126, -13, -102, 71, 28, -3, 101, -58, -60, 8, 32, -39, 24, -125, -42, 53, -42, 50, 0, 116, -88, -119, 107, 95, 84, -75, -72, 85, 76, 62, 124, -75, 126, 73, 101, -32, 59, 20, -20, -59, 42, -6, 4, 105, 107, -13, 14, 40, 58, -43, 33, -99, 80, -27, -75, -68, 49, 97, -125, 96, -97, 42, -89, -4, 2, 103, -99, -116, 26, -80, -72, -76, 18, 43, -110, 50, 38, -128, 0, -99, 87, 31, -58, 2, 108, 44, 104, -9, -98, -73, -61, 51};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.02854172874442329);
    msg.setSource(61199U);
    msg.setSourceEntity(181U);
    msg.setDestination(48991U);
    msg.setDestinationEntity(11U);
    msg.frameid = 118U;
    const signed char tmp_msg_0[] = {-15, 89, 56, 61, 85, 119, -92, -64, -113, -11, -21, -96, -117, -43, 64, 31, 92, 19, 91, 20, 98, 78, 21, 45, 92, -76, -30, -25, -82, -81, -42, -66, 46, 61, 80, -3, 67, -96, 31, -2, -102, 93, -66, -86, -58, 50, 100, 126, -56, 29, 125, -14, 80, -76, 123, -54, -122, -67, 124, -120, -69, 50, 8, 77, -87, 73, -97, -42, 70, -63, 115, 34, -98, -33, -106, 6, -32, 81, -127, -76, -102, -15, -111, 83, 105, -40, 89, 82, 99, 23, 18, -12, -89, -77, 54, -32, -51, -79, -62, 31, 84, 121, -93, 96, 108, 102, 32, 40, -97, 37, 44, -84, -10, -57, 71, -46, 61, 105, -71, -51, -111, -54, -44, 115, 121, 3, -101, 32, 77, 40, 58, 78, -67, 9, -50, 10, -118, -47, -37, 81};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.31628896772071646);
    msg.setSource(43638U);
    msg.setSourceEntity(181U);
    msg.setDestination(24101U);
    msg.setDestinationEntity(70U);
    msg.fps = 240U;
    msg.quality = 43U;
    msg.reps = 253U;
    msg.tsize = 92U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.6841758480101306);
    msg.setSource(2469U);
    msg.setSourceEntity(116U);
    msg.setDestination(8855U);
    msg.setDestinationEntity(216U);
    msg.fps = 32U;
    msg.quality = 12U;
    msg.reps = 122U;
    msg.tsize = 199U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.5149989060804887);
    msg.setSource(5407U);
    msg.setSourceEntity(225U);
    msg.setDestination(24672U);
    msg.setDestinationEntity(206U);
    msg.fps = 56U;
    msg.quality = 209U;
    msg.reps = 31U;
    msg.tsize = 225U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.35075866533099886);
    msg.setSource(21422U);
    msg.setSourceEntity(80U);
    msg.setDestination(11893U);
    msg.setDestinationEntity(138U);
    msg.lat = 0.8876991897828229;
    msg.lon = 0.8060807199798626;
    msg.depth = 30U;
    msg.speed = 0.7871484726608976;
    msg.psi = 0.969845963874952;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.6276254035578032);
    msg.setSource(7925U);
    msg.setSourceEntity(136U);
    msg.setDestination(44729U);
    msg.setDestinationEntity(61U);
    msg.lat = 0.09037739314782522;
    msg.lon = 0.8627968193353903;
    msg.depth = 172U;
    msg.speed = 0.12427899366245698;
    msg.psi = 0.9853797698488703;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.6395558174730741);
    msg.setSource(41361U);
    msg.setSourceEntity(87U);
    msg.setDestination(29839U);
    msg.setDestinationEntity(76U);
    msg.lat = 0.11681722182044274;
    msg.lon = 0.04929035689026606;
    msg.depth = 50U;
    msg.speed = 0.8419550698661193;
    msg.psi = 0.4617342165135818;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.29031729202763834);
    msg.setSource(24619U);
    msg.setSourceEntity(227U);
    msg.setDestination(47847U);
    msg.setDestinationEntity(16U);
    msg.label.assign("CLPNMIRZNSOIYOMQPWCGWTSQKUGPWBQBRJEKIOXEQHXVGGXGMFBTLEPEJDWEJCREVRRRYMVZBXWHFQUFANAQXCIGRAZOHBRSJGVSRDEVCCAIYWRDUXMKQKBPYHNDYUTYHWIJDNTBPZLXAYYKZMZLGHXTADDENLBAAFLJNMPWHADJCVJTMPXIZVGZNOWOSLIYWFTSOKCDQLOH");
    msg.lat = 0.5528656694012182;
    msg.lon = 0.10524397184269307;
    msg.z = 0.8917090168657993;
    msg.z_units = 46U;
    msg.cog = 0.12016972804807269;
    msg.sog = 0.5886285811839644;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.6736844127322066);
    msg.setSource(64647U);
    msg.setSourceEntity(216U);
    msg.setDestination(65467U);
    msg.setDestinationEntity(73U);
    msg.label.assign("MXCZYCXVPIHACFZOYCJZPCWTDTBIFGNTJYOMGEWVGGEV");
    msg.lat = 0.11108934606796839;
    msg.lon = 0.7768246717691194;
    msg.z = 0.18419862252849795;
    msg.z_units = 94U;
    msg.cog = 0.4296265972084836;
    msg.sog = 0.5342216305432886;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.9369494187086425);
    msg.setSource(4051U);
    msg.setSourceEntity(224U);
    msg.setDestination(32215U);
    msg.setDestinationEntity(203U);
    msg.label.assign("UFVDHKXUQWHRQGXEYLWPNEB");
    msg.lat = 0.3194743197463946;
    msg.lon = 0.2726739513289762;
    msg.z = 0.48377514071792294;
    msg.z_units = 17U;
    msg.cog = 0.9835398154005436;
    msg.sog = 0.06547676351209575;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.24320076066869722);
    msg.setSource(54377U);
    msg.setSourceEntity(50U);
    msg.setDestination(55898U);
    msg.setDestinationEntity(181U);
    msg.name.assign("ZDFYYMAHILYQXERTQTPPUBJVQRXEZPIRHIZGTMMZPKCJHNOUVRLBAPDJJEDSRKNUIIGHQXHOPLLGZIOZFNOQAGRVSTVWZGLDRDTIVMFFMJMTQIZUDA");
    msg.value.assign("ZYJVALGYEVJDBVCDUETGSLDMLGRZCJKONEOLXPWXNLYSWVZXMOHPLGFIVRUHQKHNQZAYETRHUNUKMIFQIEBPFQJDBTKTLADAIRFPSHQKFSCKRSJUHEPSJUIWIPDBZZBTMNMCVHXGHFAPFFEIXKKYNLFJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.44679309792706257);
    msg.setSource(30252U);
    msg.setSourceEntity(161U);
    msg.setDestination(55768U);
    msg.setDestinationEntity(20U);
    msg.name.assign("FDIUGIJKLCECGRYJBTDZEZMUFAYTLJEQQCVYNTOAESSYADASIITTPRXFRHFWUEKSBGVHMWQNXKRBEIWDGENXXORVUTAVUOCIFXIJTXKOESBJOWNPPMGMQULKVPPMHRRKDMJVAFNUXKOVQB");
    msg.value.assign("NAXYUVRGAGPGOJXRFMUBPTTNHUSVSNIIVHAQKBQSVJDOFLLYRZWPXXIZYSHCOMHGZJCUTLPJIOIJBAEHABGYKYWNTKWDPLWSNEE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.21410320782303593);
    msg.setSource(59870U);
    msg.setSourceEntity(53U);
    msg.setDestination(49884U);
    msg.setDestinationEntity(82U);
    msg.name.assign("IOEXPUEZNORGERQONALOYSRUYYDQMVWALZXJGCEKCLBDTCOABYBBGJNAOCGMNQBUQGSNLRQIDNDTRTHMVLNWRDHZPXHNHGUGHMXOVPSKYJHQZPOUTDKKTB");
    msg.value.assign("IVPZSUVBVSFDLZMWDCHXCMFPGWNANXGJFBFRPEWKPHMJSHABHPTQELFJVCUMAKJFOHMGPMUMPAENOQNEBVHSKRJZNNVJABYDOIYKVEZTDRYUHQGKVSWSIPFBGTXDCAEGDRELGCWLGHIYZOGINXCRQYELIJAZXXWIWCWSWIJQCUMUOFLACNPKSTUJMOOQEZTRLTSRMFBZTXXFQJATZDBUYZTLOUAGVNWQIXHKEOKTSLURCYQKDKRBINL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.5681832125506964);
    msg.setSource(7282U);
    msg.setSourceEntity(145U);
    msg.setDestination(15928U);
    msg.setDestinationEntity(133U);
    msg.name.assign("RSSYNPFAYVRLQTKKJRQNYOBLA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.6620395577934157);
    msg.setSource(4419U);
    msg.setSourceEntity(221U);
    msg.setDestination(17971U);
    msg.setDestinationEntity(145U);
    msg.name.assign("NLJZPXGDNUKZTPSXYEWJONVCWISANDGVFWZFJJORDLFLPAHMMDOZRKBFMVJLSTAOLCXTYILRXVWXZXEKOFCXTCUSPAOQOONODIQMPKVIWSRLYAWWAEUII");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("RKXVHTOALMOKWMOEOKIFYXAATOJLWBFUEHUNSLYWSHEDGIPZGBVEKYNHDXIUSGEBXMNBBWTDCJCRDUCJBTYIOOUFJQQDZNNEHPFPNZQIQYIIPMRJQRYMFDXSALIUQDMTRZKLPFGUVYPFMCXAAANPLKNFJQCQLKIRXGSTLHNBODWDVSKWVSSOVBVGRBWAERVZUFYZSTKZQPLKVPYCJEHGRGU");
    tmp_msg_0.value.assign("OICLQGGDDSJPYWBPALRASCRXEVZSRCNZSTNALRFVCXQEMYKASRCJJKUTJUJUAMIQKYXDEBMJOVPNUWOFIHITJOJALBI");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.11108633975627469);
    msg.setSource(2241U);
    msg.setSourceEntity(90U);
    msg.setDestination(30703U);
    msg.setDestinationEntity(81U);
    msg.name.assign("YNSKBWRWYIIXCOYFRJIFSGYDBXNOUVBNZDIUJQHAPGDYPXCLFRUOKFUUFQPQYAQMBQSFGKFQMHNESRRWDMJRGRCGXVPIVPBLVALXNBHQRGZJTTUKHCVWZGZUEIEZIEHCKHTPMOAMTAWLAHNZNXLVQEWLDTVTLS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.4566141507628363);
    msg.setSource(46511U);
    msg.setSourceEntity(175U);
    msg.setDestination(12652U);
    msg.setDestinationEntity(0U);
    msg.name.assign("QYITBMSJOYARBLRXESQVJDEWTCXYMIOYMLQMWHZWAODVXNSZHNIGLKWKMWJHPGXZKDNBZOHCTFUFOITHGRYBTQCLISIYHUUZSXK");
    msg.visibility.assign("TBSXTUQPLQTIURQEBEFCLEGILJOCNGWZDRJWEZQJHKKTGIWBWSGOUDCTVZFWXCPUQLSFORMRWDMPGMBBZCQLCGSQIOPMCKRSRNAFEANJJELXTSHCPDPJJOHOJYYIMAFUKYYNDKMEMVJIUAXKWRRSUHTTTZBXAFRAFJDNBKLWFIWFSYVYVLSXBBYLV");
    msg.scope.assign("PBAEGHYBUBYELXOWVYOPDFJSHTZVBDBISPCSBTLMLQGJFZEBTVLTMKWKAZNMPPDKNJJTOZAHND");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.24778644282112938);
    msg.setSource(5968U);
    msg.setSourceEntity(217U);
    msg.setDestination(34938U);
    msg.setDestinationEntity(218U);
    msg.name.assign("QIZETORTOXOTLGVRTPNEJRIMBVVWHQYAHLUFBZUANVXVERVFAJQYAUVSKSSHYCXWBZMBDUJAUCOLGMOWFYIPWRAELDEVQWMGHKMDAGRIWXMLONCCXNFMXYJNRAWCTPSIDRADPBGFTOWPXUPNJXGWBKJSYPUDFYJQTUIIDHCWZSLKXYHUQZJBHSLGNMDRDNDHOLEQKEZKJCBVKZIGQNACCIFBZKOMUXLYQENPPKPSFLTJ");
    msg.visibility.assign("ZFHTDUMCRTTXMHRDQWOMNATLWWJYSRJR");
    msg.scope.assign("UPMFGFTSIGPVTLQCSW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.15349218724976021);
    msg.setSource(41829U);
    msg.setSourceEntity(129U);
    msg.setDestination(31830U);
    msg.setDestinationEntity(56U);
    msg.name.assign("NOBTXIZGQJMPGIHWZRPF");
    msg.visibility.assign("OSBTJSEQGVRNRTNHBUCNXYZIZWGEXFJDVWHIKCSQTJGZIASVXCYCJXEWTBWFKWODHIPCENGYZFEKLZKLTLGJUSEKAHKDMPAPMHEHYQVZUXPUQPHYHOTZDMJSLNOJMYDCMVXIMWLBODRRQTURWLNMEZBVFKFNKRWREJQZITUVLJQUUPDWUAGVYZDXOGNVFAAGTFCMSFWKDVQJIQFIHBCNXAKLBPCTIXLRABGDHMRAXOYBSRB");
    msg.scope.assign("LPTWIYPBFURGVZJEZGQUHTLXMXFVISYKZYVVUCBEKOMTFDDBHDIHWGGGPCLYWNKRREBAGTMNA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.3765008622068252);
    msg.setSource(57008U);
    msg.setSourceEntity(152U);
    msg.setDestination(49279U);
    msg.setDestinationEntity(22U);
    msg.name.assign("XCTWDSYQZVTUZDSEEXKLNAFILPKKOJCGSWWEOXWOUMLYMOHMRLNABMZYXRJURFO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.032050476797192196);
    msg.setSource(19571U);
    msg.setSourceEntity(59U);
    msg.setDestination(9458U);
    msg.setDestinationEntity(174U);
    msg.name.assign("UONIKVVTUCDYNSVCTPJIQPWRMCGTBDBAQFTGSHPQHBMUFZHSWUUWHJRWBSKYIKEDXLNEEXBIJXEPOWAMSGSLMOKHKTIVFOHYYVKOQEMOOOYORZAJNRJJJXEIRIRSZRCNXFPCNAZLZEJMLDCVLZMDCHHAGGALYELWQNSAIPGVQGMWYSPJUGMZXUFFSKTCNCPAMIYEFQAKVDBJDX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.048321261459370324);
    msg.setSource(60351U);
    msg.setSourceEntity(239U);
    msg.setDestination(20559U);
    msg.setDestinationEntity(248U);
    msg.name.assign("KJCJFCRFBZZEULUXJDGEIBFYXIMHUDGRPNAAWCEWXAOQCRWEYHTEXACALLLFIFWJGTDPCLBXIMPXCDOVGRTQVFONEEBVCUHVNYUQUWUDMBZMGWJZRGYDBIYKZSDYSWKENKQSBDVQMSKOFADTLXOPVVGHLJFZAVLMKULGOJQOJPGJLHPRNEEFAXZNWCMTRCOSHTQIRHITRSXHNIKPNB");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("RPODUEAMLFVTQPFJWKXTGJLURGYGJIZTKOQCMOHPGJTRIPHVYTTMHRCISYSQUZWJMXUFXOGNAGYAKNDSMIXCKKKZRLKQSEACECEFMRUYATVBGFFHKSAWEBBBNIDWIYLOROVNOZJVQNXLLZUCLXUZPRHDGWNAPQATSHUKXYWBLYTXKZJYSPZDMAHMDDPRROWWCDOQVHXEMCISZHUVSWFVI");
    tmp_msg_0.value.assign("PHDQLOTZAUJOCADBPYJSXGBHWABCTUFJLYVPMNLWMBQOTFGFYJRPWWVLAZSEWGAGEQPUNZMCINCOACQTVNXALUMBTQOEOOYEOTRXGZAHHKLQTFKCILBNRHGMJCQVVRSNPEKRMRSBDRVKIFZKXQHKKIPXUFSIYJSYRXBUWAEGJNIKOFOJUTHQUBDHDNFLLJGYYDVHWXYKSXZUFWJHMCZCIINXSMGUTMZWZCA");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.35959643286457355);
    msg.setSource(54511U);
    msg.setSourceEntity(171U);
    msg.setDestination(58454U);
    msg.setDestinationEntity(243U);
    msg.name.assign("VFRURJOENALBGZGXRFCVHVQNLFDPSFFADGIJPZEZMCQMWYCOZRKFOOMKOBALYTMMXTNKLXDUDUDNFSEWVYWOTZUVUYNYYJOTCTPEMVJHIKJPOZRIIVKSNQAVMSGWHIGJOWKYUSIEBLSSHRBQPCHLUDLQNROMNUWBIQJTVECWBCUHHAKB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.30313148436783743);
    msg.setSource(14773U);
    msg.setSourceEntity(211U);
    msg.setDestination(2591U);
    msg.setDestinationEntity(203U);
    msg.name.assign("YRTIUEMRWXKYBFUWGMOUHBJKARIMGNCGBRORKDTYSIDEPVMXUDPNRAQYTKEKGTCORTLXVOTCZGINMPGQBIBEMSUNLKWVZDSLAXQCWHASXOZUPPWPOFZZAKHXAFQVYWTOBHSCAIYZBLNYPNNYYIFXLVBHRVPHMEKFINQMMGSZLYBUDJFEXLLZCKNDQKTSHCHHWEGVCSIDXEZAFIVOSDPFUDESUAJJHDEROTJLJCBWJO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.8591655257380619);
    msg.setSource(47263U);
    msg.setSourceEntity(166U);
    msg.setDestination(12837U);
    msg.setDestinationEntity(82U);
    msg.name.assign("URUKONTGFPQBYKGJATGBEVIYTMVDZFKOVJSLJPQNRLZACFDZKVXGQMZLHIYNCSBRBUWMIRPWPJSIWVLOUDWPDHMOGFPIWZTFCVGOHPVYMCRAOIKEYZWDHFBAYIENDVXUTELTKLUJETKKOKZNCEJLLUASMCENDSWRHAOQMNHWAXXSQOTCQBWMRPVYJCNXBIFQENCSMTHINIVLOJGSPJFSRZAKDYAGZQXBHEJFQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.4161380863138415);
    msg.setSource(49179U);
    msg.setSourceEntity(51U);
    msg.setDestination(11117U);
    msg.setDestinationEntity(93U);
    msg.timeout = 4101604011U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.13496377569194062);
    msg.setSource(18110U);
    msg.setSourceEntity(72U);
    msg.setDestination(24820U);
    msg.setDestinationEntity(86U);
    msg.timeout = 1648224172U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.39624309235300537);
    msg.setSource(8486U);
    msg.setSourceEntity(112U);
    msg.setDestination(16573U);
    msg.setDestinationEntity(10U);
    msg.timeout = 2644870392U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.4026416191966833);
    msg.setSource(17348U);
    msg.setSourceEntity(66U);
    msg.setDestination(14147U);
    msg.setDestinationEntity(130U);
    msg.sessid = 3602363230U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.09453270197114039);
    msg.setSource(47404U);
    msg.setSourceEntity(171U);
    msg.setDestination(4151U);
    msg.setDestinationEntity(171U);
    msg.sessid = 1874600794U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.9615840000430056);
    msg.setSource(33615U);
    msg.setSourceEntity(68U);
    msg.setDestination(64598U);
    msg.setDestinationEntity(90U);
    msg.sessid = 1441156817U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.20610891229572847);
    msg.setSource(63208U);
    msg.setSourceEntity(178U);
    msg.setDestination(61493U);
    msg.setDestinationEntity(215U);
    msg.sessid = 3530477940U;
    msg.messages.assign("WJZXOAJDAITFDPLUJOZUGRBCITVUKBBCYCADUDNQPVXFAJZNKQHYOLGYZBPZR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.40968226636570493);
    msg.setSource(65064U);
    msg.setSourceEntity(248U);
    msg.setDestination(17568U);
    msg.setDestinationEntity(117U);
    msg.sessid = 92351375U;
    msg.messages.assign("HZNXJHCVKARSRJSYTWFBQXVEHFYZZRNMIOBGWNQZOJVAFLHYOAUPBAPRHACOGTZNTFLXWQITPZUNEZOVUPJUKNRNOYPCFTXJGQIDHGSSFEJWQVTLLYFMNEVRTCRGDPUPCIBVEAHDAWEXHJJCOUDXCZUUIMRKFMKOEDNVWOFGXBLISBPBDYXPQSZPZIYKWUVAMOSWBSFYLTINGCDSDRB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.9112198888553784);
    msg.setSource(14093U);
    msg.setSourceEntity(252U);
    msg.setDestination(21942U);
    msg.setDestinationEntity(70U);
    msg.sessid = 3443311242U;
    msg.messages.assign("GYSZNOQSGCMWIQHLHIFXHODQGILSTNZUAYNIXJCLRVWKXTKPTUVXJNQQANOAHXCDBJMNNNFGTMALFYBUFHBXMCRWMPKWEHWWCOOSMVZTIJDDMAGGMUQRYIYOSSQGEDWXREYFPSVTQFJULXOQEBRPOAAURPRDEGDPRIIWCGJVAPX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.93487681614722);
    msg.setSource(37221U);
    msg.setSourceEntity(46U);
    msg.setDestination(54257U);
    msg.setDestinationEntity(218U);
    msg.sessid = 3107452601U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.637724275811101);
    msg.setSource(35552U);
    msg.setSourceEntity(118U);
    msg.setDestination(47249U);
    msg.setDestinationEntity(3U);
    msg.sessid = 2009847088U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.7981097812926211);
    msg.setSource(48965U);
    msg.setSourceEntity(198U);
    msg.setDestination(64286U);
    msg.setDestinationEntity(56U);
    msg.sessid = 759531422U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.6446478887287402);
    msg.setSource(14245U);
    msg.setSourceEntity(248U);
    msg.setDestination(37764U);
    msg.setDestinationEntity(193U);
    msg.sessid = 4251455709U;
    msg.status = 219U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.34859292667333974);
    msg.setSource(41021U);
    msg.setSourceEntity(78U);
    msg.setDestination(5758U);
    msg.setDestinationEntity(161U);
    msg.sessid = 3525777130U;
    msg.status = 22U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.7845664052443323);
    msg.setSource(22486U);
    msg.setSourceEntity(134U);
    msg.setDestination(58100U);
    msg.setDestinationEntity(163U);
    msg.sessid = 836066841U;
    msg.status = 55U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.4192434857148396);
    msg.setSource(42038U);
    msg.setSourceEntity(121U);
    msg.setDestination(28382U);
    msg.setDestinationEntity(232U);
    msg.name.assign("PSIJEMAQQAEALKKTDLUIOADOXNYNCHJNVJBQUYWAXPZBTXIGMNYKEEMMBDYDWWWBPLFWBVSZFOZIIXWUXHJVJKHBUALFRHYGTHRCUSWMPRSEYFOKHDEVGLFCEBDKUNPIMZSVKSQNVYDRHPMYTO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.5859900700853263);
    msg.setSource(25578U);
    msg.setSourceEntity(81U);
    msg.setDestination(25104U);
    msg.setDestinationEntity(248U);
    msg.name.assign("TVCKJGNZTKRPNIQE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.7812381908058567);
    msg.setSource(24441U);
    msg.setSourceEntity(125U);
    msg.setDestination(452U);
    msg.setDestinationEntity(12U);
    msg.name.assign("GNSQMCTBKQNSSCMHCXNIANRKOFBMKWEEXFJHWGDRJDISKSVVNSDNYWZQDYPWXPYTZUOWOHIAUGANDCBUWRRYELKLMPLHUXJUOYBAPLDRVEATGIHZBFNDIALVTQPMXOIYTHZFHXJCGPJJJTEUUOCGFHRKAVMKIQXPOPEQEM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.5228989264424344);
    msg.setSource(38047U);
    msg.setSourceEntity(59U);
    msg.setDestination(6471U);
    msg.setDestinationEntity(11U);
    msg.name.assign("UTIZDLFUEQYBDRTTZKUGOILJNMPOTDOACNGAAOBLHSMHHSDLPYTYQBMTDPZLTFFONUBPEDRGSRDFVKXRJXBSCKURJFNQONXISESPMHAPXSZDUXKLXBAQDOQXZHUMTWPVMGUVVMJXDKRHWCURAJNOKRWPJZZAXMINRQOLHQILTYXGYYBYCWHKBAVWZCPUSCFEIV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.1388098084746543);
    msg.setSource(33262U);
    msg.setSourceEntity(164U);
    msg.setDestination(29986U);
    msg.setDestinationEntity(125U);
    msg.name.assign("ZPNLOSICHSARQKPJCKYPBPMARGHLAEGMZUFIVIYTSLMORTQRFXSMQPPXIYEVQNZWTEJAEVBOXBTBUKEJUFITJVBXGADJFPJIUBYADSIJDTLHNQYMWEQULWUYFVWDVLGZNRSYDAGVBKHQNLCRXTZPAOYFRUJYWUFODVCGMIDBWQQNIWKKKZEXBUGHFDUMGJXZXQANODYTRSHCNCBLXINADFLECOKRRXZMCPZCSGSKMJHOKEWLN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.5542388067185496);
    msg.setSource(15378U);
    msg.setSourceEntity(31U);
    msg.setDestination(24551U);
    msg.setDestinationEntity(40U);
    msg.name.assign("EJGNSWTOUTSMATFJEKNDVOBUNOWAVBJRYOYDSOWHRESOFMNMKNCNYHTDHRGTNXUFOIVIZGBWAVYPDLFPHMZUSXDVPRVKKWHQGSREPEQAPZFUGFEWHSISCSMZGKNCZKMYIQRUQJGOUXPTLQPJRVFLADKXHYAYPXALJIVLCEEQL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.004589681763184417);
    msg.setSource(57765U);
    msg.setSourceEntity(187U);
    msg.setDestination(33692U);
    msg.setDestinationEntity(45U);
    msg.type = 42U;
    msg.error.assign("SJOOKRUUNNTSFFCPACDJBPYQXFGFOPSYRLYTGUWKHBSXBKWJFGLYAPHGLUMAKBONMUHSQJJCFVWWKJCYCQWTKUNIIPFEZFLLQTLCRJUKQZMYALOGLVHPBAEBSZDAPTENHCHDWRNZNYXFZXQORTESIVHVXJDEOIX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.6864862340873553);
    msg.setSource(54883U);
    msg.setSourceEntity(53U);
    msg.setDestination(51971U);
    msg.setDestinationEntity(77U);
    msg.type = 0U;
    msg.error.assign("JWFFOTDMFMDXGIWOQXRJUJKUVFNHUZXOKZRVTHONNTRVBNWKESHENRZABSJRAPYXIYLKUAEHFGSSUSBBGSCGCUVYSCIMJBWDLNHCTEZKFVIMGUZWTJGQELCDIGZMKPWDWNOPOEOHRHFBFOPABLDBMOYQLLQT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.9770401096311251);
    msg.setSource(39166U);
    msg.setSourceEntity(183U);
    msg.setDestination(41390U);
    msg.setDestinationEntity(247U);
    msg.type = 193U;
    msg.error.assign("QNNBSRRXCLBPFZGVZZGDWBUGAGTYRKBSMSJJSRUGYYAIHQQBXUHUVRWJWTLLLAXKPYCHRQDWLVSZFVPPIRNJNMXOCAMHEAXVUOUBKZESTNRQXYYZCSWPGFMFVQGEDTCTCTIKORMICNUOAWJLJQPTLCZXNEMTUNWWVHYGAMKSYXQVHEZEVKJJEKPBOKFDUOIXDPEEHJFDJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.9160156829712638);
    msg.setSource(39823U);
    msg.setSourceEntity(246U);
    msg.setDestination(15679U);
    msg.setDestinationEntity(107U);
    msg.seq = 5392U;
    msg.sys_dst.assign("UCXSVFWLMEBVMQUADLHODFJDFYEZYCJGPYIFSXEZIGRADNVRMPMQHNFCMYQKORMQJLUJQGRKIXUKWGSSYBYQSPTTFP");
    msg.flags = 60U;
    const signed char tmp_msg_0[] = {103, -106, -80, -60, -123, 95, -7, -80, -114, 104, 44, 59, 15, -70, 10, -121, 77, 69, -94, -113, 121, -93, 100, 2, -66, 10, -48, 65, 26, -67, 3, 106, -6, -82, 66, 59, -38, 82, 89, -52, -109, -54, 67, 95, 15, 85, 117, 98, -8, -67, -37, 122, -81, 49, 83, -11, 65, 42, -75, 82, 71, 102, -19, 44, 65, 8, 5, -108, 58, 17, 42, 78, -70, -109, 122, -36, 36, 84, 34, -10, -71, -34, -54, -48, -42, -82, 22, -82, -118, 58, 112, -115, 42, -87, -4, -81, -112, -76, 126, -126, -123, -54, -22, -7, 29, 119, -4, -122, -70, 102, 60, -112, -1, -104, 40, 35, 99, -125, 106, -95, -76, 10, -42, 28, 19, -105, -63, 40, -38, -33, -7, -48, 98, 18, -80, -90, -9, 107, -99, 36, -74, -62, 86, -106, -72, -89, 8, 53, 113, -15, 2, -54, -51, -24, -33, 15, -49, -35, -90, 13, 95};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.14604011998799582);
    msg.setSource(43626U);
    msg.setSourceEntity(28U);
    msg.setDestination(47199U);
    msg.setDestinationEntity(100U);
    msg.seq = 54314U;
    msg.sys_dst.assign("GWTLGIMGRQOXCLVKDKNNQRPPMGGSLLAQADVDIUZWXZUXEPJAPTBTOOXVUUWHYHCLHMFCYSRUBBMNZTMIMZDIEGSVTSJSDZTIPRMQZAVLYJUYLJHDYKACJWCXWCKTUAENRYLPWJPRHEIGAAQHKEFXFVMXEVWZBZOOTHBBLDKYHNQT");
    msg.flags = 28U;
    const signed char tmp_msg_0[] = {-8, 24, 45, -113, 48, -83, -122, 41, -6, -77, -125, -93, 11, -28, 110, 44, 109, 118, 94, -21, 31, 5, -19, -14, -45, -32, -88, -25, -49, -74, 70, 52, -114, -19, -22, -54, -78, 54, -125, 18, 32, -118, 67, 36, 89, -113, 21, 64, 1, -11, 104, 100, 56, 115, 34, 39, -118, 99, 112, 78, -66, 124, -34, -84, 28, -113, 66, -127, 33, 8, 62, 25, 57, 64, 95, -22, -117, 115, 38, 57, -61, -108, 49, -16, -111, 97, 34, -117, 106, 36, 96, 17, 0};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.14511744755225964);
    msg.setSource(58741U);
    msg.setSourceEntity(85U);
    msg.setDestination(28365U);
    msg.setDestinationEntity(145U);
    msg.seq = 34748U;
    msg.sys_dst.assign("UNTYPZRQKNJIIHLJMTNCOSSYMQGWEVUTYQVZZBGKJZDKZAMFPHERYJNFKOQETBIXZGRRWZKWEDVGWMISLWXKYLHOFUX");
    msg.flags = 254U;
    const signed char tmp_msg_0[] = {99, -117, 107, -42, 18, 16, 76, 65, 59, -29, 125, -102, -34, -46, 11, 29, 35, -112, -109, 115, -68, -1, -87, 16, -90, 62, 48, -126, 117, 83, 60, -29, -100, 52, 97, -22, -53, 123, -20, 67, 59, -72, -108, 114, 43, -99, -24, 124, 81, -77, -27, -50, -19, 7, 126, -23, -105, 16, 67, 97, -30, -57, -7, -64, -18, -6, 105, 9, -7, 97, -48, 65, -35, -81, 109, 62, -111, 29, -35, -125, 19, -124, -96, -62, -43, -82, 51, -43, -40, -101, -42, -94, 22, 83, -117, -105, -99, -45, 80, 120, 17, 31, 11, -62, 102, -122, 120, 59, 111, 44, -59, -60, -41, -69, 42, -33, 76, 19, 37, 116, 52, -27, -13, -107, -103, 36, -124, -125, -87, -84, -123, 57, -79, 123, -112, -20, 66, -117, 104, -76, 37, 117, 38, 26, -99, -93, -116, -27, 119, 52, 66, -110, 2, 43, -37, 48, 76, 58, 16, -24, -69, -89, -5, -26, 11, -16, -44, 33, 28, 44};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.3370840416157732);
    msg.setSource(25374U);
    msg.setSourceEntity(90U);
    msg.setDestination(36280U);
    msg.setDestinationEntity(20U);
    msg.sys_src.assign("WJMMMRGGHUAYCTGFQXQQDGPSBFGCIOQXRTLUCGAPKJRTBAMDBHBAMRFZWZSYGLVSATFDIEUYUFYHPSMDRJSYPXXORINXCVEOSWDNZNIMCJEVLAUFZKISHYULLPYPZMHQXBRDSVSWHYETNOLNOOZVKEFUNTVLOFEKWGAOFJHXZOWBMFCHOLAIELLUKPAPTIGTBUJWQKVKIMZIZWNPCVDQNE");
    msg.sys_dst.assign("NHSDNWWYGFNSPNOMKGAZTZICGAMRYRARBFSPVTTKQSAZVQGLMXIGCBITZN");
    msg.flags = 76U;
    const signed char tmp_msg_0[] = {-113, 77, -111, 59, 80, -64, -37, 124, -70, 63, -64, 95, -111, -23, -73, -45, -110, -77, 62, 87, -38, 91, 4, -31, 20, 121, -32, 125, -27, 67, 50, -74, 117, 103, -83, 60, 8, -21, 116, 24, -107, 82, 17, -70, -7, 67, 60, 1, 101, -59, -45, -21, 25, 61, 87, -37, 101, 116, -75, -15, 64, 29, 34, 8, 13, 52, -85, 102, -56, 35, 100, -12, 39, -26, -113, 97, -8, -53, -20, -5, 54, 17, -62, -3, -76, 12, -121, -70, -58, 41, -121, -84, 107, 111, -3, 88, 50, -23, 47, 11, -85, 79, -43, 40, 88, -80, -124, 61, 50, -31, -60, 83, 107, 117, 9, 124, -88, 52, 125, 88, -88, -107, -59, -116, -128, 96, 36, -87, -65, 96, 76, -21, 103, -125, 77, 65, -31, -51, 47, -62, 24, 86, -14, -36, -76, 82, -4, -84, 120};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.020953861752827763);
    msg.setSource(35640U);
    msg.setSourceEntity(196U);
    msg.setDestination(29736U);
    msg.setDestinationEntity(154U);
    msg.sys_src.assign("GLVHQOYGPWLMPEQJDCZOHPOGISIUOZLKZGWSUOCCXXSLFWTCKEUATVAXCZFJVHAKOUITNRTLHBVPRIYGFYDSRIZMBAUTNUGYGKOTVPCIEBCXBVYWBNNXQHKDRQICLWVDMKTUIZFKCFFJQMYAXMXRVRJOEYWYTZNFKLNPTSEQMOWZKMAQJFOSJJGANIGBRWXPPNURV");
    msg.sys_dst.assign("UAETECYSGEHOURJMQQEZIKZQJLFNUXYHDMLG");
    msg.flags = 217U;
    const signed char tmp_msg_0[] = {22, -77, 1, 2, 6, 5, 23, -97, 7, -19, -73, 37, 45, 54, 15, -99, 109, 20, -75, 126, 38, 14, 67, -44, -35, -103, -124, -29, 75, -83, -20, -54, 53, -121, 36, -126, -62, 89, 18, 53, -75, -50, -17, -115, 85, -57, 12, 112, 122, -86, 12, 17, -111, 97, 11, -115, -23, 72, 54, 2, 75, 101, -36, 20, -23, 81, 57, 75, -86, -95, 107, -20, -66, -108, 30, 68, 46, 1, 86, -36, 57, -95, 25, -115, -20, 48, -10, -20, -31, 49, -123, 2, 45, -110, 85, 62, -77, 42, -30, 45, -72, 94, -15, 3, 82, 107, 110, -127, 61, -51, -29, -74, 71, 68, 106, 74, -14, -37, 105, -33, 102, 116, 68, -85, -104, -78, 108, -56, 94, -87, -89, -62, -71, 34, 125, 73, 81, -61, 64, -80, 26, -85, 3, -97, -90, -26, 51, 76, -61, -84, 86, 92, -6, -124, 83, -63, 38, 93, -35, -25, -117, 93, 52, -27, 89, 92, 80, 6, 59, -70, 113, 46, 122, -11, 50, -68, 100, -91, -36, 87, -12, 37, -91, 78, -120, 110, 105, 66, 97, 120, 2, -95, 22, -20, -12};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.9564398194588505);
    msg.setSource(6876U);
    msg.setSourceEntity(120U);
    msg.setDestination(30777U);
    msg.setDestinationEntity(158U);
    msg.sys_src.assign("AMAMQFWJQKLIJGEADOICRUGJ");
    msg.sys_dst.assign("SZOPBFPENYHJMWKIMUDGJUTGWJJZVBOSBPERELXNCZWAFZDAH");
    msg.flags = 20U;
    const signed char tmp_msg_0[] = {18, 125, -6, 17, 84, 124, -110, 27, -51, -23, -71, 32, -54, 46, 23, -9, 119, 102, -109, -36, -16, -63, 80, -38, 101, 21, 50, -28, 103, -9, 46, -48, 84, 101, 54, -31, 126, 39, 121, 115, 16, 74, 87, -22, -45, 48, -84, -60, 116, 33, 70, 84, 111, -105, 40, -46, -99, 78, 64, 27, -36, 81, 10, 21, 124, 24, 66, 43, 70, -57, 43, 34, 92, -3, 119, -101, 48, 88, -97, 80, 101, 8, -70, 39, 27, -34, -112, -56, -82, 110, -89, -106, -50, 49, 112, 53, -3, 68, -104, 100, -5, 42, -57, -47, -100, -47, 16, 29, -20, -36, -59, -59, -80, 92, -79, -63, -41, -21, 4, 50, 96, -88, -10, -24, 41, 92, 39, -71, 75, 101, 21, -121, -46, 20, 102};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.020898912674988);
    msg.setSource(14539U);
    msg.setSourceEntity(40U);
    msg.setDestination(53466U);
    msg.setDestinationEntity(167U);
    msg.seq = 14080U;
    msg.value = 220U;
    msg.error.assign("RKYBDEUQRFBXKDRRONPQSHTKEHEIOQPMUJKHUWHFWRSYDBELQMFJMRWXNYWPBEZGGYFSVTDMXNAHWJCGTEZMUCDAAZTBTJHXIRWNQPAZZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.8410238268542883);
    msg.setSource(53367U);
    msg.setSourceEntity(81U);
    msg.setDestination(49258U);
    msg.setDestinationEntity(79U);
    msg.seq = 38299U;
    msg.value = 34U;
    msg.error.assign("PWXVAQFYPTSHQMERGXXGMZKKNFKXIFYYBOMZUHTCPZXNP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.6004193657825398);
    msg.setSource(18343U);
    msg.setSourceEntity(190U);
    msg.setDestination(53976U);
    msg.setDestinationEntity(0U);
    msg.seq = 25673U;
    msg.value = 158U;
    msg.error.assign("USOGRVQPEZWVGFCORLYAYCPBKAYYPCAEFYBRFUOYDWVGJRKKIKZWQOSZUTZVZKITTAJNNHJDVHCRNXOQIJMLXSAAMDUFAPQMKHIHXJTDKJOYWXZCT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.2967072035014561);
    msg.setSource(23462U);
    msg.setSourceEntity(189U);
    msg.setDestination(46255U);
    msg.setDestinationEntity(32U);
    msg.seq = 33168U;
    msg.sys.assign("UUFFWDDQMHSJXMXAPCDVXYUWFUQCWDLOUIENLQEOXGTKGPGAQTYAJCNSGGOKHIZLBAEZJENBVPRRRYMSMNETIJSJTZKDCYORNIDSKZVVQFFYHYPEFTWOBXWFXOXVRHMMU");
    msg.value = 0.18143978757439205;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.36048313174477487);
    msg.setSource(44045U);
    msg.setSourceEntity(94U);
    msg.setDestination(2941U);
    msg.setDestinationEntity(22U);
    msg.seq = 5483U;
    msg.sys.assign("KEGWYKJGUHREDQMDHNHSTLWQICAOZBVUGJPXWIVQFPSTOFNCLPXAOYGNTLWXICNGPJKFQXGRMRNFBJHDURDLUHLZFBBADMCRGREBVVAAYMHJGIUQTPTSYYEZEOMNKWZKWCQTMEATQCAYASXYNPZIHSZZVOPFSJHMREXVUBDZDKTTQFPPSCGEGYMSIYQVJZQXXLCFWHZNNOUJCUOXWUOOKKRJ");
    msg.value = 0.8721948206506932;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.7836832117528815);
    msg.setSource(22063U);
    msg.setSourceEntity(129U);
    msg.setDestination(1198U);
    msg.setDestinationEntity(66U);
    msg.seq = 32232U;
    msg.sys.assign("UAEBGQUWQIKSGOMXVSUPQEZLHZMJYLXGVZVABOPNMYGGJYHGNKKHRRUPFFTVDOABLYXVKEZDBIOJRCSOTEFSPUKEJCNMVULYPIABLHXIMLWAWZCLDDPWEMRRYBNPTCMPGSFCSTRKBFE");
    msg.value = 0.2640132630509213;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.18470997439125225);
    msg.setSource(43369U);
    msg.setSourceEntity(75U);
    msg.setDestination(49125U);
    msg.setDestinationEntity(55U);
    msg.seq = 37784U;
    msg.sys_dst.assign("NNMPEHQCHQIAOGLCAEMNXPEXNHRRCBXOZZVAZETY");
    msg.timeout = 0.10082321278631967;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.6102323164103717);
    msg.setSource(49321U);
    msg.setSourceEntity(161U);
    msg.setDestination(39839U);
    msg.setDestinationEntity(77U);
    msg.seq = 51801U;
    msg.sys_dst.assign("JUOGFDAWWADXU");
    msg.timeout = 0.7024739659514452;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.23406522615308822);
    msg.setSource(33827U);
    msg.setSourceEntity(165U);
    msg.setDestination(54205U);
    msg.setDestinationEntity(2U);
    msg.seq = 43628U;
    msg.sys_dst.assign("KNSTDVTXXVBAXZSRPZUBBAJ");
    msg.timeout = 0.7324520536896726;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.35441242800396144);
    msg.setSource(7703U);
    msg.setSourceEntity(136U);
    msg.setDestination(28822U);
    msg.setDestinationEntity(157U);
    msg.action = 224U;
    msg.longain = 0.3942619715238844;
    msg.latgain = 0.5084094903467425;
    msg.bondthick = 1715525570U;
    msg.leadgain = 0.3108288701259523;
    msg.deconflgain = 0.03154471051618202;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.7148806331716782);
    msg.setSource(59758U);
    msg.setSourceEntity(165U);
    msg.setDestination(31144U);
    msg.setDestinationEntity(241U);
    msg.action = 243U;
    msg.longain = 0.2580399711127218;
    msg.latgain = 0.22734571562583072;
    msg.bondthick = 391274549U;
    msg.leadgain = 0.8366439661292134;
    msg.deconflgain = 0.2962160964454046;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.7846787053687823);
    msg.setSource(57902U);
    msg.setSourceEntity(5U);
    msg.setDestination(13663U);
    msg.setDestinationEntity(91U);
    msg.action = 157U;
    msg.longain = 0.0309874780286874;
    msg.latgain = 0.3935277071001778;
    msg.bondthick = 95894981U;
    msg.leadgain = 0.0756802157285229;
    msg.deconflgain = 0.32051146962551846;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.6146233903252448);
    msg.setSource(24269U);
    msg.setSourceEntity(77U);
    msg.setDestination(27420U);
    msg.setDestinationEntity(84U);
    msg.err_mean = 0.7556786262840154;
    msg.dist_min_abs = 0.14290498630881487;
    msg.dist_min_mean = 0.014013203986490419;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.3303529126015262);
    msg.setSource(35849U);
    msg.setSourceEntity(175U);
    msg.setDestination(11300U);
    msg.setDestinationEntity(200U);
    msg.err_mean = 0.8670306054889642;
    msg.dist_min_abs = 0.9070208238925258;
    msg.dist_min_mean = 0.5603095887392818;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.8640872671175891);
    msg.setSource(16286U);
    msg.setSourceEntity(96U);
    msg.setDestination(23804U);
    msg.setDestinationEntity(40U);
    msg.err_mean = 0.3612191478648422;
    msg.dist_min_abs = 0.15284276208433656;
    msg.dist_min_mean = 0.9386247727914808;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.3025134160791242);
    msg.setSource(35305U);
    msg.setSourceEntity(93U);
    msg.setDestination(23414U);
    msg.setDestinationEntity(59U);
    msg.action = 74U;
    msg.lon_gain = 0.6207436058357036;
    msg.lat_gain = 0.5983506573566058;
    msg.bond_thick = 0.6346572841340727;
    msg.lead_gain = 0.0807381351936447;
    msg.deconfl_gain = 0.12233028641238741;
    msg.accel_switch_gain = 0.9966046494726498;
    msg.safe_dist = 0.34218979773400415;
    msg.deconflict_offset = 0.9027265151636334;
    msg.accel_safe_margin = 0.08678581408796349;
    msg.accel_lim_x = 0.6091607126395875;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.7073398876028351);
    msg.setSource(63592U);
    msg.setSourceEntity(224U);
    msg.setDestination(13401U);
    msg.setDestinationEntity(112U);
    msg.action = 223U;
    msg.lon_gain = 0.3779549932807329;
    msg.lat_gain = 0.8524895523490451;
    msg.bond_thick = 0.09965325733284447;
    msg.lead_gain = 0.14465739848283266;
    msg.deconfl_gain = 0.6892207357910232;
    msg.accel_switch_gain = 0.9885521912688313;
    msg.safe_dist = 0.367816599471666;
    msg.deconflict_offset = 0.2793637341047006;
    msg.accel_safe_margin = 0.14853279224345195;
    msg.accel_lim_x = 0.1632014281458346;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.872062670375599);
    msg.setSource(47677U);
    msg.setSourceEntity(108U);
    msg.setDestination(26696U);
    msg.setDestinationEntity(184U);
    msg.action = 44U;
    msg.lon_gain = 0.26828017171868823;
    msg.lat_gain = 0.47281841102767164;
    msg.bond_thick = 0.4832155008717378;
    msg.lead_gain = 0.29877409904390273;
    msg.deconfl_gain = 0.4098887172229442;
    msg.accel_switch_gain = 0.8353204036160594;
    msg.safe_dist = 0.7136249823502794;
    msg.deconflict_offset = 0.3269661138193283;
    msg.accel_safe_margin = 0.9376587559433175;
    msg.accel_lim_x = 0.7752709153643944;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.557082480018519);
    msg.setSource(31924U);
    msg.setSourceEntity(199U);
    msg.setDestination(56904U);
    msg.setDestinationEntity(140U);
    msg.type = 135U;
    msg.op = 218U;
    msg.err_mean = 0.4084043749802375;
    msg.dist_min_abs = 0.5691928626001512;
    msg.dist_min_mean = 0.10524332512762125;
    msg.roll_rate_mean = 0.6152002763271835;
    msg.time = 0.0756506448964469;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 55U;
    tmp_msg_0.lon_gain = 0.061143720723518924;
    tmp_msg_0.lat_gain = 0.5854708215347698;
    tmp_msg_0.bond_thick = 0.4625199159502472;
    tmp_msg_0.lead_gain = 0.7741619778198717;
    tmp_msg_0.deconfl_gain = 0.5687758417082804;
    tmp_msg_0.accel_switch_gain = 0.9235939501520777;
    tmp_msg_0.safe_dist = 0.39732751109685793;
    tmp_msg_0.deconflict_offset = 0.729946167281712;
    tmp_msg_0.accel_safe_margin = 0.3333698721019267;
    tmp_msg_0.accel_lim_x = 0.5036189374301393;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.730835191581885);
    msg.setSource(8824U);
    msg.setSourceEntity(7U);
    msg.setDestination(21402U);
    msg.setDestinationEntity(105U);
    msg.type = 242U;
    msg.op = 28U;
    msg.err_mean = 0.6870296580617717;
    msg.dist_min_abs = 0.10393003812706936;
    msg.dist_min_mean = 0.8558567300311944;
    msg.roll_rate_mean = 0.30144568217126366;
    msg.time = 0.6678891473893113;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 234U;
    tmp_msg_0.lon_gain = 0.6959088351940448;
    tmp_msg_0.lat_gain = 0.009007689285114306;
    tmp_msg_0.bond_thick = 0.5621781181613138;
    tmp_msg_0.lead_gain = 0.05723800743802265;
    tmp_msg_0.deconfl_gain = 0.7025033439581435;
    tmp_msg_0.accel_switch_gain = 0.08986981351519652;
    tmp_msg_0.safe_dist = 0.0993082218083482;
    tmp_msg_0.deconflict_offset = 0.21287291623159377;
    tmp_msg_0.accel_safe_margin = 0.6737771972649155;
    tmp_msg_0.accel_lim_x = 0.37080781501285165;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.3121826119480332);
    msg.setSource(464U);
    msg.setSourceEntity(204U);
    msg.setDestination(46997U);
    msg.setDestinationEntity(103U);
    msg.type = 231U;
    msg.op = 214U;
    msg.err_mean = 0.008212478554793567;
    msg.dist_min_abs = 0.7850308572858878;
    msg.dist_min_mean = 0.6321900928332101;
    msg.roll_rate_mean = 0.3213472406962252;
    msg.time = 0.271916398580769;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 166U;
    tmp_msg_0.lon_gain = 0.130660522191283;
    tmp_msg_0.lat_gain = 0.8081985821978132;
    tmp_msg_0.bond_thick = 0.16287085243408894;
    tmp_msg_0.lead_gain = 0.04855993997685959;
    tmp_msg_0.deconfl_gain = 0.644753480386803;
    tmp_msg_0.accel_switch_gain = 0.42167696431431845;
    tmp_msg_0.safe_dist = 0.5621426766067789;
    tmp_msg_0.deconflict_offset = 0.758592826947976;
    tmp_msg_0.accel_safe_margin = 0.35138285795376456;
    tmp_msg_0.accel_lim_x = 0.026239213428749575;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.34643298585082927);
    msg.setSource(35120U);
    msg.setSourceEntity(252U);
    msg.setDestination(12089U);
    msg.setDestinationEntity(38U);
    msg.lat = 0.9706338118796739;
    msg.lon = 0.34473178313240016;
    msg.eta = 3058926934U;
    msg.duration = 17782U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.4545217339949892);
    msg.setSource(58871U);
    msg.setSourceEntity(17U);
    msg.setDestination(18978U);
    msg.setDestinationEntity(57U);
    msg.lat = 0.4541649662971422;
    msg.lon = 0.8064334332583066;
    msg.eta = 1498167736U;
    msg.duration = 42986U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.5067949891454473);
    msg.setSource(7731U);
    msg.setSourceEntity(199U);
    msg.setDestination(58419U);
    msg.setDestinationEntity(119U);
    msg.lat = 0.4728174721455267;
    msg.lon = 0.8316563318854356;
    msg.eta = 3529131209U;
    msg.duration = 24635U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.13349513792500067);
    msg.setSource(63301U);
    msg.setSourceEntity(239U);
    msg.setDestination(30643U);
    msg.setDestinationEntity(31U);
    msg.plan_id = 17013U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.3396752735025975);
    msg.setSource(29581U);
    msg.setSourceEntity(27U);
    msg.setDestination(42709U);
    msg.setDestinationEntity(89U);
    msg.plan_id = 28653U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.5694109552831385;
    tmp_msg_0.lon = 0.14203583201489545;
    tmp_msg_0.eta = 4269562040U;
    tmp_msg_0.duration = 1516U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.48426073746405895);
    msg.setSource(55449U);
    msg.setSourceEntity(162U);
    msg.setDestination(35292U);
    msg.setDestinationEntity(15U);
    msg.plan_id = 59268U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.024543752396050555);
    msg.setSource(61235U);
    msg.setSourceEntity(90U);
    msg.setDestination(43459U);
    msg.setDestinationEntity(39U);
    msg.type = 174U;
    msg.command = 253U;
    msg.settings.assign("IRJOQVUWWDHNPAYBNYGTSFOMXPRZLDMMCQENCKDYRVKTFGAWIJWCUDKQZJRKNMHTBRXADTNDGSNRSVEIGPSTEAQKLFEUEVKXYYUBIYRLBXBQZZBENZOHUPTXMDSQEXUCTUSQYPBJLLERPSZFSAGBTYZLPLXDHPXCSJCIVJVMWAHWJBWFIKIWSFCUOJJGZCVIDVNUOFGTNPZHBWHXGKYOFNK");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 54166U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.23110688592086204;
    tmp_tmp_msg_0_0.lon = 0.057862633049249546;
    tmp_tmp_msg_0_0.eta = 3926683652U;
    tmp_tmp_msg_0_0.duration = 6485U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("FBVPNORATLKHJDPFPZIHSHOJLDUVACAPUUNHRNAEYBYIMHSFGSYRSGWJTKRSKCWTFIUZBIXHZKHQSZEAGWXEFHXQTTQJBDROWNASDZNUBGDYYOMXTNTUZGWQYCQVFXJKENEKRYQMKOFMHLZOFNSTPLLXMBGCOMFYJKWABIIXIUWZYKR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.813671534524905);
    msg.setSource(21680U);
    msg.setSourceEntity(22U);
    msg.setDestination(12730U);
    msg.setDestinationEntity(205U);
    msg.type = 198U;
    msg.command = 129U;
    msg.settings.assign("SUOLBSGJQDFCFNOVUQSWMFE");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 57095U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.7228913560396426;
    tmp_tmp_msg_0_0.lon = 0.5938046568263411;
    tmp_tmp_msg_0_0.eta = 3387281291U;
    tmp_tmp_msg_0_0.duration = 18044U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("UCMJTJNCURYDZPPUQLQCDOQGMIYNADBOERFBCCVXZPAGLUAQYWVLPUPXTJCKJCGLTZFYWRTMNWAITTDBNLJMXKWVOBGEJHYVEIDPQUQEJAHEWRNTUSXXTBWOPEHMFOGJSNAZESLABPGOWERKMFNXMHRAIZMDIDGUITREBUHFRVXFRVKOKDDMBLOY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.6780935106326463);
    msg.setSource(51886U);
    msg.setSourceEntity(205U);
    msg.setDestination(51424U);
    msg.setDestinationEntity(216U);
    msg.type = 132U;
    msg.command = 81U;
    msg.settings.assign("XJMZWBXFVSRPFHIKDFYKKJYMVOVDBYXLYIMEMILVVONLBQEBWWCBLEAHSZQXXRHOUVLJPTDYAPQHIGENKOUOKG");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 56178U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.10885992099275699;
    tmp_tmp_msg_0_0.lon = 0.844613082452794;
    tmp_tmp_msg_0_0.eta = 457407118U;
    tmp_tmp_msg_0_0.duration = 36284U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("LWLLWJMGYUVIIBHHYVNAQJLJISJUGGBZKWKTKAFNGOVRKHVDLQAVAXZLDUOGPZPPKTIGUQOYCFFFKCQHWUASYIKFPQRTKGXFHUWDXZF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.9905949585898381);
    msg.setSource(47377U);
    msg.setSourceEntity(1U);
    msg.setDestination(64661U);
    msg.setDestinationEntity(217U);
    msg.state = 146U;
    msg.plan_id = 39767U;
    msg.wpt_id = 53U;
    msg.settings_chk = 64948U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.8015405899948009);
    msg.setSource(42033U);
    msg.setSourceEntity(202U);
    msg.setDestination(20192U);
    msg.setDestinationEntity(54U);
    msg.state = 114U;
    msg.plan_id = 34543U;
    msg.wpt_id = 175U;
    msg.settings_chk = 46316U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.1332147203820142);
    msg.setSource(585U);
    msg.setSourceEntity(47U);
    msg.setDestination(53029U);
    msg.setDestinationEntity(72U);
    msg.state = 128U;
    msg.plan_id = 29776U;
    msg.wpt_id = 18U;
    msg.settings_chk = 18U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.4237969153006972);
    msg.setSource(30814U);
    msg.setSourceEntity(203U);
    msg.setDestination(34786U);
    msg.setDestinationEntity(80U);
    msg.uid = 105U;
    msg.frag_number = 100U;
    msg.num_frags = 21U;
    const signed char tmp_msg_0[] = {20, 30, 112, 123, 46, 25, -47, -115, 42, 80, -67, -100, -14, 85, -101, -109, 46, -57, -127, -93, 104, -103, 11, 125, 121, -74, -56, 14, 50, -121, -120, -25, 118, 28, -115, 98, 87, -70, -108, 20, 42, -74, -27, -8, 59, 113, 39, 116, -14, -23, 108, -66, 107, -79, 89, 69, 31, 51, -49, 92, -23, 20, 76, -59, -46, 4, -108, -4, -54, -61, -98, 54, 98, 33, -66, 62, 52, 91, 94, 105, 80, -107, -122, 111, 11, -125, 42, -4, -61, -103, -39, -113, -87, -106, -92, 84, 22, 58, 35, 35, -50, -65, 19, -111, 37, -19, -68, 111, 32, 82, 10, -125, -85, 36, -57, -126, 23, -51, -80, 121, -91, 90, 105, 29, -119, -45, 93, 16, 44, 74, 47, 9, -5, 84, 68, 79, -69, -43, -116, -101, 97, -3, -103, 15, -48, -119, -50, 13, 9, -126, -80, 60, -112, 46, 45, 87, 122, 93, -7, 47, -65, 47, 98, 114, 86, -4, 124, -82, -117, 105, -127, 81, -120, 48};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.5321197495822159);
    msg.setSource(27912U);
    msg.setSourceEntity(197U);
    msg.setDestination(13607U);
    msg.setDestinationEntity(186U);
    msg.uid = 77U;
    msg.frag_number = 133U;
    msg.num_frags = 80U;
    const signed char tmp_msg_0[] = {-96, 104, -111, -34, 100, -10, -80, 7, 83, -56, 13, 118, 5, -107, -123, 45, 36, 65, -107, 13, -44, -24, 14, 98, 66, -10, -44, -29, -127, 116, 124, 54, 11, 111, 79, -58, -115, 123, -48, 52, -123, -110, 108, 125, -122, -56, -127, 72, -53, -60, 116, 98, 57, 83, -77, 64, 57, -59, 14, 72, -62, 21, 85, -27, -18, 85, 66, -6, 93, 57, -92, -88, -111, 42, -122, -107, -63, -97, 102, -48, 13, -47, 39, 13, -24, 117, -93, -105, 74, 36, -30, 28, -84, -54, -39, -59, 1, -89, 15, -106, -27, 124, -106, -85, 77, -99, -68, -84, 58, 67, 36, -97, 102, 48, -80, -3, -15, -44, 54, 23, -64, -102, -24, 86, -101, 120, 63, 100, -8, -61, -97, 50, -41, 119, 50, -94, 6, -46, 125, 102, 94, 75, -9, -31, 73, 32, 70, 64, -18, 58, -54, 71, 121, -70, 80, 116};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.8805419233386155);
    msg.setSource(63994U);
    msg.setSourceEntity(29U);
    msg.setDestination(64642U);
    msg.setDestinationEntity(204U);
    msg.uid = 34U;
    msg.frag_number = 57U;
    msg.num_frags = 241U;
    const signed char tmp_msg_0[] = {54, 52, 41, -93, 46, 52, 63, 120, -98, 42, 47, -6, -91, -101, 91, 65, -105, -53, 106, -57, 58, 3, 122, 25, 17, -30, 53, -41, 7, 63, -72, 90, 4, -90, -61, 57, 14, -58, 59, 122, -120, -91, -127, 125, -104, 20, 47, -42, 85, 66, -68, -107, 65, 53, 45, 2, -121, -16, -46, 88, 28, -126, 114, 118, 90, -1, 55, 40, -97, -40, -30, -114, -91, 106, 98, -57, -32, -26, -122, -86, 52, 56, -3, -39, 98, 114, -8, -41, -11, 68, -81, -42, -39, 70, 64, -113, -113, -21, 37, -8, -33, -2, -3, 70, -57, 62, -1, 61, 111, 65, 61, 28, -120, 99, 49, 73, -115, -66, -71, -35, 118, 30, 51, -58, 121, -30, 104, 99, -44, -37, 115, -30, 70, -41, -87, 2, -91, 112, 85, -9, 113, 33, 21, -34, -76, -35, 81, 46, -54, 126, -56, -95, 64, -76, -11, -2, -115, -118, -18, 94, -81, -45, -121, -7, -43, 74};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.6422360058599844);
    msg.setSource(4303U);
    msg.setSourceEntity(7U);
    msg.setDestination(29223U);
    msg.setDestinationEntity(188U);
    msg.content_type.assign("LMGDYMYOZEOQUSKMFNBJMPTDRFBBQRCYMTWEFTRVRLURQMCWNQIVHZQSAVABLDXIJVEQNYZKGWFXKPFSDHNBKWWVNQHIJINWCPLOEDGZOOIYLUSWPPAYLQTPMEKSACUTDDXSQH");
    const signed char tmp_msg_0[] = {-67, 54, -106, 75, 42, -47, -117, 1, -103, 20, 50, 101, 81, -36, 16, -128, -65, 121, -44, -48, -33, 35, -25, 112, 28, 122, -79, 96, 80, 52, 32, -20, -101, -85, -64, 42, 105, -30, 122, 27, -90, -4, 85, -118, 45, -33, -14, 53, -109, 107, 101, 83, -17, 14, -43, -49, 24, 19, 58, 19, -31, 19, -57, 104, 78, 18, -73, -122, -128, 102, -1, -115, 70, -36, 70, 22, -72, -23, 99, 32, 106, 21, 40, 48, -19, 77, 47, -13, 122, -73, 106, -128, 121, -22, 106, -99, 1, -5, 4, -99, 126, 73};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.6424697494922784);
    msg.setSource(41025U);
    msg.setSourceEntity(172U);
    msg.setDestination(60988U);
    msg.setDestinationEntity(52U);
    msg.content_type.assign("BIBGQXSVODCMIWPCUOEDAEXXLVYRNLCKQRBEGKRLBIWOYQRDFAQFNDIMWWMBEVAWZYQHUYTQGFSJYOCBPVKGPKKIPLTHXINEFGMDOWJXRLCZCKCJBXZWVIANVSMDUCNLRAVGDTEKDWHLUHSKPIZVNUKBZODJSFADPRFHOZPIMYOCALQLYZBEUEUQPKVSUEYOGRYTPGTXTOGT");
    const signed char tmp_msg_0[] = {45, 65, 32, -88, -108, 119, -70, 118, 11, -41, 9, 97, -61, 77, 39, -124, 99, 17, 14, -79, 65, -28, 3, -85, 76, -24, 46, 48, -103, 32, -118, -126, 90, -66, 117, -114, 14, -68, 68, -41, 62, 20, 68, -87, 124, -36, 99, -72, 120, 2, -67, 20, 82, 25, -69, 25, -83, 8, 84, -17, -49, 53, -28, -82, -100, -108, 90, -25, -122, 37, 92, 106, 48, 23, -86, -61, 86, -70, -23, -29, 29, 53, 53, -35, -67, -6, 115, -40, 68, 26, 86, -90, -65, 77, 82, -99, 46, -89, 101, 91, -26, 80, 70, 34, -46, 53, -34, 22, 60, -87, -54, 124, 73, 98, -40, 1, 78, -115, 112, 94, 82, -15, 119, -67, 71, 93, -38, -103, -101, 40, 102, -5, -127, -59, 6, -50, 91, 38, -114, -57, -54, 7, -13, 57, -69, 87, -71, 67, 110, -32, -104, -79, 69, 105, -45, -87, -68, -15, -89, -7, 106, -9, 91, 47, 44, 65, 63, -10};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.4265870460136473);
    msg.setSource(14181U);
    msg.setSourceEntity(104U);
    msg.setDestination(1380U);
    msg.setDestinationEntity(8U);
    msg.content_type.assign("OPACQLRPASEBMFXVOYSKDTMOKPHDJCFHWBTAYDNBJHRQSTUXGOMPNNBTFGYGBRWUFCWIRRZLDPIUESCKZETZGKWSEZGUFIKEMZWNQHZCVFMYATJKGZIVMNGSDVIOJCKKLOJDVLBLJTQULEOFHZQPJVMURAWINARHTJWPGBDVDCJVCGUM");
    const signed char tmp_msg_0[] = {-96, -105, -13, 40, 49, -100, 9, -13, 94, 48, -51, 65, 105, 11, 58, -10, 42, -6, 115, -9, 18, 0, -116, -23, -14, -110, -103, -124, -41, -5, -115, -3, 33, 61, -11, 72, -122, -13, 7, -43, 72, 100, 23, 116, 111, -69, -20, -8, -63, -89, -53, -37, 49, -108, -63, -95, -30, 102, -49, -92, -71, 103, 11, -22, -70, -79, 98, 17, 40, 113, -73, -68, -45, 78, 55, 67, 18, -96, -124, -63, 83, -46, -71, -18, -63, -54, -4, 31, 54, 104, 94, 76, 67, 11, 1, -6, 54, -67, -53, -45, -107, -112, 1, -44, 41, -90, 107, -73, -39, -117, 101, 66, 97};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.43945311908913853);
    msg.setSource(2441U);
    msg.setSourceEntity(38U);
    msg.setDestination(44458U);
    msg.setDestinationEntity(28U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.47382925500464224);
    msg.setSource(13880U);
    msg.setSourceEntity(249U);
    msg.setDestination(53694U);
    msg.setDestinationEntity(167U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.871942441119839);
    msg.setSource(11323U);
    msg.setSourceEntity(134U);
    msg.setDestination(43661U);
    msg.setDestinationEntity(58U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.7721473085064922);
    msg.setSource(55781U);
    msg.setSourceEntity(103U);
    msg.setDestination(63739U);
    msg.setDestinationEntity(93U);
    msg.target = 61770U;
    msg.bearing = 0.15755488274475749;
    msg.elevation = 0.15931926334999125;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.42242497614197017);
    msg.setSource(30616U);
    msg.setSourceEntity(90U);
    msg.setDestination(36179U);
    msg.setDestinationEntity(204U);
    msg.target = 17887U;
    msg.bearing = 0.3484612480190361;
    msg.elevation = 0.4930864616919576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.5386041746166905);
    msg.setSource(26922U);
    msg.setSourceEntity(21U);
    msg.setDestination(35275U);
    msg.setDestinationEntity(168U);
    msg.target = 13768U;
    msg.bearing = 0.06868509467901274;
    msg.elevation = 0.30181580047062784;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.5798090446665167);
    msg.setSource(39583U);
    msg.setSourceEntity(203U);
    msg.setDestination(34374U);
    msg.setDestinationEntity(153U);
    msg.target = 15549U;
    msg.x = 0.8770807580608894;
    msg.y = 0.8113343896589288;
    msg.z = 0.037686689692632;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.41080235338342674);
    msg.setSource(3869U);
    msg.setSourceEntity(172U);
    msg.setDestination(29888U);
    msg.setDestinationEntity(182U);
    msg.target = 15923U;
    msg.x = 0.19727332751277993;
    msg.y = 0.1243664920997154;
    msg.z = 0.6280923030190028;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.21440205637096088);
    msg.setSource(4491U);
    msg.setSourceEntity(36U);
    msg.setDestination(39141U);
    msg.setDestinationEntity(53U);
    msg.target = 44910U;
    msg.x = 0.5805196808121382;
    msg.y = 0.39046727130459746;
    msg.z = 0.4153892549209036;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.7749775170331981);
    msg.setSource(57656U);
    msg.setSourceEntity(156U);
    msg.setDestination(30265U);
    msg.setDestinationEntity(172U);
    msg.target = 56285U;
    msg.lat = 0.8741560864041781;
    msg.lon = 0.7008029636278617;
    msg.z_units = 92U;
    msg.z = 0.6552452793230862;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.816881410895494);
    msg.setSource(48373U);
    msg.setSourceEntity(12U);
    msg.setDestination(37170U);
    msg.setDestinationEntity(140U);
    msg.target = 19196U;
    msg.lat = 0.6650231723094144;
    msg.lon = 0.20339320593207177;
    msg.z_units = 2U;
    msg.z = 0.7252021059721917;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.20790064522063856);
    msg.setSource(63752U);
    msg.setSourceEntity(203U);
    msg.setDestination(54790U);
    msg.setDestinationEntity(151U);
    msg.target = 25074U;
    msg.lat = 0.9997799028954819;
    msg.lon = 0.4027323936862529;
    msg.z_units = 182U;
    msg.z = 0.604229334286281;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.10537413137104157);
    msg.setSource(60214U);
    msg.setSourceEntity(150U);
    msg.setDestination(54754U);
    msg.setDestinationEntity(98U);
    msg.locale.assign("NGCQXGSPMPWRASHKERKPFVGKINEXEJXLIOSRYKSUGCYMYDARNSBONQABDMCFJVLDXCEBXZZKLSWMTKHYYVKJNUXVQRBAPMZOCSWHBWAYGAOA");
    const signed char tmp_msg_0[] = {-13, 34, 49, -36, -116, 49, -2, 91, 2, 110, -105, -46, -47, -64, 33, -98, -70, 22, 114, -111, -38, -1, 53, -18, -108, -105, -108, -127, 29, 115, 52, 1, 91, 43, -50, 25, -79, 110, 92, -19, -28, -92, 55, 70, 85, -95, 96, 63, -8, -41, -90, 49, 38, 45, 15, -30, 109, -64, 52, -90, 89, 82, -73, -114, -71, 32, -85, 88, -105, 123, 38, 55, -98, -102, 98, -54, -29, 27, -25, 112, -125, -15, -12, 24, 75, 36, 35, -78, 77, -75, -110, 116, 111, 95, -46, -55, 97, -46, 61, 95, 65, -39, 104, 23, -123, -8, -6, -46, -15, 58, 85, -47, -76, 12, 76, -105, -123, -110, 69, -94, 114, -112};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.37749500630277244);
    msg.setSource(60718U);
    msg.setSourceEntity(116U);
    msg.setDestination(7428U);
    msg.setDestinationEntity(227U);
    msg.locale.assign("MENQYIXYRSIRTVJHCDRMOTZINWEDMJPPIJNJYPQNZUGXFXQNBHDGAILCNOEPRLTTCMDEVKOOPFHBQWFTFLRGGXZVWHSLXXGKTPIHBYJBTNAAVYUZCFYQRKW");
    const signed char tmp_msg_0[] = {106, 57, 42, -91, 44, 72, 114, 11, -124, -60, 35, -45, 62, 13, -100, 126, -29, 69, -89, -45, -47, -55, 73, -47, -78, 99, -113, -60, -115, 23, 42, 35, -125, 45, 0, 116, -21, -22, -37, -112, -33, 94, 69, 23, 64, 117, 53, 36, -22, 102, -106, 123, -128, -8, 54, 24, -99, -100, 99, -3, 112, 110, 27, -104, 22, -42, 7, 73, 30, -46, 93, -127, 60, 37, -7, -72, 53, -18, 73, -107, 72, -31, 50, 16, -29, 48, -86, 52, 17, -117, -99, 18, 126, -64, -88, -67, -25, 113, -31, -118, -92, -105, 57, 104, -67, -27, 110, 110, 108, 120, -74, -58, 15, 84, 8, -16, -55, -21, -123, 114, 8, 54, -55, 13, -28, -94, 16, -103, -86, -43, 17, 34, 69, 99};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.83732928969116);
    msg.setSource(38457U);
    msg.setSourceEntity(90U);
    msg.setDestination(29902U);
    msg.setDestinationEntity(22U);
    msg.locale.assign("NEXVAGQWAFNOULMIPSVOKSWZIRNIHLKJDAFLDYPXXZNOCGMRKFEGTQYJLBNXLZCTBIQZHICTJTYSPCHJUSFFSVVLEXWTHOQTSGFRGYAZEQMRWWDGKZWMMSOERLICMOTQVNSBBPQMPTEGBUZU");
    const signed char tmp_msg_0[] = {-94, 114, 27, 112, -16, -75, -92, -62, 62, -45, 71, 39, -2, 23, 19, 113, -55, -66, -8, -52, -87, 117, -28, -21, 94, 77, -47, 114, 14, -122, -114, -74, -58, -41, -101, 99, -43, -103, -112, 42, -67, -106, -101, -23, 50, -29, 22, -20, -120, -7, -96, -109, -24, -72, 58, 81, -36, 74, -83, -123, 118, 126, -15, 82, -96, -87, -105, 81, 24, 125, 53, -59, -50, -59, 108, 102, -33, 83, -75, 49, -19, 104, 99, 8, -34, 96, 75, 22, 107, 110, 12, -62, -105, 89, -108};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.7088598291057246);
    msg.setSource(59905U);
    msg.setSourceEntity(147U);
    msg.setDestination(59976U);
    msg.setDestinationEntity(246U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.01152585673777462);
    msg.setSource(25912U);
    msg.setSourceEntity(0U);
    msg.setDestination(16928U);
    msg.setDestinationEntity(236U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.6540505595507722);
    msg.setSource(26712U);
    msg.setSourceEntity(65U);
    msg.setDestination(47194U);
    msg.setDestinationEntity(165U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.9541855935763267);
    msg.setSource(7211U);
    msg.setSourceEntity(202U);
    msg.setDestination(46306U);
    msg.setDestinationEntity(181U);
    msg.camid = 16U;
    msg.x = 3058U;
    msg.y = 13821U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.3253573853470739);
    msg.setSource(13109U);
    msg.setSourceEntity(43U);
    msg.setDestination(52563U);
    msg.setDestinationEntity(30U);
    msg.camid = 30U;
    msg.x = 63131U;
    msg.y = 307U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.42024066790104775);
    msg.setSource(51305U);
    msg.setSourceEntity(164U);
    msg.setDestination(9805U);
    msg.setDestinationEntity(216U);
    msg.camid = 8U;
    msg.x = 26899U;
    msg.y = 48839U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.7857386381904057);
    msg.setSource(19655U);
    msg.setSourceEntity(39U);
    msg.setDestination(17374U);
    msg.setDestinationEntity(194U);
    msg.camid = 181U;
    msg.x = 17109U;
    msg.y = 57461U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.1329882478743477);
    msg.setSource(36570U);
    msg.setSourceEntity(153U);
    msg.setDestination(49268U);
    msg.setDestinationEntity(188U);
    msg.camid = 68U;
    msg.x = 24811U;
    msg.y = 30243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.11282769365333978);
    msg.setSource(64157U);
    msg.setSourceEntity(204U);
    msg.setDestination(52684U);
    msg.setDestinationEntity(0U);
    msg.camid = 42U;
    msg.x = 11187U;
    msg.y = 37061U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.1838766696369888);
    msg.setSource(56654U);
    msg.setSourceEntity(218U);
    msg.setDestination(13109U);
    msg.setDestinationEntity(179U);
    msg.tracking = 48U;
    msg.lat = 0.5871535796697643;
    msg.lon = 0.4653284096427256;
    msg.x = 0.7448680074448208;
    msg.y = 0.8062539180759998;
    msg.z = 0.4158130500404298;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.21630332591010715);
    msg.setSource(19531U);
    msg.setSourceEntity(176U);
    msg.setDestination(11690U);
    msg.setDestinationEntity(52U);
    msg.tracking = 87U;
    msg.lat = 0.06998416008703601;
    msg.lon = 0.4206561989587051;
    msg.x = 0.43919453459124735;
    msg.y = 0.14670111940773112;
    msg.z = 0.7403322614896525;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.8082019035716786);
    msg.setSource(15070U);
    msg.setSourceEntity(10U);
    msg.setDestination(47950U);
    msg.setDestinationEntity(239U);
    msg.tracking = 184U;
    msg.lat = 0.7725167170353641;
    msg.lon = 0.809510924833487;
    msg.x = 0.6342631566232587;
    msg.y = 0.39891685784239184;
    msg.z = 0.6673715821196063;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.47764616260193826);
    msg.setSource(50993U);
    msg.setSourceEntity(126U);
    msg.setDestination(28234U);
    msg.setDestinationEntity(169U);
    msg.target.assign("PTVAKBHYIHGFZUFPHYCJOFNVEGOYBPSTRVGKQZOTNJLCKTGRFIHDDAEZIKXMMRLSAISSBIV");
    msg.lbearing = 0.289292185339997;
    msg.lelevation = 0.011517042452423798;
    msg.bearing = 0.3944258320309564;
    msg.elevation = 0.23075172326411764;
    msg.phi = 0.08528023070716584;
    msg.theta = 0.015603007324346163;
    msg.psi = 0.1816695858361741;
    msg.accuracy = 0.24380277956692709;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.7995984917601389);
    msg.setSource(13707U);
    msg.setSourceEntity(3U);
    msg.setDestination(44109U);
    msg.setDestinationEntity(215U);
    msg.target.assign("DLHOXLCITUJDORFVDWFKKZXCUOURKCBPJGLGZIBUOHSXIZFQPJAWIZXBNVWAURUKRSXKHDPTWTEZQRBHBTVLPXKLIJZFEDKSMTZUQDHFQPNJWJHIMQEMWGHCZVABNDYYGTAKRNYGCRHVTXPNGRJSU");
    msg.lbearing = 0.5489115985542135;
    msg.lelevation = 0.4447304236244387;
    msg.bearing = 0.3325038718820893;
    msg.elevation = 0.9303774689202357;
    msg.phi = 0.15328042871532588;
    msg.theta = 0.7742369259144597;
    msg.psi = 0.28797499519027714;
    msg.accuracy = 0.07536442006281219;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.2359665796828596);
    msg.setSource(8176U);
    msg.setSourceEntity(215U);
    msg.setDestination(37472U);
    msg.setDestinationEntity(83U);
    msg.target.assign("RMEFPOPFJCAICPZIWSNRCGADYFPTSHKXPYWGFOXJAOBNUPMMYGXENWQKZEDOBOSLBQUNFZCJQPBGBTZXSKRLQHKMFPVSLBXDRIAYLISKMQYCGYCVWE");
    msg.lbearing = 0.12559376553458568;
    msg.lelevation = 0.4125361045549204;
    msg.bearing = 0.8109942900581785;
    msg.elevation = 0.45573450929948756;
    msg.phi = 0.8219116926229921;
    msg.theta = 0.7010568090710165;
    msg.psi = 0.3822456986992999;
    msg.accuracy = 0.5274179719475923;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.3907298691580269);
    msg.setSource(29006U);
    msg.setSourceEntity(186U);
    msg.setDestination(49600U);
    msg.setDestinationEntity(16U);
    msg.target.assign("AUIWHFBBGTKNPNFNOLBKZWVTAMBKEUVNIXCHOEYICQVGIZWENISYMSJTOZDQBJAGMXVXRENRQACFDR");
    msg.x = 0.05260226580797256;
    msg.y = 0.4155607002048315;
    msg.z = 0.9229584337466538;
    msg.n = 0.448525588100368;
    msg.e = 0.9016036309461595;
    msg.d = 0.25494911073715343;
    msg.phi = 0.508294252528332;
    msg.theta = 0.3561478487062544;
    msg.psi = 0.7877050406948648;
    msg.accuracy = 0.12629304648912865;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.29070311458230536);
    msg.setSource(31500U);
    msg.setSourceEntity(102U);
    msg.setDestination(48350U);
    msg.setDestinationEntity(226U);
    msg.target.assign("HCFSDWNRSDSSNXCKYWRJLPOQZVQACJEQGYIRFDVTIFDVFQHUSTEWHLPRTBDNMNVXFSQIAOWIYBMOKABYZBMGFPTRDHRIRLOCGAMXKNGYWGZIZOUGATDQYZBTUXODXKPCLQXWJQTUCGCMUOUPIHEQZJCTBYYRDJNZZNXAMDIWWLUBLKBHLWROIJVNOGZZYPTUJJQYEVHHPIWPSMLEXEAKVLCMNBVXXFPVKPMTMAEGFJHBKKEV");
    msg.x = 0.2681289984831571;
    msg.y = 0.16040484058535887;
    msg.z = 0.802473002753416;
    msg.n = 0.6006286260699433;
    msg.e = 0.5637166748455709;
    msg.d = 0.05449699351768378;
    msg.phi = 0.13982607122106794;
    msg.theta = 0.7952494904553541;
    msg.psi = 0.4608598949445867;
    msg.accuracy = 0.23581406078534262;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.8285303388059744);
    msg.setSource(23003U);
    msg.setSourceEntity(128U);
    msg.setDestination(53958U);
    msg.setDestinationEntity(19U);
    msg.target.assign("KIMRQARVSYSDBNPSTDELBFYEMQIAGCTT");
    msg.x = 0.19457206279832384;
    msg.y = 0.6279227546067533;
    msg.z = 0.916402084931126;
    msg.n = 0.9931867414638956;
    msg.e = 0.523753964414011;
    msg.d = 0.907529435695456;
    msg.phi = 0.9749117819444089;
    msg.theta = 0.595745587750416;
    msg.psi = 0.9768979579634813;
    msg.accuracy = 0.6303042297145036;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.9909854333149435);
    msg.setSource(35002U);
    msg.setSourceEntity(95U);
    msg.setDestination(54672U);
    msg.setDestinationEntity(2U);
    msg.target.assign("DLZMAHHXKVMGIWJPDZQEEBBCYCVLJECMZEZGSJTSXUPOGKFWVFOWODIHFJOGVZUFQAYNXJDLVJVBKDLTZJPRNGKOGSSQNHWCYOZBZAPWZSVDVDYCNFBQVVBXRPHSINSFWGDCKHFTIKNXLWUNJTQ");
    msg.lat = 0.515500476059085;
    msg.lon = 0.7955603305338854;
    msg.z_units = 97U;
    msg.z = 0.47799369836351435;
    msg.accuracy = 0.40226820675750263;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.6369506661391305);
    msg.setSource(49612U);
    msg.setSourceEntity(40U);
    msg.setDestination(30261U);
    msg.setDestinationEntity(231U);
    msg.target.assign("QWBUTQLPLOGBETJYGSYVCDUKGMSNGNWCRVOXUMOPBEBSSTRDECTXTCADEMMVMHJPRICRLRDQHYF");
    msg.lat = 0.9648924242804149;
    msg.lon = 0.7979498075834234;
    msg.z_units = 175U;
    msg.z = 0.22213310884602788;
    msg.accuracy = 0.10849584933137268;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.4297188654193358);
    msg.setSource(3326U);
    msg.setSourceEntity(63U);
    msg.setDestination(41160U);
    msg.setDestinationEntity(13U);
    msg.target.assign("QMRAIKMDBJLHKKPGUUKRZPBXIWILENVLYSGLEMGEMHUOOKNTIHOMVKFCLWHNSGYPPJVBFSJZMBJFAIJSRRTJGMUWWVKSAECTAZSBDCPUDHDPDRGIATEMEPFJYLHOLMVBQBWYLHHPNPOYXJZFAEFOZ");
    msg.lat = 0.46114456369871293;
    msg.lon = 0.8609274370429946;
    msg.z_units = 150U;
    msg.z = 0.0023523992232159507;
    msg.accuracy = 0.050471725371276976;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.3353744261507299);
    msg.setSource(4610U);
    msg.setSourceEntity(27U);
    msg.setDestination(36811U);
    msg.setDestinationEntity(250U);
    msg.name.assign("XVNBCYMUVNPGCOZUHUWDRKBEAIBDEWXREBAVFLLDRNHTYFRPHYZISUXZSZCSSVLETAOZTDOXEFMDJPONXMWLHCMQPNNWGSEYKEQFOACIQWGXHZAQTSJTZTGFWQJBOHIVKGVCU");
    msg.lat = 0.8651100699811302;
    msg.lon = 0.009380043492634882;
    msg.z = 0.19719707196170122;
    msg.z_units = 43U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.012218811610963609);
    msg.setSource(55721U);
    msg.setSourceEntity(16U);
    msg.setDestination(42284U);
    msg.setDestinationEntity(43U);
    msg.name.assign("JKLKVDRBWPVEGOPCGZNLLOFHCITHWPCCXOBTBMURUYZTMGQRZIRQNUPZVQOAPFUTJYAWLDUVAERGCGYZGKYPFDCNTOYJRRXRYYNXPQMCRDAOSWMFLBYJEIMGKLJIBPQDEUFZKMHZUMIAHGNXZPLSBJEODMWXCTJTALBXGHHISZDKBOHYEQPAITWCHXJNQWNAMOEKZLVXFMWQNWDAENTUFRDHKQYDSBAIIKSVFXEW");
    msg.lat = 0.7694588521627855;
    msg.lon = 0.9828954036359288;
    msg.z = 0.2844496798633438;
    msg.z_units = 169U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.9475669302756485);
    msg.setSource(48786U);
    msg.setSourceEntity(209U);
    msg.setDestination(3484U);
    msg.setDestinationEntity(232U);
    msg.name.assign("NEPULAMDNSURWLTPZXFBGYSDKKXHTWEFQYECWOGUQAAAGRVCYGOVMKWBOEFWNSBSTLKFOHJOIMIJRDFUEXMQLQZIMDESLIDVXLVPTYBVMGVBOZYZSKNIBCPWCEJHMCHHXJXULLCUNZZBPHHXJTFKPGMAPTCDESAWDYJNQAPQRBJFHFNHPOIDJUIYTGUHBWDQTSEXVJGRROGPXKOSZRIIKZNAFTYZZVAUQRMYLKKQCFWVMVNWYGJOUQBCDE");
    msg.lat = 0.565553273705023;
    msg.lon = 0.2743376923952897;
    msg.z = 0.9915687549661889;
    msg.z_units = 61U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.02617205145025181);
    msg.setSource(28910U);
    msg.setSourceEntity(253U);
    msg.setDestination(56170U);
    msg.setDestinationEntity(130U);
    msg.op = 36U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("MKOGAFWWSFPJEE");
    tmp_msg_0.lat = 0.735796202532504;
    tmp_msg_0.lon = 0.9384326802842211;
    tmp_msg_0.z = 7.640396001062921e-05;
    tmp_msg_0.z_units = 126U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.30350279136056724);
    msg.setSource(60045U);
    msg.setSourceEntity(102U);
    msg.setDestination(44176U);
    msg.setDestinationEntity(201U);
    msg.op = 220U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.02927907790782247);
    msg.setSource(2568U);
    msg.setSourceEntity(160U);
    msg.setDestination(47781U);
    msg.setDestinationEntity(253U);
    msg.op = 111U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("JFNTESHSXPATMKTGZNVSFOJOCZAHJWKLPLZGAUKKGJWTMWSZXKWWWTSOPJGSQRCHNADKBAIVPINJPUMQYDNZLQQUEBNRRRMQELWAEKRDLJQPHYXSGASIUADEQCDGYBPYDEJCT");
    tmp_msg_0.lat = 0.4660343623478672;
    tmp_msg_0.lon = 0.2686698107305291;
    tmp_msg_0.z = 0.5951052427520506;
    tmp_msg_0.z_units = 75U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.11659921168001863);
    msg.setSource(46792U);
    msg.setSourceEntity(202U);
    msg.setDestination(49594U);
    msg.setDestinationEntity(85U);
    msg.value = 0.7965656365195258;
    msg.type = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.9285979532289595);
    msg.setSource(3385U);
    msg.setSourceEntity(229U);
    msg.setDestination(7682U);
    msg.setDestinationEntity(155U);
    msg.value = 0.11725273555768478;
    msg.type = 163U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.8414514029352913);
    msg.setSource(19733U);
    msg.setSourceEntity(22U);
    msg.setDestination(18219U);
    msg.setDestinationEntity(233U);
    msg.value = 0.3010145604536213;
    msg.type = 119U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.9049900503328174);
    msg.setSource(41493U);
    msg.setSourceEntity(226U);
    msg.setDestination(5591U);
    msg.setDestinationEntity(223U);
    msg.value = 0.8065493530861222;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.12470732808161933);
    msg.setSource(64296U);
    msg.setSourceEntity(230U);
    msg.setDestination(32656U);
    msg.setDestinationEntity(168U);
    msg.value = 0.4343346489750999;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.5533965946442508);
    msg.setSource(2561U);
    msg.setSourceEntity(78U);
    msg.setDestination(54U);
    msg.setDestinationEntity(159U);
    msg.value = 0.25720181918787877;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.18495511933466457);
    msg.setSource(46448U);
    msg.setSourceEntity(65U);
    msg.setDestination(16505U);
    msg.setDestinationEntity(110U);
    msg.timestamp_last_service = 0.4874087639567303;
    msg.time_next_service = 0.7871824243763053;
    msg.time_motor_next_service = 0.3642673251788531;
    msg.time_idle_ground = 0.4752316851758335;
    msg.time_idle_air = 0.8845863693867687;
    msg.time_idle_water = 0.2328846815167087;
    msg.time_idle_underwater = 0.3427398783753334;
    msg.time_idle_unknown = 0.22743629971050516;
    msg.time_motor_ground = 0.12277527285673595;
    msg.time_motor_air = 0.6574437673991153;
    msg.time_motor_water = 0.6707609359505335;
    msg.time_motor_underwater = 0.09884176742717443;
    msg.time_motor_unknown = 0.9964484943195235;
    msg.rpm_min = -10360;
    msg.rpm_max = 23548;
    msg.depth_max = 0.9314645879878924;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.43453019115071867);
    msg.setSource(207U);
    msg.setSourceEntity(87U);
    msg.setDestination(18257U);
    msg.setDestinationEntity(171U);
    msg.timestamp_last_service = 0.6216978747245088;
    msg.time_next_service = 0.41783609996933635;
    msg.time_motor_next_service = 0.8865266352664192;
    msg.time_idle_ground = 0.4461376211534579;
    msg.time_idle_air = 0.8114834037418565;
    msg.time_idle_water = 0.557904251386452;
    msg.time_idle_underwater = 0.7984649852090263;
    msg.time_idle_unknown = 0.7552598748661893;
    msg.time_motor_ground = 0.3130941490175708;
    msg.time_motor_air = 0.23810837296721932;
    msg.time_motor_water = 0.9711001085070154;
    msg.time_motor_underwater = 0.4251961752254614;
    msg.time_motor_unknown = 0.4471159702253962;
    msg.rpm_min = 22326;
    msg.rpm_max = -5785;
    msg.depth_max = 0.9072273044775466;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.827966806588974);
    msg.setSource(11692U);
    msg.setSourceEntity(56U);
    msg.setDestination(40073U);
    msg.setDestinationEntity(213U);
    msg.timestamp_last_service = 0.5147361300480104;
    msg.time_next_service = 0.8825502473340648;
    msg.time_motor_next_service = 0.4707493373245355;
    msg.time_idle_ground = 0.7514616641430711;
    msg.time_idle_air = 0.7383951409801497;
    msg.time_idle_water = 0.4463383473723296;
    msg.time_idle_underwater = 0.8845625938100544;
    msg.time_idle_unknown = 0.8345670069756724;
    msg.time_motor_ground = 0.11806003739638893;
    msg.time_motor_air = 0.38692666333644554;
    msg.time_motor_water = 0.5829984973314432;
    msg.time_motor_underwater = 0.19787581660708475;
    msg.time_motor_unknown = 0.7451245932187172;
    msg.rpm_min = -22960;
    msg.rpm_max = 16050;
    msg.depth_max = 0.3874905792623604;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.29723426594360336);
    msg.setSource(15462U);
    msg.setSourceEntity(129U);
    msg.setDestination(3953U);
    msg.setDestinationEntity(241U);
    msg.severity = 132U;
    msg.text.assign("FMLIJNLSTBFEDOMWIZIGTWLIYYDNIHAAWORSRQGWVHQUXZQIFQNCZPVJGDXTDAAGZLFINIPUQUSTYGCNPMURZPMVOHYADZTTVQAVDQLLTREXGUZUBGNWMKMWWBDSBBWXEPXHTERYKKKGKNHQXVVOGRBCOF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.4818945464624763);
    msg.setSource(2269U);
    msg.setSourceEntity(213U);
    msg.setDestination(13551U);
    msg.setDestinationEntity(222U);
    msg.severity = 30U;
    msg.text.assign("GTUGRDKBESHSCFDPAPACUPMLNQBIFWAVKWMTTQTOUVJENYLAIJRYPBQAPMYOIYVIOVGFOZONLHZJSRNEVNXQDMQCZZPZDCJXXNHUKXJKADBEVCHENGHRJLVJRWIYTQHGGAEHVMUFGWFORXAEBCVLDZGBYQDGZLGELEFWMSLXWLJSXXQLMIARCZMXFTODCPIBDBPFIWNSUTKTSJEWWUZMIKCUOWRFSSVZKYKNUDISCYBUPQMYN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.16610100500450586);
    msg.setSource(39615U);
    msg.setSourceEntity(141U);
    msg.setDestination(64218U);
    msg.setDestinationEntity(233U);
    msg.severity = 187U;
    msg.text.assign("QYFCUORXGEEWVSUPOOHHMRYTBUNMPZNWOVKCFJXDLFVNOUGOBWVXSEBELKSBIDSGFARZGNYRDRYUBGKYJKFPFOKAGJBIIPBAFHKSWNLTSDJOEEDAUPOHVNRNQCZQHTCEKFMCXZWIYZQKJJKMJZLFMWAIIAPHTLJLIYNTOSMGVWUMAEUQQIDYSMQHPWCEUGPCBQAZTBBDVXJISGXZPFRLGAWSNLDLRLQAUJYPTXDXCTMMCDNTTVCXQKHXRERIY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.34122884046977986);
    msg.setSource(12488U);
    msg.setSourceEntity(155U);
    msg.setDestination(32541U);
    msg.setDestinationEntity(231U);
    msg.channel = -94;
    msg.value = 409631181;
    msg.gain = 224U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.22899941718872774);
    msg.setSource(38957U);
    msg.setSourceEntity(73U);
    msg.setDestination(24605U);
    msg.setDestinationEntity(236U);
    msg.channel = 34;
    msg.value = 800785808;
    msg.gain = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.7002151591078255);
    msg.setSource(1839U);
    msg.setSourceEntity(122U);
    msg.setDestination(9089U);
    msg.setDestinationEntity(89U);
    msg.channel = 49;
    msg.value = -2046934506;
    msg.gain = 58U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.6786203608580962);
    msg.setSource(1458U);
    msg.setSourceEntity(101U);
    msg.setDestination(8052U);
    msg.setDestinationEntity(253U);
    msg.ch01 = 0.6337752763870755;
    msg.ch02 = 0.7331706058086273;
    msg.ch03 = 0.018351935787048856;
    msg.ch04 = 0.45481147513112796;
    msg.ch05 = 0.5896109228614936;
    msg.ch06 = 0.1149909488380424;
    msg.ch07 = 0.7082004079023603;
    msg.ch08 = 0.23218286968956225;
    msg.ch09 = 0.6183143633902084;
    msg.ch10 = 0.41777069856020077;
    msg.ch11 = 0.6501060223001871;
    msg.ch12 = 0.8914874064372057;
    msg.ch13 = 0.30150098767614386;
    msg.ch14 = 0.6407038052870525;
    msg.ch15 = 0.5950078616516212;
    msg.ch16 = 0.7000621138396224;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.8257225275942918);
    msg.setSource(40836U);
    msg.setSourceEntity(232U);
    msg.setDestination(43994U);
    msg.setDestinationEntity(221U);
    msg.ch01 = 0.33839526685468746;
    msg.ch02 = 0.9663504609133509;
    msg.ch03 = 0.12104704800886756;
    msg.ch04 = 0.905377799119409;
    msg.ch05 = 0.2335471863914057;
    msg.ch06 = 0.3763478597998462;
    msg.ch07 = 0.24246643876264828;
    msg.ch08 = 0.23521774742979062;
    msg.ch09 = 0.6677530604752606;
    msg.ch10 = 0.40891218038060684;
    msg.ch11 = 0.06101776071144471;
    msg.ch12 = 0.49820547997342024;
    msg.ch13 = 0.8398675781864391;
    msg.ch14 = 0.9288261691497717;
    msg.ch15 = 0.1359308501169444;
    msg.ch16 = 0.43793881425973713;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.09807610037121772);
    msg.setSource(37088U);
    msg.setSourceEntity(226U);
    msg.setDestination(17203U);
    msg.setDestinationEntity(165U);
    msg.ch01 = 0.8173433777523128;
    msg.ch02 = 0.33115703770178184;
    msg.ch03 = 0.5492641533785316;
    msg.ch04 = 0.18147798804289694;
    msg.ch05 = 0.306379459234832;
    msg.ch06 = 0.9814466605345818;
    msg.ch07 = 0.20801293097146056;
    msg.ch08 = 0.27933078411512857;
    msg.ch09 = 0.2848122975665237;
    msg.ch10 = 0.3052337631050662;
    msg.ch11 = 0.47669423004549627;
    msg.ch12 = 0.388468529928077;
    msg.ch13 = 0.4115508488654537;
    msg.ch14 = 0.8782445087339084;
    msg.ch15 = 0.6864069618050389;
    msg.ch16 = 0.470689737917394;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.40946198940448175);
    msg.setSource(19968U);
    msg.setSourceEntity(135U);
    msg.setDestination(61726U);
    msg.setDestinationEntity(121U);
    msg.op = 201U;
    msg.lat = 0.8441884818046533;
    msg.lon = 0.4097991782792715;
    msg.height = 0.37562596373215507;
    msg.depth = 0.8982099786320112;
    msg.alt = 0.5908135006120125;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.08738552914331488);
    msg.setSource(30378U);
    msg.setSourceEntity(160U);
    msg.setDestination(50986U);
    msg.setDestinationEntity(75U);
    msg.op = 236U;
    msg.lat = 0.35978631949987716;
    msg.lon = 0.9697893204358012;
    msg.height = 0.9922656132441765;
    msg.depth = 0.33431563215779847;
    msg.alt = 0.7999945744582652;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.5008196623530803);
    msg.setSource(14125U);
    msg.setSourceEntity(41U);
    msg.setDestination(26789U);
    msg.setDestinationEntity(247U);
    msg.op = 98U;
    msg.lat = 0.6925431541434806;
    msg.lon = 0.08630309499596278;
    msg.height = 0.06413063522429185;
    msg.depth = 0.1381227843370797;
    msg.alt = 0.8618315508800221;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.9156771024029579);
    msg.setSource(60946U);
    msg.setSourceEntity(61U);
    msg.setDestination(25433U);
    msg.setDestinationEntity(98U);
    msg.name.assign("NVSNDJZRIDXLTPEVJIOAIWCTEVCKZGIUJZMMFLXZUWRPHMOJORCLLQXLBUGJFHYEIINQFWANXVHAQEUCZOUOYMQAEJBJKHRGURVGH");
    msg.value = 192U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.9433837737896109);
    msg.setSource(65443U);
    msg.setSourceEntity(174U);
    msg.setDestination(22580U);
    msg.setDestinationEntity(238U);
    msg.name.assign("OOLDGVBRIFINXXVBTUVBRYDAXIPBFGWJUJYWMCQRHVRZMPZKGBTGNLSAONTDNLQSEFWSPVKNRFUGXKWNDJLBICAWXXDQ");
    msg.value = 210U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.6547057419951359);
    msg.setSource(13739U);
    msg.setSourceEntity(247U);
    msg.setDestination(59684U);
    msg.setDestinationEntity(89U);
    msg.name.assign("BMLFMBKUXVVPSVDSTBSTAWLGEFDLVIJNZLARLDYXWZJDCFJLZGZIQPDYAOTEMPKERKEKJMYCBBOVKQVAYQNNPNVROXPNQWDJSZCTBQNYTGHIJOFZYHWELCDZXUEARRWPOYSIXJTHPDSJWPUHCAXSDDRQCKMQIWRUFGBTPBHUI");
    msg.value = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.4748653063579805);
    msg.setSource(46870U);
    msg.setSourceEntity(102U);
    msg.setDestination(25499U);
    msg.setDestinationEntity(216U);
    msg.name.assign("WTFVEABTUDCDLSRKSPRYHYKAAPDONDPGNQJHYLGHCFVUVASLIARGJWFBEZCFPFWNJXXURXXIHQFXZPGVWEEPMEUNFIPMUNXUDITNGKKJTVYLBKPCXWWTMBLXDOYOOHFQLZBMZCJARIGPUYD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.33284420224274436);
    msg.setSource(24400U);
    msg.setSourceEntity(139U);
    msg.setDestination(7272U);
    msg.setDestinationEntity(191U);
    msg.name.assign("QVZZGCUPEQNVYFGXVZHQGUWMIBXRXMDOEALNPHYDZNCWDCGSVEDMKRAELCRPIPFCGKNUZOHBIHSKOMATIRMAMTWQKMQHCFXZYBTXNOLVIKFYYOFYJRDGFRWKAKFJRJLSOPTUXDSBAPEVOTBJEXMXYCZJJGLSHDGBEKIYRWLNYRWSUIXPOOCCENUMXHTPCEW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.043760967772389914);
    msg.setSource(57957U);
    msg.setSourceEntity(201U);
    msg.setDestination(12583U);
    msg.setDestinationEntity(111U);
    msg.name.assign("AYVDPEVHYPUIZZFJUEQARBIQIHTYGWJEIWZYZJNTRNJDUGHOMCZOPCBVHMUVMUHAVYGITLZNNDIGCAEWNUNFQGAOXDGRYUAWSDRNBMBFSLSFKPMFMLSQRPCOXMGOVPTWXWFYKPXXLQTMJAOXSFEHKEILJIMKZPTGHX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.956482616177326);
    msg.setSource(12172U);
    msg.setSourceEntity(63U);
    msg.setDestination(29021U);
    msg.setDestinationEntity(28U);
    msg.name.assign("LBAXGEEJLCUMYGIZFGRKLBUOLHECIUKHSCIHXDWPRUCGOPOMOOATLQTJROYWQXBYBRTKEJMKCIFLXNQIZPCWKBBWDGMJMKFUHYZERGWTNZXPISVSOWGQMFDLVPQHIPDDLUHAVJDKCZQQVXTWVLBQBGNNJFNUPUATOFMLPWXYKHTJAGVJKANKIDITIXNQVQSVEUYRHDNCYPZPH");
    msg.value = 182U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.3597543287732776);
    msg.setSource(28830U);
    msg.setSourceEntity(225U);
    msg.setDestination(21114U);
    msg.setDestinationEntity(233U);
    msg.name.assign("PIAVXHGKZZAEIUUGGODERQSODSTQYBIQQOMDBHTOLTYZJC");
    msg.value = 8U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.691362605072176);
    msg.setSource(989U);
    msg.setSourceEntity(67U);
    msg.setDestination(36493U);
    msg.setDestinationEntity(159U);
    msg.name.assign("NZEUTCWVBNIKQEKVKSMTTVULZVRBFJXYGKIFFGKXCKNYUIAGWKMQFZHKQLOQBVUPHXFMOUPXRYTGZRPGMWBQSSSOSFOAOHYJNOPMBYXFISSDRANACDSHRBONNRWYVREBANMLCIVYFUOBDIMHMLQHJCZHJGEWMPEJCEJCXKWYPPJZCATHDZTHLLXIWTDNIDQEVWVJAPKXAFTILHTXAQQOZNYDGUSCCDIYJJGFRLVEZOGZTRB");
    msg.value = 41U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.9274802707569959);
    msg.setSource(5795U);
    msg.setSourceEntity(153U);
    msg.setDestination(41774U);
    msg.setDestinationEntity(216U);
    msg.value = 0.622127825342647;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.9074460632922763);
    msg.setSource(56841U);
    msg.setSourceEntity(189U);
    msg.setDestination(2466U);
    msg.setDestinationEntity(25U);
    msg.value = 0.4191760689405821;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.13890013006913815);
    msg.setSource(697U);
    msg.setSourceEntity(36U);
    msg.setDestination(49871U);
    msg.setDestinationEntity(160U);
    msg.value = 0.8332421726763796;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.33849370038695714);
    msg.setSource(46687U);
    msg.setSourceEntity(50U);
    msg.setDestination(26978U);
    msg.setDestinationEntity(47U);
    msg.value = 0.7628735535223822;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.18441579800639696);
    msg.setSource(48837U);
    msg.setSourceEntity(195U);
    msg.setDestination(31385U);
    msg.setDestinationEntity(204U);
    msg.value = 0.49229979380525235;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.3661647995674844);
    msg.setSource(43703U);
    msg.setSourceEntity(24U);
    msg.setDestination(59210U);
    msg.setDestinationEntity(179U);
    msg.value = 0.7629703252546637;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.9974453470499045);
    msg.setSource(48182U);
    msg.setSourceEntity(67U);
    msg.setDestination(34906U);
    msg.setDestinationEntity(7U);
    msg.ampl = 0.05445579192440997;
    msg.dir = 0.23624441731528545;
    msg.freq = 0.9184724293456604;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.7632324099477674);
    msg.setSource(10209U);
    msg.setSourceEntity(109U);
    msg.setDestination(44186U);
    msg.setDestinationEntity(48U);
    msg.ampl = 0.44891465164006705;
    msg.dir = 0.1633022311639698;
    msg.freq = 0.04014543818264704;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.4421798451130605);
    msg.setSource(46365U);
    msg.setSourceEntity(215U);
    msg.setDestination(48909U);
    msg.setDestinationEntity(60U);
    msg.ampl = 0.9307213045297414;
    msg.dir = 0.04685973124778964;
    msg.freq = 0.5154194489256388;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.622841080467794);
    msg.setSource(63177U);
    msg.setSourceEntity(19U);
    msg.setDestination(46272U);
    msg.setDestinationEntity(48U);
    msg.value = 0.3684022179212657;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.49026712681071494);
    msg.setSource(17295U);
    msg.setSourceEntity(111U);
    msg.setDestination(31790U);
    msg.setDestinationEntity(196U);
    msg.value = 0.9243501738055724;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.7713191923703197);
    msg.setSource(49814U);
    msg.setSourceEntity(203U);
    msg.setDestination(26167U);
    msg.setDestinationEntity(190U);
    msg.value = 0.07224497935504093;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.0859905188638781);
    msg.setSource(18910U);
    msg.setSourceEntity(233U);
    msg.setDestination(38846U);
    msg.setDestinationEntity(17U);
    msg.value = 0.47401603692035876;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.8214293375408648);
    msg.setSource(11101U);
    msg.setSourceEntity(102U);
    msg.setDestination(42391U);
    msg.setDestinationEntity(57U);
    msg.value = 0.933926525575804;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.515726423942036);
    msg.setSource(41228U);
    msg.setSourceEntity(63U);
    msg.setDestination(56074U);
    msg.setDestinationEntity(205U);
    msg.value = 0.15167424312181832;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.4151052576707214);
    msg.setSource(36768U);
    msg.setSourceEntity(229U);
    msg.setDestination(39899U);
    msg.setDestinationEntity(8U);
    msg.value = 0.5455072848142893;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.03532733560497969);
    msg.setSource(63604U);
    msg.setSourceEntity(68U);
    msg.setDestination(64636U);
    msg.setDestinationEntity(18U);
    msg.value = 0.21232749382695193;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.45058047758966546);
    msg.setSource(46130U);
    msg.setSourceEntity(66U);
    msg.setDestination(30495U);
    msg.setDestinationEntity(119U);
    msg.value = 0.1635168586811353;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.07412992329890111);
    msg.setSource(50527U);
    msg.setSourceEntity(238U);
    msg.setDestination(34038U);
    msg.setDestinationEntity(66U);
    msg.id = 97;
    msg.state = -26;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.3939981593812958);
    msg.setSource(33602U);
    msg.setSourceEntity(245U);
    msg.setDestination(587U);
    msg.setDestinationEntity(76U);
    msg.id = 32;
    msg.state = -54;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.5868198230703686);
    msg.setSource(41739U);
    msg.setSourceEntity(101U);
    msg.setDestination(52909U);
    msg.setDestinationEntity(21U);
    msg.id = -125;
    msg.state = -120;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.7114644533795723);
    msg.setSource(23232U);
    msg.setSourceEntity(58U);
    msg.setDestination(37847U);
    msg.setDestinationEntity(62U);
    msg.angle = 0.20487738846829273;
    msg.speed = 0.8779759974450879;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.2539457593580461);
    msg.setSource(54212U);
    msg.setSourceEntity(79U);
    msg.setDestination(35628U);
    msg.setDestinationEntity(12U);
    msg.angle = 0.791711046297801;
    msg.speed = 0.8571447771248993;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.6720639585277384);
    msg.setSource(6583U);
    msg.setSourceEntity(108U);
    msg.setDestination(50733U);
    msg.setDestinationEntity(213U);
    msg.angle = 0.27436238029839777;
    msg.speed = 0.9134750186359071;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.3956631857731324);
    msg.setSource(48913U);
    msg.setSourceEntity(114U);
    msg.setDestination(64687U);
    msg.setDestinationEntity(208U);
    msg.dir = 0.20988630853285029;
    msg.speed = 0.6071260319395846;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.418273124228698);
    msg.setSource(28137U);
    msg.setSourceEntity(238U);
    msg.setDestination(19400U);
    msg.setDestinationEntity(218U);
    msg.dir = 0.9141679406195008;
    msg.speed = 0.8552007118520543;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.6686689567947101);
    msg.setSource(10222U);
    msg.setSourceEntity(189U);
    msg.setDestination(19108U);
    msg.setDestinationEntity(165U);
    msg.dir = 0.3676927869190382;
    msg.speed = 0.017918885211241964;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.20018078800568617);
    msg.setSource(56542U);
    msg.setSourceEntity(157U);
    msg.setDestination(18865U);
    msg.setDestinationEntity(164U);
    msg.x = 0.5144012089839156;
    msg.y = 0.299295326082468;
    msg.z1 = 0.3812052299747891;
    msg.z2 = 0.5902897469530579;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.08880775692621412);
    msg.setSource(50482U);
    msg.setSourceEntity(172U);
    msg.setDestination(20487U);
    msg.setDestinationEntity(238U);
    msg.x = 0.44162467789283877;
    msg.y = 0.2585054645274787;
    msg.z1 = 0.7542813200636258;
    msg.z2 = 0.47737571579324956;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.7791912895231121);
    msg.setSource(37185U);
    msg.setSourceEntity(225U);
    msg.setDestination(64419U);
    msg.setDestinationEntity(96U);
    msg.x = 0.7300802227013492;
    msg.y = 0.5711889272340215;
    msg.z1 = 0.7385050847321257;
    msg.z2 = 0.36050506234418844;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.05471619778143344);
    msg.setSource(55871U);
    msg.setSourceEntity(138U);
    msg.setDestination(43158U);
    msg.setDestinationEntity(59U);
    msg.mmsi.assign("TSTOMSWQTJIBSIWTXJFODXSMAGKYQHSCBFCZPHAUPXDJAMQANKMWVDLXFCYWRJBENUWFVRMIIBZJQOQRTGUEPOIUQVKLRMB");
    msg.lat = 0.18510107748961735;
    msg.lon = 0.7484663844902676;
    msg.x = 0.9618766271916722;
    msg.y = 0.09695518538566827;
    msg.speed = 0.8905645389737269;
    msg.course = 0.6248450993165765;
    msg.dist = 0.6999180318919773;
    msg.length = 0.8723337691403589;
    msg.width = 0.7180404431280831;
    msg.o_vect = 0.888046011538665;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.9884590334676849);
    msg.setSource(28963U);
    msg.setSourceEntity(242U);
    msg.setDestination(24488U);
    msg.setDestinationEntity(228U);
    msg.mmsi.assign("XPLFEHBKTVEDXWGHAFHOCUXUNDHXCLSOPCTA");
    msg.lat = 0.11049826997899037;
    msg.lon = 0.280914211674712;
    msg.x = 0.08708684466284833;
    msg.y = 0.8551802354982107;
    msg.speed = 0.8593942088812637;
    msg.course = 0.02172267214051493;
    msg.dist = 0.9465331701947549;
    msg.length = 0.8707074213658986;
    msg.width = 0.8889184826799108;
    msg.o_vect = 0.007120589510010378;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.635147298615406);
    msg.setSource(55690U);
    msg.setSourceEntity(251U);
    msg.setDestination(40367U);
    msg.setDestinationEntity(158U);
    msg.mmsi.assign("GKKQPRWNFXLKECMCJVNQPCOHCZSMNMGVSDVMQXTOYOMPSYUWLUXXJVNJPFFZTFLACRIXHBFXFLRUIRHZGQNYCEEWQIBRIKEIYOFMJNYBNCOMLQUVUWLIPWZZORAWZLJDZSAVRAKEVQKGYAXLMRFEDDKJTBBPKYDVJANHAPOTHTEDGYNTLQXFDHEB");
    msg.lat = 0.3676515680330411;
    msg.lon = 0.4878712122257828;
    msg.x = 0.7464694078321379;
    msg.y = 0.9852648485666284;
    msg.speed = 0.6354674280758854;
    msg.course = 0.20044259001986175;
    msg.dist = 0.9965635527068524;
    msg.length = 0.33878343342190653;
    msg.width = 0.08538315084558512;
    msg.o_vect = 0.1642386482090803;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.749207245979611);
    msg.setSource(61188U);
    msg.setSourceEntity(122U);
    msg.setDestination(24897U);
    msg.setDestinationEntity(228U);
    msg.depth_at_loc.assign("GAVYBNGHGSUXUURYUEETPOMQFTEIIKJAYPMJQRQFJWZBYCCMTSGGXROKLGUYBFPFSXDZRYQPIFKNCLETSHZZOYAWYHKXDOWWPOVGOZIDHYCKNNXXMVQNLLHVFTPTPHSSAQJEFPWYOJZCXIDSKRDLCBWCNTHDVTVUMBIWXBVA");
    msg.danger.assign("OOICGGNTEKAOFBJJSDFTUGWCXJZCWXSEOZYBXAVMWHPHROEBPIEZLCDATQNYNVVYLNLDIWQKZFRKJZCUDYSKAIHNFQKTEFDKDMPMXJYABZMVZRASZAGIXYKNDLVACNKXAWQLRVRUODHUUFTPMJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.9052100629331798);
    msg.setSource(28967U);
    msg.setSourceEntity(81U);
    msg.setDestination(39966U);
    msg.setDestinationEntity(19U);
    msg.depth_at_loc.assign("EQKIUYJJGHPMDMVPMSSRXMBSAIAUCHULAWOXMOVIQGUQZAUJVIXDLPHTNGLNLOIRONFONEIDQEQKRZKAUUKZSFQJCSCYPUFENXOZUTCKBMWGAFYXBKSCVBHXAQFZEJTYXRYOMBUOGRCIKDYFPLHDAHYTBNAWLZAVGILRSWNTRVPCGPXCBRTYHLEKMDBPSPPWZSQGHWVLVRTDTFODZFTWWJBCZSKFTQJJVXKJEZOEWVEXIWND");
    msg.danger.assign("DZGNHOIKNT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.17279795806529652);
    msg.setSource(13993U);
    msg.setSourceEntity(46U);
    msg.setDestination(33747U);
    msg.setDestinationEntity(9U);
    msg.depth_at_loc.assign("GSRBWJXARXQBQFNCTQGNUWWKZNDZVRSJTGVWHRBSRIEZIBGLPMOQLLDHRGFEXMRKBGIICVYVPPQBHAOFHZGUMXTCDYXIEWOFBPCJYUQGTYZTORHVIHWZMSQBAOKUFZNKBUQSAJMUEZFEXVUEONKPTIAPZULPGYHYKHKOUMNSPJNJWFQNCLSKVDJHYODSZVLTDFIKFYVHTFXMEALJQXMNYCTOCLCPDAMWPILJWEWURKMITAENOGSD");
    msg.danger.assign("MQWBLRSNIVVTGGCMMMQVFRPAYLOSDG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.3561228028455756);
    msg.setSource(18980U);
    msg.setSourceEntity(101U);
    msg.setDestination(13788U);
    msg.setDestinationEntity(235U);
    msg.value = 0.9913139223013068;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.9334026219795343);
    msg.setSource(3658U);
    msg.setSourceEntity(219U);
    msg.setDestination(58828U);
    msg.setDestinationEntity(20U);
    msg.value = 0.3499526946016315;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.8210692106910329);
    msg.setSource(63812U);
    msg.setSourceEntity(26U);
    msg.setDestination(2363U);
    msg.setDestinationEntity(94U);
    msg.value = 0.4701965675307356;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.4829357984415875);
    msg.setSource(39818U);
    msg.setSourceEntity(208U);
    msg.setDestination(57328U);
    msg.setDestinationEntity(127U);
    msg.beam1 = 0.8983163005544127;
    msg.beam2 = 0.3192920914036398;
    msg.beam3 = 0.9687568472073235;
    msg.beam4 = 0.5789517136255533;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.25396437546080775);
    msg.setSource(48861U);
    msg.setSourceEntity(177U);
    msg.setDestination(29311U);
    msg.setDestinationEntity(119U);
    msg.beam1 = 0.23889346965158376;
    msg.beam2 = 0.4712448645170433;
    msg.beam3 = 0.9535143871499238;
    msg.beam4 = 0.3173877982483252;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.054204502416982936);
    msg.setSource(39806U);
    msg.setSourceEntity(83U);
    msg.setDestination(54023U);
    msg.setDestinationEntity(0U);
    msg.beam1 = 0.28126611132987533;
    msg.beam2 = 0.8032106397009815;
    msg.beam3 = 0.4704248828676936;
    msg.beam4 = 0.19629764564730157;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.4311084536178089);
    msg.setSource(22348U);
    msg.setSourceEntity(54U);
    msg.setDestination(16277U);
    msg.setDestinationEntity(39U);
    msg.beam1 = 238U;
    msg.beam2 = 110U;
    msg.beam3 = 50U;
    msg.beam4 = 84U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.6150854326313212);
    msg.setSource(34176U);
    msg.setSourceEntity(122U);
    msg.setDestination(40040U);
    msg.setDestinationEntity(20U);
    msg.beam1 = 95U;
    msg.beam2 = 124U;
    msg.beam3 = 161U;
    msg.beam4 = 47U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.1963853287722962);
    msg.setSource(45238U);
    msg.setSourceEntity(119U);
    msg.setDestination(38679U);
    msg.setDestinationEntity(195U);
    msg.beam1 = 221U;
    msg.beam2 = 224U;
    msg.beam3 = 19U;
    msg.beam4 = 83U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.15338269315598363);
    msg.setSource(11849U);
    msg.setSourceEntity(101U);
    msg.setDestination(56216U);
    msg.setDestinationEntity(201U);
    msg.pos = 0.5905298265663573;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.10625843423303083;
    tmp_msg_0.amp = 0.3091926564947115;
    tmp_msg_0.cor = 49U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.4974663110136931);
    msg.setSource(42373U);
    msg.setSourceEntity(145U);
    msg.setDestination(64526U);
    msg.setDestinationEntity(11U);
    msg.pos = 0.4334622095139188;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.6531598087940468;
    tmp_msg_0.amp = 0.7404515252451561;
    tmp_msg_0.cor = 28U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.9078236488429674);
    msg.setSource(59028U);
    msg.setSourceEntity(60U);
    msg.setDestination(11551U);
    msg.setDestinationEntity(248U);
    msg.pos = 0.5132941769596474;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.8250596227391535);
    msg.setSource(56024U);
    msg.setSourceEntity(10U);
    msg.setDestination(39970U);
    msg.setDestinationEntity(178U);
    msg.beams = 241U;
    msg.cells = 10U;
    msg.coord_sys = 9U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.9532670607015957);
    msg.setSource(36473U);
    msg.setSourceEntity(226U);
    msg.setDestination(26048U);
    msg.setDestinationEntity(182U);
    msg.beams = 103U;
    msg.cells = 166U;
    msg.coord_sys = 42U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.15689616673326923;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.2632808416134993;
    tmp_tmp_msg_0_0.amp = 0.7356219059103409;
    tmp_tmp_msg_0_0.cor = 164U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.37122164371531163);
    msg.setSource(11003U);
    msg.setSourceEntity(75U);
    msg.setDestination(52759U);
    msg.setDestinationEntity(114U);
    msg.beams = 177U;
    msg.cells = 113U;
    msg.coord_sys = 211U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.28423267016409803;
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.6635906464408863);
    msg.setSource(39456U);
    msg.setSourceEntity(20U);
    msg.setDestination(44368U);
    msg.setDestinationEntity(147U);
    msg.vel = 0.5131161161635566;
    msg.amp = 0.4578613803613849;
    msg.cor = 148U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.6212351631583054);
    msg.setSource(39771U);
    msg.setSourceEntity(157U);
    msg.setDestination(43289U);
    msg.setDestinationEntity(128U);
    msg.vel = 0.12297620230886863;
    msg.amp = 0.5228340504846144;
    msg.cor = 67U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.3706204361935024);
    msg.setSource(18375U);
    msg.setSourceEntity(75U);
    msg.setDestination(50525U);
    msg.setDestinationEntity(178U);
    msg.vel = 0.9843018660418037;
    msg.amp = 0.6725736594140471;
    msg.cor = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.8547679584856934);
    msg.setSource(54484U);
    msg.setSourceEntity(107U);
    msg.setDestination(4756U);
    msg.setDestinationEntity(22U);
    msg.serial_no = 353304670U;
    msg.unix_timestamp = 1698016469U;
    msg.millis = 2771U;
    msg.trans_protocol = 221U;
    msg.trans_id = 2994435922U;
    msg.trans_data = 63325U;
    msg.snr = 75U;
    msg.trans_freq = 139U;
    msg.recv_mem_addr = 41690U;
    msg.lat = 0.0021386299395245167;
    msg.lon = 0.6712464581502913;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.9479753647802781);
    msg.setSource(43700U);
    msg.setSourceEntity(237U);
    msg.setDestination(56843U);
    msg.setDestinationEntity(63U);
    msg.serial_no = 3803769122U;
    msg.unix_timestamp = 2921536939U;
    msg.millis = 2798U;
    msg.trans_protocol = 2U;
    msg.trans_id = 3049522861U;
    msg.trans_data = 60309U;
    msg.snr = 116U;
    msg.trans_freq = 131U;
    msg.recv_mem_addr = 30998U;
    msg.lat = 0.7423402379203389;
    msg.lon = 0.9551445479361478;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.6050236090871632);
    msg.setSource(43050U);
    msg.setSourceEntity(204U);
    msg.setDestination(18966U);
    msg.setDestinationEntity(186U);
    msg.serial_no = 4006929751U;
    msg.unix_timestamp = 2759756873U;
    msg.millis = 4826U;
    msg.trans_protocol = 3U;
    msg.trans_id = 634327698U;
    msg.trans_data = 59122U;
    msg.snr = 75U;
    msg.trans_freq = 199U;
    msg.recv_mem_addr = 17097U;
    msg.lat = 0.4805575840108782;
    msg.lon = 0.9151488871954961;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.6215417929181039);
    msg.setSource(58777U);
    msg.setSourceEntity(200U);
    msg.setDestination(29320U);
    msg.setDestinationEntity(112U);
    msg.serial_no = 3880245277U;
    msg.unix_timestamp = 1874248953U;
    msg.temperature = 0.3872044247526659;
    msg.avg_noise_level = 66U;
    msg.peak_noise_level = 56U;
    msg.recv_listen_freq = 200U;
    msg.recv_mem_addr = 39575U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.03071789536524283);
    msg.setSource(20811U);
    msg.setSourceEntity(163U);
    msg.setDestination(13518U);
    msg.setDestinationEntity(57U);
    msg.serial_no = 4282374700U;
    msg.unix_timestamp = 2160373997U;
    msg.temperature = 0.2880113293506138;
    msg.avg_noise_level = 41U;
    msg.peak_noise_level = 168U;
    msg.recv_listen_freq = 0U;
    msg.recv_mem_addr = 62269U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.05668873194112267);
    msg.setSource(61265U);
    msg.setSourceEntity(44U);
    msg.setDestination(28761U);
    msg.setDestinationEntity(222U);
    msg.serial_no = 307106964U;
    msg.unix_timestamp = 3349096125U;
    msg.temperature = 0.8011485805337057;
    msg.avg_noise_level = 41U;
    msg.peak_noise_level = 63U;
    msg.recv_listen_freq = 94U;
    msg.recv_mem_addr = 1571U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.764601958630399);
    msg.setSource(21401U);
    msg.setSourceEntity(58U);
    msg.setDestination(60394U);
    msg.setDestinationEntity(83U);
    msg.frequency = 1650966018U;
    msg.info.assign("WAXPDFWQACUNAIRRNYOMUNXOETZUWE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.5914060694256043);
    msg.setSource(17324U);
    msg.setSourceEntity(113U);
    msg.setDestination(35170U);
    msg.setDestinationEntity(79U);
    msg.frequency = 465738729U;
    msg.info.assign("PTTQBPPNIGHIDSUGMPXRCZHCWMHQRLYWWZAGLFVEEGNHALBPAWFEDWJSHCSOFKOBSWOLVEYAMAAJZHWVUYVHAIUXLKFPTFCVQKLVZTZKXRIQLZJPNEJCQBKGKCREFDMKBMNWJGNDKXOBZLRRNBJJJDOSDOUITSQTXJYMHTINXUZCLXYFEEAD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.3710210409929805);
    msg.setSource(18253U);
    msg.setSourceEntity(69U);
    msg.setDestination(48440U);
    msg.setDestinationEntity(221U);
    msg.frequency = 2420497505U;
    msg.info.assign("FERKHGHTIBKCQPJVZHKIKUDUTIZXLTEFMTNQECEW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.1341696297349254);
    msg.setSource(807U);
    msg.setSourceEntity(214U);
    msg.setDestination(57157U);
    msg.setDestinationEntity(107U);
    msg.restriction = 248U;
    msg.reason.assign("HVRGBNQCDWUDZVNMQYIHBRBODQNAULLMUSDGXQWCRBRIJFAFGRUGPNLWJKWZIDGLYJTWGVILPPXBRIRBMREWEFVOLIVSPJMFVVQAZLCRQVFDOELFUAKHJYNMDK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.32752004149445046);
    msg.setSource(10093U);
    msg.setSourceEntity(75U);
    msg.setDestination(32519U);
    msg.setDestinationEntity(138U);
    msg.restriction = 6U;
    msg.reason.assign("MJJPQHIPIMDXSURYFEQCOMZHBIUJRWLARNVOSHLDNBYEGGSCZXYFYPGEQASSKJVDOCVABRZQGOTPFFGAKSSKTQLKXRQIZZCQLTLEPHVHVEJPWVMKCGKFULMAYZNZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.05509494529905645);
    msg.setSource(48238U);
    msg.setSourceEntity(33U);
    msg.setDestination(1871U);
    msg.setDestinationEntity(137U);
    msg.restriction = 41U;
    msg.reason.assign("RAIPHCIYVSAGZGTEZJDKNVYQLCPGXYUXCMGCMNFNMDMSKVHPXLBRUCMWMDWJVHHOPTWSTNIOLRCDMFUHKPCNXUWJQFZKHNQXZSNUKAHROPVEJJBEMAJEQCIBKAORFHSBRHOJAVYPGSFQLIFTOIEBWARCVFDUUPELHXJDQLGLWUXIYMEZWSYBLTOMLGYVYYXTZZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.4620361780580823);
    msg.setSource(29990U);
    msg.setSourceEntity(196U);
    msg.setDestination(29365U);
    msg.setDestinationEntity(65U);
    msg.adcp = 31;
    msg.adcp_dur = 2428255808U;
    msg.adcp_fr = 3041965551U;
    msg.ctd = -106;
    msg.ctd_dur = 2404487527U;
    msg.ctd_fr = 2555889733U;
    msg.opt = -51;
    msg.opt_dur = 806059536U;
    msg.opt_fr = 1642365535U;
    msg.tbl = -74;
    msg.tbl_dur = 2532134061U;
    msg.tbl_fr = 2259224701U;
    msg.eco = -118;
    msg.eco_dur = 3965515145U;
    msg.eco_fr = 2547662275U;
    msg.par = 111;
    msg.par_dur = 4189646192U;
    msg.par_fr = 2060439261U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.8541103764538378);
    msg.setSource(38971U);
    msg.setSourceEntity(132U);
    msg.setDestination(35886U);
    msg.setDestinationEntity(226U);
    msg.adcp = 57;
    msg.adcp_dur = 2165895904U;
    msg.adcp_fr = 781267242U;
    msg.ctd = 120;
    msg.ctd_dur = 2200640679U;
    msg.ctd_fr = 575484311U;
    msg.opt = -127;
    msg.opt_dur = 1461179205U;
    msg.opt_fr = 3375633480U;
    msg.tbl = 110;
    msg.tbl_dur = 2977040662U;
    msg.tbl_fr = 1914601573U;
    msg.eco = -87;
    msg.eco_dur = 3658606214U;
    msg.eco_fr = 3655038040U;
    msg.par = -93;
    msg.par_dur = 3909713261U;
    msg.par_fr = 1967242936U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.9387512616481448);
    msg.setSource(37754U);
    msg.setSourceEntity(65U);
    msg.setDestination(61600U);
    msg.setDestinationEntity(124U);
    msg.adcp = 55;
    msg.adcp_dur = 2664235850U;
    msg.adcp_fr = 1439440527U;
    msg.ctd = -16;
    msg.ctd_dur = 923001242U;
    msg.ctd_fr = 3741539473U;
    msg.opt = -74;
    msg.opt_dur = 4210369794U;
    msg.opt_fr = 2392295876U;
    msg.tbl = 126;
    msg.tbl_dur = 2685177736U;
    msg.tbl_fr = 3595549049U;
    msg.eco = 126;
    msg.eco_dur = 3448609810U;
    msg.eco_fr = 2467152028U;
    msg.par = -61;
    msg.par_dur = 1358295879U;
    msg.par_fr = 3379668642U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.7575518099363078);
    msg.setSource(43452U);
    msg.setSourceEntity(187U);
    msg.setDestination(1685U);
    msg.setDestinationEntity(244U);
    msg.adcp = 42;
    msg.adcp_dur = 1346016446U;
    msg.adcp_fr = 592058119U;
    msg.ctd = -43;
    msg.ctd_dur = 2413526235U;
    msg.ctd_fr = 2830719067U;
    msg.opt = -23;
    msg.opt_dur = 13130394U;
    msg.opt_fr = 1658330452U;
    msg.tbl = -20;
    msg.tbl_dur = 3855331489U;
    msg.tbl_fr = 4084410569U;
    msg.eco = -124;
    msg.eco_dur = 3835762630U;
    msg.eco_fr = 2983965267U;
    msg.par = -117;
    msg.par_dur = 1524116321U;
    msg.par_fr = 370402697U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.9613110002397315);
    msg.setSource(50191U);
    msg.setSourceEntity(253U);
    msg.setDestination(39627U);
    msg.setDestinationEntity(59U);
    msg.adcp = 26;
    msg.adcp_dur = 951796176U;
    msg.adcp_fr = 1942397922U;
    msg.ctd = 5;
    msg.ctd_dur = 1471870210U;
    msg.ctd_fr = 102199209U;
    msg.opt = -122;
    msg.opt_dur = 3576454940U;
    msg.opt_fr = 3478621118U;
    msg.tbl = 11;
    msg.tbl_dur = 660074784U;
    msg.tbl_fr = 3356289177U;
    msg.eco = -120;
    msg.eco_dur = 3727484103U;
    msg.eco_fr = 1292310442U;
    msg.par = 59;
    msg.par_dur = 2172699298U;
    msg.par_fr = 4030998649U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.984496674999607);
    msg.setSource(38788U);
    msg.setSourceEntity(213U);
    msg.setDestination(40712U);
    msg.setDestinationEntity(179U);
    msg.adcp = 67;
    msg.adcp_dur = 3158172686U;
    msg.adcp_fr = 35384633U;
    msg.ctd = -124;
    msg.ctd_dur = 4212654285U;
    msg.ctd_fr = 904692349U;
    msg.opt = 35;
    msg.opt_dur = 2410013355U;
    msg.opt_fr = 3643278478U;
    msg.tbl = -122;
    msg.tbl_dur = 3167473682U;
    msg.tbl_fr = 536783805U;
    msg.eco = -127;
    msg.eco_dur = 3627210949U;
    msg.eco_fr = 4194113410U;
    msg.par = 82;
    msg.par_dur = 3477028879U;
    msg.par_fr = 1643315267U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.9124974999750524);
    msg.setSource(39083U);
    msg.setSourceEntity(176U);
    msg.setDestination(53260U);
    msg.setDestinationEntity(36U);
    msg.value = 0.27941296083317224;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.5764978631708393);
    msg.setSource(50014U);
    msg.setSourceEntity(242U);
    msg.setDestination(54049U);
    msg.setDestinationEntity(73U);
    msg.value = 0.5144397016577689;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.25052283376457807);
    msg.setSource(666U);
    msg.setSourceEntity(1U);
    msg.setDestination(47652U);
    msg.setDestinationEntity(83U);
    msg.value = 0.2897851612059851;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.9786530621891504);
    msg.setSource(29856U);
    msg.setSourceEntity(147U);
    msg.setDestination(38181U);
    msg.setDestinationEntity(17U);
    msg.lat = 0.9783693486337105;
    msg.lon = 0.7573057850157232;
    msg.depth.assign("QDTLMMRYOLDFIOKVOSEBHGMAKLXKCNNEMCRVVOLPPIHKJYGVQMWWDYDUZLBSHHXMXSRYSRWAAVEXBIRCLZEDHGWLMIKKSXONQXUFPSQPIWWXWANSNNTHGHMOYZBVQSUUQBANLKRJDCJPCUILZHZKRFIKHSGDYAGBSUVCBYNOROXNWBNJZQAOMVFTEOGEYHQIGZFY");
    msg.vel.assign("JNEKDNIOATJIGJGLNPHYSX");
    msg.dir.assign("KIRTDJXZZOJMWGQUO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.756810569772284);
    msg.setSource(1654U);
    msg.setSourceEntity(37U);
    msg.setDestination(55297U);
    msg.setDestinationEntity(76U);
    msg.lat = 0.6287694346667676;
    msg.lon = 0.2679196022721919;
    msg.depth.assign("ZYKXJWUWLKAKAKSPYXLKEZLONAXWOPBMXJDZMVDOCTHBCODFOZJMQBPVDBARGKSBJEITHFMJBEEWYPPOKVCHJRQZIPBCZCPDUAANMNUQKRQIDFVKMWQPEGXONTSEONTLCNWUNIHQXWUGEJJLDVJZUDVNGWNRTOSIVSVMNFIULGSYUIU");
    msg.vel.assign("LXFWAKRGVSONYCCWTLWDIYRHNQQBEXNK");
    msg.dir.assign("YVSZAUVYTNZKCFEFRNXHLIZVJLBGDYMHUAOLGNYIDAENQWSHWZCPUNVAVJJXPJPBZLOUTDAPUYCBQLQFXUHEGSKGJECQFDVDGQHRNNM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.1566729590366498);
    msg.setSource(15001U);
    msg.setSourceEntity(130U);
    msg.setDestination(33716U);
    msg.setDestinationEntity(140U);
    msg.lat = 0.562621450771069;
    msg.lon = 0.3457865884236938;
    msg.depth.assign("AGBLYJNKORTZKEXMHXCYRYAXQQDXBMFSENQEAJWNLWZOETVZCAPEFSLDGOHXWOUUDBKPUBIKZZHPZNXMSKYFYJZJAWJQCUWXUQKRGIIMCLQMEXVMHRYZIMUPPKADIFOKNAEDSALIYSDHNIEILQUBCTBLTUFQTIYTMADNDBWJYWPFLKTBZOZJCVFRR");
    msg.vel.assign("ZIEMNXXRJPUMRJBPI");
    msg.dir.assign("HGLXYXFCCEALELAXCPQVCIYRKLWHDXMVZJSGUGOYUMJETJBHYADWZNNPUMDGBDRWEHYTLXMZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.0645968210295873);
    msg.setSource(41001U);
    msg.setSourceEntity(200U);
    msg.setDestination(12358U);
    msg.setDestinationEntity(228U);
    msg.source.assign("JYJCQPBIKYLFSQTWWCINFLSKYBZMDXBIZTQNNSEUEAOUWZYWFZLSXIGLESVQIRLQHJGVACHDMIJTTTOTFEMGIRDJOTEIWOBPEENUGKVKXGKRZRKCSKLVPXNJUEKPIUNSLSFKBFYQAGLAZPEBPROHHVCNEDROHTWHADCGSGYXGBBJFWVFQCQVWJLMPOMHCDUXZIDXXADRZRYMPXCHUBYANBYYHRP");
    msg.lat = 0.9598900188048701;
    msg.lon = 0.6308064804034775;
    msg.sog = 0.7944559593882579;
    msg.uc = 0.0201360356061272;
    msg.depth = 0.21164206690959242;
    msg.value = 0.8743622293349698;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.6875177229124777);
    msg.setSource(24216U);
    msg.setSourceEntity(155U);
    msg.setDestination(23583U);
    msg.setDestinationEntity(35U);
    msg.source.assign("DAQKRYLAMZIMPJDRFCCMCCPIRUYOABHEWYSUFSKMWWGWEFCRVHLTNJZIKVEHDDDPDZUZWTKNNVTUAJBHFTP");
    msg.lat = 0.23506006972265792;
    msg.lon = 0.1292722152511847;
    msg.sog = 0.4327823671785237;
    msg.uc = 0.9934462357980023;
    msg.depth = 0.5091635632799408;
    msg.value = 0.7865234106989062;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.3910664089662149);
    msg.setSource(63913U);
    msg.setSourceEntity(252U);
    msg.setDestination(4940U);
    msg.setDestinationEntity(67U);
    msg.source.assign("PXQDPNIJMEQIJWTGZWURVKEAXROTWLTZMUURVGWBOTEDIGTIVQKOUAZQBFOODQWPHELMYBVQYIGOCTGCHEPCAXVSQGDZKWNMDDFGXELBXPLPSZVLMOUOGRETLNKMDBBJZSKQNNHWKCUECSHKXCAHFJWJZBYLLGHXILNSMJFKUYSYNNCAMJXYHAFQFVZRCRRWBRGPFPDLAOQMRVUTCHTVXASIYUBINFZFXYDTYPYKHAZPOASJUNK");
    msg.lat = 0.49198819576666974;
    msg.lon = 0.48782630416201556;
    msg.sog = 0.3365070785454184;
    msg.uc = 0.7920365364574243;
    msg.depth = 0.3555889745240307;
    msg.value = 0.04930831146648118;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.31785714973697754);
    msg.setSource(11892U);
    msg.setSourceEntity(179U);
    msg.setDestination(30600U);
    msg.setDestinationEntity(141U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.3469911890542441;
    tmp_msg_0.x = 0.831722316043841;
    tmp_msg_0.y = 0.1206555460106552;
    tmp_msg_0.z = 0.25958087279253383;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.4082454070569157;
    tmp_msg_1.x = 0.9737461038237553;
    tmp_msg_1.y = 0.8966307249370901;
    tmp_msg_1.z = 0.11285324745857583;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.7267635713443237;
    tmp_msg_2.value = 0.6846096706314664;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.3651339711330256);
    msg.setSource(59019U);
    msg.setSourceEntity(161U);
    msg.setDestination(3094U);
    msg.setDestinationEntity(54U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.4394981005049685;
    tmp_msg_0.x = 0.9416286466990024;
    tmp_msg_0.y = 0.15618241413446898;
    tmp_msg_0.z = 0.9915724780592922;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.008331101833577326;
    tmp_msg_1.x = 0.4896997409939955;
    tmp_msg_1.y = 0.06414129147240777;
    tmp_msg_1.z = 0.7595416789166729;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.8764297998944415;
    tmp_msg_2.value = 0.04635301616537546;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.05222567638640596);
    msg.setSource(28639U);
    msg.setSourceEntity(44U);
    msg.setDestination(9249U);
    msg.setDestinationEntity(232U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.13032050199144196;
    tmp_msg_0.x = 0.3438775249966052;
    tmp_msg_0.y = 0.6846108041779463;
    tmp_msg_0.z = 0.167976129579418;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.04199461777543079;
    tmp_msg_1.x = 0.632949392049657;
    tmp_msg_1.y = 0.8204802471718672;
    tmp_msg_1.z = 0.6271187336143984;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.03423131027497417;
    tmp_msg_2.value = 0.7440945241248424;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.2750370178589002);
    msg.setSource(33209U);
    msg.setSourceEntity(4U);
    msg.setDestination(29875U);
    msg.setDestinationEntity(35U);
    msg.gdop = 0.08465110251510244;
    msg.pdop = 0.7212084227959481;
    msg.tdop = 0.054723239766589105;
    msg.vdop = 0.27822659573662323;
    msg.hdop = 0.9521152154058462;
    msg.ndop = 0.9126327428976032;
    msg.edop = 0.5502279930941404;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.8699922597017588);
    msg.setSource(38665U);
    msg.setSourceEntity(248U);
    msg.setDestination(52469U);
    msg.setDestinationEntity(111U);
    msg.gdop = 0.7193580972155766;
    msg.pdop = 0.6442627681000376;
    msg.tdop = 0.8902364814560638;
    msg.vdop = 0.7598186701309984;
    msg.hdop = 0.5097179549066556;
    msg.ndop = 0.005237051199249332;
    msg.edop = 0.7608595466337004;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.35000481945301853);
    msg.setSource(48514U);
    msg.setSourceEntity(45U);
    msg.setDestination(48664U);
    msg.setDestinationEntity(26U);
    msg.gdop = 0.05436160077039187;
    msg.pdop = 0.7137800494138241;
    msg.tdop = 0.4092951300589305;
    msg.vdop = 0.6288683669491174;
    msg.hdop = 0.10053900629143497;
    msg.ndop = 0.2640470301386151;
    msg.edop = 0.5434011570561442;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.21757438354867675);
    msg.setSource(63623U);
    msg.setSourceEntity(8U);
    msg.setDestination(14296U);
    msg.setDestinationEntity(36U);
    msg.meanx = 0.1793243081381336;
    msg.meany = 0.8675563419119979;
    msg.meanz = 0.8525914013166641;
    msg.dur = 908574180U;
    msg.meanacc = 0.5178989986590071;
    msg.obs = 1253866621U;
    msg.valid = 250U;
    msg.active = 21U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.010056859969068466);
    msg.setSource(36795U);
    msg.setSourceEntity(55U);
    msg.setDestination(6296U);
    msg.setDestinationEntity(251U);
    msg.meanx = 0.1878706058058891;
    msg.meany = 0.814747693199029;
    msg.meanz = 0.3016080233133638;
    msg.dur = 1298333469U;
    msg.meanacc = 0.766564481803365;
    msg.obs = 2916285479U;
    msg.valid = 246U;
    msg.active = 28U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.09768745813276847);
    msg.setSource(37124U);
    msg.setSourceEntity(181U);
    msg.setDestination(25979U);
    msg.setDestinationEntity(249U);
    msg.meanx = 0.4144418489788878;
    msg.meany = 0.13162293783974344;
    msg.meanz = 0.813302342905787;
    msg.dur = 2627593848U;
    msg.meanacc = 0.5774982194314929;
    msg.obs = 3835829577U;
    msg.valid = 127U;
    msg.active = 47U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.1648600824825841);
    msg.setSource(11924U);
    msg.setSourceEntity(105U);
    msg.setDestination(22066U);
    msg.setDestinationEntity(170U);
    msg.gpsfixtype = 59U;
    msg.flags = 226U;
    msg.diffcorr = 42U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.7866864505375462);
    msg.setSource(8728U);
    msg.setSourceEntity(58U);
    msg.setDestination(46853U);
    msg.setDestinationEntity(35U);
    msg.gpsfixtype = 203U;
    msg.flags = 7U;
    msg.diffcorr = 87U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.9352310066590226);
    msg.setSource(26346U);
    msg.setSourceEntity(162U);
    msg.setDestination(16963U);
    msg.setDestinationEntity(189U);
    msg.gpsfixtype = 121U;
    msg.flags = 22U;
    msg.diffcorr = 10U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.15942323784850132);
    msg.setSource(60652U);
    msg.setSourceEntity(38U);
    msg.setDestination(1483U);
    msg.setDestinationEntity(119U);
    msg.gnssid = 178U;
    msg.svid = 139U;
    msg.sigid = 34U;
    msg.freqid = 76U;
    msg.prres = 0.5855227590990935;
    msg.cno = 0U;
    msg.qualityind = 179U;
    msg.corrsource = 183U;
    msg.ionomodel = 22U;
    msg.health = 124U;
    msg.sigflags = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.1117161766028737);
    msg.setSource(34377U);
    msg.setSourceEntity(44U);
    msg.setDestination(34697U);
    msg.setDestinationEntity(218U);
    msg.gnssid = 139U;
    msg.svid = 201U;
    msg.sigid = 17U;
    msg.freqid = 8U;
    msg.prres = 0.16707226374000195;
    msg.cno = 41U;
    msg.qualityind = 77U;
    msg.corrsource = 115U;
    msg.ionomodel = 159U;
    msg.health = 22U;
    msg.sigflags = 68U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.09986570381717041);
    msg.setSource(28427U);
    msg.setSourceEntity(139U);
    msg.setDestination(37669U);
    msg.setDestinationEntity(18U);
    msg.gnssid = 235U;
    msg.svid = 56U;
    msg.sigid = 182U;
    msg.freqid = 29U;
    msg.prres = 0.6649788794757622;
    msg.cno = 128U;
    msg.qualityind = 23U;
    msg.corrsource = 45U;
    msg.ionomodel = 19U;
    msg.health = 12U;
    msg.sigflags = 136U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.6125805913269545);
    msg.setSource(26437U);
    msg.setSourceEntity(229U);
    msg.setDestination(8542U);
    msg.setDestinationEntity(61U);
    msg.numsigs = 174U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 69U;
    tmp_msg_0.svid = 95U;
    tmp_msg_0.sigid = 196U;
    tmp_msg_0.freqid = 82U;
    tmp_msg_0.prres = 0.353229971020364;
    tmp_msg_0.cno = 52U;
    tmp_msg_0.qualityind = 207U;
    tmp_msg_0.corrsource = 92U;
    tmp_msg_0.ionomodel = 3U;
    tmp_msg_0.health = 232U;
    tmp_msg_0.sigflags = 195U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.5219053030189995);
    msg.setSource(48383U);
    msg.setSourceEntity(197U);
    msg.setDestination(14225U);
    msg.setDestinationEntity(56U);
    msg.numsigs = 10U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.5102151635350307);
    msg.setSource(63078U);
    msg.setSourceEntity(247U);
    msg.setDestination(20489U);
    msg.setDestinationEntity(130U);
    msg.numsigs = 187U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.6157934508341395);
    msg.setSource(9117U);
    msg.setSourceEntity(79U);
    msg.setDestination(54908U);
    msg.setDestinationEntity(47U);
    msg.gnssid = 27U;
    msg.svid = 125U;
    msg.elev = 0.7577036688007778;
    msg.azim = 0.6056636391743644;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.6948773858019626);
    msg.setSource(32454U);
    msg.setSourceEntity(212U);
    msg.setDestination(4437U);
    msg.setDestinationEntity(48U);
    msg.gnssid = 123U;
    msg.svid = 251U;
    msg.elev = 0.2979077244851952;
    msg.azim = 0.5023080510457776;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.23215197067574578);
    msg.setSource(19280U);
    msg.setSourceEntity(251U);
    msg.setDestination(21305U);
    msg.setDestinationEntity(58U);
    msg.gnssid = 86U;
    msg.svid = 84U;
    msg.elev = 0.8006296097305724;
    msg.azim = 0.5342870438017844;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.5273950742004508);
    msg.setSource(59687U);
    msg.setSourceEntity(218U);
    msg.setDestination(21843U);
    msg.setDestinationEntity(179U);
    msg.numsvs = 78U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.2895424214819081);
    msg.setSource(7743U);
    msg.setSourceEntity(175U);
    msg.setDestination(36158U);
    msg.setDestinationEntity(164U);
    msg.numsvs = 70U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.8836786614318605);
    msg.setSource(57336U);
    msg.setSourceEntity(244U);
    msg.setDestination(6608U);
    msg.setDestinationEntity(139U);
    msg.numsvs = 3U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 251U;
    tmp_msg_0.svid = 166U;
    tmp_msg_0.elev = 0.6509044404060326;
    tmp_msg_0.azim = 0.932558369691788;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.6417422903781124);
    msg.setSource(9956U);
    msg.setSourceEntity(11U);
    msg.setDestination(7319U);
    msg.setDestinationEntity(240U);
    msg.refstationid = 23968U;
    msg.itow = 1096011398U;
    msg.relposn = 0.6036299232243026;
    msg.relpose = 0.41162823809131044;
    msg.relposd = 0.11874058569021329;
    msg.relposlength = 0.7425216158823018;
    msg.relposheading = 0.9612916012975714;
    msg.accn = 0.2450907139223405;
    msg.acce = 0.04180864578420196;
    msg.accd = 0.4027615313615367;
    msg.acclength = 0.3051709858424855;
    msg.accheading = 0.6066295823585033;
    msg.gnssfixok = 104U;
    msg.diffsoln = 81U;
    msg.relposvalid = 105U;
    msg.ismoving = 174U;
    msg.refposmiss = 161U;
    msg.refobsmiss = 16U;
    msg.relposheadingvalid = 231U;
    msg.carrsoln = 198U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.4997116612528808);
    msg.setSource(55025U);
    msg.setSourceEntity(177U);
    msg.setDestination(19497U);
    msg.setDestinationEntity(193U);
    msg.refstationid = 50262U;
    msg.itow = 423529836U;
    msg.relposn = 0.9477138756089787;
    msg.relpose = 0.5026031506797703;
    msg.relposd = 0.5858554692343069;
    msg.relposlength = 0.413003002549136;
    msg.relposheading = 0.23445088247129076;
    msg.accn = 0.381406502191855;
    msg.acce = 0.40138745962502076;
    msg.accd = 0.9860229282204511;
    msg.acclength = 0.22320513654202145;
    msg.accheading = 0.42754547770912266;
    msg.gnssfixok = 43U;
    msg.diffsoln = 21U;
    msg.relposvalid = 44U;
    msg.ismoving = 251U;
    msg.refposmiss = 171U;
    msg.refobsmiss = 95U;
    msg.relposheadingvalid = 234U;
    msg.carrsoln = 228U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.2077650931321693);
    msg.setSource(46347U);
    msg.setSourceEntity(242U);
    msg.setDestination(38778U);
    msg.setDestinationEntity(86U);
    msg.refstationid = 35244U;
    msg.itow = 3158716056U;
    msg.relposn = 0.6655040445269825;
    msg.relpose = 0.6023379540776034;
    msg.relposd = 0.4000996100954486;
    msg.relposlength = 0.36207797174988354;
    msg.relposheading = 0.43905885370102204;
    msg.accn = 0.320728251419234;
    msg.acce = 0.7000898448140652;
    msg.accd = 0.38990281998035836;
    msg.acclength = 0.151687171153992;
    msg.accheading = 0.012054756242323994;
    msg.gnssfixok = 88U;
    msg.diffsoln = 210U;
    msg.relposvalid = 117U;
    msg.ismoving = 18U;
    msg.refposmiss = 30U;
    msg.refobsmiss = 72U;
    msg.relposheadingvalid = 101U;
    msg.carrsoln = 125U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.6947846512291282);
    msg.setSource(62360U);
    msg.setSourceEntity(91U);
    msg.setDestination(13123U);
    msg.setDestinationEntity(13U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.8976669808940084);
    msg.setSource(38527U);
    msg.setSourceEntity(27U);
    msg.setDestination(24789U);
    msg.setDestinationEntity(151U);
    IMC::CollisionAvoidance tmp_msg_0;
    tmp_msg_0.mmsi.assign("ZENTQKCSYOFHRCVUISIDLJVTAIGSBRNUCGGLPTIXSFCLVXWANCBPGSGPEYVAALWNPKFRKJBYNBBKDJOJUMERZQDEISPOYDSADYDJWAXNVOHQLCLUNCZBXREKZFKPKFUPRHOYEGUHMXTBHMLGOITSTQCGWHKHRDMVVMJJQZQHVFCTMNLLAEMPKSXMQJIMTOWATPFJDY");
    tmp_msg_0.lat = 0.15573749881540444;
    tmp_msg_0.lon = 0.5698654875217836;
    tmp_msg_0.x = 0.0845262302976788;
    tmp_msg_0.y = 0.27841504354328006;
    tmp_msg_0.speed = 0.8475566148574446;
    tmp_msg_0.course = 0.6910171420328397;
    tmp_msg_0.dist = 0.2128510986729465;
    tmp_msg_0.length = 0.6592928281941538;
    tmp_msg_0.width = 0.41369010985761356;
    tmp_msg_0.o_vect = 0.13107458709417508;
    msg.obstacles.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.3241924977960876);
    msg.setSource(13870U);
    msg.setSourceEntity(254U);
    msg.setDestination(46371U);
    msg.setDestinationEntity(80U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.6752410638039994);
    msg.setSource(50422U);
    msg.setSourceEntity(170U);
    msg.setDestination(13115U);
    msg.setDestinationEntity(56U);
    msg.mmsi.assign("GQDPHRICMSFDTUHBWKNCGVDUYIEYKPJVBXDHXIYQNHZOZLVNRPARZBOCXLYGPFLCLDAXGDTZEEMSHURIEEQZVIHWANCPOOKNTQIYDMSVOWTXFMRCUSODZPSXTOFWTNQMXSHGVUSTJKFFMPRANLSRILZAGPWBCFEEUVJPWQXDAYIWYWGVEMLVFWHUEBZYABCYWFKJACJYNJKETQMMLIZJKRDURCQQQUKTJOURJKBSBGAB");
    msg.cog_int = 0.6348776679717554;
    msg.sog_int = 0.29327584259097983;
    msg.state.assign("QCMUVOSXPSFRQCVTAIXTMKWQKFLUAZEODAYJYWHDFSZMRSNNTXWEQIQBAOXOGGYYKXVJJBFLWROFTBWNTMMHINCSDCJKTRDEPUHEAXPLGDYAKEKHJRKSCCWGJLWAIEKEOFJDUIHIJBTVKQPUQMRLUNDRUBBVOSPVZFEOGNHLTLLCHYIFQCBLGRTIGXJBHBMYPMIWKSJHVCAEWOVZGDWNFN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.29502934677695114);
    msg.setSource(49209U);
    msg.setSourceEntity(230U);
    msg.setDestination(36659U);
    msg.setDestinationEntity(89U);
    msg.mmsi.assign("RSMMCCBMFHOXPHIMWJBTGFRZHKEPMMJBQBSMZEJPJUSYZVZFWLCLXRXLYAANDHIOYJPESKTAKYEIXWDNFCATFBYDOEUUYLDHHFWQRNXGSWZPCEVCGWTAUPVRJPVCPIWBLOESBJRUVCOZOVTZFJSWTVXEKJYGDAMQHLDGSOHHRLKYIVPQAQIGIGINURLJQKFNMGKOGQWATUY");
    msg.cog_int = 0.31791985860403416;
    msg.sog_int = 0.27478161928527944;
    msg.state.assign("DMIZBKNCYJJFEKHVGAJOIRKOMQZDAJURTLIWWQXXZZMMNGQZKUAANDELTFNQBTXTHSGJCZOZTWPFPKLCJHJVNOXQFFIVUMDCRGMRQISXHIYNOKBQSOAXDUHUCJAOLTAIOBUYISAKEG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.13412667785501575);
    msg.setSource(12630U);
    msg.setSourceEntity(12U);
    msg.setDestination(51319U);
    msg.setDestinationEntity(178U);
    msg.mmsi.assign("MWGDTXMXEONQIWJGAPTVDHSVRDCCJKEYCJTAPSXYCHIDXYCQEEPAUOBFD");
    msg.cog_int = 0.04946137417753782;
    msg.sog_int = 0.7611224534573295;
    msg.state.assign("TLGUYIIJYXZHFJKWQAPNFPOMVNCBYOUXSCJUAVUEVBNDRTNBGZWGOJCKFXFMBRYTKJHZVHYQZBMTRJBHKXZBYHOJAFOSEDHPYOIIXLVEHJFBLFGVHRLAUVISDNSRACMAQMGIWEXBWZPISPPGDARRKTZEXTSLHELOPXQTOQCQNZKNRETVSPUXYTNXKWCDOMDQLFUDGAYFLDMCLJUNSWGZKYWWEAWBAOPJTUGMQVEISZPUDLFCVKM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  return test.getReturnValue();
}
