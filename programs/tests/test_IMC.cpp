//***************************************************************************
// Copyright 2007-2023 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Ricardo Martins                                                  *
//***************************************************************************
// Automatically generated.                                                 *
//***************************************************************************
// IMC XML MD5: 9bcf4ad79d246ffa0ed6d19987c53590                            *
//***************************************************************************

// DUNE headers.
#include <DUNE/DUNE.hpp>

using DUNE_NAMESPACES;

#include "Test.hpp"

int
main(void)
{
  Test test("IMC Serialization/Deserialization");

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.4219466252739863);
    msg.setSource(55548U);
    msg.setSourceEntity(185U);
    msg.setDestination(8540U);
    msg.setDestinationEntity(26U);
    msg.state = 3U;
    msg.flags = 110U;
    msg.description.assign("ZJMOFYNXXMUQMSJIETQTIKOWPCR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.04167812103479518);
    msg.setSource(33171U);
    msg.setSourceEntity(112U);
    msg.setDestination(3041U);
    msg.setDestinationEntity(207U);
    msg.state = 62U;
    msg.flags = 84U;
    msg.description.assign("MBENKDZUSBXJGIQGPCAIXFKQSRZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.28429758563199303);
    msg.setSource(34568U);
    msg.setSourceEntity(12U);
    msg.setDestination(53438U);
    msg.setDestinationEntity(21U);
    msg.state = 71U;
    msg.flags = 158U;
    msg.description.assign("SHQUZNBHLABMITEAWVYQPNNNIZURAJHSDGZWVXZANCHGCTLJEXZDYSDUCFWKDUYVFAIHWBRWLKFQQGMZXPPMCJSNWBOLUBGRAPJRXZZQYARFCBTGIOLBIEY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.4180066281184709);
    msg.setSource(40380U);
    msg.setSourceEntity(66U);
    msg.setDestination(20690U);
    msg.setDestinationEntity(206U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.47810167169330264);
    msg.setSource(62552U);
    msg.setSourceEntity(14U);
    msg.setDestination(61198U);
    msg.setDestinationEntity(73U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.9839112489096853);
    msg.setSource(40838U);
    msg.setSourceEntity(66U);
    msg.setDestination(11428U);
    msg.setDestinationEntity(161U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.38445297041657045);
    msg.setSource(51978U);
    msg.setSourceEntity(99U);
    msg.setDestination(29743U);
    msg.setDestinationEntity(51U);
    msg.id = 81U;
    msg.label.assign("PBSDKJKRCTZUFQXLUDNNJNJGYUUBUVMBDSYAGSIYGSUYDRRIIAILZTUMJDLVXRHOHMWWDNQTBWQLWGCPTXCNVSCOZAMGPZTKAUDPYFAKNPNESCVTRDVRDNQZQWOATXSK");
    msg.component.assign("JSOWNPQNPHXSOWNPXOGFMCXRFBJLARMQHMIRBKFGXVENMRUSJYSNVWDTTMCQRPQZLGYTMRZBLOKOQIWUDTAEGFIEIRKRVEHZEDLWZFNMFHMTDAUVBIBUHKQELSSRGNEXDUMQKSZHIWGLQZAYJJGLGDFGHTVLOYHCONNVPKABBYJLNTUFWQAJRMBUTCOUJXPSZXYKULYDIXPPUZQDWPFCEEPZDXJWXCCSFETYYADIAVHYOHK");
    msg.act_time = 42137U;
    msg.deact_time = 41140U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.9929590860075899);
    msg.setSource(39514U);
    msg.setSourceEntity(209U);
    msg.setDestination(1855U);
    msg.setDestinationEntity(153U);
    msg.id = 159U;
    msg.label.assign("LNRPDGPKRXQDUPPXIZDJSXZOVUFGYIMWWYZLHWBAMMGYJHYXNVPTAGWXLMSEOJELDCGMDATAJCBKDBAVXEJAOEKXGFDPIXZTJNNLURTVUUWHEOSOHGWQCRCRZHGQQOIAKSECTFVVLMDLBNKMMQWKREAAFFMOMZUIGFGJJQBWHQWRXFEYICEKQFVBTLNSVJORFCITHLFQZHNOUBYTDBHWZYPKBCKHZQKPZOABYXPSCETC");
    msg.component.assign("OXIHCKKNJCQXTXAECXUKLFKOSXNHLYQFSDJDKZWUPLPDAWUHVSYOZMFTKVYMTBMQHCVGIIBUSYXRYQNESRDYUKGVYPSKMQBUPVUOJWGRGYETJVULFSKNWEILXOVUBNWGFFCPRJQCTTLDAAZPWCHZFM");
    msg.act_time = 18519U;
    msg.deact_time = 62302U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.19050306545368156);
    msg.setSource(46073U);
    msg.setSourceEntity(37U);
    msg.setDestination(33523U);
    msg.setDestinationEntity(228U);
    msg.id = 235U;
    msg.label.assign("PAEDNCFYQABRPIUIWNHVBJPLDNPTZPBTWLABVAKGIOSIGHFWRGRCUZUNQIBWFOEYKIYXBUYAJSZHMGUOEWVKEDRDUJRGSUSQQGTNALLNMZTHKOPKYFFRXCCCHEMMGNTWJRJPOQYVIRNMNZIXBKWMWJXFDXSMXO");
    msg.component.assign("HMPIGUREESTTDGXZHWVLYEZSLPHASNNMNTBXNXKPIHPVKVFLUFFJZTIRMCQJSJXEXYMHIZQBPIUJVFVBENCHEWBOCOLOOLLCSDKAUPDIIEYQSQIBAHMHRGHVSGUCTIQKUQPZIRG");
    msg.act_time = 13081U;
    msg.deact_time = 18297U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.49052481779294865);
    msg.setSource(63386U);
    msg.setSourceEntity(60U);
    msg.setDestination(56444U);
    msg.setDestinationEntity(204U);
    msg.id = 215U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.6544322720999446);
    msg.setSource(24030U);
    msg.setSourceEntity(69U);
    msg.setDestination(44440U);
    msg.setDestinationEntity(229U);
    msg.id = 4U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.12779525387379276);
    msg.setSource(63517U);
    msg.setSourceEntity(23U);
    msg.setDestination(16556U);
    msg.setDestinationEntity(193U);
    msg.id = 94U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.5069860195169656);
    msg.setSource(5301U);
    msg.setSourceEntity(95U);
    msg.setDestination(31807U);
    msg.setDestinationEntity(73U);
    msg.op = 52U;
    msg.list.assign("LRMJSTLKONVWYLZFBJLAINKLXPQBHBQKRJZVLYWVXFUDENSKZOYCZXDPTUCGYXJIWRMXEBRVJSPADRAMEINXMEDU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.5121221623289629);
    msg.setSource(2824U);
    msg.setSourceEntity(160U);
    msg.setDestination(46156U);
    msg.setDestinationEntity(93U);
    msg.op = 49U;
    msg.list.assign("ENPTMTQRTHFDRVWLNWGNIBVSHKNTRTCYPVPPUEAQDTELUFSMWGMGFBDHOUWHJPQNLGMDQIXJYSRXKSCVKPKIAAASERXDQUFFMROTGOWXHDRLLLAYKVKXWDODVCBFYZZOKUYICNJLVIKMCGTZO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.4840394498794536);
    msg.setSource(5034U);
    msg.setSourceEntity(78U);
    msg.setDestination(46597U);
    msg.setDestinationEntity(130U);
    msg.op = 151U;
    msg.list.assign("NJNPDJFVRCDUZCJHRPAVFSTEBMRNZATWACRMBIRLRGIKEVENSKUAKZIIPMJHGPVY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.7342753291924939);
    msg.setSource(26471U);
    msg.setSourceEntity(17U);
    msg.setDestination(57785U);
    msg.setDestinationEntity(109U);
    msg.value = 0U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.2347578281069993);
    msg.setSource(31878U);
    msg.setSourceEntity(140U);
    msg.setDestination(44274U);
    msg.setDestinationEntity(202U);
    msg.value = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.7437508445321608);
    msg.setSource(50826U);
    msg.setSourceEntity(109U);
    msg.setDestination(1431U);
    msg.setDestinationEntity(84U);
    msg.value = 185U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.6029574832155848);
    msg.setSource(33378U);
    msg.setSourceEntity(232U);
    msg.setDestination(20851U);
    msg.setDestinationEntity(135U);
    msg.consumer.assign("CJPIHDRTUGXEHXQNUDTTZRMSRFOKPXPNTIVBXZCGVGWWPJIFOKNJDSZYTJMWNYGYBOTIEXIIMLNFXCUCXGLVMEYZLUSAENRTOSWFKXGRZQQAKOKHZZAAVGFHCUAFLPKNDEBKUNMEWFSISFLQDIUO");
    msg.message_id = 13865U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.8111227140065599);
    msg.setSource(13378U);
    msg.setSourceEntity(186U);
    msg.setDestination(58717U);
    msg.setDestinationEntity(125U);
    msg.consumer.assign("NEVTZSPMNOIPQJNJEPOLVUXQLGQIINJBCHFQQGYKTEQCXIQAHLCLLEYZDZQVVOHWJXRSARWMNFHXZYWFSBKIVDGAYZUWNXXONTPFGFZVCWALGFLEXNLFTCUILIFPHNGBJYCIVDWZSHYVZZXARPPDKOMTNSBMAROKSRWCJBOBKTVMHLEADJPBMJAFKVBDRTUIDJOBUAURGQXDWUIHGJKRSKTWCYPCHDMFEMOYDGHMBSOPQTEYUUXUZM");
    msg.message_id = 64918U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.3574373720028552);
    msg.setSource(23333U);
    msg.setSourceEntity(41U);
    msg.setDestination(47705U);
    msg.setDestinationEntity(38U);
    msg.consumer.assign("JWTDTHXPFITAUOOJMIBBRGGWLUDVKOCHBUBCPAMVISHSJVPWQODUXTMBXJKZIAJPDLEABNNLKGDRVZCEUGJNMXVTLQODQTDMOYSGCCFCAZFYPT");
    msg.message_id = 16786U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.26892692383575834);
    msg.setSource(29131U);
    msg.setSourceEntity(9U);
    msg.setDestination(41431U);
    msg.setDestinationEntity(122U);
    msg.type = 134U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.3014312065056314);
    msg.setSource(55876U);
    msg.setSourceEntity(135U);
    msg.setDestination(9903U);
    msg.setDestinationEntity(239U);
    msg.type = 213U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.16594772988816586);
    msg.setSource(34165U);
    msg.setSourceEntity(254U);
    msg.setDestination(612U);
    msg.setDestinationEntity(170U);
    msg.type = 136U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.9514464897339735);
    msg.setSource(22912U);
    msg.setSourceEntity(241U);
    msg.setDestination(33688U);
    msg.setDestinationEntity(188U);
    msg.op = 52U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.5529465320798375);
    msg.setSource(23057U);
    msg.setSourceEntity(157U);
    msg.setDestination(12037U);
    msg.setDestinationEntity(24U);
    msg.op = 105U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.6553729691219735);
    msg.setSource(5201U);
    msg.setSourceEntity(131U);
    msg.setDestination(30049U);
    msg.setDestinationEntity(254U);
    msg.op = 245U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.815604039898485);
    msg.setSource(49648U);
    msg.setSourceEntity(64U);
    msg.setDestination(25119U);
    msg.setDestinationEntity(11U);
    msg.total_steps = 209U;
    msg.step_number = 131U;
    msg.step.assign("AMVSIPQYZRIXNUICUABVTJCCHKRMLJXADONPEMSQWRGOWJNFPACWMHXTGMYDDAAPUNXYRHFQDEVTXODZUNIWOBGFGQPIJORBZHTWKLJRLPCIMVKWLYLWNKEXZQPTAXQNHYWPSSCZDLSKTHCQJITOENGVUKBNJCRXHQLXAZUEFEBVOJDYPGTZVSFSGFFIVHZLFNSTGWXAUOMHKDIBJRRKBLUZMMIKOVYKTLGFFYWAHBBYDPBUSEUQSCME");
    msg.flags = 230U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.6139838847071015);
    msg.setSource(31156U);
    msg.setSourceEntity(59U);
    msg.setDestination(57128U);
    msg.setDestinationEntity(188U);
    msg.total_steps = 22U;
    msg.step_number = 127U;
    msg.step.assign("NJYASMUVGWQIIHQIITSQUXHDRPCDKOITHTLWNOWJAINMDSWVBGXOPVOTRUQPWWCGRQCKJXRZURUTBFMICCXNSTLDAKFCNWAPGDBHLQOSPZ");
    msg.flags = 203U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.9552251353034207);
    msg.setSource(23756U);
    msg.setSourceEntity(105U);
    msg.setDestination(62027U);
    msg.setDestinationEntity(111U);
    msg.total_steps = 28U;
    msg.step_number = 45U;
    msg.step.assign("ZYYQPOZSSAKZRZTFNUENNUEXFENTRGQORXPPXETOIDFFADZIOYMVXHJTWWWNGMGGUVTVHZSHZSUFCDIKXURRBLKGFTHYCQVVAEWQJCQQOSRMGGTNKCSCFQFCTROFPWMEYBMJVNKYWQBSWADDSLRLLGGORZMAJFJONQADBEDMCJWYHYDPPJRBZPMXSJVKXQAVAICOKBTPDUVITCHEJBCNLK");
    msg.flags = 234U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.34111155861187314);
    msg.setSource(30844U);
    msg.setSourceEntity(232U);
    msg.setDestination(7490U);
    msg.setDestinationEntity(178U);
    msg.state = 119U;
    msg.error.assign("ESINCDECCKMBAHWIREPQKNTOBOMKHGENICGDJZYIHYTJRHYFDLURZXREUOHYEOYQPGVTSXPMXFKFKAOSEMABPMZQDMTGKJKBVXHVAMNGVQULCODLNQYRXLLMXAWUUTUVPCPZJBSQZNVSOTBWASYRAPGINNIYDTTYWGFXDIWAEJXGFHRJYW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.7180745384681644);
    msg.setSource(22065U);
    msg.setSourceEntity(11U);
    msg.setDestination(55478U);
    msg.setDestinationEntity(171U);
    msg.state = 251U;
    msg.error.assign("ZNZDTXMBSQWOEAYJWBBYXLFNRKIKTJYSQDAMOOLZUPZQEYOPCTNFPISGUXNDYSKDDQBQTGRHHGZAFEULWRXVECAYDJVJKIKVMBMNWEALFXHQYNSNWLJHAUHSMGTGXLLZCBHDLZCGZWPOJGSTAUIHPSRLQYVGCECYURRFWJVXZHKIHEPGOICBNOVPOJMNUFVXVKDIAEXMWGTTVKHIRZQDRIWRAUTROMBJDOMCEQCUT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.15741760545001426);
    msg.setSource(212U);
    msg.setSourceEntity(58U);
    msg.setDestination(54037U);
    msg.setDestinationEntity(142U);
    msg.state = 37U;
    msg.error.assign("CRCIOUQGJGNDSPAGWSGGNMTWRYJMEEHWRPDWAMQBDJFHYQUAMJQWPVTQQBEHXUVTCOCDUOXBOXZARZGELIKDWEZKMINYFNBNLLSAACSZCBFTKNHUOTXJOYYSOKKAHKSXLYEQCFIHCJBFVHPLIJDGTRSZMGRZWLMFIVHSZAUUXZVYRJOIQZDRAPBDWENUSFIVLRXA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.7548075202581676);
    msg.setSource(53078U);
    msg.setSourceEntity(176U);
    msg.setDestination(6793U);
    msg.setDestinationEntity(69U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.847703424040254);
    msg.setSource(18275U);
    msg.setSourceEntity(106U);
    msg.setDestination(11163U);
    msg.setDestinationEntity(30U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.6785894256586461);
    msg.setSource(60265U);
    msg.setSourceEntity(62U);
    msg.setDestination(21529U);
    msg.setDestinationEntity(71U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.7070959758174186);
    msg.setSource(32988U);
    msg.setSourceEntity(63U);
    msg.setDestination(40183U);
    msg.setDestinationEntity(163U);
    msg.op = 92U;
    msg.speed_min = 0.10895595763987276;
    msg.speed_max = 0.42146825065524196;
    msg.long_accel = 0.038369974757908154;
    msg.alt_max_msl = 0.5620839028243345;
    msg.dive_fraction_max = 0.6802614018214292;
    msg.climb_fraction_max = 0.8366486174667926;
    msg.bank_max = 0.7478315727139122;
    msg.p_max = 0.12812513486847554;
    msg.pitch_min = 0.5092361376159708;
    msg.pitch_max = 0.41409772206230533;
    msg.q_max = 0.2526217168649191;
    msg.g_min = 0.982118686760052;
    msg.g_max = 0.19141821057064534;
    msg.g_lat_max = 0.3192315344845791;
    msg.rpm_min = 0.9484217573149858;
    msg.rpm_max = 0.763461538444536;
    msg.rpm_rate_max = 0.18944290432049593;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.37054341885317643);
    msg.setSource(8372U);
    msg.setSourceEntity(89U);
    msg.setDestination(14882U);
    msg.setDestinationEntity(195U);
    msg.op = 198U;
    msg.speed_min = 0.5238440724870308;
    msg.speed_max = 0.8037464566300342;
    msg.long_accel = 0.9975085472740878;
    msg.alt_max_msl = 0.572875067612976;
    msg.dive_fraction_max = 0.6440095036068334;
    msg.climb_fraction_max = 0.33576670355913674;
    msg.bank_max = 0.9231478157847869;
    msg.p_max = 0.5721103311578097;
    msg.pitch_min = 0.33885402599805337;
    msg.pitch_max = 0.22683109454254524;
    msg.q_max = 0.9535375654699798;
    msg.g_min = 0.3495104985639894;
    msg.g_max = 0.0653687070825053;
    msg.g_lat_max = 0.4612283913270697;
    msg.rpm_min = 0.8536685398008128;
    msg.rpm_max = 0.1065692265841045;
    msg.rpm_rate_max = 0.5385631442501461;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.0690492701688511);
    msg.setSource(731U);
    msg.setSourceEntity(218U);
    msg.setDestination(6032U);
    msg.setDestinationEntity(108U);
    msg.op = 54U;
    msg.speed_min = 0.4012181626782938;
    msg.speed_max = 0.32083133668528674;
    msg.long_accel = 0.9292583309135134;
    msg.alt_max_msl = 0.5279294039110696;
    msg.dive_fraction_max = 0.8380536586918017;
    msg.climb_fraction_max = 0.6351479015872525;
    msg.bank_max = 0.9449241769346024;
    msg.p_max = 0.6833194847958513;
    msg.pitch_min = 0.37776999197988115;
    msg.pitch_max = 0.9004233234225572;
    msg.q_max = 0.5523281762842206;
    msg.g_min = 0.06082923398605233;
    msg.g_max = 0.6592088167451826;
    msg.g_lat_max = 0.07471591499411101;
    msg.rpm_min = 0.37161878229927225;
    msg.rpm_max = 0.7985705565609583;
    msg.rpm_rate_max = 0.29997833933471396;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.18028448652231432);
    msg.setSource(7177U);
    msg.setSourceEntity(87U);
    msg.setDestination(4860U);
    msg.setDestinationEntity(240U);
    IMC::GpsNavData tmp_msg_0;
    tmp_msg_0.itow = 1716590410U;
    tmp_msg_0.lat = 0.20495808242204938;
    tmp_msg_0.lon = 0.6126332855015633;
    tmp_msg_0.height_ell = 0.9505016472460638;
    tmp_msg_0.height_sea = 0.43017833092060453;
    tmp_msg_0.hacc = 0.37113167621830745;
    tmp_msg_0.vacc = 0.5973668338456628;
    tmp_msg_0.vel_n = 0.10275011417623758;
    tmp_msg_0.vel_e = 0.5580523222451179;
    tmp_msg_0.vel_d = 0.7614168220612496;
    tmp_msg_0.speed = 0.33887035148302924;
    tmp_msg_0.gspeed = 0.969311128328509;
    tmp_msg_0.heading = 0.6135588381147263;
    tmp_msg_0.sacc = 0.43122003174355594;
    tmp_msg_0.cacc = 0.3830438869634566;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.7493277952272771);
    msg.setSource(8978U);
    msg.setSourceEntity(248U);
    msg.setDestination(56504U);
    msg.setDestinationEntity(98U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.07085559623049198);
    msg.setSource(49143U);
    msg.setSourceEntity(158U);
    msg.setDestination(16744U);
    msg.setDestinationEntity(25U);
    IMC::VehicleFormation tmp_msg_0;
    tmp_msg_0.lat = 0.3899351692314831;
    tmp_msg_0.lon = 0.16291195083566623;
    tmp_msg_0.z = 0.5282764451617571;
    tmp_msg_0.z_units = 25U;
    tmp_msg_0.speed = 0.9440314394653277;
    tmp_msg_0.speed_units = 23U;
    IMC::VehicleFormationParticipant tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vid = 59497U;
    tmp_tmp_msg_0_0.off_x = 0.8137290743557637;
    tmp_tmp_msg_0_0.off_y = 0.007338961190803128;
    tmp_tmp_msg_0_0.off_z = 0.6454142585999236;
    tmp_msg_0.participants.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_time = 0.47192754330477815;
    tmp_msg_0.custom.assign("ZHVSFMNIFATGREXGBWVHUAPHKWQEANIZOYOMTHDWAWBABADQCQPFVJOSLDGFPEPWNUKKQCDKJNMGXLGKSYQSRQVKYOMLVWJZXGESTPPIEVJNNMSOPGGPREFKETYDTQFYHJNBRUBUYXZHZFFKSJIAXLTHZDBBVRCCYJXDYZWLKBBGUXIAZVKFBTRRIYESPUZOIFUWECUHELNNMHDGUQCMTNROXZPC");
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.8078685096268815);
    msg.setSource(45644U);
    msg.setSourceEntity(247U);
    msg.setDestination(21623U);
    msg.setDestinationEntity(114U);
    msg.lat = 0.19417928573484078;
    msg.lon = 0.32681798579201626;
    msg.height = 0.32104666943479043;
    msg.x = 0.18544034276831023;
    msg.y = 0.268822335465166;
    msg.z = 0.8600638234791783;
    msg.phi = 0.11255996507079735;
    msg.theta = 0.47506412972569256;
    msg.psi = 0.7932377759169261;
    msg.u = 0.324434340901789;
    msg.v = 0.11980564329325705;
    msg.w = 0.6361927553277757;
    msg.p = 0.6669045088700566;
    msg.q = 0.08343861769012895;
    msg.r = 0.5220396688136734;
    msg.svx = 0.5266069780437725;
    msg.svy = 0.3319919747277541;
    msg.svz = 0.9088174532603596;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.44472712802147973);
    msg.setSource(17721U);
    msg.setSourceEntity(34U);
    msg.setDestination(27794U);
    msg.setDestinationEntity(130U);
    msg.lat = 0.7513427362550255;
    msg.lon = 0.016800391143508286;
    msg.height = 0.07559099219391818;
    msg.x = 0.28264889918589986;
    msg.y = 0.6666155738304157;
    msg.z = 0.6643375116262038;
    msg.phi = 0.1917867556075079;
    msg.theta = 0.9479932835443524;
    msg.psi = 0.6207889998169993;
    msg.u = 0.07312936703391903;
    msg.v = 0.5771092737109159;
    msg.w = 0.018453720188664646;
    msg.p = 0.4100716541922662;
    msg.q = 0.1236440025215425;
    msg.r = 0.09699696073933461;
    msg.svx = 0.38361285134214773;
    msg.svy = 0.48927268145811764;
    msg.svz = 0.7488355393986534;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.9290594331654332);
    msg.setSource(29342U);
    msg.setSourceEntity(254U);
    msg.setDestination(8145U);
    msg.setDestinationEntity(78U);
    msg.lat = 0.7170304358767008;
    msg.lon = 0.631817031479907;
    msg.height = 0.2854635683423068;
    msg.x = 0.6361597015716617;
    msg.y = 0.5556606776196765;
    msg.z = 0.7272733207837567;
    msg.phi = 0.09830486676305217;
    msg.theta = 0.2754287840005727;
    msg.psi = 0.050890367645302415;
    msg.u = 0.016116744459538812;
    msg.v = 0.23104115345541398;
    msg.w = 0.9983681792606761;
    msg.p = 0.7904738714200745;
    msg.q = 0.5429193584095131;
    msg.r = 0.7531163496494558;
    msg.svx = 0.8992432001693146;
    msg.svy = 0.4144216313409821;
    msg.svz = 0.7581819764650192;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.835594917178682);
    msg.setSource(27435U);
    msg.setSourceEntity(119U);
    msg.setDestination(49810U);
    msg.setDestinationEntity(152U);
    msg.op = 140U;
    msg.entities.assign("RRQMHLEEBFNIOSNLMTYGBBUBMIDVQCCNWGVMBQJAOEHIFELSSQVZFQTVSZENUGBEECHAPUHCWMWJUTANKOEWDNKNMPYCBIXOCCONFMSUARJGZUAYAAGWD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.5280280870501259);
    msg.setSource(20706U);
    msg.setSourceEntity(62U);
    msg.setDestination(40702U);
    msg.setDestinationEntity(243U);
    msg.op = 22U;
    msg.entities.assign("UADQPLDTUMSGETVQAXQLRAQVJHANZIIIOUBNTXHHNSLWQWDXURKEPIFVORKQSFGMBPAGZEMJEXOBNRRDSKRJWNYLKIFJJENBGUGZCSXKHEDMLYUKBFLSFZUBOLMSXLWIBUKYSVROKXTXWFOZCRIURVYOVCAXCDAHQGFYGTRUDYGJHZOEVIZTNZAWHCIPIYDVQTACPDGTLGQVEBMBPAMYTSECWJQLFXSWWPNHCFNPHPMKJFJVKOJBZTYDOMCH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.8942370603403957);
    msg.setSource(6860U);
    msg.setSourceEntity(59U);
    msg.setDestination(41301U);
    msg.setDestinationEntity(106U);
    msg.op = 171U;
    msg.entities.assign("PAHFLNNBZKQEOKLPSODFYKPWYSHWGGMYXGUITVFRINNLRQFRDNLTXADIYZZBOWSVZWQQAGGTRCSDQSBHHQMJYIEBVGVVOFIVLRCAMMZLJDKHYAXCSSEIAQCVXDOURPFMUWPWWQETHNRKFWKLMBJMRJIFZWENOVOUKGEDCXIHCPTBYIOQPJMNUZLJCYXDPUUXVPZAERYSCHMUCEKADFBLFAKYNELAZVXXKJN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.08135750811056819);
    msg.setSource(14898U);
    msg.setSourceEntity(228U);
    msg.setDestination(57558U);
    msg.setDestinationEntity(53U);
    msg.type = 224U;
    msg.speed = 54732U;
    const signed char tmp_msg_0[] = {5, -70, 14, -121, 35, 29, 26, 13, -91, -5, -88, -24, -121, 121, 47, 97, -43, 85, -103, -102, -13, -50, -3, 82, -92, 26, 107, 87, -127, 83, 117, -40, -41, 38, -94, 26, 36, -72, 75, 47, -93, 14, 87, 60, 90, -115, 86, 77, -57, -118, -123, -110, -93, 29, -123, -124, 110, 119, 71, 68, -9, 78, 95, 94, -25, -86, -66, 88, 25, 15, -67, -24, 3, -46, 19, 81, 51, 25, 62, -100, 87, -75, -110, -67, 47, -89, -32, -72, -92, -34, 26, -76, 44, 120, 5, 79, -94, -95, -117, 64, 15, 50, -76, 19, -64, -71, -91, -12, 43, -121, 70, -77, 98, -74, -77, -35, 46, -35, -11, 125, 103, 15, -126, 39, -3, 56, 55, 115, 72, -57, 108, -103, -113, -125, 41, -53, -84, 90, 52, 56, -123, -64, 90, -28, -34, -87, -43, -27, 68, 81, 28, -13, 39, 19, -89, -66, -4, -62, -44, -34};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.48027156796054205);
    msg.setSource(36637U);
    msg.setSourceEntity(47U);
    msg.setDestination(5066U);
    msg.setDestinationEntity(114U);
    msg.type = 22U;
    msg.speed = 39451U;
    const signed char tmp_msg_0[] = {-81, -128, 18, 90, 8, 108, 62, 66, 52, 118, 117, 57, 20, -106, -77, -121, 29, -81, 82, 104, 36, -13, 121, 1, -63, 85, -110, -87, 100, 31, 24, 124, 104, -60, 39, -85, 4, -43, 51, -28, 24, -26, -48, 105, -30, -90, -33, -107, 29, 48, 120, 124, 34, 116, -9, -93, 38, -117, -25, -4, 89, -77, -64, -28, 118, -104, 46, -56, 11};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.4507714598451429);
    msg.setSource(35825U);
    msg.setSourceEntity(211U);
    msg.setDestination(54573U);
    msg.setDestinationEntity(102U);
    msg.type = 40U;
    msg.speed = 23528U;
    const signed char tmp_msg_0[] = {64, 69, 90, 47, 19, -80, 120, -30, 34, -112, -48, -94, -68, 79, 19, 90, 73, 47, -12, -48, -72, -40, -78, -113, -53, -45, -91, 60, 7, 57, -48, -33, -124, 65, 40, 3, 67, 65, 103, 14, -120, -10, -10, -96, 88, -90, 8, 15, 73, -87, -34, -5, -86, 44, -94, -16, 11, -70, -56, -29, -95, -9, 87, -85, -55, -113, -124, -86, -42, -35, 31, -116, -116, 96, -76, -111, -61, -113, 115, 121, -68, -104, 37, -53, -111, 102, -62, 46, -117, -125, -113, 93, 126, 104, 18, 11, 123, 53, 86, 35, -13, -3, 45, 38, 118, 66, 73, -24, -84, 56, 72, 118};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.906339200901677);
    msg.setSource(35530U);
    msg.setSourceEntity(50U);
    msg.setDestination(34200U);
    msg.setDestinationEntity(162U);
    msg.op = 126U;
    msg.tas2acc_pgain = 0.24185899229172048;
    msg.bank2p_pgain = 0.2330173712409741;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.640778398535129);
    msg.setSource(16449U);
    msg.setSourceEntity(186U);
    msg.setDestination(56861U);
    msg.setDestinationEntity(170U);
    msg.op = 119U;
    msg.tas2acc_pgain = 0.6741183016334054;
    msg.bank2p_pgain = 0.7231531229150218;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.30298837466201556);
    msg.setSource(30874U);
    msg.setSourceEntity(2U);
    msg.setDestination(51797U);
    msg.setDestinationEntity(178U);
    msg.op = 251U;
    msg.tas2acc_pgain = 0.3724541338023921;
    msg.bank2p_pgain = 0.8871707830208744;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.4292293915662484);
    msg.setSource(48187U);
    msg.setSourceEntity(35U);
    msg.setDestination(36222U);
    msg.setDestinationEntity(127U);
    msg.available = 1254626878U;
    msg.value = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.5441235496111732);
    msg.setSource(54865U);
    msg.setSourceEntity(2U);
    msg.setDestination(309U);
    msg.setDestinationEntity(118U);
    msg.available = 2332609771U;
    msg.value = 171U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.2533947434271703);
    msg.setSource(26989U);
    msg.setSourceEntity(36U);
    msg.setDestination(60241U);
    msg.setDestinationEntity(161U);
    msg.available = 1449193950U;
    msg.value = 212U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.5505440563657243);
    msg.setSource(7579U);
    msg.setSourceEntity(219U);
    msg.setDestination(46811U);
    msg.setDestinationEntity(197U);
    msg.op = 32U;
    msg.snapshot.assign("CYBAFRRSNXUWJPMMHZFKRDSUTWEYMQLYUAVODVVIHWXJIKRDOEDPUCCBQBKISWHOPKDWMCUMLZHTHLCNSZKZEJMDMTSCFTOIPYESWLNWSSF");
    IMC::ArmingState tmp_msg_0;
    tmp_msg_0.state = 117U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.5812964100304824);
    msg.setSource(15790U);
    msg.setSourceEntity(51U);
    msg.setDestination(63804U);
    msg.setDestinationEntity(75U);
    msg.op = 102U;
    msg.snapshot.assign("GPXNWXEGFDODFJHTNFJBEUJGI");
    IMC::HistoricEvent tmp_msg_0;
    tmp_msg_0.text.assign("JQCUVBCMSXZUKFTWMITYUMHCPLCTCQCPOPNZECBN");
    tmp_msg_0.type = 170U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.2548104214042899);
    msg.setSource(60584U);
    msg.setSourceEntity(90U);
    msg.setDestination(14433U);
    msg.setDestinationEntity(136U);
    msg.op = 104U;
    msg.snapshot.assign("NKRYFHIOUPUZMVMOAKAVXXWCYLJVEIJEHBVXZYBROFUFWNUFAINAVLSZSLONGKPSTCDHQKNLWYBLYRKQZCJDWRMYTBTCGPBDEGTNHOCOEVCFADUWKCCTCZBWYSDXIZEGMPTBFSPINMROOIHHMPFNISVJWQNJVHWBQMVGCKNUPXOEQUDYYXRAOTUXKZQFXDMHVHXMRTPELJJBYZAIGEKJAEGLSLQRIKPQWZUDDSGSPREFIJRLTUGB");
    IMC::ScienceSensorsReply tmp_msg_0;
    tmp_msg_0.adcp = -126;
    tmp_msg_0.adcp_dur = 1682601194U;
    tmp_msg_0.adcp_fr = 2460938056U;
    tmp_msg_0.ctd = 108;
    tmp_msg_0.ctd_dur = 2985454961U;
    tmp_msg_0.ctd_fr = 914874351U;
    tmp_msg_0.opt = 113;
    tmp_msg_0.opt_dur = 3898353689U;
    tmp_msg_0.opt_fr = 2356171927U;
    tmp_msg_0.tbl = -1;
    tmp_msg_0.tbl_dur = 4240929422U;
    tmp_msg_0.tbl_fr = 157458597U;
    tmp_msg_0.eco = -94;
    tmp_msg_0.eco_dur = 1752045520U;
    tmp_msg_0.eco_fr = 1624631261U;
    tmp_msg_0.par = -111;
    tmp_msg_0.par_dur = 2440128216U;
    tmp_msg_0.par_fr = 3725877761U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.31925534900780506);
    msg.setSource(6609U);
    msg.setSourceEntity(161U);
    msg.setDestination(31883U);
    msg.setDestinationEntity(141U);
    msg.op = 25U;
    msg.name.assign("DEGPBGCCTBSH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.4495480547338806);
    msg.setSource(16029U);
    msg.setSourceEntity(128U);
    msg.setDestination(64926U);
    msg.setDestinationEntity(233U);
    msg.op = 23U;
    msg.name.assign("XAYZNSNZPROJACATGOUVPATWZOEVQJUZCDVMWZHNDZRPUUDZRIMQTDAIYOMJFABQHLQVWUEPPLMIGKWEOQFVONXBLICKSIMVLCBRHIAORTXHDVTNUIOYJFEXYESOLOGAQKWYBFFPSQZHRC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.2621421484536792);
    msg.setSource(24936U);
    msg.setSourceEntity(138U);
    msg.setDestination(49377U);
    msg.setDestinationEntity(18U);
    msg.op = 221U;
    msg.name.assign("SBJCEWOFEUOAAAGGSGXXHIJEJAHWNULLGBXZFQCRCHYNFOSKEPAFOWFZHMVRHNTERRVWUSUUAJDKKQRRKQYWBYDTBJBEBUCJQNSLOXQAKPLOLXGCLBWEHPHSXMZUYPPMBYVVMRIYPBKTQIFQZFQNJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.4928895994778666);
    msg.setSource(11708U);
    msg.setSourceEntity(43U);
    msg.setDestination(60780U);
    msg.setDestinationEntity(230U);
    msg.type = 7U;
    msg.htime = 0.6583508223747835;
    msg.context.assign("KJCGFDJVDVESJTRBQVBYSFLPHTKWBCTILPYZBWKNKORGTHADOKZAKHRZOJPISIEQVUUTUFMLMSG");
    msg.text.assign("OOVQRTSMBXKSYRREXMWPMGVNMKTJHINYZNELPESCUFZVCPFDAEWJWTVAWPNKLQUOIFULDWZSXNZEAQWIVTJFZVSCHWDPGUMHFLNRLZBTZXGVPMCFHGBVJHKNQQCJSTCEBQKIDFOVQSEODATDAMPHIVRBBYMGLLKRSUDJEZGTJEJUMAFQIHWWXRCKRDMKEXYXWHUUNBHQOLYYCPGIBPKLPJCXAGLHOZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.9453325125701686);
    msg.setSource(14123U);
    msg.setSourceEntity(76U);
    msg.setDestination(62573U);
    msg.setDestinationEntity(248U);
    msg.type = 35U;
    msg.htime = 0.9519010795492092;
    msg.context.assign("GVFWIASFRTWFQLFHTGNBCY");
    msg.text.assign("ESBPOGXDOSMXHURLWXOVUBGVMMLUQDJFZZKHPHCWFWHUCROEAYCTKCKNM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.39383929818254226);
    msg.setSource(53051U);
    msg.setSourceEntity(71U);
    msg.setDestination(51951U);
    msg.setDestinationEntity(60U);
    msg.type = 47U;
    msg.htime = 0.5448090915263777;
    msg.context.assign("KQECEZTTEQPLOJWGYCPSJDQGTWUWLIIKSMGRILDODGCPBQAFFUSKNUZVANWCFHVHWSVSZDRYTNPMAOSLVTMMBJGRXWYXYVQOBXOEPIGZCHTHNTPLLLYYIEOCGWBLOIYCBYPEHCBGCOPVBUDFHIQSVJFFHXVMUXMARZZPJAPUYRDKK");
    msg.text.assign("PGSBMBOBROYJZWWDPDWNLIZPUVGJYJUOCCYDPLFMDHQSMMEREJXTTEZDDLVAWXWMKEATLERNAAYCDHVJGTVIQHFQCOUBOFIZNIGNPRGUCXFTXSMSFINLZANUWKIGHGLFOKZZTVDEFOKAXVRIVWYXLKSQDOVAZHMKJXHYKQVJSLFNIJKPFRHYAGHDMHPWSESXEQACGXLCBPBQHPKFLUSYEQVQIWKROCR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.11813518484292562);
    msg.setSource(27453U);
    msg.setSourceEntity(28U);
    msg.setDestination(48578U);
    msg.setDestinationEntity(132U);
    msg.command = 97U;
    msg.htime = 0.24034243922287868;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.7076167400239517);
    msg.setSource(64570U);
    msg.setSourceEntity(232U);
    msg.setDestination(51375U);
    msg.setDestinationEntity(210U);
    msg.command = 114U;
    msg.htime = 0.9522006693255188;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.9716918485795577);
    msg.setSource(40933U);
    msg.setSourceEntity(16U);
    msg.setDestination(33661U);
    msg.setDestinationEntity(113U);
    msg.command = 183U;
    msg.htime = 0.7046194793171794;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 159U;
    tmp_msg_0.htime = 0.01816904488260329;
    tmp_msg_0.context.assign("AEYNPLLUCSAIZIIKRLIBOGQOBHADOKNUSTCQPUUNRARZVUMPMJUFBHFXKKXNDQUTROLPEDVZYKWKZVQTMCVCVFSOQDGRDDCWTFMDJWECIBZCXBLZNEHLLNJRBJMFBKKAGYIBFYHYLQAMSSXWGNDWGZPAXFQJAMEBR");
    tmp_msg_0.text.assign("IXKWNHGEKUMETVJRDDFHCIPPIUHNUDCEPAGBRVUVEYLAOUEZQLBTCIAULJVPSKM");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.9258939334972132);
    msg.setSource(62160U);
    msg.setSourceEntity(1U);
    msg.setDestination(60962U);
    msg.setDestinationEntity(137U);
    msg.op = 109U;
    msg.file.assign("UDIOBMWBFEWTJTSDZFDJEU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.44150233648792825);
    msg.setSource(10603U);
    msg.setSourceEntity(20U);
    msg.setDestination(44491U);
    msg.setDestinationEntity(143U);
    msg.op = 87U;
    msg.file.assign("HYBXUOOSSHAPHIAXOLTJEWIXTDMPQCZKVAGCOJQLBIJIDIZCURJYUNYPVQMEHOGTYQAKRFPPDRMIJULALBXXHQXBLMHCTCSPUUMKVRFTNOGHHWHEVSGAYXGVNKUJZWDYWCPVUARKMZSCEZWMNGYOTQPVWRNQJMZIEIFHXMDTUSCSAJDBAJDPNLBUZXAFBZWEBFR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.47407525070232026);
    msg.setSource(52173U);
    msg.setSourceEntity(68U);
    msg.setDestination(51254U);
    msg.setDestinationEntity(116U);
    msg.op = 172U;
    msg.file.assign("DZDOOJFTMMCPWZOWWCRKXFVYBTBATWQFGYLQRTNSCSZQUKHFQJYI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.46535318356381117);
    msg.setSource(14833U);
    msg.setSourceEntity(175U);
    msg.setDestination(16493U);
    msg.setDestinationEntity(111U);
    msg.op = 102U;
    msg.clock = 0.9628392413086505;
    msg.tz = 94;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.40987081776369927);
    msg.setSource(37466U);
    msg.setSourceEntity(0U);
    msg.setDestination(25329U);
    msg.setDestinationEntity(239U);
    msg.op = 146U;
    msg.clock = 0.9297109743271785;
    msg.tz = -98;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.7318961804337136);
    msg.setSource(56067U);
    msg.setSourceEntity(155U);
    msg.setDestination(40171U);
    msg.setDestinationEntity(187U);
    msg.op = 35U;
    msg.clock = 0.0970411857804695;
    msg.tz = -66;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.2807217162001614);
    msg.setSource(60565U);
    msg.setSourceEntity(70U);
    msg.setDestination(62U);
    msg.setDestinationEntity(116U);
    msg.conductivity = 0.7362999887890496;
    msg.temperature = 0.07536625615683368;
    msg.depth = 0.7579895441861921;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.28576761701389264);
    msg.setSource(12218U);
    msg.setSourceEntity(108U);
    msg.setDestination(18162U);
    msg.setDestinationEntity(226U);
    msg.conductivity = 0.6404920940936131;
    msg.temperature = 0.47728459998309913;
    msg.depth = 0.008489905116208729;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.7277304539572259);
    msg.setSource(61748U);
    msg.setSourceEntity(220U);
    msg.setDestination(52764U);
    msg.setDestinationEntity(121U);
    msg.conductivity = 0.5358334333862554;
    msg.temperature = 0.8975970198687576;
    msg.depth = 0.7217237458410688;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.9741285816953037);
    msg.setSource(21119U);
    msg.setSourceEntity(18U);
    msg.setDestination(28740U);
    msg.setDestinationEntity(236U);
    msg.altitude = 0.3236673285008711;
    msg.roll = 61130U;
    msg.pitch = 575U;
    msg.yaw = 25453U;
    msg.speed = -5738;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.261577711301889);
    msg.setSource(60819U);
    msg.setSourceEntity(215U);
    msg.setDestination(65122U);
    msg.setDestinationEntity(72U);
    msg.altitude = 0.4046711037175227;
    msg.roll = 3454U;
    msg.pitch = 60631U;
    msg.yaw = 31477U;
    msg.speed = -20363;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.04773632750728385);
    msg.setSource(4087U);
    msg.setSourceEntity(97U);
    msg.setDestination(22264U);
    msg.setDestinationEntity(228U);
    msg.altitude = 0.4262762275597247;
    msg.roll = 46890U;
    msg.pitch = 50108U;
    msg.yaw = 34780U;
    msg.speed = -11321;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.12441095047231421);
    msg.setSource(28421U);
    msg.setSourceEntity(100U);
    msg.setDestination(55991U);
    msg.setDestinationEntity(243U);
    msg.altitude = 0.6070191061128237;
    msg.width = 0.1212085379093375;
    msg.length = 0.7394212016934264;
    msg.bearing = 0.798276871660469;
    msg.pxl = -32573;
    msg.encoding = 81U;
    const signed char tmp_msg_0[] = {43, 92, 5, 124, 85, -18, 29, 63, -113, -2, -120, 3, -118, 63, -55, 122, -63, -70, -96, 42, -13, -44, 32, -24, 3, 111, 115, -80, -14, -14, -86, 55, 79, 38, 88, -12, 99, -128, 34, -67, -29, 51, 37, 82, -66, 66, -97, -120, 47, -49, 68, -101, -54, -31, 26, 78, -100, 115, -37, -102, 63, 72, -79, 22, 20, 118, -13, -21, 32, -27, -103, 124, 99, 13, 104, -30, 48, 72, 23, -60, -41, 65, -86, 110, 35, 49, -74, 90, -76, 23, 96, -24, -53, 19, 2, -128, -26, -119, 60, 122, -5, -108, 40, 116, -1, -123, 101, -88, -69, -128, 85, 44, -43, 82, 86, -43, -114, 65, -3, -118, -30, 23, -14, 101, -83, -124, 115, -9, -54, 96, 51, 34, -56, 123, -62, 17, 55, -20, 126, -19, 10, 121, -9, -8, -72, -73, -10, 3, 82, 77, 87, 66, -11, 122};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.9709006853219638);
    msg.setSource(28889U);
    msg.setSourceEntity(138U);
    msg.setDestination(29879U);
    msg.setDestinationEntity(157U);
    msg.altitude = 0.0038762122195620252;
    msg.width = 0.4435810358029345;
    msg.length = 0.3248396301531543;
    msg.bearing = 0.5960420749585242;
    msg.pxl = -18527;
    msg.encoding = 205U;
    const signed char tmp_msg_0[] = {30, -72, -115, 117, -25, -102, -124, -122, 101, 94, 1, -84, 71, 112, -12, -68, 81, -61, 15, -67, -52, 58, -3, 7, -90, -110, 114, -21, 10, 102, 117, -96, 34, 26, 86, 35, 121, 22, -59, -128, -34, -125, -128, -117, -34, 22, 115, 88, -94, 5, -128, -45, 83, -84, 92, -63, 113, -8, 43, -71, 113, -102, 37, 51, 31, -83, -5, 65, -113, -86, -22, -85, -126, 3, 69, -4, -47, -55, -30, -72, -92, 0, -78, 29, -13, -21, 79, -32, -63, -117, 116, -23, -121, 113, -113, -77, -116, -16, 77, 96, -77, -88, -47, -59, -106, -101, -28, 78, 39, 58, -36, 25, 39, 105, -24, -13, 70, 7, -98, 105, -12, 25, -76, -125, 89, 26, 89, -114, -66, 67, -53, 78, 42, 126, -68, -13, -36, 98, -82, 94, -122, -44, 125, -20, 17, -83, 121, -51, 59, -80, 71, 36, 126, 32, 5, 45, -10, -15, 70};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.15513563855889467);
    msg.setSource(18997U);
    msg.setSourceEntity(189U);
    msg.setDestination(2401U);
    msg.setDestinationEntity(83U);
    msg.altitude = 0.5391609899197672;
    msg.width = 0.6444815367117239;
    msg.length = 0.1487569092340958;
    msg.bearing = 0.561152405466771;
    msg.pxl = -28162;
    msg.encoding = 39U;
    const signed char tmp_msg_0[] = {48, -5, 15, -36, -52, -60, -106, 50, 83, 57, 26, 90, -78, -13, -64, -108, -99, 46, 115, -57, -17, -48, -23, 96, 19, -54, -77, -26, -47, 86, 55, -45, 80, 24, 36, -80, 8, -23, -1, 61, 79, 97, 126, -79, -100, -125, -33, -91, -30, -47, 119, -46, -44, 60, 104, -100, -107, -70, -4, 102, -120, 115, 52, 87, 30, -107, -44, 92, 117, -11, 27, -108, 77, 111, -102, -41, 54, -20, -86, 122, 49, -106, -40, -112, -115, -16, 53, 63, -22, 117, -6, 120, 23, -27, -70, -7, -99, -78, -47, 54, -122, -112, 60, 5, 60, 92, 32, -105, -44, -107, -50, -20, -104, 89, -38, 11, -118, 90, -87, 43, 85, 24, -18, 3, -9, 111, 10, 65};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.5684237804246913);
    msg.setSource(6421U);
    msg.setSourceEntity(99U);
    msg.setDestination(4527U);
    msg.setDestinationEntity(107U);
    msg.text.assign("KEWTTRKPGYBGZCMUATTINVIMNWGYVYWXZLIFRHCRVFM");
    msg.type = 50U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.9529315573845601);
    msg.setSource(31705U);
    msg.setSourceEntity(254U);
    msg.setDestination(11931U);
    msg.setDestinationEntity(34U);
    msg.text.assign("NBDCQICJPANJZIWLWLKGJSPXNYHDBSTCZRLNYZKKEWGIVACEFSLHFPVHLTMAXPIMVYOFREAUPQAQXSBPYXCMKMZGKJYBWVBMTIMATVOJZRTPDDZSWICNCKGHCAZRLDWUOGVURYQCSFWXMTPLDVSOYIBOQHVZKUUIOLUAGGYEHQKQTTYLDSBRNWQPHOKFCFEUKXVOTANIDYJRMUJBUEDXXQXTENFLGAVIQOMFMZNEUDXGRJPFFJEHRWJSRGNSBB");
    msg.type = 216U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.5812868507724878);
    msg.setSource(31262U);
    msg.setSourceEntity(59U);
    msg.setDestination(25600U);
    msg.setDestinationEntity(100U);
    msg.text.assign("MPEGFPUEMHLYQBIXWBGJRTYOWMAKDPBURUIJSCWKVYJAXCHUEMCVDLWLKYDLOOKZRUOIXBFQJANHKVOXDWEKSGCHHQOBQDVPVTQSEZRQAVNSCZPDAPRNXCUOUWPLSXA");
    msg.type = 74U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.49811569809815137);
    msg.setSource(35170U);
    msg.setSourceEntity(113U);
    msg.setDestination(3258U);
    msg.setDestinationEntity(58U);
    msg.parameter = 44U;
    msg.numsamples = 246U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 25448U;
    tmp_msg_0.avg = 0.6291560171142161;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.7440021263755917;
    msg.lon = 0.005616876796069259;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.09767285911441959);
    msg.setSource(38406U);
    msg.setSourceEntity(63U);
    msg.setDestination(14779U);
    msg.setDestinationEntity(254U);
    msg.parameter = 117U;
    msg.numsamples = 16U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 56230U;
    tmp_msg_0.avg = 0.2972369653123934;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.27346326074846905;
    msg.lon = 0.6276201765207914;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.24876477718248768);
    msg.setSource(27118U);
    msg.setSourceEntity(28U);
    msg.setDestination(16500U);
    msg.setDestinationEntity(247U);
    msg.parameter = 37U;
    msg.numsamples = 254U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 49962U;
    tmp_msg_0.avg = 0.4680020745065221;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.5718755545496277;
    msg.lon = 0.743402006525344;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.17218488114971997);
    msg.setSource(44907U);
    msg.setSourceEntity(123U);
    msg.setDestination(23559U);
    msg.setDestinationEntity(209U);
    msg.depth = 20694U;
    msg.avg = 0.40849614382502053;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.6780052062218729);
    msg.setSource(15529U);
    msg.setSourceEntity(10U);
    msg.setDestination(31909U);
    msg.setDestinationEntity(198U);
    msg.depth = 44223U;
    msg.avg = 0.9337596423691451;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.529760500364598);
    msg.setSource(4018U);
    msg.setSourceEntity(105U);
    msg.setDestination(53374U);
    msg.setDestinationEntity(151U);
    msg.depth = 23297U;
    msg.avg = 0.31956683569865896;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.3692776479942901);
    msg.setSource(42394U);
    msg.setSourceEntity(132U);
    msg.setDestination(14707U);
    msg.setDestinationEntity(147U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.33862317298628664);
    msg.setSource(28584U);
    msg.setSourceEntity(251U);
    msg.setDestination(4682U);
    msg.setDestinationEntity(100U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.9821765882342335);
    msg.setSource(35324U);
    msg.setSourceEntity(15U);
    msg.setDestination(25457U);
    msg.setDestinationEntity(117U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.9792836070587773);
    msg.setSource(25247U);
    msg.setSourceEntity(221U);
    msg.setDestination(63760U);
    msg.setDestinationEntity(42U);
    msg.sys_name.assign("AYCXMBPJYIUNOQHMLXJBOBCXPQYEJFLOYDIFYJOLWSLXHUTSGVHRSOOTINKCEJNLXFXWLYRODRIGBWSVGTIRWDTBQONIRCZJEHIJMXSMFEGPRBCPQHSKJDXYVAZVNPAKMZANKMHVTBQQ");
    msg.sys_type = 35U;
    msg.owner = 51311U;
    msg.lat = 0.39720150382664265;
    msg.lon = 0.4363905554471429;
    msg.height = 0.3096068181894708;
    msg.services.assign("ELXMUBRUGRNKBFQLOSDQWIZITEVUMSIRPEDOTCGURVDXWXULMZKJAELSNUBWTQJQCTKKGTYZYLASSKPVVDHVKWGVIPSQCAINYWFLTDXAUCRYMEVPSUYQQFSEHJHFJULAVAERGONZFPV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.9301785801747519);
    msg.setSource(14719U);
    msg.setSourceEntity(233U);
    msg.setDestination(42224U);
    msg.setDestinationEntity(77U);
    msg.sys_name.assign("HXSXYWRMTMKMCHAGBREHZNTQAIVMHDFZJMPPYNTSCBAGTLAAGCAJFASOJWIBLVFJREWIMRZDLNVXESUZGTAVPDESFSEZHUBDCUHQKRSTYHPHWRCOGZIMRVGNTGQBXOFIQGQOEJCZULYJWMWDYXOCUWYJPQIVFBNNQPBVWGGEBOSAIHPNWKMZLDXFFDL");
    msg.sys_type = 111U;
    msg.owner = 39491U;
    msg.lat = 0.6726242579868469;
    msg.lon = 0.7862580103578573;
    msg.height = 0.9182525479031267;
    msg.services.assign("NJMTQBYGKWWOINWJIEU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.16322265225240018);
    msg.setSource(29052U);
    msg.setSourceEntity(58U);
    msg.setDestination(23898U);
    msg.setDestinationEntity(219U);
    msg.sys_name.assign("MCLZOFCESQVAORWDLADXVUSVSMHJMTBRCOZUHEXIHUZXVXPAYYXSUTGMQRAFCRLVIZAYQOLVBAYQSTZUZDBTIFJNPPKTBJDDNKFGKWSXHRUKEKPUXWLOXFCKPEFQOZGMLMFHRATJWDPIBDLQNQHWDGTOQECPHOHUJIVWINGWZGDJZTFNYZPGNYBYFNCGJKESNWGW");
    msg.sys_type = 63U;
    msg.owner = 31232U;
    msg.lat = 0.5370881120392107;
    msg.lon = 0.508746477447488;
    msg.height = 0.503275871434443;
    msg.services.assign("ZJSOFAOMFSEAHWNQBNWSMQBONQOPIDCVCGOBBFLSASZWUEDJUZCVVHATWAICZYZDHQRUZQTYUKEPCWTHORTIVULGYILTUEXXHPPJIDVKQLMJU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.7306116703432345);
    msg.setSource(60868U);
    msg.setSourceEntity(137U);
    msg.setDestination(29791U);
    msg.setDestinationEntity(234U);
    msg.service.assign("FUNVMWAXLWZZWJCMKUFHLDGOYXTKOQVYRRJBWKJIQAQEIORGOSGWSTYWJXLFEPWXESGORSYOIYNQKZRGRMGHUEIQRCTXRJDTBFPHMNNFMHUFNZVACYGCYLFONQBPHDZELAKESBJNPXLKKJBZJVHJFVLEWIXCWVPKAPZIMDUNKQYRDTZBKYGIMMVSSYRABUCQ");
    msg.service_type = 6U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.12584186551419796);
    msg.setSource(6215U);
    msg.setSourceEntity(237U);
    msg.setDestination(49759U);
    msg.setDestinationEntity(76U);
    msg.service.assign("NLILSUTRXCBVNULYYTQOWJZSZFWBUVZXKZJFTOAGQCMQIXOQHEINJHNLGBGOXFODTSVIKGOIELPHZPKOCAWWOREFQBBNPJDXPVEYSYUTAEYPVQUGAMNBXHLKCEVMGYXZFMZKFDIGJTSDUWKTDOVFHBAQZVRLIFRIHRXPQWLSBMJSRQWYDWRMCMYSFJEVXJLWCHTOREUHUSTASGFMIKDAACDZYPCNJNMINREQNKUAWB");
    msg.service_type = 115U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.15924242378505193);
    msg.setSource(21389U);
    msg.setSourceEntity(9U);
    msg.setDestination(56176U);
    msg.setDestinationEntity(10U);
    msg.service.assign("XTGSLHZGQOADCTMCOFECQJDVOBUKUXSZJOJLINPWRAXSXVVENTRGQFGPTHBQBBPKCTYLUNJJGFPCWWDFHBXONIURAIYWKMMBEHUKKUQFYDESVMCHDDRLJOWKZLNSJ");
    msg.service_type = 85U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.6013031623074441);
    msg.setSource(35855U);
    msg.setSourceEntity(146U);
    msg.setDestination(7879U);
    msg.setDestinationEntity(187U);
    msg.value = 0.7249463690834328;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.7915496990334945);
    msg.setSource(43165U);
    msg.setSourceEntity(245U);
    msg.setDestination(45452U);
    msg.setDestinationEntity(253U);
    msg.value = 0.8560330856078431;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.6153143600890983);
    msg.setSource(51872U);
    msg.setSourceEntity(64U);
    msg.setDestination(64127U);
    msg.setDestinationEntity(209U);
    msg.value = 0.1241631421662649;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.4853552534584372);
    msg.setSource(55191U);
    msg.setSourceEntity(27U);
    msg.setDestination(55686U);
    msg.setDestinationEntity(125U);
    msg.value = 0.15034580882834592;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.9179132470589976);
    msg.setSource(26938U);
    msg.setSourceEntity(119U);
    msg.setDestination(54369U);
    msg.setDestinationEntity(104U);
    msg.value = 0.5889304567397323;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.3890856296013132);
    msg.setSource(57724U);
    msg.setSourceEntity(235U);
    msg.setDestination(29744U);
    msg.setDestinationEntity(53U);
    msg.value = 0.5698966416348296;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.30235096201657896);
    msg.setSource(26248U);
    msg.setSourceEntity(139U);
    msg.setDestination(17329U);
    msg.setDestinationEntity(37U);
    msg.value = 0.5873817819423127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.4016879428122595);
    msg.setSource(63651U);
    msg.setSourceEntity(24U);
    msg.setDestination(61700U);
    msg.setDestinationEntity(174U);
    msg.value = 0.7923509497602941;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.8685328099008232);
    msg.setSource(60919U);
    msg.setSourceEntity(127U);
    msg.setDestination(29511U);
    msg.setDestinationEntity(105U);
    msg.value = 0.9478974008847706;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.3668559468718541);
    msg.setSource(5953U);
    msg.setSourceEntity(253U);
    msg.setDestination(44471U);
    msg.setDestinationEntity(71U);
    msg.number.assign("GCRIZQYIHVYNAOIXLSXYAOKTCUOODWAXXSWJLDZSMKUIVDZYKZZUFIOMGDBHISERBWQJXXFGFJPHYWLJVUOSKGEECUPBSPCQWZLGEYCQEHZINJBRZCPBJNMFNMFTNDIBNVUNRCBDMTRPHSDKFMGUAQKYGJJWETFWFQSMP");
    msg.timeout = 20094U;
    msg.contents.assign("WWTCLARDHERHLDBOXPCTTFEHRAWKLWVHNAALNUIQMVNZPIKGDXUBZUNCRCERCJKUEWPIESVGICLYWZDBGSPCXEQSKRMONQXGTMZNKSJWJURNSOTBVVOEFTFBFDGBIFSQQAEJNYZSEBFWIXKHLXHXGASNKYRLYPQWGZWUOJHQTTYOSAYUDZFVFMPNHKDVPQABZYCPRGKIQTUHOJK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.9019634544627786);
    msg.setSource(56157U);
    msg.setSourceEntity(208U);
    msg.setDestination(52438U);
    msg.setDestinationEntity(189U);
    msg.number.assign("ZMOKVKEHJIZRKBQHASXKIDBEOGCAOZHWDHAVRTIHYUSXXLMUBUQPGFLTVLPMFJIFSVZGONWDCNEBKQABDRMHWNYUJJNDAWBAWBUYJMBHCPETDREDRVEKLFINMEUUTBVCWSXDTPXJXVALNNJUNTFGBTTFPALZSQHYILUGZTCC");
    msg.timeout = 39262U;
    msg.contents.assign("RLISWYISIXHNDXPQMSVFTPFHDAXGGBJDGGZN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.6315957447641612);
    msg.setSource(65503U);
    msg.setSourceEntity(17U);
    msg.setDestination(52322U);
    msg.setDestinationEntity(175U);
    msg.number.assign("YAVYZXDQOBOFWVLRUKYBGAWICOUWEBSKXBPSVBDYATRUCBHRXJPOEGUIEQFBNPOLKSYFORZEPJPEYIJQAULTVUXMQNWMLYV");
    msg.timeout = 44767U;
    msg.contents.assign("PAZTMHIEKCWNATKGTLBLCAENQGMBHNRKDWFTLPBTSQYKSQEMRJGFUPUDMPMAWBFAJWIQHQUELIFDPDUURSVXKHZOKRISNZJVVUXGRATPFANNYCVGOZZBTONJTOCMBWPLXYFZXJZSSNIXSGXWQCEFDJEDNHYJTJVFZFGDWCMPPCREHRWSWUXYXPDYLKMQKJBICEAZUTCSMKYXBEQVOOHNSBMOCGE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.7965010015467818);
    msg.setSource(59983U);
    msg.setSourceEntity(48U);
    msg.setDestination(55976U);
    msg.setDestinationEntity(120U);
    msg.seq = 630658262U;
    msg.destination.assign("QPPBNJXHKFKURPJYRFBVA");
    msg.timeout = 50399U;
    const signed char tmp_msg_0[] = {-44, -18, -43, -121, 126, 112, -112, 106, -105, 41, -58, 80, -128, 20, -126, -95, -109, -75, -64, -19, 49, 73, -21, -37, 112, -80, -73, -2, 15, -95, -20, 33, 23, -75, 70, -40, 57, -66, 73, -39, -16, -76, -41, 115, -18, 64, 66, -62, -14, 107, 106, -72, -21, -82, 94, 104, 98, -34, 73, 54, 34, -14, -6, 102, -123, -42, 22, -21};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.5658661708994511);
    msg.setSource(11513U);
    msg.setSourceEntity(188U);
    msg.setDestination(40710U);
    msg.setDestinationEntity(117U);
    msg.seq = 2972245868U;
    msg.destination.assign("EMRXJUBDANOKZMXJILTBYFGKFDD");
    msg.timeout = 16403U;
    const signed char tmp_msg_0[] = {32, 94, 64, 62, 86, -10, 39, 10, -45, 45, 82, -75, 108, 117, 66, 53, -63, -45, 105, -90, 32, 86, 10, 120, 123, -30, 87, 119, -56, 25, -37, -4, 21, -36, -109, -59, 61, -119, -39, 82, 65, -22, 43, 31, -6, -67, -89, 0, 60, -63, -71, -30, -59, -69, 32, -91, -60, -46, 53, -80, 44, -69, -7, -53, -18, 0, -35, -8, 2, 62, -123, -84, -37, 53, -42, 28, 11, -71, -97};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.17011921731646062);
    msg.setSource(17518U);
    msg.setSourceEntity(113U);
    msg.setDestination(33477U);
    msg.setDestinationEntity(140U);
    msg.seq = 3757083613U;
    msg.destination.assign("HXSFCLNTEULCXYFBCIKUQRRICVJWTBJAQPEUTHUPVIWBYYKLEGOGRQNEKTSFDCZCKOMFEDGEJLHXYMGTKYVBSPJRSIALTOVT");
    msg.timeout = 27866U;
    const signed char tmp_msg_0[] = {-60, -125, 12, -72, -105, 24, -22, -24, -87, 1, -106, 96, 42, 104, 2, -43, 123, -14, 1, -55, 55, 76, 67, 87, -80, 56, -5, -84, -53, 20, 6, -40, -97, 5, -32, -118, -31, -127, -105, -33, 67, 24, -18, 97, 118, 45, -48, 5, 17, -55, 96, -86, -4, -110, 36, 115, -71, -45, -54, 65, 109, -41, -88, -8, -35, 96, -113, -73, 124, 24, 20, -43, 118, -70, 33, -82, 126, -12, 57, 28, 13, -82, -97, -73, 125, 9, 74, -15, -114, -19, -76, 108, -105, -41, 52, 126, -64, -83, 50, 65, 43, -83, -55, -84, -60, 0, 9, -65, -81, 3, -123, 82, 82, -68, -105, -14, 41, 25, 111, 46, -73, 14, -126, -19, -79, 86, -43, 36, 43, -128, -78, -38, -22, -29, -87, 36, 26, -77, -79, -125, -65, -21, 48, -8, -85, -79, -93, -79, -41, -69, -25, -67, 99, 82, 115, -68, 3, -3, 116, -105, 52, 95, -67, -72};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.03947100526998093);
    msg.setSource(38574U);
    msg.setSourceEntity(247U);
    msg.setDestination(22994U);
    msg.setDestinationEntity(0U);
    msg.source.assign("NFCYQGBREKVQLCJRCOAPASXZZWFWONTTRHUOXPHUBMKDDMWZEKLDCLEGBHWPPSNSZGJIVAFAUKRHSRGEKLDGKCGFBBTSBXYGAQIPYMNPDHHBVMLRYTAJMNNRYBLVFBUITHZXNMVLIEOYEKDNSYSOIROWJVKAXIPPKQCPZVMPSYOWVQKEXWJSDWTWCTJHJEZULUMNQCXEDRCAELQGGOQWTFNX");
    const signed char tmp_msg_0[] = {-73, -100, 91, -6, 101, 21, -125, 33, 88, -91, -73, -17, 101, 46, 1, 20, -87, -31, -57, 110, -42, -41, -55, -85, -32, -62, 19, -122, 58, 28, -94, -57, -81, 69, 116, -82, -91, 115, 66, 10, -2, 17, 86, 96, 38, 111, -1, -65, 12, -1, -17, 13, -102, -126, 18, -2, -120, -51, 80, -53, -88, 67, 78, -18, -5, -88, 74, 123, 94, -21, 51, 104, 41, -62, -13, 86, 73, 63, -84, 125};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.2158563354039672);
    msg.setSource(38948U);
    msg.setSourceEntity(222U);
    msg.setDestination(5502U);
    msg.setDestinationEntity(161U);
    msg.source.assign("ZKBWRJYLTMFTMVVDGDLCWKQFLJXFIVQMTMIQMJUDISHPVFUXRAYNLDKMOMDDREGWZEQWOGASYRAVYNPZWWEHZFLXCCQBXMSVONPSKPBMCYWKKIXINEUNJFSKT");
    const signed char tmp_msg_0[] = {6, -13, 48, 73, 62, -11, -108, 65, 28, -73, -89, 58, -108, -68, 109, 105, -41, 13, 71, 113, 38, 93, 125, -1, -111, -17, 15, -100, -78, 115, 108, 64, -53, -71, 20, 6, -58, 84, -8, 123, -117, -7, 74, 53, 74, 115, -106, -33, -118, -40, 103, 75, 31, 104, -18, -93, 81, 79, 86, 62, 37, 59, -45, -65, -46, 76, -116, 43, 125, 72, -32, 71, 81, -32, 70, -61, 50, 50, -53, 69, -84, -103, -42, -31, 119, 67, 54, -2, 33, 31, -106, 83, -5, -67, 83, -68, -53, -17, -56, 3, 123, -122, 69, -128, -72, 4, -5, 69, -13, -12, -47, -71, 39, -99, 124, -3, 110, 96, 122, 30, -96, -68, 111, -13, -56, 44, 57, -95, 118, -10, 53, -91, -115, 81, 50, 30, -81, 109, 75, -76, 72, -69, -57, 117, 51, -13, -113, 124, 51, -112, -47, -5, -51, -21, -105, -4, 51, -76, -78, -19, 82, -106, -41, 57, -121, 116, 113, 63, -87};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.09890031698202972);
    msg.setSource(23994U);
    msg.setSourceEntity(92U);
    msg.setDestination(21208U);
    msg.setDestinationEntity(9U);
    msg.source.assign("NMERZBJASBTDATOZYCKGJECBMCLUMTPGXLHJQIXEDMZJCLMEZFWKOAPUXVABPARROLWZTFMIHQAENZMWU");
    const signed char tmp_msg_0[] = {-56, -113, 117, 1, 1, 5, -78, -108, 19, -81, -71, 94, -119, -61, 8, 52, 104, 17, -5, -63, -105, 16, -39, -53, 32, -14, -39, -80, -3, -20, 2, 21, 28, -41, -110, -94, -97, 35, 1, 71, -74, 41, 67, 58, -20, -59, 41, -45, -6, 40, -63, -26, -37, -21, 8, -4, -26, 39, 49, -91, -123, 90, -36, 86, 16, -123, -114, 65, -28, 56, 96, 107, -28, -29, 68, -114, 29, 64, 67, -74, -78, 95, -89, 82, 54, 23, -124, 110, 11, -73, -4, -35, -118, 30, 74, -30, 32, 89, -50, -55, 8, -29, -38, -25, 117, 66, 108, -36, -107, 8, -114, -79, 117, -20, -60, 73, -120, 98, 63, -38, 42, -82, -94, -105, -30, -19, -19, -56, -66, 24, -69, -69, 45, 25, 43, 53, 82, -31, 116, -44, 78, -63, 47, -62, 49, 56, 120, -14, 37, -22, -57, -31, 18, -96, -2, -121, -63, 51, 45, 27, 88, -1, -120, -60, 74, 65, -16, 29, 43, 124, -123};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.9952933434550906);
    msg.setSource(44368U);
    msg.setSourceEntity(59U);
    msg.setDestination(45116U);
    msg.setDestinationEntity(137U);
    msg.seq = 668087238U;
    msg.state = 103U;
    msg.error.assign("USLYXHGLMHBGUWVNDNTQGDPTXQTZCONFWILSUASTNKEFRCMXBHUXKOENNQDYYVNIDEGXBTPUEAQRGMAIOVFYSHPMQSKJHFIHZUPOVTFUQKFSKVZYJOUKUKGAZJQDERDRLBYRDYTWENMFBRRMCZHCLQJPJCJFCVDMVGSZEBFTNRKAIWOHGJHDMEIXOZPYHXQBOLCXVGGJJRXPW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.7672118965736131);
    msg.setSource(65068U);
    msg.setSourceEntity(250U);
    msg.setDestination(57388U);
    msg.setDestinationEntity(140U);
    msg.seq = 1830488036U;
    msg.state = 150U;
    msg.error.assign("OHMZFCMFWRLYYLCPICNZRSKADPUTVYNXNESEBPEKXSZVYEMFTWZJDFPTEWFLJDKBSUZOQVXIWLYZXNFH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.7598106888430652);
    msg.setSource(31066U);
    msg.setSourceEntity(0U);
    msg.setDestination(3028U);
    msg.setDestinationEntity(227U);
    msg.seq = 3800361666U;
    msg.state = 148U;
    msg.error.assign("SNVUXVQYCPYLYALIEEATKRPNDWGLCLOOOAMYDFBDXNMAIGHXWXSPKFVRMKDZYJVPGACZHQNIJWBOPRHAZIQMACHUACEIIMKOJTXCROAGOFGVCUUHKRZLHZNUBGRYLNQQTXTKKJBJEXQSBSJATQFOBIUJQZFPRYSYKG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.4308676597744301);
    msg.setSource(23775U);
    msg.setSourceEntity(201U);
    msg.setDestination(24357U);
    msg.setDestinationEntity(48U);
    msg.origin.assign("JCKFMQZPZIRVGLHWTENMCPMLYJSERVEWAMWHDASSBIOZQYUJQKMYNRHGCNIPLCWBBVEYXUGYWJKEIQLTHBVURACESEZQCJXAPTGXPXWDXIPXZOXGJRWPEKHDNYTVQLRSOMTIEPKAQHJZCLNTTUINCUYDZULBMARFZCRGXROUOABJYBDXKTLSQTXVNFFSUUOKFHJFDDFAFKQVAPMSYLGMHBGZBLKEKDINOSOFVOWVBNNGHAGDZOPIDCFYJ");
    msg.text.assign("XZZCMDGERZUAAVVPXMLOEJMKQTDXRNHYSWCG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.41708488412861);
    msg.setSource(55018U);
    msg.setSourceEntity(109U);
    msg.setDestination(60601U);
    msg.setDestinationEntity(70U);
    msg.origin.assign("EVQKDUFENYDIANGQMYLVJWVNNHZZHYAIQXIODYECVQFCZPVPXBGNAWIC");
    msg.text.assign("UHCRVVZRFONGYXNAHWGPDQJXEKDWIKSR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.9710405058233994);
    msg.setSource(52603U);
    msg.setSourceEntity(178U);
    msg.setDestination(31868U);
    msg.setDestinationEntity(172U);
    msg.origin.assign("FPFQVKLSGTBWOMHFCJHZTDMRASCKIWEOMVIDPXVNYQNXXVYILGBMMOEFCFLHHLVGFSLMSREGCJCDYITIJKYDYKPKCRTWGZQPMAEYDWBXAIQBMWNHBOKJUZCUKHCOSTWUQUYFAXXZVLDQVGPDIRDDJUTGWZIYACNKVXTNENBEPTLXBZVWAOKZLHIQZNTUNSQGRMFOIUWOVTZQPGQBMZHUAKYSFOONCRBESB");
    msg.text.assign("LAFEIOVLPAVMUOXAVNGDVTYGHOLMYEVRZEEHDFIPTDHGTESGPHKESCIAKNWFMORBCEMEBXWKUBGAPWDUFRJTYKTBXZJQUGZJWWKWRGKMXYQODLLLNSNHBZIRKGMZOBZVSCFTVVOQZT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.8776510553085791);
    msg.setSource(63713U);
    msg.setSourceEntity(237U);
    msg.setDestination(2619U);
    msg.setDestinationEntity(217U);
    msg.origin.assign("OJUBKSOXJPUSTXRJGQIYJMCZVDYXCTACKFIOVEWL");
    msg.htime = 0.7723486637729992;
    msg.lat = 0.6947901210763101;
    msg.lon = 0.37982350163972023;
    const signed char tmp_msg_0[] = {54, 92, 30, -87, 119, -10, 123, 116, -16, 95, -121, -83, -68, 112, -88, 30, -26, 91, -11, 20, -22, 125, 114, -118, 109, -78, 45, -3, -65, -8, -17, -30, 67, -106, 61, -88, -40, -3, -19, 68, 73, 26, -120, -69, 86, -49, 55, -52, 76, -75, -1, 101, 123, 6, 96, -84, 123, 22, 59, -51, 18, -84, 33, -66, -84, 50, -126, 112, -1, -2, -57, -122, 89, -33, 33, -31, -17, 50, -34, -78, -47, 5, 3, -24, -65, 33, 118, -77, 54, 1, 97, -93, -67, -123, 9, -4, 47, 93, 33, -6, 3, 89, -121, 93, 120, -123, -19, 114, 11, -92, -3, -82, -68, -94, 7, -83, -78, 76, 83, 118, -18, 101, -108, 15, 23, -58, 69, 38, -127, 102, -44, 105, 122, -105, 75, -16, -44, -14, -91, 99, -86, -21, 81, 80, -58, -99, 63, -73, 1, 123, -27, 103, -82, -18, -30, 51};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.6975532406973884);
    msg.setSource(22139U);
    msg.setSourceEntity(203U);
    msg.setDestination(3458U);
    msg.setDestinationEntity(34U);
    msg.origin.assign("ULDFUEKMASRIYLUEYBMSFZXBDQTDINHGRUOOEBBUVCMJETYFXNFLNORHJUYMQIVVXWSAPYVHPRYXEECIQPLMHGMRQEYNTRBIEOKXJTUWLWWKISRZQJSXHMZEGBSXKHGZAHCFMVJPTRQVOKFXTZCAUQRAOAWWLPOKLNKJYRDCAASNKVZGJN");
    msg.htime = 0.06399279913357114;
    msg.lat = 0.33045728606602964;
    msg.lon = 0.22953011896200082;
    const signed char tmp_msg_0[] = {46, -29, -41, 118, 17, 41, 2, -40, 3, 74, 94, -25, -55, -30, 48, 108, 54, 31};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.1350353856424198);
    msg.setSource(12246U);
    msg.setSourceEntity(84U);
    msg.setDestination(43690U);
    msg.setDestinationEntity(193U);
    msg.origin.assign("JYUBWWBYSWVPDPYVPBKPTQRDXJIFNIGOVDOJNLFQHCQLZFYBABQHZCHYRFEHERLTKSOXGOXJDCSKEOSODCPBIJALQ");
    msg.htime = 0.7486629073070629;
    msg.lat = 0.134676948247077;
    msg.lon = 0.3059258941415659;
    const signed char tmp_msg_0[] = {88, -43, 44, -60, 115, 37, 81, -70, 56, 31, 102, 77, -38, -78, -48, -2, 122, 55, -76, 112, -48, 56, -5, 24, -34};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.441879554671084);
    msg.setSource(8924U);
    msg.setSourceEntity(185U);
    msg.setDestination(54885U);
    msg.setDestinationEntity(102U);
    msg.req_id = 56785U;
    msg.ttl = 55369U;
    msg.destination.assign("JFUFIMVDWHRBTUQKVENGFMLHIXOQHZSOSGXNDDQKBJNAQGHUEWQSCUTKLACGFGERONPZPXBVBRGVPSLIEOLDZQCEZMIYJYEPISZCUQGZTBTLKESTDAMKIZAPWO");
    const signed char tmp_msg_0[] = {56, -5, -19, 10, -31, -24, 116, -16, -116, 29, 89, -62, 119, -128, -123, 12, -57, 79, -117, 4, 9, -45, 49, 23, 64, 98, 103, -11, -30, 100, 87, 124, -103, -99, -79, -78, -3, 107, 97, -86, -85, 61, -33, 122, -12, 109, -26, -112, 86, 119, -20, 117, -99, -116, -6, -89, 65, -94, -20, -6, 102, -16, 120, -58, 4, -63, -20, 6, -40, 118, 76, 90, 1, 77, 122, 62, 67, 11, -81, -113, 52, 98, -54, 121, -85, 122, -30, -120, 69, -115, -12, -1, -19, 9, 19, -78, -77, -9, -8, 109, 55, -125, -61, 81, 60, -75, 32, -57, -41, -105, -51, -127, 65, -61, 102, -19, 57, 118, -121, 62, 4, -35, -15, -32, -67, 113, 87, 58, -72, 66, 63, 57, -92, -103, 83, -128, -116, 119, 46, 47, 121, -115, -49, 2, -90, 83, -26, 14, -127, 63, -63, -94, -121, 116, -43, -93, -37, 124, 89, -30, -126, 70, 58, 85, -67, -5, -38, -115, 36, -9, 21, -19, -106, 122, -67, 5, 80, -81, 67, 102, -118, 19, -22, 109, 21, -117, 86, 16, 58, -73, -119, 29, 35, -51, 27, -75, 90, 48, -36, 39, -37, 31, -62, 69, -32, 117, -121, -120, 99, -114, -122, 58, -28, -55, -93, -117, 30, -95, 96, -37, -40, -105, -108, -123, 27, 86, -115, -59};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.4005246645913454);
    msg.setSource(4515U);
    msg.setSourceEntity(34U);
    msg.setDestination(34942U);
    msg.setDestinationEntity(21U);
    msg.req_id = 38029U;
    msg.ttl = 43036U;
    msg.destination.assign("EAFRIULHKPZVHHUTTEPCBFKWUXHCKGGIYUUHMWFWTBDZEMNOQTJYLDNMVFQNJNRPXSKWYAOUZACSAJIQKOSXMRITNMWESVJHNUFKUOJJNVWZOMFVYKMOQZUBBLBXSAPADGLCANOJTVZBHKFCLOBTDPJEGYXEXBRNPYLCZYBDMTBRICARRELWDYLUROVFRPLSLSIRQTAZHMPGJSIWGNXJDYMQSVXQVIWIEQ");
    const signed char tmp_msg_0[] = {61, 51, 18, 61, 30, -2, 61, 104, 19, 122, -27, -85, -76, -110, -115, -91, 31, -74, 65, 40, -122, 55, 93, -59, 61, 73, 115, 0, -119, -56, -18, -31, 60, -69, -47, 50, -4, -57, -89, 8, 121, -42, -7, -87, -103};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.818369642823367);
    msg.setSource(31652U);
    msg.setSourceEntity(119U);
    msg.setDestination(697U);
    msg.setDestinationEntity(197U);
    msg.req_id = 21157U;
    msg.ttl = 5361U;
    msg.destination.assign("WLNCNITTPDXBYLIECDWLWKTFAMZRXBZSUVQECIAYYKUKPKFOHLIQMZYXUVAFIWDZXBLIKFVPSLXFRJOGQOHGOSQCDHVSREVERUVXJPBJDBKJAHFVGMRDNPWYXZBVZEYOHSXELZEAOIMAZLGCNILWYBJPGZMKVTBBUMFFKC");
    const signed char tmp_msg_0[] = {60, -73, 62, 61, -118, 74, -28, -86, 82, 72, 36, -96, 4, 64, -66, 86, 116, 102, -70, -91, 3, -62, 16, 93, -82, 16, -9, 27, -4, 69, -8, -4, -56, -48, 112};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.4188440708192861);
    msg.setSource(18074U);
    msg.setSourceEntity(167U);
    msg.setDestination(43448U);
    msg.setDestinationEntity(179U);
    msg.req_id = 23328U;
    msg.status = 106U;
    msg.text.assign("GLSBMUMTAIOBKMDRUEDDRNIUVZP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.6148141567696315);
    msg.setSource(63834U);
    msg.setSourceEntity(58U);
    msg.setDestination(58391U);
    msg.setDestinationEntity(179U);
    msg.req_id = 28406U;
    msg.status = 236U;
    msg.text.assign("URYXIHCCJXQGTRLUVTMYOKYDQFZZTINLCKABTAZTCVTBDUHKFSCOLSALICGOOMQEEXSMJVRHFPXFPSQBYIVNGJVVECQWKJGSWNXRSNNIYWDVIHTNEEBOAWHOEA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.5821215464340855);
    msg.setSource(10689U);
    msg.setSourceEntity(17U);
    msg.setDestination(55342U);
    msg.setDestinationEntity(159U);
    msg.req_id = 15183U;
    msg.status = 67U;
    msg.text.assign("SQEPBWVCYQRIXIEICRNJRONOXLTGWEVDPWHFFWMVVVGDDBULXUKDJWXMU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.7227523689031982);
    msg.setSource(23077U);
    msg.setSourceEntity(207U);
    msg.setDestination(9249U);
    msg.setDestinationEntity(250U);
    msg.group_name.assign("ARDKXUFCVZJHGLSUEHHLGAOZEOFQLJMDBYTQQDEWUKXYPSYDQYLQIFBIUEMNTATEWRNKJBLGNOUQZVIGBPUBUJEAQWMIROHFQVPCRFWGDXCCNOGVTWLHHVPLVZZMKGNYP");
    msg.links = 253946889U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.0031123431718445005);
    msg.setSource(64190U);
    msg.setSourceEntity(111U);
    msg.setDestination(60293U);
    msg.setDestinationEntity(155U);
    msg.group_name.assign("TDKGBNIQVJLWAUZVTNQJOJDVHCPDPIUHWSUEIXKUHTGMUZDGLVAROQWXNKQTEKJCAWPEDAEKWSCIELMBTCAOHXCVFKOPYIXSROSSLXAOFIVZTPKOIAMWJMLYMRDJCHBDQURTVMNQEXIZDMWFPNCFGBRFPCKREHBLFGRJJBXDKUPSJNXGOGEYAXZERSIOYQTWNUBSMZRYPGUAOIYLFVNJRBEQBWDCQUYFZKZNXLZN");
    msg.links = 3864823199U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.16892489996796078);
    msg.setSource(59244U);
    msg.setSourceEntity(67U);
    msg.setDestination(14532U);
    msg.setDestinationEntity(169U);
    msg.group_name.assign("ZDKYOBPWHCYZWQSCRGXCSTTCHEOVVAFJUJUBQKOLIFYDPHMYZGPEGRBBFOQUVRZUTNXGUXOMTNCUHZDXSBR");
    msg.links = 3636305644U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.6295242647943032);
    msg.setSource(50786U);
    msg.setSourceEntity(64U);
    msg.setDestination(34297U);
    msg.setDestinationEntity(42U);
    msg.groupname.assign("YUIRERYFEHSXMALVFJZYKHDDKWVZGZLDWCFZKBQLVWOKL");
    msg.action = 123U;
    msg.grouplist.assign("XAULADEULAGUDIWERCLYRZYGKBVHBUSUOJWJJBMOQMGFOMTIWEMFZGJNCEFEGSULMKSHYYAATYABMXXKIAFQHJTOXKMOWDHDRJNPZEAGJTSOFUMRZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.8602893139973901);
    msg.setSource(63993U);
    msg.setSourceEntity(89U);
    msg.setDestination(46929U);
    msg.setDestinationEntity(109U);
    msg.groupname.assign("GXRODQYCZUVBLUQHNZCLZISDPVSFPCHDTUZXPQCVYEAUFYBBMXXWCITOEQRTHKFGPHPJYQMMOTSTJGVLIQNDEEJRPKQORNTTIBSPEWHATWBGDLYGARXQDKAFXMOQTGDRUFIYOKINMYJGWRPWBSWNSLEORAGHZCMYBBYCEOHNZKCWAVMMQMNHJUNRGUVNBDJSWAJOUEZFZ");
    msg.action = 34U;
    msg.grouplist.assign("UXVEPJFGRWW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.7698753261582465);
    msg.setSource(4729U);
    msg.setSourceEntity(31U);
    msg.setDestination(26412U);
    msg.setDestinationEntity(64U);
    msg.groupname.assign("XZPGIOMKARWNABRAMYQVLPICNSECWRODOQXIBIZFYNSGLGBJQYBBHVMPRHZEOAVMUHQMXOWKSDESIGEIFZTQSVPCJXTAYJNCXTPJIBZELUUORCVJFBEBDKHHOFFACKXGKCHJQPHYDJ");
    msg.action = 191U;
    msg.grouplist.assign("FTJVHVDEYQHSYTRSBGJJCODFPHAPCNLWZIVFXSJWKGEEUNEROASLEVMVIKXXPKSICRYDRNOXIIUCYBWMDFRGWHBMLINXUIOLFAPDGLTBBYWGKAZONCHHNBKXZUEPUIRRJFWQBOGBYAKBFBDVZWJMATJCQPCLKUURXTLCSIUWXYTKMTSISNLLEOPMMCZYQJKDLQTHEHUZZJVAGZVMJVOQTSROAVGPNQHKZAPFAZWRP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.5495378592715345);
    msg.setSource(49199U);
    msg.setSourceEntity(185U);
    msg.setDestination(31014U);
    msg.setDestinationEntity(45U);
    msg.value = 0.7699689910803963;
    msg.sys_src = 38881U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.4292543097916681);
    msg.setSource(41715U);
    msg.setSourceEntity(58U);
    msg.setDestination(49606U);
    msg.setDestinationEntity(156U);
    msg.value = 0.22514761337089018;
    msg.sys_src = 53917U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.723683324152648);
    msg.setSource(50024U);
    msg.setSourceEntity(30U);
    msg.setDestination(8982U);
    msg.setDestinationEntity(214U);
    msg.value = 0.4770227233994757;
    msg.sys_src = 57206U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.07760287184495396);
    msg.setSource(5561U);
    msg.setSourceEntity(139U);
    msg.setDestination(28515U);
    msg.setDestinationEntity(210U);
    msg.value = 0.06299570854938386;
    msg.units = 29U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.4861430594322348);
    msg.setSource(18923U);
    msg.setSourceEntity(80U);
    msg.setDestination(51717U);
    msg.setDestinationEntity(183U);
    msg.value = 0.9041231182397014;
    msg.units = 198U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.5079209426826796);
    msg.setSource(46270U);
    msg.setSourceEntity(78U);
    msg.setDestination(26319U);
    msg.setDestinationEntity(130U);
    msg.value = 0.7563943332040065;
    msg.units = 211U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.36313392012148804);
    msg.setSource(16526U);
    msg.setSourceEntity(123U);
    msg.setDestination(45064U);
    msg.setDestinationEntity(109U);
    msg.base_lat = 0.7134539070892938;
    msg.base_lon = 0.9531938736938258;
    msg.base_time = 0.5074790432136677;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.8172388176766107);
    msg.setSource(30080U);
    msg.setSourceEntity(74U);
    msg.setDestination(57067U);
    msg.setDestinationEntity(184U);
    msg.base_lat = 0.150509882772486;
    msg.base_lon = 0.2597786629747576;
    msg.base_time = 0.307976241071269;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.05127317334488457);
    msg.setSource(8799U);
    msg.setSourceEntity(169U);
    msg.setDestination(63330U);
    msg.setDestinationEntity(153U);
    msg.base_lat = 0.8565268365295018;
    msg.base_lon = 0.23163434308889097;
    msg.base_time = 0.589855483266004;
    IMC::RemoteCommand tmp_msg_0;
    tmp_msg_0.original_source = 9U;
    tmp_msg_0.destination = 38269U;
    tmp_msg_0.timeout = 0.8164981530354575;
    IMC::HistoricCTD tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.conductivity = 0.8790118363920396;
    tmp_tmp_msg_0_0.temperature = 0.6132666894258252;
    tmp_tmp_msg_0_0.depth = 0.5656179579884103;
    tmp_msg_0.cmd.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.867723301782181);
    msg.setSource(8324U);
    msg.setSourceEntity(35U);
    msg.setDestination(47500U);
    msg.setDestinationEntity(9U);
    msg.base_lat = 0.6265988280590323;
    msg.base_lon = 0.8144540388569701;
    msg.base_time = 0.9145068506055029;
    const signed char tmp_msg_0[] = {5, -62, -100, 86, -52, 64, 125, -44, 25, -112, 88, -3, 89, -12, 5, 93, -108, 14, 76, -128, -56, 17, 82, -108, 58, 18, 50, -10, 90, 29, 59, -35, 120, 123, -17, -114, -16, -79, -101, 81, 52, 82, 62, -88, 66, -37, -54, -48, -84, 116, -49, -110, -46, -52, 1, -15, -98, -105, -49, -108, -90, -54, -106, -35, 114, -124, -87, -105, -15, 7, -62, 27, 1, 84, -69, -24, 10, -82, 43, -49, -95, 79, -27, 68, -52, 35, -47, -70, -35, -100, -20, -35, -113, -59, 109, 108, 104, 9, -39, 32, 29, -58, 124, 72, -119, 95, 39, 63, 30, -14, 69, 34, -68, -39, -38, -48, -126, 26, -92, 73, 47, 120, 109, 86, 80, -26, -106, 27, 41, 90, -64, -113, 79, -38, 78, -81, -72, 16, -70, -15, 17, -54, 70, 58, -31, -47, -13, 105, 60, -65, 95, 108, -46, -92, 0, 116, -1, 80, -86, -95, -108, -52, 77, -117, -10, -24, -17, -53, 79, -97, 13, 95, 36, -109, 93, 33, -42, -127, -98, -6, -47, 7, -88, 126, 82, 120, 49, -8, 88, -125, 106, 3, 89, 48, -88, -14, 69, -91, 56, -83, -1, -29, -80, -55, -9, 99, -53, -19, -24, 67, 61, 55, -104, -60, 111, 46, -58, 60, -8, 124, 73, -33, -101, 84, 110, 18, -108, 23, -106, -50, -13, 73, -62};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.0999044983030205);
    msg.setSource(27167U);
    msg.setSourceEntity(65U);
    msg.setDestination(37686U);
    msg.setDestinationEntity(79U);
    msg.base_lat = 0.5306913644580182;
    msg.base_lon = 0.1398273972128088;
    msg.base_time = 0.9167598372689101;
    const signed char tmp_msg_0[] = {-9, 18, -82, 113, 118, -47, -122, 26, -16, 97, 115, -6, 118, 77, 4, -128, 44, -59, 61, -37, -105, 0, 106, -32, -14, 57, 60, 23, -126, -102, -45, -20, -125, -10, -64, 54, -30, -108, 69, -113, -95, -79, -72, 16, -56, 43, -28, 8, 13, 64, -45, 51, 21, -90, -87, 95, -37, -37, 27, 2, -60, -44, 37, -101, -81, 77, -47, -24, 19, -120, -124, -43, 65, 55, 76, -3, -74, 74, 123, 46, 25, 7, 65, 121, 123, 101, -60, -1, -83, 16, -80, 31, -88, 86, -21, 78, -9, -42, 67, 79, -97, 29, 122, 39, 67, 49, 79, 111, -80, -14, -62, -40, -17, 71, -112, -18, -29, -92, 24, 6, 30, 26, 84, -10, 92, -99, 56, -13, -9, -6, -4, -8, -32, 80, 116, -22, -125, -4, 44, 23, -46, -68, 120, 16, -62, -40, 20, -40, 80};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.3600877267931163);
    msg.setSource(22774U);
    msg.setSourceEntity(80U);
    msg.setDestination(32187U);
    msg.setDestinationEntity(146U);
    msg.base_lat = 0.08632381926105936;
    msg.base_lon = 0.9852276602695392;
    msg.base_time = 0.3798350562733518;
    const signed char tmp_msg_0[] = {71, 15, -122, -105, -6, 12, 37, 51, -80, 70, -13, -45, 107, 95, -103, 124, 26, -112, -61, -72, -38, -34, -90, -90, 8, -61, -85, 44, -121, 29, -91, 64, 1, 15, 91, 47, -49, -121, 10, -54, 51, 7, 2, 23, -9, 124, 59, 111, 108, 14, 32, 58, 53, -21, -43, 62, 61, -17, -69, 82, -26, -37, -74, -75, 111, 59, -115, -119, 80, 7, 52, 112, 88, -63, 107, -78, 4, -72, -28, -66, -26, -84, -12, -37, 27, -105, -99, 74, -119, -53, 24, 79, 19, 58, -31, -111, 21, 24, -112, 33, 39, 24, 66, 87, 91, -121, -56, -19, -50, -71, -38, 46, -19, -80, -7, -42, -14, 83, 57, -85, -39, -13, 14, 125, 17, -125, -28, -97, -41, -66, -100, 20};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.3470454590464903);
    msg.setSource(28203U);
    msg.setSourceEntity(26U);
    msg.setDestination(1142U);
    msg.setDestinationEntity(190U);
    msg.sys_id = 27094U;
    msg.priority = 61;
    msg.x = 32601;
    msg.y = -27232;
    msg.z = -13299;
    msg.t = 505;
    IMC::RelativeWind tmp_msg_0;
    tmp_msg_0.angle = 0.7596220059682243;
    tmp_msg_0.speed = 0.7715658807292171;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.6855279681843185);
    msg.setSource(18786U);
    msg.setSourceEntity(85U);
    msg.setDestination(4239U);
    msg.setDestinationEntity(156U);
    msg.sys_id = 22358U;
    msg.priority = -86;
    msg.x = 14226;
    msg.y = -7742;
    msg.z = -26342;
    msg.t = 13157;
    IMC::QueryLedBrightness tmp_msg_0;
    tmp_msg_0.name.assign("GEXRPUQMUDLTNPYIPNBWYYEPLMVMUIDBNPIOEAKRUKCOOYFABZOJDRTMCHHEYZLNJSROHAWHGJSZBKHFAXNEVXYDOWXCSYJJTILOWMTKFUWHTHGCLDKTVBLNNCGLHWAEAZZNQVCJWVPJDSDYOABPAHUVLE");
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.4195515116759725);
    msg.setSource(50628U);
    msg.setSourceEntity(233U);
    msg.setDestination(3240U);
    msg.setDestinationEntity(134U);
    msg.sys_id = 34341U;
    msg.priority = -127;
    msg.x = 26025;
    msg.y = 29237;
    msg.z = 6456;
    msg.t = 19628;
    IMC::Alignment tmp_msg_0;
    tmp_msg_0.timeout = 28250U;
    tmp_msg_0.lat = 0.7332358467497775;
    tmp_msg_0.lon = 0.9216398739771565;
    tmp_msg_0.speed = 0.6210748782074558;
    tmp_msg_0.speed_units = 37U;
    tmp_msg_0.custom.assign("AFGMAKRHDKKWAFLCYNOPBYQNAQDQIVPIVRAJHPDFQNEECFUHWDBSEEUWNILTTOVWSDPYTMUQEITEUEXULRSUZVXTJPSXIQEVLESRNLVOBHMVOJFZFORGATDAYGTZYZPHXPKRWDTCIYCKJMZZBHMGOLKXSLMGJYIUKQGEQZFRCAVUHTOVJQWI");
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.9188213405999289);
    msg.setSource(7308U);
    msg.setSourceEntity(121U);
    msg.setDestination(40192U);
    msg.setDestinationEntity(112U);
    msg.req_id = 63871U;
    msg.type = 142U;
    msg.max_size = 24723U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.9802285349186644;
    tmp_msg_0.base_lon = 0.39663149843010104;
    tmp_msg_0.base_time = 0.9026612014261817;
    IMC::RemoteCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.original_source = 1354U;
    tmp_tmp_msg_0_0.destination = 48310U;
    tmp_tmp_msg_0_0.timeout = 0.3564022298825732;
    IMC::Drop tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.timeout = 50355U;
    tmp_tmp_tmp_msg_0_0_0.lat = 0.17666294037218966;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.4425094590659643;
    tmp_tmp_tmp_msg_0_0_0.z = 0.4713860305343055;
    tmp_tmp_tmp_msg_0_0_0.z_units = 202U;
    tmp_tmp_tmp_msg_0_0_0.speed = 0.7715794574937692;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 6U;
    tmp_tmp_tmp_msg_0_0_0.custom.assign("AHOWKXUOUGDGNJBVKYKQRIMF");
    tmp_tmp_msg_0_0.cmd.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.0003165935323516944);
    msg.setSource(15378U);
    msg.setSourceEntity(38U);
    msg.setDestination(23171U);
    msg.setDestinationEntity(130U);
    msg.req_id = 31203U;
    msg.type = 8U;
    msg.max_size = 31538U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.05379181333983163;
    tmp_msg_0.base_lon = 0.7231812963100498;
    tmp_msg_0.base_time = 0.8967951792768043;
    IMC::RemoteCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.original_source = 61062U;
    tmp_tmp_msg_0_0.destination = 63830U;
    tmp_tmp_msg_0_0.timeout = 0.37757732921247844;
    IMC::Fluorescein tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.value = 0.3622834017423132;
    tmp_tmp_msg_0_0.cmd.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.5823506880850603);
    msg.setSource(31077U);
    msg.setSourceEntity(214U);
    msg.setDestination(63462U);
    msg.setDestinationEntity(77U);
    msg.req_id = 29126U;
    msg.type = 52U;
    msg.max_size = 33279U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.8870439288299686;
    tmp_msg_0.base_lon = 0.3379434323226562;
    tmp_msg_0.base_time = 0.2552912908344629;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.4558185842433541);
    msg.setSource(17154U);
    msg.setSourceEntity(61U);
    msg.setDestination(4590U);
    msg.setDestinationEntity(239U);
    msg.original_source = 47088U;
    msg.destination = 59835U;
    msg.timeout = 0.7497203063644475;
    IMC::UbxSvIn tmp_msg_0;
    tmp_msg_0.meanx = 0.24475279927684102;
    tmp_msg_0.meany = 0.6942484236760537;
    tmp_msg_0.meanz = 0.9441071742319612;
    tmp_msg_0.dur = 2127852876U;
    tmp_msg_0.meanacc = 0.17893065994179136;
    tmp_msg_0.obs = 3303380441U;
    tmp_msg_0.valid = 122U;
    tmp_msg_0.active = 67U;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.1787239565218336);
    msg.setSource(27279U);
    msg.setSourceEntity(5U);
    msg.setDestination(61687U);
    msg.setDestinationEntity(147U);
    msg.original_source = 58843U;
    msg.destination = 5475U;
    msg.timeout = 0.8978575989908374;
    IMC::HistoricDataQuery tmp_msg_0;
    tmp_msg_0.req_id = 21138U;
    tmp_msg_0.type = 210U;
    tmp_msg_0.max_size = 55547U;
    IMC::HistoricData tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.base_lat = 0.7643210902208002;
    tmp_tmp_msg_0_0.base_lon = 0.8376286680946514;
    tmp_tmp_msg_0_0.base_time = 0.1395004395853976;
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.5955858086136011);
    msg.setSource(52869U);
    msg.setSourceEntity(215U);
    msg.setDestination(32477U);
    msg.setDestinationEntity(172U);
    msg.original_source = 53407U;
    msg.destination = 23098U;
    msg.timeout = 0.6420523611880722;
    IMC::FollowRefState tmp_msg_0;
    tmp_msg_0.control_src = 53310U;
    tmp_msg_0.control_ent = 159U;
    IMC::Reference tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.flags = 62U;
    IMC::DesiredSpeed tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.value = 0.865523089324911;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 29U;
    tmp_tmp_msg_0_0.speed.set(tmp_tmp_tmp_msg_0_0_0);
    IMC::DesiredZ tmp_tmp_tmp_msg_0_0_1;
    tmp_tmp_tmp_msg_0_0_1.value = 0.8323175745910225;
    tmp_tmp_tmp_msg_0_0_1.z_units = 169U;
    tmp_tmp_msg_0_0.z.set(tmp_tmp_tmp_msg_0_0_1);
    tmp_tmp_msg_0_0.lat = 0.8814746808190438;
    tmp_tmp_msg_0_0.lon = 0.8779527427977137;
    tmp_tmp_msg_0_0.radius = 0.29684138021810524;
    tmp_msg_0.reference.set(tmp_tmp_msg_0_0);
    tmp_msg_0.state = 6U;
    tmp_msg_0.proximity = 88U;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.6977331519351495);
    msg.setSource(31567U);
    msg.setSourceEntity(232U);
    msg.setDestination(52601U);
    msg.setDestinationEntity(223U);
    msg.type = 121U;
    msg.comm_interface = 52758U;
    msg.model = 58343U;
    msg.list.assign("FHCYUHSMTXDKZAQYDXIBITJICKHJLMHDLDHIBGBNEFJZGRKFFRSYEERGHFYLKNCQDRLQZMMLALWGVXMNJXXTBGSNNARRJBETYOFVNQDOCTPYJOUGANITNBISASTEWUTXRUWOVSAQTPVDLOQMKQVOLOGWKKDB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.6112204769343099);
    msg.setSource(23881U);
    msg.setSourceEntity(241U);
    msg.setDestination(23259U);
    msg.setDestinationEntity(0U);
    msg.type = 47U;
    msg.comm_interface = 48629U;
    msg.model = 3639U;
    msg.list.assign("RDNQAIRTZRDCBVELOLYHJHLDWVZAHZLAEOKGNKYMPVSUFGEXWBKJBTUDTYZQPSSZJRWMQKAKDCUDCMWHN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.28481079535669906);
    msg.setSource(24198U);
    msg.setSourceEntity(153U);
    msg.setDestination(25716U);
    msg.setDestinationEntity(141U);
    msg.type = 175U;
    msg.comm_interface = 789U;
    msg.model = 32785U;
    msg.list.assign("KBUCLHEMIXMSPJBJKZHXCEGKUQYIDNKIPMFKVJELGETAARULFWSUQOGQREMNKOROGRTWOCDLWFCHWJQWAIPVFCLOSWIQRRGAUOPADPUYJJXQYTSJHNFCDNTXZYIADEKLNLOEWRFZENTSJXASFSHYBRMKVOORQWTXSVDOBBNGKAQVUVNUIYZDEUZBSKDDTFHGUTVELXMGCXFDYFCHLMMNGMQPVTBBWAIHZZSYZVPHWBVI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.43616428734070145);
    msg.setSource(5850U);
    msg.setSourceEntity(134U);
    msg.setDestination(16793U);
    msg.setDestinationEntity(175U);
    msg.type = 245U;
    msg.req_id = 1409470059U;
    msg.ttl = 64791U;
    msg.code = 66U;
    msg.destination.assign("WMMNHUAHMETTMREJTBGVRWITUVXUNJZTHUMAGTVDFAFYAPWWGWQRQEOVKHTRLHPXUUGQCQZOJXXJIJQCLTLCYBUZKVQYKNPDAFKRSGNCPWPHLVEZLJDEOYHIOKRAXDKMPBXWFVKBJLKEAOYDMQBBFYSSNWIVOJXYSANCLCOPPXDIBWOCSGTQUDSZMFMQGLAWNILPYVRMPRGNHOTGAEHSDZZZEBCFJJHODRZYFIZSCIU");
    msg.source.assign("VSFLVRIOADZFDHTBLVCTTSWLBTAIISZQUUBUNOSDKCVYPCGDVBGTJPECKJJYLWRMVEGAQSNOKLHXXSYKXMQ");
    msg.acknowledge = 186U;
    msg.status = 47U;
    const signed char tmp_msg_0[] = {-76, 63, 119, 4, 119, 40, 82, 14, 84, 29, 109, -52, 66, -13, 32, -41, 81, 14, 69, 13, 67, 70, -12, -121, -79, 56, 82, 76, 32, 70, -6, 22, 69, -45, 23, -86, -34, -1, -68, -98, 81, 93, 80, -62, -128, 104, -11, 17, -21, -67, -106, -36, 122, -98, -122, 19, -114, -80, 23, 73, -108, -58, 68, 83, 11, -44, 56, 73, 122, -45, 51, 121, -119, -65, 25, 85, -90, 74, 103, 36, -58, -67, 109, -118, -75, 65, 0, 63, -66, -106, -16, -23, 0, 40, 45, 114, -68, -104, 30, -128, 16, -98, -66, -35, 37, 82, 117, -125, 3, -4, 21, -29, -105, 38, 24, 63, 65, -33, 50, 75, 45, 2, -79, 49, 21, -91, -114, 49, -9, -9, 48, -96, 13, -12, -89, 56, -7, -77, 80, -33, -42, -36, -35, -119, -88, -128, 53, -29, -55, -79};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.7946922780797376);
    msg.setSource(63897U);
    msg.setSourceEntity(9U);
    msg.setDestination(45781U);
    msg.setDestinationEntity(209U);
    msg.type = 128U;
    msg.req_id = 3440570333U;
    msg.ttl = 6654U;
    msg.code = 177U;
    msg.destination.assign("HCZNBSHUQBDUYHFKSYWIRSLCHZAVPMJLIJATPHJXMYPFJWXKMTSHPJYSMCBXQTYFORALVOOCGJNMRQCWUIFONTJCLVUIRFNGPMKEZXDHYNRRXEFADXNTGVFWXCUZAGJVLMFRZOYERLLVJDRFUPWBQGSAEHGMAGNWDYUDZRTBFIWADKJWUENOLYZOQZQACQSTSAEMPIBLOEVIWXTIVKGDGIBDBYMTZOZUBKP");
    msg.source.assign("BYBCLKCYVBBSQYQLIKZYQLHVOJEEUQPNTGGAIUVZWSGSFMZCTVTOCGBALSPATYXOUHUWBCWFJYKCPRTZDXYXQXAKAVNJQHOTZPLOZNZKIBTGHNNNGXMFJPPOJRFWGJBVMZMOYXHW");
    msg.acknowledge = 18U;
    msg.status = 150U;
    const signed char tmp_msg_0[] = {26, 11, -47, 110, -29, -84, -122, -3, -113, -59, 120, 10, 19, 100, 34, -76, 109, -60, -15, -31, 24, 116, 32, 69, 113, -93, 19, 78, 51, 117, 49, 36, -90, 115, 0, 59, 81, 124, 113, 85, -83, -122, -19, 84, 19, 36, -15, 30, 83, -80, 104, -104, -122, 124, 23, 35, -92, 30, -12, 1, 54, -28, 31, 5, 18, 104, -112, -61, 51, 42, -115, 74, -73, -44, -5, -93, 111, -87, -48, -108, -114, -5, 90, 33, 26, 7, 9, -75, 54, 32, -67, -102, -12, -50, -51, 92, -85, 16, -19, -49, -35, 86, 58, -99, -97, -111, -24, -9, -55, 41, -92, -118, -69, 28, -65, 5, -7, -76, -122, -66, 58, -96, 84, 31, 61, -85, -88, 97, 104, 82, 30, 111, 58, 52, -24, -105, 25, -114, -62, -74, -119, 34, -56, -83, -10, 95, -87, -17, -64, -127, -6, -26, 67, -108, 66};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.10403917968070298);
    msg.setSource(34711U);
    msg.setSourceEntity(102U);
    msg.setDestination(38375U);
    msg.setDestinationEntity(237U);
    msg.type = 56U;
    msg.req_id = 515026375U;
    msg.ttl = 19661U;
    msg.code = 200U;
    msg.destination.assign("BJJOTZABOJYSSIDDOYRPIFYRSARHEAWWPLKVJIDDEVIAGBPRLKOXFVWUXRHUMTYCBZLBXUXSOHPHTZRFVIZGTNLQKDMXVMZEVPUFOIJINWUHPOGASCMZYENJPXWXPQEDMIKRCGRGNUXESBJSTUOCUZYTWPCCCCUQLWKDTQXLKILDEDQLZLBQYMWFVMHEBEQAQOBLBSMVJ");
    msg.source.assign("EPGANFATBKLGOIRSVLDYLMWVISCXYRGCYPPGKDBFOXMJYGMYEADIMVREWGQVZQYKNHEFZXNNKOXFDURBNGAPPRTCOSTOHJEPXMSKCOQJKSZJDHXDBZWBQMVWQPRUNLLYHSFEQUIEHUZDCLTWLTIIPORNFSUQNXBHG");
    msg.acknowledge = 87U;
    msg.status = 107U;
    const signed char tmp_msg_0[] = {36, 125, -22, 91, -28, -44, 8, -2, 69, 123, -85, -25, 101, 122, -56, 18, 25, 21, 76, 71, 89, -11, 103, -115, 19, 58, -27, -99, -95, -117, -107, -60, -94, 16, 97, 7, 103, 110, 126, 25, -111, -71, -38, 105, 25, -88, 102, -110, 125, 126, -38, 58, -86, -104, 116, 104, -69, -94, -46, 28, 14, -23, -121, -120, -18, -119, 43, 26, 46, 13, 60, -24, -10, 88, 71, -40, 94, -118, 46, 112, 19, 10, -122, 71, 26, -35, -48, -82, 33, 71, -61, -83, 76, 43, 41, -30, -33, -106, -39, 12, 94, -30, -16, 8, -62, -42, 69, 113, 22, -71, -79, 69, 118, 32, 29, -79, -23, 105, 46, 2, 43, 54, 84, 7, -43, 1, -20, -25, -73, -117, 78, 91, -117, 19, -29, -103, 57, 14, -45, -87, -9, -64, -117, -95, 55, -113, 6, 30, -18, -111, 108, 44, 80, -9, -25, 59, 58, -104, -43, 21, 38, -70, -117, -30, -67, 25, -70, -77, -27, -28, 19, 114, -80, -124, -70, 122, 93, -16, 91, -20, 64, -17, -127, -50, 75, 83, 0, -107, 105, -27, -27, 8, -97, -5, 27, -106, -72, 39, -73, -28, -88, 102, 75, -75};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.5434477697255548);
    msg.setSource(62307U);
    msg.setSourceEntity(56U);
    msg.setDestination(50172U);
    msg.setDestinationEntity(192U);
    msg.id = 7U;
    msg.range = 0.09472898368901805;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.8709077515175654);
    msg.setSource(31068U);
    msg.setSourceEntity(38U);
    msg.setDestination(21813U);
    msg.setDestinationEntity(52U);
    msg.id = 159U;
    msg.range = 0.759915291813672;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.2701580536848798);
    msg.setSource(59952U);
    msg.setSourceEntity(211U);
    msg.setDestination(61735U);
    msg.setDestinationEntity(67U);
    msg.id = 39U;
    msg.range = 0.698895242248771;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.26766247733842685);
    msg.setSource(38938U);
    msg.setSourceEntity(247U);
    msg.setDestination(44223U);
    msg.setDestinationEntity(214U);
    msg.beacon.assign("PWWQRPRQTJRAXIETKHOIYLUYQXNTMGSADFJKEWHIGHLFLFXBWESEKNGCCSXSIZZYBZLZSVKUFTWDGPRVTVSAHXSMBLRTOUIXUCSXQHFGVGEOWQJCPUGQBNUMDGIWZOVKBNHYOAOAHEECAPRNMRDIKOBQ");
    msg.lat = 0.7663271078115445;
    msg.lon = 0.22008407617704095;
    msg.depth = 0.5479260707563955;
    msg.query_channel = 167U;
    msg.reply_channel = 186U;
    msg.transponder_delay = 112U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.4355078577786562);
    msg.setSource(15316U);
    msg.setSourceEntity(198U);
    msg.setDestination(43664U);
    msg.setDestinationEntity(28U);
    msg.beacon.assign("XLWAHVHUKTNDFTRCREBBDWMZRQMTYWESTOKGMOFLHUGQRQEIIRMFJAVCPDURQVSQABGMTSUMQELWDPWCCMGNWNSKLCCPGBVFVRCBXGPHIXOBDMILSYFINJEDJFQUKFYNYXNTHJETDKYCOCIUFPATSIASONPJKZQZUSVXTXLVPSAOXOGTLUIXJHEJGZHWNEYAZPHDJOLZEZJUHOLCRIFFNSGAEOPNVLBVZXW");
    msg.lat = 0.18719522370503117;
    msg.lon = 0.6011387671777678;
    msg.depth = 0.07300036311063574;
    msg.query_channel = 234U;
    msg.reply_channel = 198U;
    msg.transponder_delay = 254U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.5299056254433292);
    msg.setSource(25170U);
    msg.setSourceEntity(215U);
    msg.setDestination(13008U);
    msg.setDestinationEntity(169U);
    msg.beacon.assign("TYBORPBMARKGMQXKCNRNIBTOOWZBIZQMHJJIECMHPLAPDAXMCVFWRYUCYXUCYYOVSLXQNYQJFCVPQYQHJLFXFKCFGLQDADTFGTOJWXQNQETHUGUHNISVSEWMEOC");
    msg.lat = 0.13984125871395636;
    msg.lon = 0.22558192269004773;
    msg.depth = 0.8933499388796827;
    msg.query_channel = 227U;
    msg.reply_channel = 178U;
    msg.transponder_delay = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.6741074726599893);
    msg.setSource(40584U);
    msg.setSourceEntity(77U);
    msg.setDestination(38694U);
    msg.setDestinationEntity(225U);
    msg.op = 164U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("BYGPRAFVEXRJBHIDOSTQAYYJPTGVGYOCLNUIDUZKARFONFOYSHLCTTSVKPUNTCJXGMMSWEPZZODAUYITVVMVGACLSXJLJWHQXFCQBTSPANCASEXVPJIWRCINQDJEEDYRBIFRZVZEJXIVNAMBBLBZFKPOWWOYMIFNXHSUNFBQWBGSRJUQPORGMGUEKZKBQKPDYAECNXJUCZGGHFYQNFHWLTIHHQVXMUDIZX");
    tmp_msg_0.lat = 0.1013956343295318;
    tmp_msg_0.lon = 0.4564926180643616;
    tmp_msg_0.depth = 0.6463222886091483;
    tmp_msg_0.query_channel = 146U;
    tmp_msg_0.reply_channel = 126U;
    tmp_msg_0.transponder_delay = 151U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.17596392435959152);
    msg.setSource(16227U);
    msg.setSourceEntity(239U);
    msg.setDestination(59338U);
    msg.setDestinationEntity(223U);
    msg.op = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.09037195509987495);
    msg.setSource(20105U);
    msg.setSourceEntity(159U);
    msg.setDestination(21206U);
    msg.setDestinationEntity(50U);
    msg.op = 152U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("OQHYJPSAXDBBQHGSBOLLINCPHBMBQWDFMYFBHCUYYJLXOJUTGIKFOABZYDKZKQKQZZQMNMLLOURJALGDNBCEWAREPQZMVVHYQKSSDXZVTRVP");
    tmp_msg_0.lat = 0.4172165940879885;
    tmp_msg_0.lon = 0.8255227437206012;
    tmp_msg_0.depth = 0.7264795843132177;
    tmp_msg_0.query_channel = 206U;
    tmp_msg_0.reply_channel = 228U;
    tmp_msg_0.transponder_delay = 28U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.23224893032562566);
    msg.setSource(14270U);
    msg.setSourceEntity(128U);
    msg.setDestination(16393U);
    msg.setDestinationEntity(7U);
    IMC::SetImageCoords tmp_msg_0;
    tmp_msg_0.camid = 180U;
    tmp_msg_0.x = 2034U;
    tmp_msg_0.y = 19821U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.08136332018449188);
    msg.setSource(40480U);
    msg.setSourceEntity(232U);
    msg.setDestination(21514U);
    msg.setDestinationEntity(204U);
    IMC::UbxSat tmp_msg_0;
    tmp_msg_0.numsvs = 44U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.9114505059015306);
    msg.setSource(30159U);
    msg.setSourceEntity(226U);
    msg.setDestination(64209U);
    msg.setDestinationEntity(227U);
    IMC::SessionStatus tmp_msg_0;
    tmp_msg_0.sessid = 600710143U;
    tmp_msg_0.status = 213U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.3937164684226476);
    msg.setSource(8648U);
    msg.setSourceEntity(64U);
    msg.setDestination(51635U);
    msg.setDestinationEntity(70U);
    msg.lat = 0.6442301124753146;
    msg.lon = 0.34091253899049934;
    msg.depth = 0.11714513734971888;
    msg.sentence.assign("GODBAKZABUVDZEPQHMFXNQXPWUJVTWTFEQYKSMCPYZALTTIGMOXGHLPBQYJNHODLJMFANVSUTTGUMFKCGDYGCWRZJEYLNNHORPJKWUCAIUWHIB");
    msg.txtime = 0.47171857973115716;
    msg.modem_type.assign("WDGSKPYWYOMQQEHPWYUEYPGXLIKQSDBTFCGJFNWATAMLFXPSIXNDNVARAZVGJWCJEJOBPMLQMPHWOZZFWRETILZJZASVXVEHJZUBIVCSGLNXDVEIFBATROQXKMFQMOAPQFZSCRWZLSUPUHORCDDUNBPQKMKCJEXRGRYGESYUZYNEIDVMGTYERU");
    msg.sys_src.assign("QMGDWLOSQRVUWGPFAEIQRAWBAHOWXXSNMGTRVYAGRBMZYZTXVITZZSTCGTYYFPORCNVREQPERMYJTHFPCRAOFNDFDDCVYKDJLCUASQJQUPVBEFLYSHOHL");
    msg.seq = 20798U;
    msg.sys_dst.assign("IZCJIYBCFBQNWJMKUPKBANIWVSJSMUHTPTXOSEUYXCVSRYMGLJUHXQITMSCAETZGOUDABKCRBCJAMMNNVBFQEFSDBGRGYKZIZKDVUDYAEJLQUXLIIRPDHFW");
    msg.flags = 246U;
    const signed char tmp_msg_0[] = {-104, -123, 4, -105, -39, 99, -99, 91, -62, -97, -95, 54, 93, -23, 56, 58, -115, -86, -52, 9, 37, 0, 75, -63, 79, -88, -93, -14, -117, -120, -57, 18, -56, 18, -76, 67, 98, 43, -69, 120, 51, 12, 30, 59, -38, 106, 110, -92, 4, -69, -99, -12, -6, -2, -7, 120, -65, -8, 69, 9, 40, -31, -85, 120, -21, 62, 124, -116, 41, 121, -109, 85, -66, -52, -98, 93, 126, 26, 124, -26, -78, -61, 34, -82, 22, -35, -3, -113, -36, 17, -46, 27, -103, 108, 93, -23, -95, -51, 0, 10, 49, 31, -121, -119, -25, -38, 119, 13};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.7335727345768461);
    msg.setSource(7880U);
    msg.setSourceEntity(83U);
    msg.setDestination(43466U);
    msg.setDestinationEntity(26U);
    msg.lat = 0.7695560914979674;
    msg.lon = 0.029355205855482458;
    msg.depth = 0.04003530857486548;
    msg.sentence.assign("WFKTXFVUQIPZZRREOBTCKIUDQAYFDPSXOYBUUSOVYSGMNHRJSHKJNIOWZHPGAFJCJVTOWBWBWKYJONSTAVHEMGLSFLKGWPVKAUBAMHXEUXFBRIVBRE");
    msg.txtime = 0.841448729808759;
    msg.modem_type.assign("HDGJCLBMDWTKTUOGJKFVKDAKWSITLVCQKMSMEHETGRXXYTOMSVEAHYYEMCSACMNXKOPSJZRRCZQSPQMZXHGUEEKUBYTLPY");
    msg.sys_src.assign("MOAWIOUJAQCDL");
    msg.seq = 33125U;
    msg.sys_dst.assign("NLZJEWHAYVCNJPOHCWXIBHOPIUMJARBLDKKPRIRNHVWIBFBVEUSYESCDCRDZGQYZKAHAEKTOSDQLLWNPHLEOFNGRAUHKNCOYXYJJYNKMYIFTWSVQHTCFPZZVAXWGIY");
    msg.flags = 83U;
    const signed char tmp_msg_0[] = {4, -107, -88, -109, 68, 89, 25, -113, 25, -44, -60, -65, -20, 6, -71, -110, 77, -71, 76, 124, 44, 60, 100, 55, -116, 84, 124, -95, -51, -9, -72, -11, -54, 18, 53, 23, 32, 93, -123, 123, -31, 101, 3, -127, 25, 7, -61, -7, -97, -83, -108, 12, 48, -49, 110, 62, 82, 123, 113, -78, -113, 19, 112, 8, -26, -126, -10, 117, 24, 98, -122, 97, 100, -23, -73, 58, -58, -44, -84, 119, 27, 106, 106, 43, -6, -10, -122, -11, -55, -95, -92, 57, -79, -112, -101, 107, -12, 76, -92, -57, 110, 72, -95, -78, 51, -107, 67, -100, 106, -97, -93, -24, -10, 18, 65, 48, 8, -11, -15, -18, 104, -22, -105, 38, 74, 83, -65, 24, 82, -111, -107, 47, -112, 117, 98, -80, 119, 109, 113, 51, 113, 90, 107, 23, -88, 27, -117, -115, 35, -18, 56, 41, -103, -44, -74, -17, 116, 29, -57, 106, -48, 6, -68};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.4740606840221955);
    msg.setSource(47755U);
    msg.setSourceEntity(59U);
    msg.setDestination(30899U);
    msg.setDestinationEntity(212U);
    msg.lat = 0.04561369690259787;
    msg.lon = 0.2116850237193061;
    msg.depth = 0.09883028813273576;
    msg.sentence.assign("XYOJXKAGSMAGNVVIEKJDPYFKYDNVGROBCYWILUJGVQSNRAYHLVSOWXNTTIPMCIHHRQUTHKMCXFGUEIENRIPWZNTOECZEKLVRFURPFIESOGUPAWGKSKVBFWBSJQKXZ");
    msg.txtime = 0.3573000879049343;
    msg.modem_type.assign("QOGSACZGWSAPGTHDELEFSXYUOZXOERJXVENCHRYDAIJRCISTUMMWQTIWGYDOULKWBYVKFWOYRPGJVOJKKWNZCDAQJFNWBBMZNEIBKQMJJ");
    msg.sys_src.assign("OPWSEMLYHDWFJSOMKXYBUZCRSHVWICRNKDAVSQPHUTTBEFJONQCXTNDCJT");
    msg.seq = 41847U;
    msg.sys_dst.assign("MEOIEWFUWNROTCBNEHYGIDHOTSKFVTYUCFTIISUEJQRLFOCVEKPJYVNTJPDYQWLTIEHOJWRDXNEDLBASBUDCONQSQCPPGHHGGXKASXCSYXHZQLTTJSDJEOXUFUGCICWLYGHGNLEVBLZPGMZRFMAQKCZASQFBMOHKDZKVLPMNFRYXNJHMPAYRUPTQAURJEPVIOBJF");
    msg.flags = 211U;
    const signed char tmp_msg_0[] = {65, 34, -40, 48, 69, 22, -49, 63, 51, 81, 102, -66, 70, 122, -43, 111, -118, -126, -48, -51, 44, 64, -64, -79, 72, 61, 90, -121, 11, 88, -76, 98, -10, -74, 120, -115, -36, -42, -55, -32, -93, 116, 112, -18, -18, -5, 81, 91, -55, 91, -19, 78, -113, 49, -54, -126, 90, -2, -7, -28, 65, 99, 112, 7, 22, 101, 44, 98, -82, 93, 93, -37, -57, -113, -62, -48, 25, -110, -58, 110, -59, 59, 114, -89, 95, 4, -114, -109, -65, -87, -67, 89, -98, 5, -101, -68, 13, -53, 53, 3, 90, 78, -90, -53, 94, -59, 68, -55, -28, 115, 0, 106, 8, -54, -38, -2, 63, -13, 117, -17, 25, -126, 43, 33, -28, 38, 8, 110, -111, -125, -42, 67, -96, 74, 9, 122, -71, -100, 74, -94, 32, 39, 77, -89, 87, -26, 26, 63, -9, 46, 6, 54, -48, 78, -103, 15, -121, -66, 83, 25, -33, 103, 7, -125, 32, 84, 102, -9, -24, 89, 118, -58, -21, 73};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.9466995378006329);
    msg.setSource(25889U);
    msg.setSourceEntity(248U);
    msg.setDestination(50180U);
    msg.setDestinationEntity(83U);
    msg.op = 50U;
    msg.system.assign("SZMEVRKWLGKCLZBQHSK");
    msg.range = 0.8732589527274954;
    IMC::DynObsVec tmp_msg_0;
    IMC::CollisionAvoidance tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.mmsi.assign("HJGCGXTBGRJXIZMZHVDRRSGCURHUKYIVMSHPDJLUDTQBXXEMQCOVUNMJCLBDPTQZLVEFPSFXDTNKAILPXNCYRFGTQAVMCSEZOAKQLBSOYIWJJUKSYYRQNIMTXPLJAEFNAUVFMNURFFLIBCRGWEIMLGMEYNWHUZGWAWHINMDEAPUGDOWTKXQPVNRVTKYEWCRQISYIZQOOVAZFGLVSBDSJUF");
    tmp_tmp_msg_0_0.lat = 0.3112093035643414;
    tmp_tmp_msg_0_0.lon = 0.9161240186961851;
    tmp_tmp_msg_0_0.x = 0.03270921015956685;
    tmp_tmp_msg_0_0.y = 0.3633943004251432;
    tmp_tmp_msg_0_0.speed = 0.13407954607620043;
    tmp_tmp_msg_0_0.course = 0.7014538618402502;
    tmp_tmp_msg_0_0.dist = 0.3233744693514857;
    tmp_tmp_msg_0_0.length = 0.9808318791824022;
    tmp_tmp_msg_0_0.width = 0.34137609026572047;
    tmp_tmp_msg_0_0.o_vect = 0.5923676813990242;
    tmp_msg_0.obstacles.push_back(tmp_tmp_msg_0_0);
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.7929093514750902);
    msg.setSource(50266U);
    msg.setSourceEntity(230U);
    msg.setDestination(28169U);
    msg.setDestinationEntity(69U);
    msg.op = 89U;
    msg.system.assign("MUCZZDQTDPMXVYYIPOKDCDNVTGVWGAFOJLMGZNZEUIXWRJBZP");
    msg.range = 0.8525716322002215;
    IMC::GpioStateSet tmp_msg_0;
    tmp_msg_0.name.assign("BESASXCFYYXROSTUCUBLKCOKUEMYVWPCJKFDCLIQNYABYNBTTIQDFZOVQWNDPKOJBAFIPWSAFIBSQFHPWRVEEHHFHADIGXGVQTQKHVGMOKZDDIZVJXRJMHJZSFOYJDMZEJEPQRLHHNWMDQUXWMGCMBBVKHCSGUTPULBRPGPPUZWARBXGRSTEKWYNVNNMOQDALSVSETNCOYGOEXYMEVIOWZIQKZRALARNPTJMZCKUGRU");
    tmp_msg_0.value = 181U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.3503852580339012);
    msg.setSource(61960U);
    msg.setSourceEntity(103U);
    msg.setDestination(40122U);
    msg.setDestinationEntity(191U);
    msg.op = 91U;
    msg.system.assign("WPHSIZHIWFVJJZLEDLKIEURODDKAJBQKCYVZHTCPVTGZJFCLMWOLZHLHOFU");
    msg.range = 0.7461700676195296;
    IMC::MsgList tmp_msg_0;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.2397427229696314);
    msg.setSource(7997U);
    msg.setSourceEntity(170U);
    msg.setDestination(4010U);
    msg.setDestinationEntity(90U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.9684704596544409);
    msg.setSource(11488U);
    msg.setSourceEntity(9U);
    msg.setDestination(7412U);
    msg.setDestinationEntity(86U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.7408637766774987);
    msg.setSource(64134U);
    msg.setSourceEntity(20U);
    msg.setDestination(21852U);
    msg.setDestinationEntity(238U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.32267876935492035);
    msg.setSource(24407U);
    msg.setSourceEntity(130U);
    msg.setDestination(6666U);
    msg.setDestinationEntity(185U);
    msg.list.assign("KRBLGHRVWGBJHKVBVIKZHQSMPTPQGSTHTEVIBDJCQNZASQDCNHDTPB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.5497759340486009);
    msg.setSource(46919U);
    msg.setSourceEntity(116U);
    msg.setDestination(30665U);
    msg.setDestinationEntity(4U);
    msg.list.assign("FJELMTHOMRJGZEMFITYSUMEHUJMXEGMERHADYIKDCXNAPHGOBCTMKORUEVPTIMBPNXBOFPDVLFDAYKNBXSRDLDSCPRRJOVGLBFOXXDAUUVCTFPZKIHOITWVDABPJSFKJZYGSZAMMLWBNRCLLNVZUIPWQZUIWRQCQBZCYTHVVWPZTZSUNVNKRQQONIAVARBWHCGGKQEUEFPQXHXWJJZKKIQNXHBQLDFAQWEJYKXSFYSUCOD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.07313149973692812);
    msg.setSource(14578U);
    msg.setSourceEntity(9U);
    msg.setDestination(35464U);
    msg.setDestinationEntity(165U);
    msg.list.assign("KFWPTBOQYUQITVITSWXCSOZAWSGCIIUNLCUZRFQDOJGATXJZRPCMDWFZUJPSZBIYHYQZYKZKBOZKRYCSIOSUBSPVJOWNVEAPCCGREAGKVTVJKDWBNQJVDRIDGCFQOGZOFAAPPATKDLSUHPWDLLVEMMGMGUMENXBNRF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.38994645471713496);
    msg.setSource(18697U);
    msg.setSourceEntity(107U);
    msg.setDestination(59298U);
    msg.setDestinationEntity(0U);
    msg.peer.assign("AJMCCNXSODWRPBKHMPGBKNBDXDAGJUGDOEQMWKUDIXVRBIXAVVLPUXQFNZLWOTGSSDZRQXTSENYUQZFEKMFEGXFCWVGGGHYIUWCZVLKTWLEQQBYSVPJZVQEKOBPCUWFJPEARUAHYTSRHIEDURIJYHVWMNMSXOXFYABLISZIT");
    msg.rssi = 0.33308430604973516;
    msg.integrity = 54427U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.8493883861566331);
    msg.setSource(50362U);
    msg.setSourceEntity(66U);
    msg.setDestination(53377U);
    msg.setDestinationEntity(11U);
    msg.peer.assign("VGLJEPSAOXHGEKKLPNIUHRQMETUEYMKRFGRIATCOFWGFFTDWDLLIZCVXWLTNVSCNYTWSOWOUINHYBXYRGPRPFIFOQOWQVFGIJVGRZXJFZSQJWESUSXCYAMFTECMAMBCNRRVBCAEIQERJKZZKPHVMUOSIRQBHDINESHQHUJHNLAAZLYKDUPDVLZYMDKBPXZWMJTLANOKAMUKKTCCTQIYDTNOMVXPOBXFZJQXVPNDGWBGYWG");
    msg.rssi = 0.4509291490269296;
    msg.integrity = 54880U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.7447453207722773);
    msg.setSource(52194U);
    msg.setSourceEntity(242U);
    msg.setDestination(18745U);
    msg.setDestinationEntity(145U);
    msg.peer.assign("LUKNTLTKXIEQSIJVLQSCDAXNYJLAIDUGGYVKZWSZPTIYKWBUHNEFCIBGBHPZHAHGRLTTQPBZJEBIUQPNDEOCDQNMJURGUPYXNDMKWBEMLKOXJTDCEIHOZRLZEOAMQRWKPONMMJUCJYHBXVLRQRGEWPSVMSFVCAHIMPZWTFOPKGYYNQXMXVYUYZFWHFLZNJDOQSTSIGVOJFL");
    msg.rssi = 0.48000185757584957;
    msg.integrity = 38270U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.9431616571974458);
    msg.setSource(15798U);
    msg.setSourceEntity(227U);
    msg.setDestination(52425U);
    msg.setDestinationEntity(176U);
    msg.req_id = 55904U;
    msg.destination.assign("DCNBRUUKDEWTWOVVNCOBMVPLCAEQLNFAVRMYSKQFLKRGDKFLIGOBSHKCLUSQZOWETLRSWYOUMRIVQODBZEYDRFAKXYVIJIHWGGZUSJQYTPUATIQIEYDLKHNRXJBQJJ");
    msg.timeout = 0.8428020031610145;
    msg.range = 0.6226978619107988;
    msg.type = 195U;
    IMC::WaterDensity tmp_msg_0;
    tmp_msg_0.value = 0.11734365837691019;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.5212787163702826);
    msg.setSource(63706U);
    msg.setSourceEntity(75U);
    msg.setDestination(15900U);
    msg.setDestinationEntity(73U);
    msg.req_id = 4095U;
    msg.destination.assign("ZTKTXZLZRAJYFFEUHDPKPLKMGIHECOXNCBWHTRZJGXTUPUCFQAJPXFVQNQYVLSUMMATXDVYSHREKNYFWDSDMYBMCXYTSIPGQYM");
    msg.timeout = 0.10468314807423074;
    msg.range = 0.37153656890836884;
    msg.type = 118U;
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.45732039820699655;
    tmp_msg_0.lon = 0.5594221007130714;
    tmp_msg_0.height = 0.42880288903968233;
    tmp_msg_0.x = 0.025917206453213715;
    tmp_msg_0.y = 0.02003436241741452;
    tmp_msg_0.z = 0.17768835545435646;
    tmp_msg_0.phi = 0.21565966078144316;
    tmp_msg_0.theta = 0.9503902076817459;
    tmp_msg_0.psi = 0.16134669333194873;
    tmp_msg_0.u = 0.47444795830656394;
    tmp_msg_0.v = 0.8205109434916285;
    tmp_msg_0.w = 0.632868103065929;
    tmp_msg_0.vx = 0.7707755821781336;
    tmp_msg_0.vy = 0.4696452988198615;
    tmp_msg_0.vz = 0.9171793183535347;
    tmp_msg_0.p = 0.4147093217692198;
    tmp_msg_0.q = 0.10352499967764606;
    tmp_msg_0.r = 0.9623368331770233;
    tmp_msg_0.depth = 0.7989548209550776;
    tmp_msg_0.alt = 0.9952418540577085;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.008929535432495972);
    msg.setSource(291U);
    msg.setSourceEntity(150U);
    msg.setDestination(4663U);
    msg.setDestinationEntity(137U);
    msg.req_id = 56993U;
    msg.destination.assign("IPTVOCULLNRDGEJEORHITWKBZTTYWAPFZRGVQZAOCFFKXHLCWUNBWMFCIWWLOVSKMGYVTL");
    msg.timeout = 0.8942031017232247;
    msg.range = 0.16808550961050683;
    msg.type = 178U;
    IMC::EulerAngles tmp_msg_0;
    tmp_msg_0.time = 0.183141223648715;
    tmp_msg_0.phi = 0.5974814371469249;
    tmp_msg_0.theta = 0.3866344776609256;
    tmp_msg_0.psi = 0.2577281536695424;
    tmp_msg_0.psi_magnetic = 0.8937559836577262;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.8961924742459993);
    msg.setSource(31780U);
    msg.setSourceEntity(185U);
    msg.setDestination(48988U);
    msg.setDestinationEntity(57U);
    msg.req_id = 5839U;
    msg.type = 113U;
    msg.status = 247U;
    msg.info.assign("HFXWSOOONACBICNZYXEJFJRDSSDWAVIZHGAAXLZBUZEFZVIRAMMHIBYCUUTLHXKCGXRIRBAJLLC");
    msg.range = 0.4335031548996443;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.4425625762582033);
    msg.setSource(50906U);
    msg.setSourceEntity(40U);
    msg.setDestination(17117U);
    msg.setDestinationEntity(245U);
    msg.req_id = 18044U;
    msg.type = 186U;
    msg.status = 137U;
    msg.info.assign("JQXVBMOLBGQEOLYLXQSULVXDTZUZWJAKLNAUTLSYZTRRTMDJIYUNJPIKWOKGQVINCCSLTQBZAHIJGKTAUERMAEVRMYBRUTOFQFEYHJGAPSVCSYPULCDPRIDPVIKIJYGBWKRXTOPXLSKPBEWBHDJTVXKNNPGAYCPAEOUJLZGXPHQTJUSFDRQEUDRFSCQDCZHEFGNMYZMKBVSHNVNIOCGDECV");
    msg.range = 0.4253726954572482;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.6308314311693728);
    msg.setSource(494U);
    msg.setSourceEntity(135U);
    msg.setDestination(54634U);
    msg.setDestinationEntity(69U);
    msg.req_id = 45423U;
    msg.type = 37U;
    msg.status = 98U;
    msg.info.assign("TLBRKKNSGIELYKMSJHVWXVLFVWFHZUUALVCEGQTJUINIMXKJLKUZPGJNBLBQDYSRMWLPXYTBSWEZJEUFWOSGU");
    msg.range = 0.9394874589776996;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.5089527353900153);
    msg.setSource(59524U);
    msg.setSourceEntity(248U);
    msg.setDestination(13181U);
    msg.setDestinationEntity(109U);
    msg.system.assign("OTXJWGFAHYXXKUIAIZTOILFD");
    msg.op = 99U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.8250953885962207);
    msg.setSource(36886U);
    msg.setSourceEntity(14U);
    msg.setDestination(23363U);
    msg.setDestinationEntity(153U);
    msg.system.assign("GYWGADXONBILHTTIZHDMMHDUMHLDSJHJJKBCTTNKYQWFQNQDLWHRUAHXIKPXQVWCNQOF");
    msg.op = 137U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.9043594629365268);
    msg.setSource(14506U);
    msg.setSourceEntity(121U);
    msg.setDestination(6641U);
    msg.setDestinationEntity(222U);
    msg.system.assign("ATYCSJWXUDEYPZDCFBVSGMCNAWCNXQKYVBOZESDHINPEGMNHUJGFWTWTRJIXPLRWPQLCCKHMDVNIUKTFUDXHOCGBAOHKJSAQSGXZDMZOLRIBFYHZSFMARKWUPAVFLBVOBEOARLEGXNIHWHRGTXZSZBQYFFYWQVTJCKDIATJTKYMUGEALIVWKLWTPRROEOMHBEQAVKXJGBXBVPYOKEXNJCQNUICJIOLFYQMFDVYSILPSRHQLNMNDZJRMPTUS");
    msg.op = 167U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.5646818409624864);
    msg.setSource(51156U);
    msg.setSourceEntity(34U);
    msg.setDestination(38150U);
    msg.setDestinationEntity(28U);
    msg.value = -9758;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.3821913155135468);
    msg.setSource(55257U);
    msg.setSourceEntity(117U);
    msg.setDestination(61328U);
    msg.setDestinationEntity(110U);
    msg.value = -18240;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.4155620470012463);
    msg.setSource(35904U);
    msg.setSourceEntity(130U);
    msg.setDestination(59809U);
    msg.setDestinationEntity(134U);
    msg.value = -1653;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.4332993254448976);
    msg.setSource(45851U);
    msg.setSourceEntity(154U);
    msg.setDestination(1608U);
    msg.setDestinationEntity(86U);
    msg.value = 0.5718094066503496;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.7193477169167436);
    msg.setSource(50682U);
    msg.setSourceEntity(28U);
    msg.setDestination(47406U);
    msg.setDestinationEntity(140U);
    msg.value = 0.87183102645201;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.9541141871312598);
    msg.setSource(40482U);
    msg.setSourceEntity(215U);
    msg.setDestination(17230U);
    msg.setDestinationEntity(180U);
    msg.value = 0.6731443640573582;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.4087701572853484);
    msg.setSource(46448U);
    msg.setSourceEntity(236U);
    msg.setDestination(32023U);
    msg.setDestinationEntity(113U);
    msg.value = 0.009745256504113842;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.35823841892968356);
    msg.setSource(35819U);
    msg.setSourceEntity(153U);
    msg.setDestination(36658U);
    msg.setDestinationEntity(25U);
    msg.value = 0.37040547102075994;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.7945951558754303);
    msg.setSource(49253U);
    msg.setSourceEntity(151U);
    msg.setDestination(13554U);
    msg.setDestinationEntity(114U);
    msg.value = 0.4235100884709945;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.7408734669132594);
    msg.setSource(53001U);
    msg.setSourceEntity(123U);
    msg.setDestination(13158U);
    msg.setDestinationEntity(236U);
    msg.validity = 64769U;
    msg.type = 94U;
    msg.utc_year = 34436U;
    msg.utc_month = 185U;
    msg.utc_day = 118U;
    msg.utc_time = 0.4415847539927148;
    msg.lat = 0.819023119259879;
    msg.lon = 0.8207399228562897;
    msg.height = 0.4048202750695462;
    msg.satellites = 252U;
    msg.cog = 0.922329065152494;
    msg.sog = 0.3720325226243848;
    msg.hdop = 0.27903379776908277;
    msg.vdop = 0.21728856486654347;
    msg.hacc = 0.9084109839324503;
    msg.vacc = 0.03049849541426497;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.6237647323335951);
    msg.setSource(52765U);
    msg.setSourceEntity(106U);
    msg.setDestination(63505U);
    msg.setDestinationEntity(104U);
    msg.validity = 33922U;
    msg.type = 95U;
    msg.utc_year = 61887U;
    msg.utc_month = 111U;
    msg.utc_day = 200U;
    msg.utc_time = 0.7379363731463883;
    msg.lat = 0.44734599397600106;
    msg.lon = 0.24319990377787548;
    msg.height = 0.7529161001307246;
    msg.satellites = 188U;
    msg.cog = 0.6282410215872345;
    msg.sog = 0.7065846964196747;
    msg.hdop = 0.018652152879821804;
    msg.vdop = 0.5143687898213003;
    msg.hacc = 0.6176516251426458;
    msg.vacc = 0.23594732707394306;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.8295430950785859);
    msg.setSource(17720U);
    msg.setSourceEntity(41U);
    msg.setDestination(51048U);
    msg.setDestinationEntity(145U);
    msg.validity = 63082U;
    msg.type = 242U;
    msg.utc_year = 61318U;
    msg.utc_month = 73U;
    msg.utc_day = 145U;
    msg.utc_time = 0.9616937252139202;
    msg.lat = 0.03224774063100122;
    msg.lon = 0.9791915466390285;
    msg.height = 0.8958604160195092;
    msg.satellites = 19U;
    msg.cog = 0.2849662728715213;
    msg.sog = 0.9108165304704565;
    msg.hdop = 0.8783183177924072;
    msg.vdop = 0.03720734891905153;
    msg.hacc = 0.005052233884720758;
    msg.vacc = 0.73995778214149;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.5100783413630212);
    msg.setSource(1352U);
    msg.setSourceEntity(54U);
    msg.setDestination(37264U);
    msg.setDestinationEntity(73U);
    msg.time = 0.07398348489832707;
    msg.phi = 0.7421456677696263;
    msg.theta = 0.06794616228056483;
    msg.psi = 0.967976541913159;
    msg.psi_magnetic = 0.10156761931401903;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.812609929848444);
    msg.setSource(28368U);
    msg.setSourceEntity(33U);
    msg.setDestination(7848U);
    msg.setDestinationEntity(231U);
    msg.time = 0.02320030643686033;
    msg.phi = 0.851875432904939;
    msg.theta = 0.6731502145037173;
    msg.psi = 0.7214545706271548;
    msg.psi_magnetic = 0.6601309629132955;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.7214899633456165);
    msg.setSource(42259U);
    msg.setSourceEntity(180U);
    msg.setDestination(2135U);
    msg.setDestinationEntity(84U);
    msg.time = 0.38452589019767036;
    msg.phi = 0.8781977180021793;
    msg.theta = 0.5636618494564237;
    msg.psi = 0.06467772739089117;
    msg.psi_magnetic = 0.24244607028019616;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.08622108650334415);
    msg.setSource(25438U);
    msg.setSourceEntity(239U);
    msg.setDestination(39730U);
    msg.setDestinationEntity(137U);
    msg.time = 0.17315799955577382;
    msg.x = 0.37480827912555803;
    msg.y = 0.6777891385829099;
    msg.z = 0.9114521582311068;
    msg.timestep = 0.25169429780868025;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.9295463888492613);
    msg.setSource(30480U);
    msg.setSourceEntity(180U);
    msg.setDestination(24650U);
    msg.setDestinationEntity(57U);
    msg.time = 0.729336217670149;
    msg.x = 0.5185167466227684;
    msg.y = 0.5020039004939784;
    msg.z = 0.9417955201935726;
    msg.timestep = 0.9700190448256731;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.8054194655025506);
    msg.setSource(33125U);
    msg.setSourceEntity(54U);
    msg.setDestination(4863U);
    msg.setDestinationEntity(125U);
    msg.time = 0.9061961162055079;
    msg.x = 0.5473407642233165;
    msg.y = 0.6618336122659872;
    msg.z = 0.6051252476827169;
    msg.timestep = 0.6678136772465859;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.2911803756360344);
    msg.setSource(23816U);
    msg.setSourceEntity(30U);
    msg.setDestination(60622U);
    msg.setDestinationEntity(179U);
    msg.time = 0.9860490019478221;
    msg.x = 0.013270558226570084;
    msg.y = 0.00021206672179185926;
    msg.z = 0.963503282946679;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.341334889165704);
    msg.setSource(10110U);
    msg.setSourceEntity(37U);
    msg.setDestination(41140U);
    msg.setDestinationEntity(16U);
    msg.time = 0.5364499648880973;
    msg.x = 0.8837546098573581;
    msg.y = 0.33037950294544616;
    msg.z = 0.10537121955238804;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.8509502329924483);
    msg.setSource(44673U);
    msg.setSourceEntity(141U);
    msg.setDestination(20858U);
    msg.setDestinationEntity(148U);
    msg.time = 0.6922061943769292;
    msg.x = 0.5650827006724611;
    msg.y = 0.2544354963607365;
    msg.z = 0.5578232489836178;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.9543654428788764);
    msg.setSource(59547U);
    msg.setSourceEntity(179U);
    msg.setDestination(1929U);
    msg.setDestinationEntity(161U);
    msg.time = 0.548129340822689;
    msg.x = 0.5691565653503727;
    msg.y = 0.9506071420362008;
    msg.z = 0.3938531711668084;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.6139169459225186);
    msg.setSource(34701U);
    msg.setSourceEntity(5U);
    msg.setDestination(30108U);
    msg.setDestinationEntity(136U);
    msg.time = 0.46221174177180535;
    msg.x = 0.6277153909539372;
    msg.y = 0.4409128635089421;
    msg.z = 0.798627267565353;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.8268013986592233);
    msg.setSource(44525U);
    msg.setSourceEntity(212U);
    msg.setDestination(561U);
    msg.setDestinationEntity(14U);
    msg.time = 0.863887253934627;
    msg.x = 0.9478184713123581;
    msg.y = 0.9667635995017039;
    msg.z = 0.8134647943248441;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.5741443151573187);
    msg.setSource(14488U);
    msg.setSourceEntity(148U);
    msg.setDestination(58094U);
    msg.setDestinationEntity(193U);
    msg.time = 0.051427791334653694;
    msg.x = 0.2109852939938408;
    msg.y = 0.24373571667396632;
    msg.z = 0.6516491408114342;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.017558071515706097);
    msg.setSource(57245U);
    msg.setSourceEntity(30U);
    msg.setDestination(59652U);
    msg.setDestinationEntity(180U);
    msg.time = 0.05530281000271131;
    msg.x = 0.8111270218544654;
    msg.y = 0.4262572029282383;
    msg.z = 0.5481301337686374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.6140091991878807);
    msg.setSource(33945U);
    msg.setSourceEntity(52U);
    msg.setDestination(32673U);
    msg.setDestinationEntity(64U);
    msg.time = 0.3338097080115532;
    msg.x = 0.04158131293795886;
    msg.y = 0.8808975608539343;
    msg.z = 0.26176859534807684;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.7831018979339905);
    msg.setSource(26096U);
    msg.setSourceEntity(200U);
    msg.setDestination(43400U);
    msg.setDestinationEntity(216U);
    msg.validity = 33U;
    msg.x = 0.44292131770422494;
    msg.y = 0.5599100593061079;
    msg.z = 0.33894598148563027;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.454972933778946);
    msg.setSource(53078U);
    msg.setSourceEntity(154U);
    msg.setDestination(51664U);
    msg.setDestinationEntity(207U);
    msg.validity = 56U;
    msg.x = 0.2813406897248124;
    msg.y = 0.06248314391628629;
    msg.z = 0.5939801692985209;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.36207420244235655);
    msg.setSource(11253U);
    msg.setSourceEntity(242U);
    msg.setDestination(9759U);
    msg.setDestinationEntity(227U);
    msg.validity = 141U;
    msg.x = 0.2567164969887191;
    msg.y = 0.7629695503529744;
    msg.z = 0.3616592099425697;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.9991330413942558);
    msg.setSource(54068U);
    msg.setSourceEntity(171U);
    msg.setDestination(41245U);
    msg.setDestinationEntity(205U);
    msg.validity = 39U;
    msg.x = 0.33458196651649863;
    msg.y = 0.4807099627591036;
    msg.z = 0.9602396810883125;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.7512238256047632);
    msg.setSource(49116U);
    msg.setSourceEntity(208U);
    msg.setDestination(46901U);
    msg.setDestinationEntity(86U);
    msg.validity = 226U;
    msg.x = 0.17757422160660363;
    msg.y = 0.43072400299950764;
    msg.z = 0.5595486565638742;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.2604471713645029);
    msg.setSource(27587U);
    msg.setSourceEntity(16U);
    msg.setDestination(62032U);
    msg.setDestinationEntity(88U);
    msg.validity = 197U;
    msg.x = 0.9313969661570436;
    msg.y = 0.8631689001045446;
    msg.z = 0.7928252020523265;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.7095534210933211);
    msg.setSource(53991U);
    msg.setSourceEntity(165U);
    msg.setDestination(59873U);
    msg.setDestinationEntity(19U);
    msg.time = 0.7078203070422154;
    msg.x = 0.11382658679097346;
    msg.y = 0.350906421316601;
    msg.z = 0.35629329487292505;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.9956367857359024);
    msg.setSource(16932U);
    msg.setSourceEntity(231U);
    msg.setDestination(1482U);
    msg.setDestinationEntity(201U);
    msg.time = 0.408768170163889;
    msg.x = 0.5418468918705559;
    msg.y = 0.5090623175840524;
    msg.z = 0.1680814099653951;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.5467979888528894);
    msg.setSource(23477U);
    msg.setSourceEntity(88U);
    msg.setDestination(79U);
    msg.setDestinationEntity(184U);
    msg.time = 0.24656697340023026;
    msg.x = 0.5709940081078674;
    msg.y = 0.5688784203527251;
    msg.z = 0.9050984157462248;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.7838462235274763);
    msg.setSource(10199U);
    msg.setSourceEntity(41U);
    msg.setDestination(64234U);
    msg.setDestinationEntity(108U);
    msg.validity = 3U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.20534947907197687;
    tmp_msg_0.y = 0.17115979501767875;
    tmp_msg_0.z = 0.5806328597339458;
    tmp_msg_0.phi = 0.18501586600758668;
    tmp_msg_0.theta = 0.20354468885873966;
    tmp_msg_0.psi = 0.2518968662898209;
    msg.location.push_back(tmp_msg_0);
    msg.value = 0.7873605935423947;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.48921012037385514);
    msg.setSource(25436U);
    msg.setSourceEntity(145U);
    msg.setDestination(16522U);
    msg.setDestinationEntity(182U);
    msg.validity = 47U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.9498962755216022;
    tmp_msg_0.y = 0.3749103810876957;
    tmp_msg_0.z = 0.17301092970515364;
    tmp_msg_0.phi = 0.030624479066628463;
    tmp_msg_0.theta = 0.4557436889443024;
    tmp_msg_0.psi = 0.39548060179581745;
    msg.location.push_back(tmp_msg_0);
    msg.value = 0.544966431650817;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.18116246586086493);
    msg.setSource(9345U);
    msg.setSourceEntity(252U);
    msg.setDestination(11219U);
    msg.setDestinationEntity(230U);
    msg.validity = 73U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.6826698969851256;
    tmp_msg_0.y = 0.8000392857881784;
    tmp_msg_0.z = 0.8141165226786218;
    tmp_msg_0.phi = 0.8518222528384508;
    tmp_msg_0.theta = 0.17351666552074008;
    tmp_msg_0.psi = 0.5606801397516689;
    msg.location.push_back(tmp_msg_0);
    IMC::BeamConfig tmp_msg_1;
    tmp_msg_1.beam_width = 0.8534176138993715;
    tmp_msg_1.beam_height = 0.08566830335076847;
    msg.beam_config.push_back(tmp_msg_1);
    msg.value = 0.5729204953337266;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.749686165709704);
    msg.setSource(17499U);
    msg.setSourceEntity(83U);
    msg.setDestination(904U);
    msg.setDestinationEntity(249U);
    msg.time = 0.9753827335377088;
    msg.value = 0.6003737066285132;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.1973462932568164);
    msg.setSource(1557U);
    msg.setSourceEntity(202U);
    msg.setDestination(65267U);
    msg.setDestinationEntity(212U);
    msg.time = 0.5771850573360018;
    msg.value = 0.8572845817976792;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.3593424651272614);
    msg.setSource(10220U);
    msg.setSourceEntity(113U);
    msg.setDestination(62056U);
    msg.setDestinationEntity(36U);
    msg.time = 0.8483362365420523;
    msg.value = 0.9369436578375389;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.7020611125585187);
    msg.setSource(24491U);
    msg.setSourceEntity(150U);
    msg.setDestination(62898U);
    msg.setDestinationEntity(28U);
    msg.value = 0.9008681339729538;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.18502325489886595);
    msg.setSource(15141U);
    msg.setSourceEntity(183U);
    msg.setDestination(65449U);
    msg.setDestinationEntity(158U);
    msg.value = 0.02469437042939082;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.8349127235103511);
    msg.setSource(9822U);
    msg.setSourceEntity(170U);
    msg.setDestination(62493U);
    msg.setDestinationEntity(176U);
    msg.value = 0.165622486220947;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.02226130688419048);
    msg.setSource(43987U);
    msg.setSourceEntity(172U);
    msg.setDestination(30593U);
    msg.setDestinationEntity(35U);
    msg.value = 0.16672348452999097;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.8064448837815137);
    msg.setSource(21185U);
    msg.setSourceEntity(174U);
    msg.setDestination(1717U);
    msg.setDestinationEntity(0U);
    msg.value = 0.2631699337975638;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.5075437738701795);
    msg.setSource(48101U);
    msg.setSourceEntity(40U);
    msg.setDestination(22346U);
    msg.setDestinationEntity(32U);
    msg.value = 0.5463235942711036;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.03787620566566863);
    msg.setSource(27722U);
    msg.setSourceEntity(175U);
    msg.setDestination(8957U);
    msg.setDestinationEntity(12U);
    msg.value = 0.24783266678884852;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.4483293027294356);
    msg.setSource(46700U);
    msg.setSourceEntity(44U);
    msg.setDestination(62050U);
    msg.setDestinationEntity(40U);
    msg.value = 0.7389673340695458;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.07501793986869087);
    msg.setSource(48553U);
    msg.setSourceEntity(190U);
    msg.setDestination(30738U);
    msg.setDestinationEntity(169U);
    msg.value = 0.5380917612516896;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.11805439043084631);
    msg.setSource(42098U);
    msg.setSourceEntity(6U);
    msg.setDestination(35357U);
    msg.setDestinationEntity(127U);
    msg.value = 0.02985635791935548;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.9972076568184997);
    msg.setSource(48355U);
    msg.setSourceEntity(128U);
    msg.setDestination(8763U);
    msg.setDestinationEntity(233U);
    msg.value = 0.9009204021886775;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.787660346400472);
    msg.setSource(15405U);
    msg.setSourceEntity(223U);
    msg.setDestination(31176U);
    msg.setDestinationEntity(17U);
    msg.value = 0.5853949384541812;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.46845272667536775);
    msg.setSource(48625U);
    msg.setSourceEntity(192U);
    msg.setDestination(29631U);
    msg.setDestinationEntity(116U);
    msg.value = 0.9939743347191422;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.5775407483702812);
    msg.setSource(55239U);
    msg.setSourceEntity(141U);
    msg.setDestination(47304U);
    msg.setDestinationEntity(229U);
    msg.value = 0.395913644611799;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.28098286595623);
    msg.setSource(58722U);
    msg.setSourceEntity(177U);
    msg.setDestination(54719U);
    msg.setDestinationEntity(216U);
    msg.value = 0.865833683227611;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.6735439022757352);
    msg.setSource(56788U);
    msg.setSourceEntity(32U);
    msg.setDestination(29163U);
    msg.setDestinationEntity(92U);
    msg.value = 0.40102994631541844;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.5559101910867251);
    msg.setSource(59490U);
    msg.setSourceEntity(176U);
    msg.setDestination(26114U);
    msg.setDestinationEntity(126U);
    msg.value = 0.00567263662990658;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.8342139553762932);
    msg.setSource(52313U);
    msg.setSourceEntity(60U);
    msg.setDestination(48624U);
    msg.setDestinationEntity(231U);
    msg.value = 0.3796027426617894;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.7629714659262711);
    msg.setSource(9522U);
    msg.setSourceEntity(193U);
    msg.setDestination(25595U);
    msg.setDestinationEntity(77U);
    msg.value = 0.1258163669961223;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.9612187801963624);
    msg.setSource(5613U);
    msg.setSourceEntity(175U);
    msg.setDestination(62600U);
    msg.setDestinationEntity(249U);
    msg.value = 0.9035856163491763;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.9877707141258354);
    msg.setSource(28062U);
    msg.setSourceEntity(210U);
    msg.setDestination(35492U);
    msg.setDestinationEntity(218U);
    msg.value = 0.9279310702890886;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.22089837293008874);
    msg.setSource(4508U);
    msg.setSourceEntity(183U);
    msg.setDestination(52335U);
    msg.setDestinationEntity(36U);
    msg.direction = 0.1198179834149361;
    msg.speed = 0.9656159042273419;
    msg.turbulence = 0.12624574410018718;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.7574751256846812);
    msg.setSource(46516U);
    msg.setSourceEntity(111U);
    msg.setDestination(64882U);
    msg.setDestinationEntity(227U);
    msg.direction = 0.3003904487068486;
    msg.speed = 0.9822216735248988;
    msg.turbulence = 0.8922928095082545;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.46781214280050243);
    msg.setSource(32173U);
    msg.setSourceEntity(77U);
    msg.setDestination(56641U);
    msg.setDestinationEntity(205U);
    msg.direction = 0.35309549200473467;
    msg.speed = 0.9962379075680767;
    msg.turbulence = 0.5375212737785887;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.6596582116283004);
    msg.setSource(52492U);
    msg.setSourceEntity(195U);
    msg.setDestination(53702U);
    msg.setDestinationEntity(68U);
    msg.value = 0.04415857075090601;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.932438307046382);
    msg.setSource(51712U);
    msg.setSourceEntity(123U);
    msg.setDestination(3169U);
    msg.setDestinationEntity(94U);
    msg.value = 0.3384098794341929;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.11819146760972321);
    msg.setSource(21375U);
    msg.setSourceEntity(201U);
    msg.setDestination(43994U);
    msg.setDestinationEntity(95U);
    msg.value = 0.35234134670114514;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.05608728821982911);
    msg.setSource(18647U);
    msg.setSourceEntity(68U);
    msg.setDestination(19425U);
    msg.setDestinationEntity(233U);
    msg.value.assign("KOYTDBPJRCOIHIHEJVUUPCJLMWPVCHDKCPYRLXVSLIZLFDZRYLPSDHPBRG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.7263678381290376);
    msg.setSource(50934U);
    msg.setSourceEntity(122U);
    msg.setDestination(46108U);
    msg.setDestinationEntity(200U);
    msg.value.assign("MJABAEBBRSRAOAXQJRXYPPWYEOMITDFNPUNLQOPMDALMWBJNKWQUTRSXHDIWHQYZAOGVMNKYPXKWOSNPLGFLUFLLBYVCSKTMRTWREMWIDIDZY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.019174107346740743);
    msg.setSource(7877U);
    msg.setSourceEntity(186U);
    msg.setDestination(41468U);
    msg.setDestinationEntity(70U);
    msg.value.assign("BQADOOFCFPYBVWUTWJWPPJKVBLJAEDDHUXYKALNAMSXLMETAYTSTULNMHQRXVUXPLQZYSSUBXPRWUXMCQZOFRMHLNQYXYJNRZUKCLZDNCHSDAILVGYPEEEWOXTHVOPBMQRBVGKVWFVIIOCHXGYGFZHBXPNKVGUNJSGHQYRUVWGARTBKI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.7722076908795573);
    msg.setSource(45736U);
    msg.setSourceEntity(39U);
    msg.setDestination(14790U);
    msg.setDestinationEntity(113U);
    const signed char tmp_msg_0[] = {-30, -93, -68, 110, 65, 122, 21, -106, 21, 117, 64, 15, -43, -28, -84, 84, 45, 70, -66, -126, -77, -112, 57, 44, 9, 70, 54, 73, 43, 56, 22, 91, -93, 88, -66, -75, -51, -55, 103, -38, -67, 49, 70, -86, 125, 18, -45, -47, -87, -20, -100, -41, -83, 41, 59, -64, 19, -29, -126, 56, -67, 41, 101, 6, -112, -105, -103, -95, -79, -36, 60, -115, 14, -85, -44, 27, -121, -15, -15, -65, -17, 66, -27, -67, 11, 33, -2, -94, -40, 26, -80, -36, -109, -11, -23, 37, -4, -94, -19, -81, 104, -108, 12, -60, 125, -15, 112, -100, 29, 104, 69, 111, 112, 63, -43, 81, -114, -38, 24, -6, 90, -105, 101, -112, -34, -46, 74, -22, 18, 64, -128, 28, -80, -36, -18, 52, -14, 65, -72, -4, -120, -43, -121, -119, -90, -104, -120, 91, -112, -92, 85, 65, 55, -38, 65, 26, 79, -46, 75, -48, -10, 44, 46, 68, 48, -32, 69, 75, 61, 26, 97, -28, -60, 7, -38, 100, -84, -38, 116, 52, -54, 101, -128, -33, -15, -28, 88, -75, 50, 57, 118, -79, -36, 18, -103, -124, 19, 12, 43, -92, 26, 107, 71, -71, -90, 39, -117, -118, 75, 31, -114, 34, 58, -110, -34, -32, 101, -30, 26, 86, -110, -72, 63, 47, 34, -81, 84, -92, 126, -28, 65, 47};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.2640048152544897);
    msg.setSource(46012U);
    msg.setSourceEntity(96U);
    msg.setDestination(56200U);
    msg.setDestinationEntity(223U);
    const signed char tmp_msg_0[] = {-125, -124, -67, 89, -112, 15, -83, -91, -64, -61, 22, -84, -63, -52, 58, -77, 84, 66, -73, -89, 44, -76, 124, 98, 41, -18, -7, 64, 66, -79, 70, -56, -76, 30, 123, -37, 82, 85, -99, -125, 80, -24, -67, 125, -59, 91, 50, 119, 77, -3, -113, -91, -3, 12, 19, -15, -96, 7, -43, -106, 92, 108, 64, -38, -40, 44, 94, 53, -99, -59, 81, -68, 117, -99, -84, -40, -77, -86, 3, 33, -22, -49, -26, -29, -25, 92, -80, 42, -66, 47, -80, -10, 110, -52, 92, 21, 24, 13, 64, -50, 105, -14, 117, -128, -45, -49, 74, -124, 94, 123, -70, 26, 68, 31, 20, -111, -74, -120, -73, -21, -44, -76, 24, 36, 79, -101, -65, 43, 19, 53, -42, -113, -83, -47, -97, -111, 58, -31, -55, 118, 107, -3, 46, -83, 74, -91, -53, 87};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.3883500423485492);
    msg.setSource(29726U);
    msg.setSourceEntity(23U);
    msg.setDestination(46370U);
    msg.setDestinationEntity(247U);
    const signed char tmp_msg_0[] = {-26, 8, 69, 7, -78, -26, 123, 96, -21, 0, -127, -37, 80, 78, 126, -6, 46, 41, -34, 18, -114, -51, -95, 107, -19, -49, 108, -104, 66, -65, -72, 31, 42, -44, 95, 126, 126, -65, 53, 86, 5, -99, -15, -105, 114, 19, 53, 38, 23, -31, -70, -31, -95, -25, -126, 42, 85, -100, 38, -124, -46, 37, 6, 79, 40, -88, -118, 38, -44, 74, -37, 109, 75, -108, 26, 93, -115, -83, -95, 75, -98, 103, -32, 33, 120, 42, 0, 67, 106, 21, 96, 114, -25, 66, 4, -77, 74, 8, 69, 48, -6, -92, 90, 76, -63, 105, 112, 47, -9, 74, -9, 23, 32, -107, -99, -105, 121, 60, 30, 8, -15, 112, -43, -65, 96, 57, -38, 21, -118, -75, -56, 98, 103, 72, -1, -13, -48, 14, -40, 3, -16, -14, 14, 64, -106, 71, -67, -52, 58, -75, -87, -62};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.28736032071609974);
    msg.setSource(53112U);
    msg.setSourceEntity(172U);
    msg.setDestination(58968U);
    msg.setDestinationEntity(25U);
    msg.value = 0.4133175442403223;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.10721101204484007);
    msg.setSource(18223U);
    msg.setSourceEntity(18U);
    msg.setDestination(5583U);
    msg.setDestinationEntity(30U);
    msg.value = 0.9498058052154684;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.89894165536983);
    msg.setSource(12071U);
    msg.setSourceEntity(244U);
    msg.setDestination(1380U);
    msg.setDestinationEntity(201U);
    msg.value = 0.5687666494769127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.8721481086917607);
    msg.setSource(29621U);
    msg.setSourceEntity(196U);
    msg.setDestination(23932U);
    msg.setDestinationEntity(156U);
    msg.type = 112U;
    msg.frequency = 2025939613U;
    msg.min_range = 44952U;
    msg.max_range = 18802U;
    msg.bits_per_point = 77U;
    msg.scale_factor = 0.5656420735807163;
    const signed char tmp_msg_0[] = {106, -95, 57, -114, 26, -101, 50, 77, 4, -67, 63, 90, -85, 32, -60, -2, 89, -6, 22, 39, -77, -86, 14, -18, -50, 6, -30, 79, -69, 38, 114, -88, -97, -12, 58, 126, 38, 44, -94, -93, -70, -38, 29, -74, 104, 32, -20, 62, -100, 42, -64};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.9722648634595145);
    msg.setSource(39049U);
    msg.setSourceEntity(174U);
    msg.setDestination(62816U);
    msg.setDestinationEntity(106U);
    msg.type = 12U;
    msg.frequency = 2465869084U;
    msg.min_range = 1819U;
    msg.max_range = 31994U;
    msg.bits_per_point = 238U;
    msg.scale_factor = 0.8988699386904322;
    const signed char tmp_msg_0[] = {35, -29, 96, 8, -97, 87, -103, 89, -25, -32, 37, -70, -53, 73, -52, 93, -95, 102, 62, 111, 39, -127, 113, 122, 91, 47, -86, -31, -34, -36, 96, -56, -119, 92, 125, -83, -96, -22, 97, -10, -55, 109, -102, -12, 80, -107, -103, -102, 123, -92, -60, 68, -2, -18, 117, -65, 100, -85, -93, 68, -9, -96, -60, 21, -27, -100, 121, -85, 101, -101, -84, -70, -124, -27, -6, 40, 94, 66, -113, 51, -42, 16, 24, -47, -10, 86, -66, -75, 104, 55, 6, 104, 77, -53, -36, 5, -27, -80, 27, 110, -118, -40, -6, -100, 93, 118, 19, 23, 44, -72, 123, 93, -119, 51, 112, -99, -72, -106, -66, 117, -10};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.8807198754243039);
    msg.setSource(16056U);
    msg.setSourceEntity(207U);
    msg.setDestination(23769U);
    msg.setDestinationEntity(253U);
    msg.type = 124U;
    msg.frequency = 3444887514U;
    msg.min_range = 39U;
    msg.max_range = 12982U;
    msg.bits_per_point = 0U;
    msg.scale_factor = 0.6382515782515682;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.16746482022720577;
    tmp_msg_0.beam_height = 0.0617534203922292;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {120, 50, 62, 93, -70, 11, -2, -93, 103, -113, 39, 28, 62, 59, -82, -63, -46, -118, 29, 25, 34, -72, -101, -40, -64, -90, 8, 37, -17, -66, 62, -33, -55, -105, -8, 18, -64, -44, -46, 89, 64, 33, 21, -51, 74, -89, 118, -23, 104, -11, 104, -33, -28, -121, 61, 57, -32, 68, -94, 18, 97, -90, 50, 126, 27, 25, -58, 5, 55, 93, 56, 84, 117};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.39450185133297944);
    msg.setSource(21761U);
    msg.setSourceEntity(68U);
    msg.setDestination(34675U);
    msg.setDestinationEntity(242U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.36569981250365324);
    msg.setSource(9453U);
    msg.setSourceEntity(245U);
    msg.setDestination(34624U);
    msg.setDestinationEntity(61U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.6914069951283898);
    msg.setSource(8329U);
    msg.setSourceEntity(163U);
    msg.setDestination(889U);
    msg.setDestinationEntity(229U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.3296423894449374);
    msg.setSource(62913U);
    msg.setSourceEntity(90U);
    msg.setDestination(24854U);
    msg.setDestinationEntity(142U);
    msg.op = 248U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.07818774480374857);
    msg.setSource(49894U);
    msg.setSourceEntity(215U);
    msg.setDestination(40224U);
    msg.setDestinationEntity(34U);
    msg.op = 140U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.3846741591126466);
    msg.setSource(19201U);
    msg.setSourceEntity(10U);
    msg.setDestination(14690U);
    msg.setDestinationEntity(202U);
    msg.op = 227U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.319357177377691);
    msg.setSource(43831U);
    msg.setSourceEntity(148U);
    msg.setDestination(14136U);
    msg.setDestinationEntity(222U);
    msg.value = 0.7683381393219805;
    msg.confidence = 0.415014867416838;
    msg.opmodes.assign("EUNMVQHKDTZXGVWTAGJGKASSLTMXCFAKOFDJJEEMFLUSYFEFLEVUPYFWQXLBUPCISBMWIXIPGULCBHYOYABZIYBDRJGPSGNZKTOGAHQWPJQPWKLRHHZPTBDLLTZOYSSHDJZQOLNIEDIKVNTQJXAMKTFLPICDHRMGBDXAMJITCJUMZQPRGNVORZTXUDKQNAFSVRZRZNRNAHEWGQAI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.546825956063628);
    msg.setSource(41171U);
    msg.setSourceEntity(199U);
    msg.setDestination(53911U);
    msg.setDestinationEntity(170U);
    msg.value = 0.952122269188147;
    msg.confidence = 0.31331978120401804;
    msg.opmodes.assign("LCFRACGIMGCIIZTWFPIKLOVZDENOCNKLUPTKXMXHPAPTQM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.6136284944250823);
    msg.setSource(38199U);
    msg.setSourceEntity(243U);
    msg.setDestination(23480U);
    msg.setDestinationEntity(197U);
    msg.value = 0.8937194219281973;
    msg.confidence = 0.6779492542276598;
    msg.opmodes.assign("SGTTUYOGVROSNCHMXADOQPWMPZIDULUJEGYUYZQZYLEJDRDZNWSNHCYNXENVQSDDNDTHYAKMECNCJBWKFCFRNSWOKMQGAAZMKIPPQAXHLMKUWJERHVGHBTPZXWJLYLBPVROILNASICGLDCMAIPAGFFYXJBOUHFEUIWNZVDS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.7510997912788354);
    msg.setSource(44522U);
    msg.setSourceEntity(77U);
    msg.setDestination(42777U);
    msg.setDestinationEntity(190U);
    msg.itow = 1812456255U;
    msg.lat = 0.5123625136217241;
    msg.lon = 0.0810873895631754;
    msg.height_ell = 0.034904965148125466;
    msg.height_sea = 0.6427735056242204;
    msg.hacc = 0.8667850797979902;
    msg.vacc = 0.007226525910468684;
    msg.vel_n = 0.17600914314228278;
    msg.vel_e = 0.35149009616933713;
    msg.vel_d = 0.5507768685733836;
    msg.speed = 0.3067507148204409;
    msg.gspeed = 0.9057007697552567;
    msg.heading = 0.4399274732559344;
    msg.sacc = 0.34281866315951404;
    msg.cacc = 0.7734371036177359;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.06121190448034808);
    msg.setSource(14989U);
    msg.setSourceEntity(102U);
    msg.setDestination(33333U);
    msg.setDestinationEntity(86U);
    msg.itow = 2310791777U;
    msg.lat = 0.9277309759296861;
    msg.lon = 0.29121403147705527;
    msg.height_ell = 0.9583605985457385;
    msg.height_sea = 0.8231660460702018;
    msg.hacc = 0.5017689212435293;
    msg.vacc = 0.27029758080125266;
    msg.vel_n = 0.05414225287932428;
    msg.vel_e = 0.6744877228231932;
    msg.vel_d = 0.32297398297631164;
    msg.speed = 0.14226553913157391;
    msg.gspeed = 0.24428314880034863;
    msg.heading = 0.9676829707382059;
    msg.sacc = 0.217144924509436;
    msg.cacc = 0.43205402618352107;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.0025920426046470713);
    msg.setSource(4077U);
    msg.setSourceEntity(187U);
    msg.setDestination(51553U);
    msg.setDestinationEntity(61U);
    msg.itow = 3496747032U;
    msg.lat = 0.07042648117073624;
    msg.lon = 0.8729343431505756;
    msg.height_ell = 0.5268976314600242;
    msg.height_sea = 0.7297713870105634;
    msg.hacc = 0.3791463155321799;
    msg.vacc = 0.36082136791501396;
    msg.vel_n = 0.8566143337212151;
    msg.vel_e = 0.3020955501771887;
    msg.vel_d = 0.5317491612738562;
    msg.speed = 0.25289901587347186;
    msg.gspeed = 0.3544398023237738;
    msg.heading = 0.10721887741705483;
    msg.sacc = 0.8490820928846065;
    msg.cacc = 0.8150784469097857;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.6670166667705747);
    msg.setSource(25085U);
    msg.setSourceEntity(55U);
    msg.setDestination(12276U);
    msg.setDestinationEntity(173U);
    msg.id = 29U;
    msg.value = 0.040990939526212244;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.8555301197765853);
    msg.setSource(61857U);
    msg.setSourceEntity(113U);
    msg.setDestination(44930U);
    msg.setDestinationEntity(160U);
    msg.id = 97U;
    msg.value = 0.5950566778004942;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.5766506789445124);
    msg.setSource(58662U);
    msg.setSourceEntity(195U);
    msg.setDestination(50759U);
    msg.setDestinationEntity(103U);
    msg.id = 76U;
    msg.value = 0.3001565783982967;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.35262707890091105);
    msg.setSource(55507U);
    msg.setSourceEntity(124U);
    msg.setDestination(31200U);
    msg.setDestinationEntity(20U);
    msg.x = 0.6761635803145538;
    msg.y = 0.2712023180803784;
    msg.z = 0.06541367472827431;
    msg.phi = 0.703969972565405;
    msg.theta = 0.3469231647280122;
    msg.psi = 0.9392399871943041;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.790253110684237);
    msg.setSource(13499U);
    msg.setSourceEntity(45U);
    msg.setDestination(19259U);
    msg.setDestinationEntity(11U);
    msg.x = 0.5385619923132163;
    msg.y = 0.8072773063764971;
    msg.z = 0.9979003377437877;
    msg.phi = 0.14205343252341607;
    msg.theta = 0.8443355601782783;
    msg.psi = 0.6299599195772907;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.3775569896272031);
    msg.setSource(21187U);
    msg.setSourceEntity(117U);
    msg.setDestination(52150U);
    msg.setDestinationEntity(177U);
    msg.x = 0.21411056783697135;
    msg.y = 0.8712435547411762;
    msg.z = 0.5342306067668832;
    msg.phi = 0.6464832383153261;
    msg.theta = 0.9101681676912605;
    msg.psi = 0.5395325879759414;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.9357820787932745);
    msg.setSource(15291U);
    msg.setSourceEntity(197U);
    msg.setDestination(50974U);
    msg.setDestinationEntity(156U);
    msg.beam_width = 0.9683075021194867;
    msg.beam_height = 0.09637695565065452;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.8683465527061643);
    msg.setSource(61922U);
    msg.setSourceEntity(14U);
    msg.setDestination(16333U);
    msg.setDestinationEntity(180U);
    msg.beam_width = 0.8278520064326896;
    msg.beam_height = 0.3840620578621716;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.6638746020728414);
    msg.setSource(31274U);
    msg.setSourceEntity(237U);
    msg.setDestination(25752U);
    msg.setDestinationEntity(85U);
    msg.beam_width = 0.6372535046944146;
    msg.beam_height = 0.6000963324619731;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.8068368811707125);
    msg.setSource(34864U);
    msg.setSourceEntity(249U);
    msg.setDestination(18037U);
    msg.setDestinationEntity(99U);
    msg.sane = 226U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.14753396311973488);
    msg.setSource(40888U);
    msg.setSourceEntity(16U);
    msg.setDestination(2044U);
    msg.setDestinationEntity(244U);
    msg.sane = 22U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.21197048358973802);
    msg.setSource(19500U);
    msg.setSourceEntity(0U);
    msg.setDestination(44237U);
    msg.setDestinationEntity(35U);
    msg.sane = 136U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.15046656600807118);
    msg.setSource(41650U);
    msg.setSourceEntity(231U);
    msg.setDestination(14472U);
    msg.setDestinationEntity(63U);
    msg.value = 0.8486267885988668;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.7691746621170426);
    msg.setSource(4378U);
    msg.setSourceEntity(96U);
    msg.setDestination(56749U);
    msg.setDestinationEntity(201U);
    msg.value = 0.8610787480768068;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.20181720710474504);
    msg.setSource(14856U);
    msg.setSourceEntity(220U);
    msg.setDestination(45754U);
    msg.setDestinationEntity(156U);
    msg.value = 0.08507216221228875;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.0023846664243764026);
    msg.setSource(61996U);
    msg.setSourceEntity(117U);
    msg.setDestination(54698U);
    msg.setDestinationEntity(213U);
    msg.value = 0.5095490433016345;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.7387502842292641);
    msg.setSource(41867U);
    msg.setSourceEntity(198U);
    msg.setDestination(65487U);
    msg.setDestinationEntity(67U);
    msg.value = 0.8509703752543306;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.7130650494429484);
    msg.setSource(28261U);
    msg.setSourceEntity(230U);
    msg.setDestination(47657U);
    msg.setDestinationEntity(152U);
    msg.value = 0.481111563200034;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.3668237258506838);
    msg.setSource(54166U);
    msg.setSourceEntity(9U);
    msg.setDestination(47460U);
    msg.setDestinationEntity(24U);
    msg.value = 0.49950635481866756;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.3705763133258505);
    msg.setSource(31536U);
    msg.setSourceEntity(110U);
    msg.setDestination(55410U);
    msg.setDestinationEntity(24U);
    msg.value = 0.2910335150257908;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.27464959938051603);
    msg.setSource(4473U);
    msg.setSourceEntity(223U);
    msg.setDestination(5287U);
    msg.setDestinationEntity(148U);
    msg.value = 0.6185238305959663;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.4323109833644977);
    msg.setSource(32345U);
    msg.setSourceEntity(218U);
    msg.setDestination(35893U);
    msg.setDestinationEntity(133U);
    msg.value = 0.18556404753133426;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.4923398836950952);
    msg.setSource(26344U);
    msg.setSourceEntity(162U);
    msg.setDestination(18519U);
    msg.setDestinationEntity(87U);
    msg.value = 0.5719938909151046;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.04381082296626171);
    msg.setSource(47911U);
    msg.setSourceEntity(12U);
    msg.setDestination(11291U);
    msg.setDestinationEntity(224U);
    msg.value = 0.33198108779338353;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.23242124925072105);
    msg.setSource(32633U);
    msg.setSourceEntity(86U);
    msg.setDestination(24599U);
    msg.setDestinationEntity(58U);
    msg.value = 0.14369678099048688;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.33041012906050704);
    msg.setSource(51682U);
    msg.setSourceEntity(100U);
    msg.setDestination(54489U);
    msg.setDestinationEntity(83U);
    msg.value = 0.6860805845008398;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.3465494673113101);
    msg.setSource(10312U);
    msg.setSourceEntity(14U);
    msg.setDestination(35301U);
    msg.setDestinationEntity(166U);
    msg.value = 0.693126719733386;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.09878221591708014);
    msg.setSource(5000U);
    msg.setSourceEntity(174U);
    msg.setDestination(31350U);
    msg.setDestinationEntity(50U);
    msg.value = 0.7417205922089986;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.8145231035310115);
    msg.setSource(18199U);
    msg.setSourceEntity(61U);
    msg.setDestination(33170U);
    msg.setDestinationEntity(136U);
    msg.value = 0.4311048786421273;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.9427647810846838);
    msg.setSource(51546U);
    msg.setSourceEntity(209U);
    msg.setDestination(42223U);
    msg.setDestinationEntity(237U);
    msg.value = 0.00776001206193333;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.3098324251568979);
    msg.setSource(59179U);
    msg.setSourceEntity(244U);
    msg.setDestination(61047U);
    msg.setDestinationEntity(42U);
    msg.value = 0.9539455619572205;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.6548264264935305);
    msg.setSource(64851U);
    msg.setSourceEntity(14U);
    msg.setDestination(36324U);
    msg.setDestinationEntity(183U);
    msg.value = 0.7332874998046259;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.7718327214016582);
    msg.setSource(36019U);
    msg.setSourceEntity(26U);
    msg.setDestination(24861U);
    msg.setDestinationEntity(141U);
    msg.value = 0.710465275251913;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.31218102026328265);
    msg.setSource(51755U);
    msg.setSourceEntity(103U);
    msg.setDestination(16604U);
    msg.setDestinationEntity(144U);
    msg.value = 0.6603129201205745;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.8826002444460618);
    msg.setSource(31008U);
    msg.setSourceEntity(73U);
    msg.setDestination(63688U);
    msg.setDestinationEntity(115U);
    msg.value = 0.04500626310374789;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.959249377079873);
    msg.setSource(11494U);
    msg.setSourceEntity(26U);
    msg.setDestination(54873U);
    msg.setDestinationEntity(19U);
    msg.value = 0.5666035907100551;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.4585996274406723);
    msg.setSource(60463U);
    msg.setSourceEntity(119U);
    msg.setDestination(64374U);
    msg.setDestinationEntity(198U);
    msg.validity = 4112U;
    msg.type = 253U;
    msg.tow = 3226653403U;
    msg.base_lat = 0.35675436684521245;
    msg.base_lon = 0.716976603854863;
    msg.base_height = 0.09258261927414257;
    msg.n = 0.19213373812990753;
    msg.e = 0.013015590389777176;
    msg.d = 0.7197018345809617;
    msg.v_n = 0.18962839155616495;
    msg.v_e = 0.4071466203078016;
    msg.v_d = 0.7011231156593091;
    msg.satellites = 232U;
    msg.iar_hyp = 25218U;
    msg.iar_ratio = 0.902769116773786;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.015605556425704825);
    msg.setSource(23144U);
    msg.setSourceEntity(45U);
    msg.setDestination(62926U);
    msg.setDestinationEntity(212U);
    msg.validity = 27647U;
    msg.type = 108U;
    msg.tow = 4091006780U;
    msg.base_lat = 0.2641344946530052;
    msg.base_lon = 0.48257833628141333;
    msg.base_height = 0.3006695093112185;
    msg.n = 0.965290973740233;
    msg.e = 0.910564465520718;
    msg.d = 0.6752130933344427;
    msg.v_n = 0.297637852603323;
    msg.v_e = 0.6959445602927181;
    msg.v_d = 0.746208146635005;
    msg.satellites = 222U;
    msg.iar_hyp = 37570U;
    msg.iar_ratio = 0.38566141743159965;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.12570674885537325);
    msg.setSource(59314U);
    msg.setSourceEntity(120U);
    msg.setDestination(13370U);
    msg.setDestinationEntity(98U);
    msg.validity = 11648U;
    msg.type = 246U;
    msg.tow = 327902538U;
    msg.base_lat = 0.5646573397333148;
    msg.base_lon = 0.6277156352983762;
    msg.base_height = 0.9701475898732583;
    msg.n = 0.03005552180158677;
    msg.e = 0.041025236034550994;
    msg.d = 0.312295569401453;
    msg.v_n = 0.6678232721662997;
    msg.v_e = 0.4028737854671667;
    msg.v_d = 0.7400126668687707;
    msg.satellites = 93U;
    msg.iar_hyp = 22252U;
    msg.iar_ratio = 0.6420708144996732;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.8449320590462219);
    msg.setSource(54835U);
    msg.setSourceEntity(211U);
    msg.setDestination(43498U);
    msg.setDestinationEntity(234U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.37929587852815816;
    tmp_msg_0.lon = 0.43630010600547464;
    tmp_msg_0.height = 0.5397511735581099;
    tmp_msg_0.x = 0.7770722118702997;
    tmp_msg_0.y = 0.9918385434168722;
    tmp_msg_0.z = 0.6524450268832563;
    tmp_msg_0.phi = 0.42260988758755247;
    tmp_msg_0.theta = 0.6207844647751286;
    tmp_msg_0.psi = 0.5504001871282292;
    tmp_msg_0.u = 0.3532042505500532;
    tmp_msg_0.v = 0.2134946983051611;
    tmp_msg_0.w = 0.9058282258925989;
    tmp_msg_0.vx = 0.28082585934608106;
    tmp_msg_0.vy = 0.6745988787216167;
    tmp_msg_0.vz = 0.11833430655351218;
    tmp_msg_0.p = 0.9289376754045542;
    tmp_msg_0.q = 0.7536814592397878;
    tmp_msg_0.r = 0.6708646594199298;
    tmp_msg_0.depth = 0.11770579102769141;
    tmp_msg_0.alt = 0.6792368659668772;
    msg.state.set(tmp_msg_0);
    msg.type = 139U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.846266681897061);
    msg.setSource(41138U);
    msg.setSourceEntity(83U);
    msg.setDestination(37614U);
    msg.setDestinationEntity(28U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.009751778703747438;
    tmp_msg_0.lon = 0.8169337756957601;
    tmp_msg_0.height = 0.8447382008403513;
    tmp_msg_0.x = 0.8531427868556778;
    tmp_msg_0.y = 0.7488445840170711;
    tmp_msg_0.z = 0.6008196318446191;
    tmp_msg_0.phi = 0.6466652093534571;
    tmp_msg_0.theta = 0.718617844827851;
    tmp_msg_0.psi = 0.19548431351648488;
    tmp_msg_0.u = 0.8691092397874601;
    tmp_msg_0.v = 0.03707460579663979;
    tmp_msg_0.w = 0.2686031482327558;
    tmp_msg_0.vx = 0.373998268646657;
    tmp_msg_0.vy = 0.4953980169538672;
    tmp_msg_0.vz = 0.45162618706020474;
    tmp_msg_0.p = 0.6726988178668167;
    tmp_msg_0.q = 0.7300119191161569;
    tmp_msg_0.r = 0.31270029989501436;
    tmp_msg_0.depth = 0.4287377189664807;
    tmp_msg_0.alt = 0.6268690433319929;
    msg.state.set(tmp_msg_0);
    msg.type = 117U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.16574272049862016);
    msg.setSource(58914U);
    msg.setSourceEntity(81U);
    msg.setDestination(26477U);
    msg.setDestinationEntity(199U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.9920048295719063;
    tmp_msg_0.lon = 0.3161868406748717;
    tmp_msg_0.height = 0.8963175011941494;
    tmp_msg_0.x = 0.15640016114087463;
    tmp_msg_0.y = 0.8179796108520688;
    tmp_msg_0.z = 0.849947266913618;
    tmp_msg_0.phi = 0.695775549310414;
    tmp_msg_0.theta = 0.5476589699985863;
    tmp_msg_0.psi = 0.04121076611473584;
    tmp_msg_0.u = 0.5330177299675264;
    tmp_msg_0.v = 0.5864693941077322;
    tmp_msg_0.w = 0.4316518168690491;
    tmp_msg_0.vx = 0.5636896703787861;
    tmp_msg_0.vy = 0.17139835050242647;
    tmp_msg_0.vz = 0.4822701538430102;
    tmp_msg_0.p = 0.43655576009071684;
    tmp_msg_0.q = 0.5599314347098877;
    tmp_msg_0.r = 0.429472757975056;
    tmp_msg_0.depth = 0.18438458763006715;
    tmp_msg_0.alt = 0.2308709249165921;
    msg.state.set(tmp_msg_0);
    msg.type = 53U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.16982708463118978);
    msg.setSource(52796U);
    msg.setSourceEntity(111U);
    msg.setDestination(6811U);
    msg.setDestinationEntity(192U);
    msg.value = 0.9088738657280181;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.604113960814595);
    msg.setSource(8450U);
    msg.setSourceEntity(70U);
    msg.setDestination(1794U);
    msg.setDestinationEntity(22U);
    msg.value = 0.011530003653532295;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.4613372307637422);
    msg.setSource(33086U);
    msg.setSourceEntity(243U);
    msg.setDestination(47514U);
    msg.setDestinationEntity(18U);
    msg.value = 0.8193590005533088;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.23239556928439986);
    msg.setSource(40355U);
    msg.setSourceEntity(176U);
    msg.setDestination(24031U);
    msg.setDestinationEntity(195U);
    msg.value = 0.8968682199337717;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.797966664844064);
    msg.setSource(61063U);
    msg.setSourceEntity(108U);
    msg.setDestination(49784U);
    msg.setDestinationEntity(118U);
    msg.value = 0.3582639229192257;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.38834430578511236);
    msg.setSource(31988U);
    msg.setSourceEntity(65U);
    msg.setDestination(33049U);
    msg.setDestinationEntity(49U);
    msg.value = 0.799395265511662;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.38594268067124593);
    msg.setSource(29875U);
    msg.setSourceEntity(77U);
    msg.setDestination(62030U);
    msg.setDestinationEntity(187U);
    msg.value = 0.6364534239975514;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.4482091008925696);
    msg.setSource(15427U);
    msg.setSourceEntity(16U);
    msg.setDestination(13512U);
    msg.setDestinationEntity(151U);
    msg.value = 0.8943467238696358;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.1843861149818269);
    msg.setSource(16441U);
    msg.setSourceEntity(177U);
    msg.setDestination(7810U);
    msg.setDestinationEntity(40U);
    msg.value = 0.36656822864357463;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.8793236948051557);
    msg.setSource(47860U);
    msg.setSourceEntity(177U);
    msg.setDestination(57443U);
    msg.setDestinationEntity(14U);
    msg.value = 0.2501534974712166;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.006333874923410421);
    msg.setSource(13220U);
    msg.setSourceEntity(161U);
    msg.setDestination(13619U);
    msg.setDestinationEntity(132U);
    msg.value = 0.000179349496559289;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.08712818682663537);
    msg.setSource(52522U);
    msg.setSourceEntity(228U);
    msg.setDestination(40066U);
    msg.setDestinationEntity(172U);
    msg.value = 0.47073117178719037;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.0022943748452832757);
    msg.setSource(59485U);
    msg.setSourceEntity(117U);
    msg.setDestination(34252U);
    msg.setDestinationEntity(83U);
    msg.value = 0.016545455089070793;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.013010821577655984);
    msg.setSource(3722U);
    msg.setSourceEntity(118U);
    msg.setDestination(58618U);
    msg.setDestinationEntity(71U);
    msg.value = 0.8887171896669712;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.13312390686059994);
    msg.setSource(24982U);
    msg.setSourceEntity(181U);
    msg.setDestination(59843U);
    msg.setDestinationEntity(101U);
    msg.value = 0.4587330366654948;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.0179855680695844);
    msg.setSource(10498U);
    msg.setSourceEntity(75U);
    msg.setDestination(11936U);
    msg.setDestinationEntity(37U);
    msg.id = 53U;
    msg.zoom = 248U;
    msg.action = 177U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.4748071781251674);
    msg.setSource(18587U);
    msg.setSourceEntity(193U);
    msg.setDestination(24591U);
    msg.setDestinationEntity(68U);
    msg.id = 145U;
    msg.zoom = 130U;
    msg.action = 182U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.9456059556034928);
    msg.setSource(65032U);
    msg.setSourceEntity(197U);
    msg.setDestination(43044U);
    msg.setDestinationEntity(114U);
    msg.id = 216U;
    msg.zoom = 175U;
    msg.action = 42U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.9345178100484193);
    msg.setSource(50978U);
    msg.setSourceEntity(42U);
    msg.setDestination(58248U);
    msg.setDestinationEntity(44U);
    msg.id = 5U;
    msg.value = 0.4972104052650903;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.3963810944525469);
    msg.setSource(57002U);
    msg.setSourceEntity(181U);
    msg.setDestination(18301U);
    msg.setDestinationEntity(216U);
    msg.id = 198U;
    msg.value = 0.29878743752814685;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.3645430101254491);
    msg.setSource(21979U);
    msg.setSourceEntity(80U);
    msg.setDestination(615U);
    msg.setDestinationEntity(173U);
    msg.id = 14U;
    msg.value = 0.6243947265532788;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.37069257162331326);
    msg.setSource(55611U);
    msg.setSourceEntity(39U);
    msg.setDestination(34626U);
    msg.setDestinationEntity(143U);
    msg.id = 160U;
    msg.value = 0.7377902381316402;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.5220240624147726);
    msg.setSource(3707U);
    msg.setSourceEntity(154U);
    msg.setDestination(57776U);
    msg.setDestinationEntity(150U);
    msg.id = 36U;
    msg.value = 0.22583363499809161;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.46750215615340895);
    msg.setSource(24082U);
    msg.setSourceEntity(30U);
    msg.setDestination(44100U);
    msg.setDestinationEntity(215U);
    msg.id = 190U;
    msg.value = 0.30067235097597256;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.27872394826347047);
    msg.setSource(65077U);
    msg.setSourceEntity(179U);
    msg.setDestination(31029U);
    msg.setDestinationEntity(151U);
    msg.id = 106U;
    msg.angle = 0.038125449245878906;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.4908240549269236);
    msg.setSource(36446U);
    msg.setSourceEntity(251U);
    msg.setDestination(60864U);
    msg.setDestinationEntity(117U);
    msg.id = 54U;
    msg.angle = 0.2232849032026183;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.9297432455854219);
    msg.setSource(531U);
    msg.setSourceEntity(232U);
    msg.setDestination(17646U);
    msg.setDestinationEntity(196U);
    msg.id = 29U;
    msg.angle = 0.21501593386712403;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.5302635839189292);
    msg.setSource(35540U);
    msg.setSourceEntity(148U);
    msg.setDestination(14296U);
    msg.setDestinationEntity(159U);
    msg.op = 62U;
    msg.actions.assign("UWOUBANHWDQTUYOPYFGVLRTFWDQDLUIHVGLCRNHKEXTYFISXGGEHABSFRDXLDCYHHSRILVQEPUDKNJMPMIXHQRNVNOJEZFICHVTINNPSFWJZKZRMJXMNJAZTISLEEODGRFWRVXEXBYATOTHNQCKGZOGAYYJMCBLAZBUKSZCXOTBAPFE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.2621897180770032);
    msg.setSource(58819U);
    msg.setSourceEntity(145U);
    msg.setDestination(58873U);
    msg.setDestinationEntity(244U);
    msg.op = 72U;
    msg.actions.assign("UYORNOOWEYDCWLGPLSZNYJDTOZLFKDNNBCMOHHYRQYMVVCTPDMAEOXVDSZPDTZJGMYOBZSBQXSFHTTGCYLJJGKARMTGMIAITNXGSBSUQGBBUJDIPXIRYLVFCAHKUGHIINZPHFBVQIEUKXOYQPAUSXLHECWXTKUWAWDAEXBVCZXAFETKFHECKTLQIGIBFAVLVWKYRHBPWRKDEMSNUQCQFUAECJJMWRRFMWVQOKUGJQNZNZLWPRVSZM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.35701463596082794);
    msg.setSource(1764U);
    msg.setSourceEntity(166U);
    msg.setDestination(56908U);
    msg.setDestinationEntity(135U);
    msg.op = 229U;
    msg.actions.assign("BUWLEQYKLWLBSVRHXUULCRDUGFIUGLBCCSZEETODHRARPQXXDCWFFYYDZPZFOHPYNNBTITSFJODYQNVQGMSJOIJOTSUPLTFMVPTEGPTJUGRKZIZAQEYRDCKCKXWMQWIKMWFOHNXVBOJIYMTNKVGGHZMARIIBSEBQAAJZYYIVOEQZDOXGANLRCVWCSJXAV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.7727582882531603);
    msg.setSource(63180U);
    msg.setSourceEntity(167U);
    msg.setDestination(14842U);
    msg.setDestinationEntity(160U);
    msg.actions.assign("JYBKLXUXCQVMVCSORKGDXAKEOHWQSUOMBBBACIDTJQINPVIHSKWJFWTPFOCGTSSYIZEXFZWQPFYEPUNQTM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.8990370325671672);
    msg.setSource(35864U);
    msg.setSourceEntity(243U);
    msg.setDestination(33067U);
    msg.setDestinationEntity(241U);
    msg.actions.assign("AXEGEUPNOKWYLBPOWFXQXMBZFCAHLOBZUFUMTFPZEUAQAPIVTRBGJEXHJKKQEYPKJSHFWYONEOMDHRITMSJMBSGHTDRASJBMFCDCPDQZIKXSVYNLQSFKEDTH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.29871464410816784);
    msg.setSource(50950U);
    msg.setSourceEntity(193U);
    msg.setDestination(11692U);
    msg.setDestinationEntity(123U);
    msg.actions.assign("BIDWSPGZRJDNCSKORAPPAHSWXQWMCNZHRPEBZYJCXFSBEBGWYDSHIJYPIAYNHUCAHUMZMIZVAVBQNINCJVQFTGVZUSIPWNUTYNPKDBJBMLHCOUEJRIGQXZOFOBDJOLXXHXCYQJFMEYDCFAADJRUGMPRDEYXKXGQLFHFRVKWFSUSIAORBEDVUTVQEHMCKZITQMWGLZGMZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.49664772320134665);
    msg.setSource(11282U);
    msg.setSourceEntity(55U);
    msg.setDestination(48835U);
    msg.setDestinationEntity(5U);
    msg.button = 69U;
    msg.value = 102U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.34372364358601915);
    msg.setSource(875U);
    msg.setSourceEntity(73U);
    msg.setDestination(9465U);
    msg.setDestinationEntity(70U);
    msg.button = 118U;
    msg.value = 131U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.4823630799204167);
    msg.setSource(62902U);
    msg.setSourceEntity(34U);
    msg.setDestination(13771U);
    msg.setDestinationEntity(94U);
    msg.button = 129U;
    msg.value = 47U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.27130788994600596);
    msg.setSource(41715U);
    msg.setSourceEntity(20U);
    msg.setDestination(38904U);
    msg.setDestinationEntity(140U);
    msg.op = 183U;
    msg.text.assign("YWOMPJBYDZBIGKSCKXBIFJUFJNLOJXKPIJZZHCBTTNUNNHHFBXOLTLXFSQPDNQLIJONYMARMGKBHAWREVHECWKPPSKENSZCYCZAOCWPOVJKCGRNZQEGVVDDWLJPUGEUFRYDVQTJPFTRTDORADZUVLYSNVLOMWEMREYBGNAMGSWEUHBIHBGUZUTAURALDYTQHRXQQVDOEAZVMYXIXZS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.9663064779248646);
    msg.setSource(60415U);
    msg.setSourceEntity(200U);
    msg.setDestination(6424U);
    msg.setDestinationEntity(161U);
    msg.op = 139U;
    msg.text.assign("ILIUKEUYACKNZECMSACVOAHPWUWDMJQGLMINLGLWDYUQEOPJFCHCT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.9440033730899678);
    msg.setSource(3213U);
    msg.setSourceEntity(43U);
    msg.setDestination(60300U);
    msg.setDestinationEntity(131U);
    msg.op = 157U;
    msg.text.assign("WSBYLLQTGP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.9302227947492003);
    msg.setSource(31335U);
    msg.setSourceEntity(30U);
    msg.setDestination(64327U);
    msg.setDestinationEntity(95U);
    msg.op = 207U;
    msg.time_remain = 0.39712544509111825;
    msg.sched_time = 0.8041704277018417;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.9716819283874217);
    msg.setSource(58250U);
    msg.setSourceEntity(239U);
    msg.setDestination(23584U);
    msg.setDestinationEntity(200U);
    msg.op = 68U;
    msg.time_remain = 0.8422272697078481;
    msg.sched_time = 0.6348011407056448;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.7116751147292929);
    msg.setSource(6304U);
    msg.setSourceEntity(142U);
    msg.setDestination(15159U);
    msg.setDestinationEntity(49U);
    msg.op = 70U;
    msg.time_remain = 0.7343318403207884;
    msg.sched_time = 0.7871937748707087;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.967230751575398);
    msg.setSource(23522U);
    msg.setSourceEntity(36U);
    msg.setDestination(48205U);
    msg.setDestinationEntity(18U);
    msg.name.assign("RMQROSNDHZOYXZQFJARSMIESBIVRIGLBCLUUNAUHVPMIEBOANXGUTLMKWAXDNPOJBBEGBCBRKVEZNTOFJXZUCUYJSVQWULTOJTUSCXKYYVZWXHFWGQMLATTCAFHFMQEXLJRIWIARFUDWTHRZBLIZKWFDCPEOPTIJTFIOQAPMLQVSSONBKWPRGQKDHCNQVDFJYNBSALEOVYSEZGYZPDCHFQGHYVGWMKCEMVGXDNAR");
    msg.op = 154U;
    msg.sched_time = 0.41561939229156497;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.7690554386321669);
    msg.setSource(9397U);
    msg.setSourceEntity(32U);
    msg.setDestination(23417U);
    msg.setDestinationEntity(63U);
    msg.name.assign("EHNBZQIWCGMSKGQOMYMNALNWGSVTABGSCLNFKMZ");
    msg.op = 101U;
    msg.sched_time = 0.8350881717944454;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.10828584455569423);
    msg.setSource(42967U);
    msg.setSourceEntity(218U);
    msg.setDestination(59631U);
    msg.setDestinationEntity(4U);
    msg.name.assign("UAXMEKPGDTFGODQYKIKZBOGWUVUFNLJXPIMEILEZYSRJPNCSXYKNAHPSSDOZXSCOFLACGTWR");
    msg.op = 124U;
    msg.sched_time = 0.008033077113040576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.2969578545414453);
    msg.setSource(40424U);
    msg.setSourceEntity(55U);
    msg.setDestination(55846U);
    msg.setDestinationEntity(194U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.8490848910033395);
    msg.setSource(53254U);
    msg.setSourceEntity(223U);
    msg.setDestination(39494U);
    msg.setDestinationEntity(220U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.10876511497459929);
    msg.setSource(28608U);
    msg.setSourceEntity(36U);
    msg.setDestination(32647U);
    msg.setDestinationEntity(22U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.7495164853595955);
    msg.setSource(42332U);
    msg.setSourceEntity(56U);
    msg.setDestination(7188U);
    msg.setDestinationEntity(139U);
    msg.name.assign("VHBQDQYWPRVHOZWJSIYJMHOFIPRMFTBXRLYHSZTRXEYTDCFYZIWELJJHBPYIFMVQPVZIVGVAUFGVUGXSFBWMEKCALMRAXLWDYIIWJPZSOWIHRCTQLNVKQMJEQUFCNMPPXUAR");
    msg.state = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.011204151718211208);
    msg.setSource(36741U);
    msg.setSourceEntity(92U);
    msg.setDestination(16024U);
    msg.setDestinationEntity(37U);
    msg.name.assign("PHUJYYITADUQXENNWSUAPRSPQXVWUJFEQYBJWLQRWRFGVDPSDMEJZQOILDCVTPNIMJPZALSHHSBEKWAFKUPKAJTTOFOEXYJWVHGHZTE");
    msg.state = 76U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.612681960104212);
    msg.setSource(60568U);
    msg.setSourceEntity(114U);
    msg.setDestination(4234U);
    msg.setDestinationEntity(180U);
    msg.name.assign("WUHWCRTVEXUWCRORLKJKSYTMKBCOHFYNHHOELQZPUERZBDRGJAOWJQBOQWLHCEGWTUWBAOFDGLSPCFXFIGXKIBPVFLGSNPJYWDBCEHJARAJVJXXTQOMADKEEBSNKFCNTUNXTVEJYXIVBLZOZKVXMHVWAOYAPMAPMHQPZSQSNRZPCZFGYSOMDTYQIYKTLDRIINMBGYZAQLXDIDECGEMN");
    msg.state = 16U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.2607330658781081);
    msg.setSource(1367U);
    msg.setSourceEntity(55U);
    msg.setDestination(13798U);
    msg.setDestinationEntity(23U);
    msg.name.assign("DEVYKOCMMPAPSUTWIFFDFKECBOGXIYAOASNIHQUWSYOWDDQTHVAPWJQEJMZO");
    msg.value = 92U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.531726424312442);
    msg.setSource(25660U);
    msg.setSourceEntity(193U);
    msg.setDestination(12490U);
    msg.setDestinationEntity(220U);
    msg.name.assign("VSHVFANTUCBNXQVEHMIQBNPPYJRORFMAGBPXZAKTAFFNCKWCMXWLKBMOFYEPWITWYUMLVGKVUBFEFRFIGQD");
    msg.value = 39U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.08314494068061018);
    msg.setSource(57030U);
    msg.setSourceEntity(114U);
    msg.setDestination(39803U);
    msg.setDestinationEntity(37U);
    msg.name.assign("PTQMFXOURGVYCREHAODUYPGRSXVQBQPKUWABGTHGFEVMTPECNJDLFEMFKTNCWCEWLAXOTROFLDUPKTJJHSAMABVUCJBAZAYFYBXIJYGMGQIOZKRNSWZDPEHQQK");
    msg.value = 251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.9312463024055941);
    msg.setSource(33609U);
    msg.setSourceEntity(69U);
    msg.setDestination(60968U);
    msg.setDestinationEntity(162U);
    msg.name.assign("MKASEGBAOCLJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.6028649142122859);
    msg.setSource(41320U);
    msg.setSourceEntity(69U);
    msg.setDestination(35892U);
    msg.setDestinationEntity(72U);
    msg.name.assign("OFJZGNKIWIPHUDIKEGCMTHOBWVYEJONAYMWLOVRJWAIVMPXOMPYCKOQXFFGEHPIQXUZUIYUNVYPDYLLRJJKTCTCAQGHISQUTOKEVBTSBQGPIKVXNFZMVNVTZRYCNLUFLTTFBAXCAECHNXAGBXDKZRWWGNPXMSKFANSHTXVFSLHOASCLRP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.9869280384340374);
    msg.setSource(32722U);
    msg.setSourceEntity(128U);
    msg.setDestination(15011U);
    msg.setDestinationEntity(49U);
    msg.name.assign("TLAYDMDMUBDCEQZWAABWSZWFYDLMXNGEKKUNJGXQUWPACOMULIKGRYBFEZRGNFYUJYWUBYIRBOQBHFXHTRSISANLJNSRFVGRDVZXCOKEONLXJBJPHIIOPBCFSPMIVFVMEEHQPGVLMSJWFIHPIZOMAVQEPSETNQYSEZPZHJEUCGKC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.26566244129070893);
    msg.setSource(8591U);
    msg.setSourceEntity(85U);
    msg.setDestination(14095U);
    msg.setDestinationEntity(160U);
    msg.name.assign("XYTIBGDDRHEYTDMUOPJEMMRZHCIMKTPQUIVBOJHBXDCVFTDIBEXQLZAXYELSXMELPUFPIRELNTTNRKNSYRZCVOKBQAIDPFGC");
    msg.value = 182U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.8090720296603088);
    msg.setSource(29079U);
    msg.setSourceEntity(30U);
    msg.setDestination(3249U);
    msg.setDestinationEntity(8U);
    msg.name.assign("UKDZEHGYAPCSINQMMMUDQVLMZUUYMBXEDPAFIJNPCDWNFALDARKSI");
    msg.value = 62U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.6847479052549249);
    msg.setSource(30546U);
    msg.setSourceEntity(74U);
    msg.setDestination(20154U);
    msg.setDestinationEntity(114U);
    msg.name.assign("ODUPAZDTAMWLQPULRZDJXSVZNXAVBDCCPSPSXUILZENJKMVDVXIJTXNYWZSEOEKAPDFBXJDEGCGFOMLHIBHTGJAIOZHIUKQPHFFNCLKSYWRYQCYTQHWTORTWFLNLBEEOKQEOMXWKQGOUEUUSPDCRAWVTSINPQPWYGZVJCNIGGMJHKNFBVVIBZIQUHPYOIAHJHXSNFGTYSKQOLYRFGBMSUDMJEJVYRNCAXEHLVGTRRKMBCDLQXWWBBFZTCARUMZ");
    msg.value = 249U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.820145366379143);
    msg.setSource(1062U);
    msg.setSourceEntity(235U);
    msg.setDestination(45049U);
    msg.setDestinationEntity(231U);
    msg.id = 40U;
    msg.period = 3576854807U;
    msg.duty_cycle = 1974099872U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.7493824048319582);
    msg.setSource(19590U);
    msg.setSourceEntity(223U);
    msg.setDestination(34385U);
    msg.setDestinationEntity(24U);
    msg.id = 40U;
    msg.period = 3488621362U;
    msg.duty_cycle = 1969213317U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.8471753781605202);
    msg.setSource(51897U);
    msg.setSourceEntity(122U);
    msg.setDestination(12279U);
    msg.setDestinationEntity(254U);
    msg.id = 17U;
    msg.period = 1825197202U;
    msg.duty_cycle = 2453743058U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.05036259378330932);
    msg.setSource(8052U);
    msg.setSourceEntity(135U);
    msg.setDestination(30585U);
    msg.setDestinationEntity(129U);
    msg.id = 48U;
    msg.period = 1505714597U;
    msg.duty_cycle = 239777830U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.547546072330809);
    msg.setSource(34902U);
    msg.setSourceEntity(133U);
    msg.setDestination(5217U);
    msg.setDestinationEntity(55U);
    msg.id = 120U;
    msg.period = 3050344280U;
    msg.duty_cycle = 587636740U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.18728379210005985);
    msg.setSource(51472U);
    msg.setSourceEntity(13U);
    msg.setDestination(23442U);
    msg.setDestinationEntity(230U);
    msg.id = 50U;
    msg.period = 3718149111U;
    msg.duty_cycle = 3361600095U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.3712944104330813);
    msg.setSource(46251U);
    msg.setSourceEntity(82U);
    msg.setDestination(37188U);
    msg.setDestinationEntity(123U);
    msg.lat = 0.13195697209060375;
    msg.lon = 0.7930517665312087;
    msg.height = 0.30322426852839424;
    msg.x = 0.02777525186372576;
    msg.y = 0.8565573096507479;
    msg.z = 0.4862535695994078;
    msg.phi = 0.20631567764137515;
    msg.theta = 0.19401046537575217;
    msg.psi = 0.6506389087216887;
    msg.u = 0.2526704199334291;
    msg.v = 0.14135563488781533;
    msg.w = 0.1591803092377324;
    msg.vx = 0.5674233513990316;
    msg.vy = 0.6305430063279269;
    msg.vz = 0.28986880016219263;
    msg.p = 0.7745311827155203;
    msg.q = 0.42414875767181315;
    msg.r = 0.6980732912792483;
    msg.depth = 0.8517753758809278;
    msg.alt = 0.12165007332477495;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.11650138075609107);
    msg.setSource(38441U);
    msg.setSourceEntity(111U);
    msg.setDestination(48107U);
    msg.setDestinationEntity(107U);
    msg.lat = 0.33646405924072953;
    msg.lon = 0.9896406899210288;
    msg.height = 0.44864847613054326;
    msg.x = 0.4975328001373718;
    msg.y = 0.6086075320103148;
    msg.z = 0.3404514440038444;
    msg.phi = 0.1503874317060171;
    msg.theta = 0.8238873138861571;
    msg.psi = 0.3009314707185695;
    msg.u = 0.7653147371502372;
    msg.v = 0.9571799530943603;
    msg.w = 0.9962359433758579;
    msg.vx = 0.6780493489193263;
    msg.vy = 0.02974277641177636;
    msg.vz = 0.5529508973852844;
    msg.p = 0.5174609625577058;
    msg.q = 0.08707575472708828;
    msg.r = 0.6131783005981365;
    msg.depth = 0.24475115872443498;
    msg.alt = 0.08857034367995797;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.9319397174807813);
    msg.setSource(12917U);
    msg.setSourceEntity(73U);
    msg.setDestination(20148U);
    msg.setDestinationEntity(40U);
    msg.lat = 0.20559098260351827;
    msg.lon = 0.38018556853192786;
    msg.height = 0.8812587981779889;
    msg.x = 0.41473938028993307;
    msg.y = 0.03341914892857745;
    msg.z = 0.004876008754156613;
    msg.phi = 0.5697338444275512;
    msg.theta = 0.7681820669409648;
    msg.psi = 0.6562351842800572;
    msg.u = 0.7201342114243552;
    msg.v = 0.4363154160972087;
    msg.w = 0.30832580801821907;
    msg.vx = 0.8525487995784763;
    msg.vy = 0.5498628430418785;
    msg.vz = 0.6930564584177562;
    msg.p = 0.13777535087679205;
    msg.q = 0.6373292170631232;
    msg.r = 0.922325009903932;
    msg.depth = 0.5782890001934866;
    msg.alt = 0.6471524355787682;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.28713793630169915);
    msg.setSource(47368U);
    msg.setSourceEntity(230U);
    msg.setDestination(8627U);
    msg.setDestinationEntity(76U);
    msg.x = 0.4697116499821159;
    msg.y = 0.8764887298511923;
    msg.z = 0.5104182952198972;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.980277947475243);
    msg.setSource(28929U);
    msg.setSourceEntity(176U);
    msg.setDestination(6246U);
    msg.setDestinationEntity(230U);
    msg.x = 0.8140289896971459;
    msg.y = 0.5890883819804249;
    msg.z = 0.2006825983112891;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.3625145561665799);
    msg.setSource(51430U);
    msg.setSourceEntity(185U);
    msg.setDestination(18572U);
    msg.setDestinationEntity(192U);
    msg.x = 0.7687937156318089;
    msg.y = 0.812966126695908;
    msg.z = 0.6720673567817483;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.402283252258937);
    msg.setSource(53846U);
    msg.setSourceEntity(215U);
    msg.setDestination(3483U);
    msg.setDestinationEntity(161U);
    msg.value = 0.9839065872475722;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.6069404011693462);
    msg.setSource(23062U);
    msg.setSourceEntity(241U);
    msg.setDestination(29405U);
    msg.setDestinationEntity(201U);
    msg.value = 0.049419890032118;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.279783555214805);
    msg.setSource(44005U);
    msg.setSourceEntity(36U);
    msg.setDestination(6713U);
    msg.setDestinationEntity(208U);
    msg.value = 0.2993257740904436;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.38602937932427617);
    msg.setSource(10081U);
    msg.setSourceEntity(245U);
    msg.setDestination(36897U);
    msg.setDestinationEntity(164U);
    msg.value = 0.612891550635986;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.4653943394264318);
    msg.setSource(48890U);
    msg.setSourceEntity(112U);
    msg.setDestination(53522U);
    msg.setDestinationEntity(159U);
    msg.value = 0.0691361656102144;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.8374195550679828);
    msg.setSource(38808U);
    msg.setSourceEntity(244U);
    msg.setDestination(26690U);
    msg.setDestinationEntity(7U);
    msg.value = 0.40784405862626727;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.45778768365282874);
    msg.setSource(4257U);
    msg.setSourceEntity(169U);
    msg.setDestination(33178U);
    msg.setDestinationEntity(62U);
    msg.x = 0.8592642567544112;
    msg.y = 0.4455260599507833;
    msg.z = 0.1824063637080815;
    msg.phi = 0.9188309639456893;
    msg.theta = 0.17640517785458532;
    msg.psi = 0.07160683507842969;
    msg.p = 0.810633847370876;
    msg.q = 0.28235285887326145;
    msg.r = 0.9920372377957029;
    msg.u = 0.9713082410410442;
    msg.v = 0.6508021749048164;
    msg.w = 0.7475416015937911;
    msg.bias_psi = 0.022899598878413086;
    msg.bias_r = 0.09214724476983227;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.4342048538853107);
    msg.setSource(183U);
    msg.setSourceEntity(244U);
    msg.setDestination(16171U);
    msg.setDestinationEntity(138U);
    msg.x = 0.9105251708697233;
    msg.y = 0.16145290424477532;
    msg.z = 0.9162404035037951;
    msg.phi = 0.9978086256888118;
    msg.theta = 0.0026909120669114106;
    msg.psi = 0.3020794637234141;
    msg.p = 0.6633068940034677;
    msg.q = 0.5338754588682506;
    msg.r = 0.7761192100975649;
    msg.u = 0.36607301420381866;
    msg.v = 0.5754908695418534;
    msg.w = 0.9842776111681567;
    msg.bias_psi = 0.841725752368126;
    msg.bias_r = 0.744949621330614;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.007790791262521468);
    msg.setSource(47265U);
    msg.setSourceEntity(70U);
    msg.setDestination(51290U);
    msg.setDestinationEntity(85U);
    msg.x = 0.5987224258860921;
    msg.y = 0.01957317809544279;
    msg.z = 0.35787687881691976;
    msg.phi = 0.42140072794342787;
    msg.theta = 0.5279647355657631;
    msg.psi = 0.7546756559421465;
    msg.p = 0.6331822061229474;
    msg.q = 0.7369295806155794;
    msg.r = 0.4148021719236532;
    msg.u = 0.9890265208333717;
    msg.v = 0.26598296208838457;
    msg.w = 0.5407623856137528;
    msg.bias_psi = 0.7154828572265904;
    msg.bias_r = 0.8381520699282471;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.8520997609468979);
    msg.setSource(54654U);
    msg.setSourceEntity(77U);
    msg.setDestination(47500U);
    msg.setDestinationEntity(204U);
    msg.bias_psi = 0.3817744749057578;
    msg.bias_r = 0.799430142758114;
    msg.cog = 0.24644568571927905;
    msg.cyaw = 0.6381421485002718;
    msg.lbl_rej_level = 0.9369373333379997;
    msg.gps_rej_level = 0.26375032667117726;
    msg.custom_x = 0.31294624288475104;
    msg.custom_y = 0.3571546731700892;
    msg.custom_z = 0.9352614116675015;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.82532234280241);
    msg.setSource(26613U);
    msg.setSourceEntity(34U);
    msg.setDestination(26816U);
    msg.setDestinationEntity(235U);
    msg.bias_psi = 0.21998390191171535;
    msg.bias_r = 0.692088239245982;
    msg.cog = 0.9294450121423148;
    msg.cyaw = 0.5827445854020499;
    msg.lbl_rej_level = 0.38078066820900847;
    msg.gps_rej_level = 0.4136734574364481;
    msg.custom_x = 0.378146521979868;
    msg.custom_y = 0.35858123879747317;
    msg.custom_z = 0.29528855971073;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.08475031881998885);
    msg.setSource(41636U);
    msg.setSourceEntity(22U);
    msg.setDestination(6584U);
    msg.setDestinationEntity(173U);
    msg.bias_psi = 0.3935217344467412;
    msg.bias_r = 0.7493681733575821;
    msg.cog = 0.4842091562304984;
    msg.cyaw = 0.6609759340698724;
    msg.lbl_rej_level = 0.13047701398599643;
    msg.gps_rej_level = 0.44767882166940587;
    msg.custom_x = 0.06355877267652532;
    msg.custom_y = 0.28550241989035763;
    msg.custom_z = 0.9684849282261876;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.8986975114927882);
    msg.setSource(10566U);
    msg.setSourceEntity(187U);
    msg.setDestination(17999U);
    msg.setDestinationEntity(131U);
    msg.utc_time = 0.6635396603204997;
    msg.reason = 81U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.9962431570136487);
    msg.setSource(451U);
    msg.setSourceEntity(56U);
    msg.setDestination(7921U);
    msg.setDestinationEntity(18U);
    msg.utc_time = 0.24375327881211284;
    msg.reason = 37U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.4872938696599862);
    msg.setSource(32689U);
    msg.setSourceEntity(74U);
    msg.setDestination(17020U);
    msg.setDestinationEntity(148U);
    msg.utc_time = 0.2716812968247315;
    msg.reason = 199U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.037812702448226654);
    msg.setSource(46618U);
    msg.setSourceEntity(200U);
    msg.setDestination(55993U);
    msg.setDestinationEntity(213U);
    msg.id = 94U;
    msg.range = 0.8908954966633064;
    msg.acceptance = 107U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.45573510692730934);
    msg.setSource(53392U);
    msg.setSourceEntity(89U);
    msg.setDestination(56710U);
    msg.setDestinationEntity(102U);
    msg.id = 111U;
    msg.range = 0.9591415383759874;
    msg.acceptance = 123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.1729098214721917);
    msg.setSource(13762U);
    msg.setSourceEntity(14U);
    msg.setDestination(20524U);
    msg.setDestinationEntity(198U);
    msg.id = 101U;
    msg.range = 0.3250511143025758;
    msg.acceptance = 232U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.32046704809006454);
    msg.setSource(56786U);
    msg.setSourceEntity(104U);
    msg.setDestination(47318U);
    msg.setDestinationEntity(223U);
    msg.type = 148U;
    msg.reason = 135U;
    msg.value = 0.9289132728009087;
    msg.timestep = 0.17861096688953237;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.44599832443288845);
    msg.setSource(7541U);
    msg.setSourceEntity(80U);
    msg.setDestination(29695U);
    msg.setDestinationEntity(72U);
    msg.type = 79U;
    msg.reason = 156U;
    msg.value = 0.3260551783539184;
    msg.timestep = 0.21006563602669748;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.9461262950408931);
    msg.setSource(26304U);
    msg.setSourceEntity(4U);
    msg.setDestination(15113U);
    msg.setDestinationEntity(216U);
    msg.type = 86U;
    msg.reason = 66U;
    msg.value = 0.24209506898029898;
    msg.timestep = 0.1397198769243;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.2807901227982872);
    msg.setSource(5671U);
    msg.setSourceEntity(173U);
    msg.setDestination(64411U);
    msg.setDestinationEntity(217U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("LVFQGOZFSIICLCYIXDANNTJJWVORXIVXWWSBZWAWUCFLUASDJLVGRFRCGATCHMHCNJESO");
    tmp_msg_0.lat = 0.3770589402579314;
    tmp_msg_0.lon = 0.44348301257649336;
    tmp_msg_0.depth = 0.7315273252188274;
    tmp_msg_0.query_channel = 80U;
    tmp_msg_0.reply_channel = 57U;
    tmp_msg_0.transponder_delay = 196U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.37517488026154744;
    msg.y = 0.5743119737200434;
    msg.var_x = 0.6836147560107392;
    msg.var_y = 0.7198464728240956;
    msg.distance = 0.9836661714536361;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.28755570605076974);
    msg.setSource(41251U);
    msg.setSourceEntity(73U);
    msg.setDestination(64911U);
    msg.setDestinationEntity(37U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("XKFPSWFLBRRBJZBAMQDODDAUSAXGCNWMZPYJUKVEVBXPHFLJJQZAWSZMMZIVUAHPINYNSTTMJJZKUCZKBUULDILGFEOGDZRPGXFHYXGTBWYAOPAZHRHKITCPIUTSCSGAMWROQKWFQIHJDKNMAHKLLVQEPCIQNBHXYFOJDLRYYWOIFREKGYIUONCQWTLNBCMXJGRNHTSWCJEDNELRVAVZFQHCTSPG");
    tmp_msg_0.lat = 0.9191628474449406;
    tmp_msg_0.lon = 0.280596815083728;
    tmp_msg_0.depth = 0.08843267930849685;
    tmp_msg_0.query_channel = 63U;
    tmp_msg_0.reply_channel = 133U;
    tmp_msg_0.transponder_delay = 90U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.4826631375362088;
    msg.y = 0.5865280330696597;
    msg.var_x = 0.28260830359488487;
    msg.var_y = 0.10515106855510858;
    msg.distance = 0.9294124674768814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.16295974546242786);
    msg.setSource(56467U);
    msg.setSourceEntity(57U);
    msg.setDestination(58332U);
    msg.setDestinationEntity(179U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("RJYYIHHHAZVQXKMXCTMZRZXKUNWABFRCKINBJMCTRGVVFLMWRWNEKYZBCJITVZWEJPXVAIBSJPODBQNSCGDLXVHKAHDJWYQUGUTXKUVIPKOIGSYTHPAXUFEYAFMIONBUJONABOLRFKPPRJYRTOCGLEGFZSOQQILFSLXNGGAFQDBVQBNYRM");
    tmp_msg_0.lat = 0.8898262045052981;
    tmp_msg_0.lon = 0.12446492201231296;
    tmp_msg_0.depth = 0.3803334968698434;
    tmp_msg_0.query_channel = 47U;
    tmp_msg_0.reply_channel = 63U;
    tmp_msg_0.transponder_delay = 165U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.7135772003752855;
    msg.y = 0.6012550204175422;
    msg.var_x = 0.16361767311417752;
    msg.var_y = 0.18206640036788557;
    msg.distance = 0.878246441893154;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.06825618528786281);
    msg.setSource(48353U);
    msg.setSourceEntity(161U);
    msg.setDestination(53069U);
    msg.setDestinationEntity(213U);
    msg.state = 176U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.034985085485800926);
    msg.setSource(41794U);
    msg.setSourceEntity(34U);
    msg.setDestination(31634U);
    msg.setDestinationEntity(124U);
    msg.state = 30U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.38512395549706246);
    msg.setSource(25835U);
    msg.setSourceEntity(179U);
    msg.setDestination(49445U);
    msg.setDestinationEntity(238U);
    msg.state = 12U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.46920808034647354);
    msg.setSource(11869U);
    msg.setSourceEntity(5U);
    msg.setDestination(56325U);
    msg.setDestinationEntity(56U);
    msg.x = 0.2532984751006586;
    msg.y = 0.8426945696651262;
    msg.z = 0.20312885213460707;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.18532887241792484);
    msg.setSource(39814U);
    msg.setSourceEntity(140U);
    msg.setDestination(13583U);
    msg.setDestinationEntity(199U);
    msg.x = 0.002682590612250957;
    msg.y = 0.2876159244635166;
    msg.z = 0.7024582132292618;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.5001092042227433);
    msg.setSource(36704U);
    msg.setSourceEntity(179U);
    msg.setDestination(16704U);
    msg.setDestinationEntity(30U);
    msg.x = 0.7500817466160676;
    msg.y = 0.4930649922962458;
    msg.z = 0.01270022896383316;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.08873434595088214);
    msg.setSource(43284U);
    msg.setSourceEntity(62U);
    msg.setDestination(8367U);
    msg.setDestinationEntity(175U);
    msg.va = 0.8674614020902112;
    msg.aoa = 0.4967423811904681;
    msg.ssa = 0.7144729905098857;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.3870820710985189);
    msg.setSource(31251U);
    msg.setSourceEntity(30U);
    msg.setDestination(7868U);
    msg.setDestinationEntity(50U);
    msg.va = 0.8553323788856784;
    msg.aoa = 0.081248194297867;
    msg.ssa = 0.2527964101692385;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.4165756505364321);
    msg.setSource(34783U);
    msg.setSourceEntity(31U);
    msg.setDestination(16275U);
    msg.setDestinationEntity(177U);
    msg.va = 0.5006229068671869;
    msg.aoa = 0.20686925783949472;
    msg.ssa = 0.7939524648785468;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.10650190728847553);
    msg.setSource(64510U);
    msg.setSourceEntity(7U);
    msg.setDestination(29122U);
    msg.setDestinationEntity(121U);
    msg.value = 0.22052971601989146;
    msg.off = 0.8598638848261444;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.6656810171828539);
    msg.setSource(58310U);
    msg.setSourceEntity(67U);
    msg.setDestination(25644U);
    msg.setDestinationEntity(136U);
    msg.value = 0.42754328074808323;
    msg.off = 0.5658102336426374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.9597770478113212);
    msg.setSource(50112U);
    msg.setSourceEntity(90U);
    msg.setDestination(56860U);
    msg.setDestinationEntity(3U);
    msg.value = 0.6598688617032595;
    msg.off = 0.34822851436437674;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.9873870291862651);
    msg.setSource(36653U);
    msg.setSourceEntity(112U);
    msg.setDestination(43638U);
    msg.setDestinationEntity(177U);
    msg.value = 0.6881741200372684;
    msg.z_units = 86U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.8971311053981406);
    msg.setSource(8817U);
    msg.setSourceEntity(142U);
    msg.setDestination(52492U);
    msg.setDestinationEntity(115U);
    msg.value = 0.7454377721744554;
    msg.z_units = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.2946832235648267);
    msg.setSource(20038U);
    msg.setSourceEntity(122U);
    msg.setDestination(35247U);
    msg.setDestinationEntity(252U);
    msg.value = 0.14066220750402425;
    msg.z_units = 229U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.8275666746904367);
    msg.setSource(19389U);
    msg.setSourceEntity(77U);
    msg.setDestination(6756U);
    msg.setDestinationEntity(159U);
    msg.value = 0.8763441114511747;
    msg.speed_units = 28U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.7029578697087102);
    msg.setSource(49486U);
    msg.setSourceEntity(196U);
    msg.setDestination(16516U);
    msg.setDestinationEntity(165U);
    msg.value = 0.5424735570723751;
    msg.speed_units = 112U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.5748019276129113);
    msg.setSource(40934U);
    msg.setSourceEntity(232U);
    msg.setDestination(8365U);
    msg.setDestinationEntity(56U);
    msg.value = 0.6499295463712366;
    msg.speed_units = 154U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.3214926191584002);
    msg.setSource(23597U);
    msg.setSourceEntity(79U);
    msg.setDestination(52299U);
    msg.setDestinationEntity(127U);
    msg.value = 0.16469258510944262;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.14000715820475085);
    msg.setSource(17792U);
    msg.setSourceEntity(218U);
    msg.setDestination(8447U);
    msg.setDestinationEntity(66U);
    msg.value = 0.9322439923967372;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.47259720776033287);
    msg.setSource(26838U);
    msg.setSourceEntity(72U);
    msg.setDestination(42222U);
    msg.setDestinationEntity(218U);
    msg.value = 0.35122449026621505;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.6799217260704662);
    msg.setSource(23545U);
    msg.setSourceEntity(151U);
    msg.setDestination(6910U);
    msg.setDestinationEntity(245U);
    msg.value = 0.26072736776970207;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.7694800235073578);
    msg.setSource(24760U);
    msg.setSourceEntity(83U);
    msg.setDestination(39342U);
    msg.setDestinationEntity(61U);
    msg.value = 0.967754611527616;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.6066202406686524);
    msg.setSource(27231U);
    msg.setSourceEntity(253U);
    msg.setDestination(22314U);
    msg.setDestinationEntity(11U);
    msg.value = 0.5823650852103925;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.9758668972338579);
    msg.setSource(47976U);
    msg.setSourceEntity(191U);
    msg.setDestination(37802U);
    msg.setDestinationEntity(110U);
    msg.value = 0.055258537073987424;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.9829981538299799);
    msg.setSource(13491U);
    msg.setSourceEntity(76U);
    msg.setDestination(52502U);
    msg.setDestinationEntity(152U);
    msg.value = 0.019880418050853388;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.6198064590342881);
    msg.setSource(24182U);
    msg.setSourceEntity(234U);
    msg.setDestination(13998U);
    msg.setDestinationEntity(247U);
    msg.value = 0.6627075099397233;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.6116860863519105);
    msg.setSource(3602U);
    msg.setSourceEntity(201U);
    msg.setDestination(55415U);
    msg.setDestinationEntity(8U);
    msg.path_ref = 3995335072U;
    msg.start_lat = 0.22399828478441042;
    msg.start_lon = 0.32031778570540104;
    msg.start_z = 0.7481702858869631;
    msg.start_z_units = 232U;
    msg.end_lat = 0.0016935095826866586;
    msg.end_lon = 0.14621937519677985;
    msg.end_z = 0.7420763970949197;
    msg.end_z_units = 238U;
    msg.speed = 0.8502882314129597;
    msg.speed_units = 78U;
    msg.lradius = 0.1155168612581069;
    msg.flags = 82U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.6970024918175894);
    msg.setSource(56193U);
    msg.setSourceEntity(89U);
    msg.setDestination(16974U);
    msg.setDestinationEntity(88U);
    msg.path_ref = 2031221242U;
    msg.start_lat = 0.17183723304629728;
    msg.start_lon = 0.942203492685785;
    msg.start_z = 0.10003626031991741;
    msg.start_z_units = 133U;
    msg.end_lat = 0.8865454484516521;
    msg.end_lon = 0.3263700471217179;
    msg.end_z = 0.22725642649577427;
    msg.end_z_units = 65U;
    msg.speed = 0.7178398008889619;
    msg.speed_units = 173U;
    msg.lradius = 0.562059170528032;
    msg.flags = 148U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.04125926281775949);
    msg.setSource(6965U);
    msg.setSourceEntity(249U);
    msg.setDestination(45815U);
    msg.setDestinationEntity(30U);
    msg.path_ref = 2803087437U;
    msg.start_lat = 0.1706276661476066;
    msg.start_lon = 0.5432686200465996;
    msg.start_z = 0.08937722871131881;
    msg.start_z_units = 57U;
    msg.end_lat = 0.20885532436177912;
    msg.end_lon = 0.5912639051093416;
    msg.end_z = 0.15777220280889814;
    msg.end_z_units = 74U;
    msg.speed = 0.1958456962503894;
    msg.speed_units = 135U;
    msg.lradius = 0.13786495928117615;
    msg.flags = 235U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.9112636549851043);
    msg.setSource(44608U);
    msg.setSourceEntity(19U);
    msg.setDestination(56486U);
    msg.setDestinationEntity(52U);
    msg.x = 0.4431066195771035;
    msg.y = 0.2170287082327894;
    msg.z = 0.5314734922988756;
    msg.k = 0.790809907040813;
    msg.m = 0.5070707604867415;
    msg.n = 0.40819619833287846;
    msg.flags = 77U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.8925323769828196);
    msg.setSource(46762U);
    msg.setSourceEntity(68U);
    msg.setDestination(11212U);
    msg.setDestinationEntity(55U);
    msg.x = 0.19999004639234064;
    msg.y = 0.6627643888860939;
    msg.z = 0.0978060311700949;
    msg.k = 0.19280678947793584;
    msg.m = 0.5996463752035639;
    msg.n = 0.9286315310072197;
    msg.flags = 129U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.26408378348479866);
    msg.setSource(47076U);
    msg.setSourceEntity(247U);
    msg.setDestination(35783U);
    msg.setDestinationEntity(236U);
    msg.x = 0.02582773907960334;
    msg.y = 0.8165521333145622;
    msg.z = 0.8288544609674617;
    msg.k = 0.7715127520739162;
    msg.m = 0.1996668145072974;
    msg.n = 0.03932287612051388;
    msg.flags = 179U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.02987882434020983);
    msg.setSource(14408U);
    msg.setSourceEntity(93U);
    msg.setDestination(17155U);
    msg.setDestinationEntity(145U);
    msg.value = 0.48427856758768983;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.08606553060485234);
    msg.setSource(45997U);
    msg.setSourceEntity(129U);
    msg.setDestination(57834U);
    msg.setDestinationEntity(42U);
    msg.value = 0.010556508442802204;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.2506360649193967);
    msg.setSource(44368U);
    msg.setSourceEntity(3U);
    msg.setDestination(9721U);
    msg.setDestinationEntity(79U);
    msg.value = 0.30207007499374083;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.8967510209009165);
    msg.setSource(39525U);
    msg.setSourceEntity(127U);
    msg.setDestination(4759U);
    msg.setDestinationEntity(190U);
    msg.u = 0.6872234356434612;
    msg.v = 0.510505929445636;
    msg.w = 0.9178080954434629;
    msg.p = 0.10449278598283906;
    msg.q = 0.2594793982729171;
    msg.r = 0.01219341589937828;
    msg.flags = 14U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.9991057084973876);
    msg.setSource(60018U);
    msg.setSourceEntity(251U);
    msg.setDestination(50901U);
    msg.setDestinationEntity(210U);
    msg.u = 0.0824464616888736;
    msg.v = 0.21291732452823842;
    msg.w = 0.3851418041249014;
    msg.p = 0.6479715033882589;
    msg.q = 0.22793133123000653;
    msg.r = 0.5747909664846902;
    msg.flags = 22U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.7987435287491006);
    msg.setSource(11130U);
    msg.setSourceEntity(39U);
    msg.setDestination(6128U);
    msg.setDestinationEntity(206U);
    msg.u = 0.07787506715851844;
    msg.v = 0.31756982310854454;
    msg.w = 0.04878143389388212;
    msg.p = 0.432124199018755;
    msg.q = 0.5882102763766278;
    msg.r = 0.09592441500032411;
    msg.flags = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.8438214632146531);
    msg.setSource(25364U);
    msg.setSourceEntity(128U);
    msg.setDestination(12470U);
    msg.setDestinationEntity(212U);
    msg.path_ref = 4056013328U;
    msg.start_lat = 0.7896936724457715;
    msg.start_lon = 0.9733814154335179;
    msg.start_z = 0.37629049279707705;
    msg.start_z_units = 181U;
    msg.end_lat = 0.6989808952138447;
    msg.end_lon = 0.035354865597398866;
    msg.end_z = 0.23542389268734254;
    msg.end_z_units = 132U;
    msg.lradius = 0.559984749865834;
    msg.flags = 242U;
    msg.x = 0.6746168872882077;
    msg.y = 0.5960387761843889;
    msg.z = 0.7884956966936141;
    msg.vx = 0.39571327517425137;
    msg.vy = 0.07200839227414446;
    msg.vz = 0.7552104845360452;
    msg.course_error = 0.36740930509644654;
    msg.eta = 13009U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.2394776818072164);
    msg.setSource(42263U);
    msg.setSourceEntity(163U);
    msg.setDestination(31999U);
    msg.setDestinationEntity(94U);
    msg.path_ref = 3152057591U;
    msg.start_lat = 0.829791804940856;
    msg.start_lon = 0.5137717053580059;
    msg.start_z = 0.6992724238223857;
    msg.start_z_units = 151U;
    msg.end_lat = 0.10478454431376127;
    msg.end_lon = 0.44963939598832503;
    msg.end_z = 0.8127658670601993;
    msg.end_z_units = 76U;
    msg.lradius = 0.4971069075463814;
    msg.flags = 245U;
    msg.x = 0.5025800830332865;
    msg.y = 0.010850786847732996;
    msg.z = 0.776129106206364;
    msg.vx = 0.7116120115970831;
    msg.vy = 0.16007962127178677;
    msg.vz = 0.3004984142707353;
    msg.course_error = 0.4766176813709664;
    msg.eta = 39791U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.6786063238257608);
    msg.setSource(21082U);
    msg.setSourceEntity(72U);
    msg.setDestination(44526U);
    msg.setDestinationEntity(223U);
    msg.path_ref = 72285931U;
    msg.start_lat = 0.020858350498477285;
    msg.start_lon = 0.7710171437565013;
    msg.start_z = 0.033595246051404404;
    msg.start_z_units = 117U;
    msg.end_lat = 0.8838558086005303;
    msg.end_lon = 0.2783097355451104;
    msg.end_z = 0.48243006226412344;
    msg.end_z_units = 51U;
    msg.lradius = 0.06603073934830184;
    msg.flags = 237U;
    msg.x = 0.8815615657437311;
    msg.y = 0.33531809310398686;
    msg.z = 0.6974112108318142;
    msg.vx = 0.2899676923039447;
    msg.vy = 0.17069854577968424;
    msg.vz = 0.7300977846394506;
    msg.course_error = 0.49963318813544055;
    msg.eta = 31257U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.34050461357285244);
    msg.setSource(6790U);
    msg.setSourceEntity(57U);
    msg.setDestination(44341U);
    msg.setDestinationEntity(170U);
    msg.k = 0.781259100491582;
    msg.m = 0.13158896470172543;
    msg.n = 0.6522009824055476;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.5757508162442819);
    msg.setSource(34525U);
    msg.setSourceEntity(3U);
    msg.setDestination(40344U);
    msg.setDestinationEntity(163U);
    msg.k = 0.6248056136946946;
    msg.m = 0.22153034654571213;
    msg.n = 0.5865753777477017;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.0945696417653693);
    msg.setSource(24775U);
    msg.setSourceEntity(190U);
    msg.setDestination(21109U);
    msg.setDestinationEntity(150U);
    msg.k = 0.29815945519182596;
    msg.m = 0.13151816809254302;
    msg.n = 0.7809360298103432;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.7660725418094774);
    msg.setSource(17412U);
    msg.setSourceEntity(225U);
    msg.setDestination(46394U);
    msg.setDestinationEntity(193U);
    msg.p = 0.31530378321484875;
    msg.i = 0.5192592241339548;
    msg.d = 0.4704318773797359;
    msg.a = 0.513316789222244;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.28663100662912777);
    msg.setSource(4483U);
    msg.setSourceEntity(199U);
    msg.setDestination(709U);
    msg.setDestinationEntity(30U);
    msg.p = 0.206518117756331;
    msg.i = 0.2993429413832789;
    msg.d = 0.0018496721107950087;
    msg.a = 0.4671459474270906;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.7199767715393054);
    msg.setSource(51791U);
    msg.setSourceEntity(146U);
    msg.setDestination(51327U);
    msg.setDestinationEntity(124U);
    msg.p = 0.4687212363963007;
    msg.i = 0.11430225250244286;
    msg.d = 0.15083103427078337;
    msg.a = 0.6097507443310213;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.8052254250479142);
    msg.setSource(38121U);
    msg.setSourceEntity(24U);
    msg.setDestination(16373U);
    msg.setDestinationEntity(212U);
    msg.op = 197U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.17840795775878338);
    msg.setSource(33396U);
    msg.setSourceEntity(240U);
    msg.setDestination(51440U);
    msg.setDestinationEntity(186U);
    msg.op = 251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.0755250118090598);
    msg.setSource(46479U);
    msg.setSourceEntity(234U);
    msg.setDestination(16463U);
    msg.setDestinationEntity(104U);
    msg.op = 122U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.12777132386216583);
    msg.setSource(4330U);
    msg.setSourceEntity(134U);
    msg.setDestination(22035U);
    msg.setDestinationEntity(223U);
    msg.x = 0.9045228964950525;
    msg.y = 0.9315179668989735;
    msg.z = 0.8681377941154552;
    msg.vx = 0.3342649576761447;
    msg.vy = 0.10774718867314259;
    msg.vz = 0.4511247215180374;
    msg.ax = 0.03049585953390288;
    msg.ay = 0.12523676769072067;
    msg.az = 0.3839788890291843;
    msg.flags = 18860U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.055279263178888094);
    msg.setSource(59874U);
    msg.setSourceEntity(118U);
    msg.setDestination(33550U);
    msg.setDestinationEntity(133U);
    msg.x = 0.4615320435706568;
    msg.y = 0.48202054252390614;
    msg.z = 0.9082949763722723;
    msg.vx = 0.6846319155323864;
    msg.vy = 0.42959441094424233;
    msg.vz = 0.3659802611270476;
    msg.ax = 0.73580778743852;
    msg.ay = 0.8544464346844995;
    msg.az = 0.023339033243895968;
    msg.flags = 33427U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.8755813731011431);
    msg.setSource(15365U);
    msg.setSourceEntity(133U);
    msg.setDestination(44198U);
    msg.setDestinationEntity(227U);
    msg.x = 0.04387113547591337;
    msg.y = 0.7159725148842262;
    msg.z = 0.7500893461533387;
    msg.vx = 0.5361665129858816;
    msg.vy = 0.768799633101985;
    msg.vz = 0.12447674286571697;
    msg.ax = 0.43801982438747755;
    msg.ay = 0.09374495041570907;
    msg.az = 0.6486235341284309;
    msg.flags = 30010U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.9578215611483466);
    msg.setSource(54080U);
    msg.setSourceEntity(217U);
    msg.setDestination(42700U);
    msg.setDestinationEntity(49U);
    msg.value = 0.46770544459172114;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.36061288158696825);
    msg.setSource(35904U);
    msg.setSourceEntity(148U);
    msg.setDestination(7407U);
    msg.setDestinationEntity(163U);
    msg.value = 0.48926180133279107;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.011528047849055478);
    msg.setSource(13710U);
    msg.setSourceEntity(177U);
    msg.setDestination(23723U);
    msg.setDestinationEntity(5U);
    msg.value = 0.4917753477910528;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.05721635860942309);
    msg.setSource(51499U);
    msg.setSourceEntity(37U);
    msg.setDestination(10014U);
    msg.setDestinationEntity(183U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 3496701277U;
    tmp_msg_0.start_lat = 0.9309674103692066;
    tmp_msg_0.start_lon = 0.8997205983692422;
    tmp_msg_0.start_z = 0.6437275336891968;
    tmp_msg_0.start_z_units = 30U;
    tmp_msg_0.end_lat = 0.47022341373849985;
    tmp_msg_0.end_lon = 0.25759650612375284;
    tmp_msg_0.end_z = 0.39728570327422597;
    tmp_msg_0.end_z_units = 189U;
    tmp_msg_0.speed = 0.049337611628798794;
    tmp_msg_0.speed_units = 139U;
    tmp_msg_0.lradius = 0.2054613856927361;
    tmp_msg_0.flags = 132U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.7323000650372554);
    msg.setSource(19509U);
    msg.setSourceEntity(100U);
    msg.setDestination(58632U);
    msg.setDestinationEntity(2U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2299186787U;
    tmp_msg_0.start_lat = 0.6276835212400766;
    tmp_msg_0.start_lon = 0.02399659973877344;
    tmp_msg_0.start_z = 0.9751147821120558;
    tmp_msg_0.start_z_units = 99U;
    tmp_msg_0.end_lat = 0.6079158506297985;
    tmp_msg_0.end_lon = 0.001170542561687582;
    tmp_msg_0.end_z = 0.7258332362207222;
    tmp_msg_0.end_z_units = 141U;
    tmp_msg_0.speed = 0.9801432899422726;
    tmp_msg_0.speed_units = 70U;
    tmp_msg_0.lradius = 0.25915626638193745;
    tmp_msg_0.flags = 167U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.5685160842019079);
    msg.setSource(53113U);
    msg.setSourceEntity(26U);
    msg.setDestination(37841U);
    msg.setDestinationEntity(212U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2044450059U;
    tmp_msg_0.start_lat = 0.05014521183388554;
    tmp_msg_0.start_lon = 0.25218093608931247;
    tmp_msg_0.start_z = 0.38597028485745355;
    tmp_msg_0.start_z_units = 22U;
    tmp_msg_0.end_lat = 0.5466470209483254;
    tmp_msg_0.end_lon = 0.44074957632003986;
    tmp_msg_0.end_z = 0.5317485435512023;
    tmp_msg_0.end_z_units = 1U;
    tmp_msg_0.speed = 0.4345253262360078;
    tmp_msg_0.speed_units = 70U;
    tmp_msg_0.lradius = 0.7525182074185452;
    tmp_msg_0.flags = 249U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.12119731162040537);
    msg.setSource(26997U);
    msg.setSourceEntity(246U);
    msg.setDestination(6495U);
    msg.setDestinationEntity(184U);
    msg.timeout = 2761U;
    msg.lat = 0.3089908444540064;
    msg.lon = 0.667700033553686;
    msg.z = 0.3240110109906613;
    msg.z_units = 223U;
    msg.speed = 0.053303821975593135;
    msg.speed_units = 41U;
    msg.roll = 0.1498679092394245;
    msg.pitch = 0.7470793131410866;
    msg.yaw = 0.18724509933975897;
    msg.custom.assign("PMUBQCXERIYVKSGDJKXRKMIMQZHMNDBMCYWQERHFHTSATNEKIWHGLFLYDIYOPRETBVFIAPULNKJUBLEZAMDXYVZSOWUDHJMEFDWFMRCPQRIIQAMCXPSVWECBXILLHLQVJSKEHOZJWFXHGFOJTLHQXAWIINSQOZYOGMYCUGNVKFQJGCBOTBGXPDYBWZQRKPKZZUTVSRVAKTALJLWXWSE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.4518405947249108);
    msg.setSource(33820U);
    msg.setSourceEntity(97U);
    msg.setDestination(13692U);
    msg.setDestinationEntity(220U);
    msg.timeout = 12932U;
    msg.lat = 0.5533852441786361;
    msg.lon = 0.5912177093980934;
    msg.z = 0.17123346377470916;
    msg.z_units = 196U;
    msg.speed = 0.09240923619877783;
    msg.speed_units = 1U;
    msg.roll = 0.02753457689208949;
    msg.pitch = 0.404262950910081;
    msg.yaw = 0.80825228669941;
    msg.custom.assign("ZAIUUZGACMONXSWCNBTPZDZUEESBEENKTZLYOJKDJGMNZEQXTUEXCYLNWLPIIVLHDFQQGKFSWRFKGYVNEBRHXVXRDKMLLCXILPTJIVRHDQKCRPQBODXJSWFBBSINCSPGZWPMMVFUWHXDJGTHPUDQMHOEKAWFPNMJVLBMZONQCUHFQJSGLZTWARTOQBCCTDRUPOEORCHLITIOVQYYJGHASAIAJYFVZYWXVMKMYJE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.02771501388763764);
    msg.setSource(51016U);
    msg.setSourceEntity(164U);
    msg.setDestination(48229U);
    msg.setDestinationEntity(74U);
    msg.timeout = 13134U;
    msg.lat = 0.07718900166111242;
    msg.lon = 0.9520707844176697;
    msg.z = 0.32890192473165614;
    msg.z_units = 184U;
    msg.speed = 0.14566370463471912;
    msg.speed_units = 242U;
    msg.roll = 0.8174408133117326;
    msg.pitch = 0.9842937468094964;
    msg.yaw = 0.925019603508705;
    msg.custom.assign("EFXHWIKPDRLXGCWPMVSVGDDNSBFGQBXSBKGKYXAMBQMGFKSWYSCRVMCIRMRMHTAZYAOUT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.9573162951177367);
    msg.setSource(37682U);
    msg.setSourceEntity(143U);
    msg.setDestination(58481U);
    msg.setDestinationEntity(197U);
    msg.timeout = 24384U;
    msg.lat = 0.6482872698437973;
    msg.lon = 0.08464681624945647;
    msg.z = 0.3833678411574225;
    msg.z_units = 24U;
    msg.speed = 0.40268559055186126;
    msg.speed_units = 86U;
    msg.duration = 18753U;
    msg.radius = 0.9084712449052931;
    msg.flags = 195U;
    msg.custom.assign("NRUESGUTKPYUHIJDQXJYNDSIJBGGTGCFMZUNKFLEOOTGQIYJARCDJICPHHSYMKROTTMIDZBLZCQJNMCHIZCQJNWUQBAWNQWOEQMQRYRXROVMSOVLSLTEXKDWYDHESGLAPAMQETKCODARPXCSPCDPGYTWGZFINSBVGVHMUHXWZBACOBFPEUDL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.6891020443795554);
    msg.setSource(51049U);
    msg.setSourceEntity(15U);
    msg.setDestination(26466U);
    msg.setDestinationEntity(221U);
    msg.timeout = 21760U;
    msg.lat = 0.5810325075090164;
    msg.lon = 0.321526126398589;
    msg.z = 0.7900326349919548;
    msg.z_units = 81U;
    msg.speed = 0.7579009058407872;
    msg.speed_units = 217U;
    msg.duration = 10276U;
    msg.radius = 0.1517861671027948;
    msg.flags = 50U;
    msg.custom.assign("EANTCAFVCMEICPBJNLKEYYGFNZUOMFLNHOXIVODTHFXBG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.3823434646176076);
    msg.setSource(49349U);
    msg.setSourceEntity(233U);
    msg.setDestination(34627U);
    msg.setDestinationEntity(227U);
    msg.timeout = 16334U;
    msg.lat = 0.40639378080250643;
    msg.lon = 0.38272088571199014;
    msg.z = 0.17105223230831257;
    msg.z_units = 100U;
    msg.speed = 0.16632162583051147;
    msg.speed_units = 75U;
    msg.duration = 58528U;
    msg.radius = 0.2061617601439495;
    msg.flags = 127U;
    msg.custom.assign("ZATZRKRGWITMKXEZRNOPLEITLAGEGDPZGWPROXNNSVFRYSBKQPIUPFWVZMJFNCR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.5961326137114205);
    msg.setSource(25373U);
    msg.setSourceEntity(63U);
    msg.setDestination(45201U);
    msg.setDestinationEntity(57U);
    msg.custom.assign("PMDEYVROFISQLIHWHQSRGATTVHNF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.8441564299934183);
    msg.setSource(38206U);
    msg.setSourceEntity(147U);
    msg.setDestination(44774U);
    msg.setDestinationEntity(148U);
    msg.custom.assign("MJUUFYNXAMROLYACNLHTIDSDTRHMMHOVECZKPVREVDEGPBLDCFTGFZGKXUAUXFGOPSMTRNLUAWGSGCVNHPDFQFLXBDIZBLVAUEJPDWHSXOQPTYZWPZNJTJRREKKMQDTKTFZYRJAKSGDYNYNCIRQSULMJXAYJSQBMXWZEBLGBEWMXHUCFYHCWREFIAJCNHZAXFIIJYIBJQBDCOBVEWKUQNONZIOSUWQLZXPVSKTRTHOVALW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.6013277627287659);
    msg.setSource(40631U);
    msg.setSourceEntity(129U);
    msg.setDestination(43748U);
    msg.setDestinationEntity(23U);
    msg.custom.assign("YAKVLIFNRPVWEQVUHNJWWYOSDSOTRFHVQAGIKTYNYCQMEJTXESIWPKPQZMCJRIFHUGXWBBKAGBGCPHWASSAPVRGXPLMIZXYQXECTCZWJRHKBOREWKMUFZQZQPWXSOLDUKJFCZNBJKSEIXNQHZGGODTDDLIFYEUYMTATBEAJDHUPHXRVDNPVLMRIFLLSWQVKXMUBNYDBSGNCMYJHJRMTZONQEZLVOEZOISGJPUCF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.15605623035707483);
    msg.setSource(17999U);
    msg.setSourceEntity(239U);
    msg.setDestination(11425U);
    msg.setDestinationEntity(148U);
    msg.timeout = 49530U;
    msg.lat = 0.571848881922403;
    msg.lon = 0.15891203862693004;
    msg.z = 0.8678442338577398;
    msg.z_units = 47U;
    msg.duration = 18319U;
    msg.speed = 0.23183903919185755;
    msg.speed_units = 90U;
    msg.type = 206U;
    msg.radius = 0.9256073143942372;
    msg.length = 0.6318743052836956;
    msg.bearing = 0.5672919085761475;
    msg.direction = 7U;
    msg.custom.assign("NAXUMBOPFHFORDJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.7889993533204003);
    msg.setSource(31537U);
    msg.setSourceEntity(55U);
    msg.setDestination(55648U);
    msg.setDestinationEntity(89U);
    msg.timeout = 30348U;
    msg.lat = 0.6013252191913657;
    msg.lon = 0.15227308063961875;
    msg.z = 0.4596385668188038;
    msg.z_units = 134U;
    msg.duration = 65392U;
    msg.speed = 0.5546121709915426;
    msg.speed_units = 233U;
    msg.type = 19U;
    msg.radius = 0.35648131390345594;
    msg.length = 0.390198315542186;
    msg.bearing = 0.031075458087870045;
    msg.direction = 204U;
    msg.custom.assign("AMMEJQRKTZJJDMHBRBIOTZRTTLNXVACKIDKXDKRFTVLWKZKZPNWZGEJQWUCPAYNMVXSYHGMMZSLZSBDHGGCGIBJIREUOFSHHYOQURZWUPOTMTPQRHYEONXHDAIWFXCYGVUXEFEUJFTFROGSBCIIBGQNBQJZCLPCMOWFQAXUZHBNIKJRDQUURYPVMDIAFYYAYQPJLSXCWVOEWTUDKDIWSAXTAXPSLDWPCNFMSBKLCHSKE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.5173002844809206);
    msg.setSource(43980U);
    msg.setSourceEntity(141U);
    msg.setDestination(44588U);
    msg.setDestinationEntity(10U);
    msg.timeout = 34181U;
    msg.lat = 0.31288434553541755;
    msg.lon = 0.5283445314413673;
    msg.z = 0.48248971857644085;
    msg.z_units = 71U;
    msg.duration = 11105U;
    msg.speed = 0.4038121607559366;
    msg.speed_units = 63U;
    msg.type = 82U;
    msg.radius = 0.2339218030768948;
    msg.length = 0.940912067365842;
    msg.bearing = 0.6466809082719012;
    msg.direction = 230U;
    msg.custom.assign("DKRWACDUYOANYGQTYITQETJPMBWVZXGLACOXJLWUUKQXPOINYPGITKQACPUXRMJDHTTELNOKUBLAVMEZGFIBMGMNTTFBJG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.01640228256091092);
    msg.setSource(20339U);
    msg.setSourceEntity(105U);
    msg.setDestination(50219U);
    msg.setDestinationEntity(243U);
    msg.duration = 47888U;
    msg.custom.assign("SCQLXSFCTLTTWFNIDRGIBUULIKRHBGGBXHYRIEODKLKUEUZUCLYFWZPZFBFBPZXDNHHVGQZJD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.6809361431058047);
    msg.setSource(6053U);
    msg.setSourceEntity(175U);
    msg.setDestination(27601U);
    msg.setDestinationEntity(96U);
    msg.duration = 7591U;
    msg.custom.assign("RTEFLWPCMHMKREICXGCSLUDPHEQFRUTBZYDWYDKDFNCNXNEWKSAASOPHEGTQMTUWVTCRYVIJOIFMBAXYVBSEBXHVBKVSONJXGJVYLGWEVKZERU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.49354772710501094);
    msg.setSource(1994U);
    msg.setSourceEntity(128U);
    msg.setDestination(58601U);
    msg.setDestinationEntity(251U);
    msg.duration = 49471U;
    msg.custom.assign("NNDWIHGXARGAJLUVQOTJOWKHLNMSIRTZGCJPMPGPLYDQUUETWQOSJPWUENZLHAIATMBMQOFRZBUGKYIBBWUHSYSITRVOKHPSHCFXCQKIDXYUQPAKZVZWCQEXWKPNRXQFXRILYEIKFZWOSCDDSYYVKGNFTAJLHDVFSDNYQBBMGGYEZJOCCNZVSWRANDKTAGJEPDPVERMTXGEMMMBJVHJIPHLAYKDLMXXXCBCOOTZVFUFHARJLREILNUVBZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.6867054906022796);
    msg.setSource(49738U);
    msg.setSourceEntity(59U);
    msg.setDestination(18720U);
    msg.setDestinationEntity(35U);
    IMC::DesiredThrottle tmp_msg_0;
    tmp_msg_0.value = 0.08579346536998311;
    msg.control.set(tmp_msg_0);
    msg.duration = 36341U;
    msg.custom.assign("EGRSQTTJMSHGTNMXTYVTVHLTWIFSFGNEPNFADQQCBKPCJOWBSBFDGDYDYKPKIGTXAVFMHFXGMDENIBNXHZKTEJCEWEQOYDWZNRU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.59590167528461);
    msg.setSource(31358U);
    msg.setSourceEntity(3U);
    msg.setDestination(19705U);
    msg.setDestinationEntity(41U);
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.9493831315486381;
    tmp_msg_0.speed_units = 178U;
    msg.control.set(tmp_msg_0);
    msg.duration = 39998U;
    msg.custom.assign("RFRYNJYVTHCIQWGVGSSZWIQNKQPBOMZQTNLBLYOYUGAJGFYXBZRJBMLDPWAGBFOQOAJLOVVNVJTDSBBXKZEZFUR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.27056123722057557);
    msg.setSource(14785U);
    msg.setSourceEntity(153U);
    msg.setDestination(52196U);
    msg.setDestinationEntity(150U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 4294402877U;
    tmp_msg_0.start_lat = 0.23890068179526414;
    tmp_msg_0.start_lon = 0.7417635924156016;
    tmp_msg_0.start_z = 0.9654945799975878;
    tmp_msg_0.start_z_units = 118U;
    tmp_msg_0.end_lat = 0.004637257100322367;
    tmp_msg_0.end_lon = 0.7149368258683929;
    tmp_msg_0.end_z = 0.8547143505886131;
    tmp_msg_0.end_z_units = 54U;
    tmp_msg_0.speed = 0.5630141031820975;
    tmp_msg_0.speed_units = 94U;
    tmp_msg_0.lradius = 0.25858759421002375;
    tmp_msg_0.flags = 237U;
    msg.control.set(tmp_msg_0);
    msg.duration = 8193U;
    msg.custom.assign("IHTCIXFWFWVOZWQFUSIYGODEWCURRBSCVMGXXBQADZTJNQDOLWRCHGHKRSLJJGTIIENEFJKDKFLODURKOTPSLMMZCVYCYATDMLHZETHVAYOYLUERTSBNDQXBTGIIUCAEIALAYMSZHPGZHOYLNXBRKAFKUUGCNBTKZHZAGRVVSOLBQJLPIFSWPBCEPQRDVJXVXDGMXEPWBQIJOJE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.45715278655644764);
    msg.setSource(52756U);
    msg.setSourceEntity(50U);
    msg.setDestination(22974U);
    msg.setDestinationEntity(96U);
    msg.timeout = 61553U;
    msg.lat = 0.17674658678984523;
    msg.lon = 0.35153424265361044;
    msg.z = 0.7763415316006991;
    msg.z_units = 26U;
    msg.speed = 0.3026050600759117;
    msg.speed_units = 131U;
    msg.bearing = 0.9828462524007249;
    msg.cross_angle = 0.8864141215229514;
    msg.width = 0.667289672222705;
    msg.length = 0.8711026722430928;
    msg.hstep = 0.5712945163593405;
    msg.coff = 155U;
    msg.alternation = 19U;
    msg.flags = 157U;
    msg.custom.assign("XNVIZRKFCTKISFUCVJQCPEIETUZOUZPQBQTVIAVVROQJLMDUZYFPIZMEHSBDRXPWOFYZGHOCQWTYDLKTMSUQMDWSEBBWLNSDKHKXCAWBLPNFNBCKVNWRYKUZIXXAVYJOMYSIYUFEHOKLDWRDBXELOAMIFESYVAHGPMJYXMNZRTGBCPXXRURHSSJIVXUQPMHRGJKETBNPGVNLGAOGHOMYAAQTFWBWWZQJL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.8549204546125655);
    msg.setSource(25197U);
    msg.setSourceEntity(153U);
    msg.setDestination(62626U);
    msg.setDestinationEntity(156U);
    msg.timeout = 60883U;
    msg.lat = 0.5417839607081801;
    msg.lon = 0.24076361808420377;
    msg.z = 0.7244653029089115;
    msg.z_units = 163U;
    msg.speed = 0.524054664134594;
    msg.speed_units = 124U;
    msg.bearing = 0.7535894801093941;
    msg.cross_angle = 0.7749601807854132;
    msg.width = 0.6646111935619334;
    msg.length = 0.8746558472953996;
    msg.hstep = 0.052607104536525506;
    msg.coff = 166U;
    msg.alternation = 252U;
    msg.flags = 1U;
    msg.custom.assign("SHWJGTKEQQAJCEOSKUABMZNQFCHYMSKLFRBADDLWBZLYVLMMQSHHJOPEHMOGVWTVAPLHUIYUPNTZUQFKICBNSWQDGBSCTRBYECAJWJZZAGNKIDIPPYWXLMBBGHORKMBXY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.06469726890870331);
    msg.setSource(45006U);
    msg.setSourceEntity(165U);
    msg.setDestination(28738U);
    msg.setDestinationEntity(238U);
    msg.timeout = 41656U;
    msg.lat = 0.23727558301892304;
    msg.lon = 0.5413690004250074;
    msg.z = 0.6926580818542933;
    msg.z_units = 148U;
    msg.speed = 0.661687194231866;
    msg.speed_units = 19U;
    msg.bearing = 0.5226312481562785;
    msg.cross_angle = 0.9206607158953707;
    msg.width = 0.636053253168379;
    msg.length = 0.49586067396892575;
    msg.hstep = 0.815446031443648;
    msg.coff = 189U;
    msg.alternation = 108U;
    msg.flags = 166U;
    msg.custom.assign("LKGTVHQWDIQMAXBYGUMJAEPEPISFDOYSLYFQJYHBAGIKQBPJWSDLTODHVJQQRMZWVFURSCPHATQLOSOKFTIGMYAGAEFZEABQZGVNQCNEZRKPKZCKMSONFKRNLUKUENAXXXLLYMWVDUIUYGSIXBEWORNLGWTNSXJYRBQDZTLZMTOMUKHDFJNKYJICIJBFZFXRUWABJOSPVITPWVPMBXWDECHAVWROCVLTMSZCPDCNXCYFHX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.6752235846828364);
    msg.setSource(37656U);
    msg.setSourceEntity(91U);
    msg.setDestination(56060U);
    msg.setDestinationEntity(53U);
    msg.timeout = 5249U;
    msg.lat = 0.861917225652567;
    msg.lon = 0.920359433125979;
    msg.z = 0.9985777136865456;
    msg.z_units = 17U;
    msg.speed = 0.9951040552309236;
    msg.speed_units = 100U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.017700742918424828;
    tmp_msg_0.y = 0.29729236201266507;
    tmp_msg_0.z = 0.45384097635345;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("FZBVICVSAQLRNROOSJWMJLBSFSKHGMFDKOPFVYQZWCCYDRGUQIQJADPWTYONAIZRQFEPBKXTYGWXGVJYVRZHBMISLHQCYTBOLMEZBGBGYSLHAOHTDD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.6819478254170136);
    msg.setSource(35006U);
    msg.setSourceEntity(13U);
    msg.setDestination(37179U);
    msg.setDestinationEntity(150U);
    msg.timeout = 5428U;
    msg.lat = 0.5037498582836257;
    msg.lon = 0.49468747941306035;
    msg.z = 0.9735345614971209;
    msg.z_units = 41U;
    msg.speed = 0.032679576102544794;
    msg.speed_units = 228U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.3503838405084341;
    tmp_msg_0.y = 0.3761843236068507;
    tmp_msg_0.z = 0.47433375505174236;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("KIVIYHSRXBOGAMNQBVTSQPJLQVKPVLYQJLFWXQCNYSB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.13587844962672868);
    msg.setSource(44061U);
    msg.setSourceEntity(230U);
    msg.setDestination(31659U);
    msg.setDestinationEntity(157U);
    msg.timeout = 59538U;
    msg.lat = 0.9691864224889316;
    msg.lon = 0.4803820096633903;
    msg.z = 0.029223229354204405;
    msg.z_units = 208U;
    msg.speed = 0.4394425169592099;
    msg.speed_units = 96U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.6616686465181786;
    tmp_msg_0.y = 0.8821036785835868;
    tmp_msg_0.z = 0.6738034048416871;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("KJKSUIMTKBUOWOGXFXMWXNUMIZRECIIXPUSXWNWPDWHBZSQYEWPLGNCKQVEPZWHBSHEUVPTNGVSFVJSGEZHVZVBAMYYFTGAYBVLRKXBJPSCYMCCDZQQELHDOITDIRL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.5091162554038514);
    msg.setSource(9720U);
    msg.setSourceEntity(242U);
    msg.setDestination(64342U);
    msg.setDestinationEntity(78U);
    msg.x = 0.3588043248460908;
    msg.y = 0.35038330289972985;
    msg.z = 0.38454277680244986;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.3261474877321081);
    msg.setSource(57404U);
    msg.setSourceEntity(197U);
    msg.setDestination(16188U);
    msg.setDestinationEntity(187U);
    msg.x = 0.8660448972218008;
    msg.y = 0.8739066014993122;
    msg.z = 0.7664752632331285;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.17264824319779248);
    msg.setSource(55074U);
    msg.setSourceEntity(106U);
    msg.setDestination(53305U);
    msg.setDestinationEntity(24U);
    msg.x = 0.0767563433629811;
    msg.y = 0.5810964543757395;
    msg.z = 0.25478397336193626;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.9130759476936904);
    msg.setSource(34686U);
    msg.setSourceEntity(102U);
    msg.setDestination(49871U);
    msg.setDestinationEntity(179U);
    msg.timeout = 52022U;
    msg.lat = 0.11067389118407167;
    msg.lon = 0.46986940777556674;
    msg.z = 0.7365387548031725;
    msg.z_units = 177U;
    msg.amplitude = 0.5604064410372912;
    msg.pitch = 0.01630957641242381;
    msg.speed = 0.8917204360930032;
    msg.speed_units = 0U;
    msg.custom.assign("NRZLOQQLMGISJROOFGVPFIYPJSSDWSUQXXRPLJLXFZSVGKOLVKEPEVAJSXYTCSBOFTDCIRUPWNYODUMCKGWWRHFMXPQEVLCMHDIGWOQKDUADHUYVYRTCNLWYHENCDVFYUHKGNMTNGTNQJBURYZNREITJAHEUVBYTHNEIOPHZSLZBRZGWJGX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.06063625754282587);
    msg.setSource(2814U);
    msg.setSourceEntity(228U);
    msg.setDestination(20517U);
    msg.setDestinationEntity(41U);
    msg.timeout = 53788U;
    msg.lat = 0.989499181337692;
    msg.lon = 0.18991957367646817;
    msg.z = 0.31643410608850475;
    msg.z_units = 102U;
    msg.amplitude = 0.2541597770544687;
    msg.pitch = 0.4415225418764477;
    msg.speed = 0.6626603148668019;
    msg.speed_units = 95U;
    msg.custom.assign("UYOJIKSRTTTMOMIBNYWPDQZKGOTAAPFJFKBYINHEPXGCEMEFYCZFRSWDMLBXNBWPPBPGVAXW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.9570897936799664);
    msg.setSource(18082U);
    msg.setSourceEntity(81U);
    msg.setDestination(9361U);
    msg.setDestinationEntity(75U);
    msg.timeout = 43609U;
    msg.lat = 0.20922642779240885;
    msg.lon = 0.08292260959914677;
    msg.z = 0.8823102075513769;
    msg.z_units = 249U;
    msg.amplitude = 0.8205320478838964;
    msg.pitch = 0.02394891321486492;
    msg.speed = 0.9715633684822901;
    msg.speed_units = 227U;
    msg.custom.assign("SKJVCCDOWKLYKXIGWPPRMYUFSKWISGNHXUKASIHANXOPQPNGTFQGDSOBCRXLXEARICZWADVHIZBCOQLBREPBOXVWLWETVAGYGTTJHKZYCDMWXBVKIJRZUNDNOYWBRLSANRHQUZMDJRXMKHBGKBBFNMQO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.9064972433667492);
    msg.setSource(14023U);
    msg.setSourceEntity(16U);
    msg.setDestination(8088U);
    msg.setDestinationEntity(15U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.8571324935246138);
    msg.setSource(61509U);
    msg.setSourceEntity(46U);
    msg.setDestination(65051U);
    msg.setDestinationEntity(18U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.49501356195723933);
    msg.setSource(42986U);
    msg.setSourceEntity(188U);
    msg.setDestination(24962U);
    msg.setDestinationEntity(73U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.17401720057899095);
    msg.setSource(57949U);
    msg.setSourceEntity(203U);
    msg.setDestination(60840U);
    msg.setDestinationEntity(238U);
    msg.lat = 0.18663375448574449;
    msg.lon = 0.8878561913555904;
    msg.z = 0.5960936322475164;
    msg.z_units = 248U;
    msg.radius = 0.35225706988596095;
    msg.duration = 40123U;
    msg.speed = 0.8768770673011129;
    msg.speed_units = 250U;
    msg.custom.assign("EOUYFNVOLEMU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.25627868303801404);
    msg.setSource(31989U);
    msg.setSourceEntity(111U);
    msg.setDestination(20838U);
    msg.setDestinationEntity(89U);
    msg.lat = 0.24635813927907846;
    msg.lon = 0.7253388415256552;
    msg.z = 0.3167746074793232;
    msg.z_units = 166U;
    msg.radius = 0.8794104419757484;
    msg.duration = 1026U;
    msg.speed = 0.4723549202424374;
    msg.speed_units = 250U;
    msg.custom.assign("YENYNJDRUBJIVHYYFMFHXRIACJBYYBGLKNXDGPWTLTOODYQRHOVFZWLAOCZPZLAKXIFSELUQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.5983316830203077);
    msg.setSource(35306U);
    msg.setSourceEntity(238U);
    msg.setDestination(26960U);
    msg.setDestinationEntity(114U);
    msg.lat = 0.5259948056157828;
    msg.lon = 0.8908627873764609;
    msg.z = 0.9718820212615019;
    msg.z_units = 137U;
    msg.radius = 0.12404257296643384;
    msg.duration = 28311U;
    msg.speed = 0.6705286722970605;
    msg.speed_units = 41U;
    msg.custom.assign("CZGCVWOCOMZCXUIZESDTTOWXTHWULAKDUPFANKWKXAJUVJJNTXJLQYCIIGMMPWNLQBWMCFVQGDODMXCZIBPNXSVSERSVGELHCUZUHGPSDQOTQEAGVBJLLCBFJRORDLHPGFONFMMBAT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.3481052976481044);
    msg.setSource(52968U);
    msg.setSourceEntity(46U);
    msg.setDestination(45004U);
    msg.setDestinationEntity(85U);
    msg.timeout = 20095U;
    msg.flags = 244U;
    msg.lat = 0.29866636312302786;
    msg.lon = 0.6473082134415475;
    msg.start_z = 0.3574650651218346;
    msg.start_z_units = 0U;
    msg.end_z = 0.5189057039868717;
    msg.end_z_units = 3U;
    msg.radius = 0.2760015875635101;
    msg.speed = 0.1482204351920039;
    msg.speed_units = 62U;
    msg.custom.assign("MRUUXGUKBFRJOBISMUHWFHWPJEQJZLIMGJZHSFZIDHHZLIHDDPVEKTZOPLBCRIWTPEJQNXZUZWCKACYOMAHBAOGMEYCDNTRQXSIWYOOFGC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.23517144361310427);
    msg.setSource(16017U);
    msg.setSourceEntity(143U);
    msg.setDestination(53404U);
    msg.setDestinationEntity(102U);
    msg.timeout = 5133U;
    msg.flags = 89U;
    msg.lat = 0.13079853566100164;
    msg.lon = 0.24443416015063446;
    msg.start_z = 0.35439792483526555;
    msg.start_z_units = 149U;
    msg.end_z = 0.9889798544812303;
    msg.end_z_units = 134U;
    msg.radius = 0.8602297035412707;
    msg.speed = 0.8384963464084648;
    msg.speed_units = 89U;
    msg.custom.assign("OAJEADIOROKDLWOPAKMFYSSQKBZHOIEYKUYKZTJYUFWMSYXMBAICLNQFS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.01684773924479588);
    msg.setSource(65354U);
    msg.setSourceEntity(229U);
    msg.setDestination(13019U);
    msg.setDestinationEntity(101U);
    msg.timeout = 22435U;
    msg.flags = 248U;
    msg.lat = 0.33975442104713627;
    msg.lon = 0.07006147562919529;
    msg.start_z = 0.1615611891937514;
    msg.start_z_units = 154U;
    msg.end_z = 0.5333103084916584;
    msg.end_z_units = 182U;
    msg.radius = 0.72986249838919;
    msg.speed = 0.5176278572434381;
    msg.speed_units = 237U;
    msg.custom.assign("OSEAVMJFHAXMPUNJAKBCYFMFREXTRKZAKMUTPIKTUDVATHWRNLPSBYIGYVCRIQAMSLMSENBIOCOXLBGCDOZGDJYCOOVFVEKWLSGUYGZOJPEIPPEMZQJVMNRDERYQYDHSCVIIEHNTWSFXISYDHUHZALLNDLPURQFXBDWUJXVSCFZKDHOTXHRZECQVJWKDQUFMMIPUBE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.05126293004725413);
    msg.setSource(31603U);
    msg.setSourceEntity(58U);
    msg.setDestination(52058U);
    msg.setDestinationEntity(196U);
    msg.timeout = 18296U;
    msg.lat = 0.02143140511438335;
    msg.lon = 0.8505032338926961;
    msg.z = 0.5915625835656013;
    msg.z_units = 180U;
    msg.speed = 0.4097785747454489;
    msg.speed_units = 153U;
    msg.custom.assign("JOZDKORHGEANALXDQTZWAORRHSKJBOWQDQUKIABNVOOCTVVLTKSUBIYTTHUMQFPXYIZWNUNXRRAECTJJLCVHJSQAKDIJMLAZQBKVATXWMYLLYMZKQPJMESF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.5920355559659329);
    msg.setSource(41994U);
    msg.setSourceEntity(164U);
    msg.setDestination(13543U);
    msg.setDestinationEntity(85U);
    msg.timeout = 26225U;
    msg.lat = 0.26560308599584814;
    msg.lon = 0.23685700340570293;
    msg.z = 0.6572129083982117;
    msg.z_units = 63U;
    msg.speed = 0.45926961977034153;
    msg.speed_units = 2U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.27666364816146194;
    tmp_msg_0.y = 0.9860756011023182;
    tmp_msg_0.z = 0.3437308592317716;
    tmp_msg_0.t = 0.7626054451671821;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("RNYJQTWJASKROEVMILBMHJBNXCZIUAITOKIGSPMDBWMOEYFQLTAITCGQZTDBMSYDIBJHZEFNISPPCVRNGTRFLPMT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.8660351875915312);
    msg.setSource(27068U);
    msg.setSourceEntity(108U);
    msg.setDestination(4462U);
    msg.setDestinationEntity(109U);
    msg.timeout = 17612U;
    msg.lat = 0.6274040705391933;
    msg.lon = 0.1936816079134276;
    msg.z = 0.13387539924441694;
    msg.z_units = 210U;
    msg.speed = 0.8613667763415176;
    msg.speed_units = 10U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.312280953554644;
    tmp_msg_0.y = 0.19890684805857606;
    tmp_msg_0.z = 0.6303526405896676;
    tmp_msg_0.t = 0.8895809817807494;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("AETUVKBQQPVJHDVDOKHODPYRGOWMLBAPGWSQZGKTTMJCPJQYWMIHSPBZTCEJVZCBPLJSDQDSIFFOTOIDYUMCRGLQIREFNLPFMNBQCERIATPEXGOIDARCWJHLMXYWZFAEVSNYUFHHWBQIZOBCGVXUBKRXM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.2484575187752821);
    msg.setSource(61344U);
    msg.setSourceEntity(150U);
    msg.setDestination(42532U);
    msg.setDestinationEntity(216U);
    msg.x = 0.33836815111034413;
    msg.y = 0.9648419429823673;
    msg.z = 0.26737283028208525;
    msg.t = 0.9700666852456162;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.49072607395214496);
    msg.setSource(12679U);
    msg.setSourceEntity(241U);
    msg.setDestination(53763U);
    msg.setDestinationEntity(109U);
    msg.x = 0.9960758409502996;
    msg.y = 0.5080554444111672;
    msg.z = 0.7194908499558258;
    msg.t = 0.2498316625542163;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.5346733805556928);
    msg.setSource(64129U);
    msg.setSourceEntity(83U);
    msg.setDestination(1001U);
    msg.setDestinationEntity(154U);
    msg.x = 0.6417627070215501;
    msg.y = 0.14584708327663054;
    msg.z = 0.5374916654033198;
    msg.t = 0.43488192528790925;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.9392361877463237);
    msg.setSource(25929U);
    msg.setSourceEntity(163U);
    msg.setDestination(46192U);
    msg.setDestinationEntity(242U);
    msg.timeout = 56840U;
    msg.name.assign("OHXDPFGZURQGRXVADSLHTTVUFLMOGJRSQCRDKAZRMMSQZTCXIXJZMCQZDVXPTLDJBUNMIDCRUGIEAWSGQWIBBUVACDLIVKHGSACBSQENZTNLROUPLPAHTAKODRPBNGFNJIWSZYWIBUNILJKONFJNVXN");
    msg.custom.assign("JRXTMAXPLDJAODVOSBXRUQWCAKWYXNBSKEWOTAGAAQKIMVNMHCQHXYIYRUCKDBYMRGLZZDZDBSCGVKTUQJMZHEIFLPQBLCJAJWUFCWNJGOAQIQPFZSNILQSTQSLVOKKHIEPYXEJGXNWHYUNCMBE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.4093217772956168);
    msg.setSource(4855U);
    msg.setSourceEntity(140U);
    msg.setDestination(19232U);
    msg.setDestinationEntity(165U);
    msg.timeout = 53281U;
    msg.name.assign("VGUQLXCIKYPBGPVGDMAARMLJZKPNSXHXTJNMHUSPODKZDWAZDFWQQO");
    msg.custom.assign("NDKAFDBZXVMBWAWIKKDHQOENAFKSCWHBAOPZXUSGWNISUURRPXSUVWVPDYKZVIBPICCZMOESGLMZEQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.9798401453534239);
    msg.setSource(23652U);
    msg.setSourceEntity(175U);
    msg.setDestination(27538U);
    msg.setDestinationEntity(104U);
    msg.timeout = 58871U;
    msg.name.assign("WKXPMVHAHQURAKSMMYHWTXENKVDGRGSXVAKOVASZJKZGAOTQIIPCHRGHNUFLLIHXHUTJBYIANJHCWMKGYBCKBXLSNRTLNMNLFRSMCDXAGJDJDZQHWEJXBQQGMMVEPOZEFTYYZONICPBXFTQUOBPIZCLGWSUDTLWCSFRDAQFKGECURO");
    msg.custom.assign("RSZBORGOHRLJPPSLYCNLJTSRTNQFXDMXOKJLQYVFZHRXEGJWYIFIIFCYAZWJEPICHCPHPKDLQDDGCWGVMEWQTGWCYITISZVVAEPCFEJESYPQQXMKEIWYKXTUMXGNOVHCQKTUAKVJLJWDMLWPZVXRLMU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.17783580039731572);
    msg.setSource(33654U);
    msg.setSourceEntity(246U);
    msg.setDestination(43660U);
    msg.setDestinationEntity(250U);
    msg.lat = 0.626069267186763;
    msg.lon = 0.5877981851813503;
    msg.z = 0.8683086631364137;
    msg.z_units = 146U;
    msg.speed = 0.0270490652938028;
    msg.speed_units = 154U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 37389U;
    tmp_msg_0.off_x = 0.33352497880705634;
    tmp_msg_0.off_y = 0.9245850294746598;
    tmp_msg_0.off_z = 0.8566189902945671;
    msg.participants.push_back(tmp_msg_0);
    msg.start_time = 0.4199326723178334;
    msg.custom.assign("APOVNZZVQRVBISLGBKTFXLFFMAZCRDMECODOHCUHJYSBENXNHKMUCMIGBEHVSQOACKYTWBQPOZSRFHXTJDYIAUWVKGBMPZLWQLYECQYSGIJKWYPGKSTRFSXQHNQGOUTVEUAPRNWDLAVIRHNFZMEFZDZBDJQGUQKTHXWMBTFISPTGNE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.9354436220073011);
    msg.setSource(26405U);
    msg.setSourceEntity(82U);
    msg.setDestination(8165U);
    msg.setDestinationEntity(54U);
    msg.lat = 0.5586656110281943;
    msg.lon = 0.8760995558142225;
    msg.z = 0.8599855774050493;
    msg.z_units = 159U;
    msg.speed = 0.5602048998296211;
    msg.speed_units = 48U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.9646379298339273;
    tmp_msg_0.y = 0.8830080159430561;
    tmp_msg_0.z = 0.37998466155100685;
    tmp_msg_0.t = 0.8994608682089631;
    msg.points.push_back(tmp_msg_0);
    msg.start_time = 0.7621982492069833;
    msg.custom.assign("ZPOEWZTXCCDQMRXMMCLCWWSKFTLUBLEBSKQQSKYPPZXXKKILNXVJZXAVOEQDPLNKRJIWTGWWBVJOXGHFGAMTJZHJRUVVDTRALMRHZTQNGYWSVADPGGAZBWCZKHASSBOHJEQU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.3511886886457105);
    msg.setSource(8344U);
    msg.setSourceEntity(109U);
    msg.setDestination(39301U);
    msg.setDestinationEntity(214U);
    msg.lat = 0.7362870642610561;
    msg.lon = 0.7362280535167764;
    msg.z = 0.5560704349820291;
    msg.z_units = 33U;
    msg.speed = 0.6140152794707112;
    msg.speed_units = 70U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.2479031881215562;
    tmp_msg_0.y = 0.6865486517081775;
    tmp_msg_0.z = 0.826928893017575;
    tmp_msg_0.t = 0.8546676146885213;
    msg.points.push_back(tmp_msg_0);
    msg.start_time = 0.747757547530314;
    msg.custom.assign("HILAMLOBMKSBGVPEPXLVOSIOGHPXZERQNQCLSJHZENRBI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.8922762897814682);
    msg.setSource(63048U);
    msg.setSourceEntity(164U);
    msg.setDestination(26876U);
    msg.setDestinationEntity(27U);
    msg.vid = 39416U;
    msg.off_x = 0.33329658615777247;
    msg.off_y = 0.5796901674134791;
    msg.off_z = 0.8707633419627889;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.43473379217658004);
    msg.setSource(12248U);
    msg.setSourceEntity(70U);
    msg.setDestination(34825U);
    msg.setDestinationEntity(189U);
    msg.vid = 61393U;
    msg.off_x = 0.259962688937752;
    msg.off_y = 0.5248611658187569;
    msg.off_z = 0.12328491512577078;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.8305661233304446);
    msg.setSource(48544U);
    msg.setSourceEntity(130U);
    msg.setDestination(36469U);
    msg.setDestinationEntity(53U);
    msg.vid = 55243U;
    msg.off_x = 0.997974822365821;
    msg.off_y = 0.5183533810811907;
    msg.off_z = 0.08941348609299826;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.853164961683249);
    msg.setSource(46667U);
    msg.setSourceEntity(240U);
    msg.setDestination(26964U);
    msg.setDestinationEntity(121U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.3563742930411733);
    msg.setSource(28612U);
    msg.setSourceEntity(185U);
    msg.setDestination(58347U);
    msg.setDestinationEntity(199U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.5664869342163389);
    msg.setSource(12800U);
    msg.setSourceEntity(125U);
    msg.setDestination(20091U);
    msg.setDestinationEntity(180U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.25754063112251735);
    msg.setSource(62095U);
    msg.setSourceEntity(175U);
    msg.setDestination(54798U);
    msg.setDestinationEntity(102U);
    msg.mid = 11306U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.860996748332469);
    msg.setSource(47987U);
    msg.setSourceEntity(97U);
    msg.setDestination(43851U);
    msg.setDestinationEntity(137U);
    msg.mid = 28928U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.15975061859751805);
    msg.setSource(42026U);
    msg.setSourceEntity(253U);
    msg.setDestination(28855U);
    msg.setDestinationEntity(120U);
    msg.mid = 7185U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.2690801796847081);
    msg.setSource(25183U);
    msg.setSourceEntity(185U);
    msg.setDestination(54281U);
    msg.setDestinationEntity(215U);
    msg.state = 152U;
    msg.eta = 14041U;
    msg.info.assign("AWWOHDNUUQDDEUCPMCEFLQHAMOAPWAPGNGIOIXPHFZLBIVQYUHEDEAFFLVSHTFGYESYBEQEOFTHGSCRQUEOSBBVZCTPNJYELPVUDKRKVWKNPTTBMVYGSBLRSQZOMMPILAKKXQGCGGLCSJQQIZIRKTNXZCXPFKZODAYRRVWRWXJTOBTODKDMNVGBHWJREOWUJZULARXXYKSTZWMJAALFM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.06280970494099947);
    msg.setSource(57415U);
    msg.setSourceEntity(147U);
    msg.setDestination(17465U);
    msg.setDestinationEntity(199U);
    msg.state = 47U;
    msg.eta = 50940U;
    msg.info.assign("TNYRKDYSKRMZKPDMHVZJTAVKURDVBILANNBWMKOGQFVIQCEYUJQHATCOBKFDPIGCUJSKIFMOLXWFAARCOXJMNJZUAXPAUEWJZMBHBSRQZTZMXQUULAEVCTHQQGKTXFPWFDTFFEGSENTJTSJHLGCNHAHOQEXPLNUEMYWWKWGOSBPYLGLEZTIODUWVWIVEXYDHORRNPYXXRSYMYKGCSBIEOGGHBD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.3057151108160929);
    msg.setSource(34187U);
    msg.setSourceEntity(252U);
    msg.setDestination(40666U);
    msg.setDestinationEntity(24U);
    msg.state = 159U;
    msg.eta = 19286U;
    msg.info.assign("VAGONZFVEDCVQJRBYFHUAMQSJWCWSYAHTIO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.6612037571014242);
    msg.setSource(50760U);
    msg.setSourceEntity(68U);
    msg.setDestination(60328U);
    msg.setDestinationEntity(64U);
    msg.system = 23210U;
    msg.duration = 26326U;
    msg.speed = 0.7541393699165497;
    msg.speed_units = 231U;
    msg.x = 0.8519818702035027;
    msg.y = 0.9938180373248846;
    msg.z = 0.9709497717866394;
    msg.z_units = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.7559699341114252);
    msg.setSource(6032U);
    msg.setSourceEntity(196U);
    msg.setDestination(34323U);
    msg.setDestinationEntity(27U);
    msg.system = 60908U;
    msg.duration = 21833U;
    msg.speed = 0.9961972973011978;
    msg.speed_units = 246U;
    msg.x = 0.5491761985416341;
    msg.y = 0.5721460148266084;
    msg.z = 0.24826206085825187;
    msg.z_units = 91U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.17012246262860664);
    msg.setSource(42498U);
    msg.setSourceEntity(105U);
    msg.setDestination(15698U);
    msg.setDestinationEntity(39U);
    msg.system = 41145U;
    msg.duration = 58923U;
    msg.speed = 0.7079920193058711;
    msg.speed_units = 219U;
    msg.x = 0.4620595196404853;
    msg.y = 0.6325269604923439;
    msg.z = 0.9723671701008078;
    msg.z_units = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.6613891749142049);
    msg.setSource(6620U);
    msg.setSourceEntity(224U);
    msg.setDestination(63102U);
    msg.setDestinationEntity(231U);
    msg.lat = 0.3577886993321341;
    msg.lon = 0.6415021682963431;
    msg.speed = 0.8353146684437907;
    msg.speed_units = 249U;
    msg.duration = 17807U;
    msg.sys_a = 15371U;
    msg.sys_b = 39835U;
    msg.move_threshold = 0.0819750272246178;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.4727032096988295);
    msg.setSource(64232U);
    msg.setSourceEntity(3U);
    msg.setDestination(6187U);
    msg.setDestinationEntity(218U);
    msg.lat = 0.8350674450290443;
    msg.lon = 0.06263211965175497;
    msg.speed = 0.4085128520692787;
    msg.speed_units = 237U;
    msg.duration = 57600U;
    msg.sys_a = 13163U;
    msg.sys_b = 26899U;
    msg.move_threshold = 0.7515568686146228;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.4937338481928455);
    msg.setSource(2841U);
    msg.setSourceEntity(178U);
    msg.setDestination(52289U);
    msg.setDestinationEntity(110U);
    msg.lat = 0.08696442020248052;
    msg.lon = 0.6096433800023131;
    msg.speed = 0.8563403393776963;
    msg.speed_units = 198U;
    msg.duration = 50818U;
    msg.sys_a = 34245U;
    msg.sys_b = 21782U;
    msg.move_threshold = 0.81171252376562;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.2131866228228615);
    msg.setSource(0U);
    msg.setSourceEntity(195U);
    msg.setDestination(52479U);
    msg.setDestinationEntity(139U);
    msg.lat = 0.622849937780666;
    msg.lon = 0.4886334693168407;
    msg.z = 0.11333835065471276;
    msg.z_units = 3U;
    msg.speed = 0.5142198152351423;
    msg.speed_units = 79U;
    msg.custom.assign("RBWCNHHFEPWSURZFDKCLB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.5512645666751997);
    msg.setSource(15262U);
    msg.setSourceEntity(204U);
    msg.setDestination(54544U);
    msg.setDestinationEntity(197U);
    msg.lat = 0.3966483210491377;
    msg.lon = 0.5690522553390741;
    msg.z = 0.47089976737707184;
    msg.z_units = 22U;
    msg.speed = 0.9843993341339489;
    msg.speed_units = 103U;
    msg.custom.assign("KNSMUGWHRNXWOVQRYWFCBSIEMWEBWNEHLOKKGXPIGQGYXQDKYKSVCNWUGIONSYAAOFRYMNQDQCTBMDVIZPFLJKLOIPUDYHGQJYOTCCDWEZBDOSJUHFJJZAJBABEVHLIQFYNGLORECVWZKUZCVRWAPURTQTRAMZTEEODCPZFSDSRNQCD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.9732072248329547);
    msg.setSource(37239U);
    msg.setSourceEntity(119U);
    msg.setDestination(176U);
    msg.setDestinationEntity(87U);
    msg.lat = 0.7090505943340925;
    msg.lon = 0.07150336535148016;
    msg.z = 0.22505842907441753;
    msg.z_units = 163U;
    msg.speed = 0.6449997231975753;
    msg.speed_units = 117U;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.8508891769024173;
    tmp_msg_0.lon = 0.41623732196681407;
    msg.polygon.push_back(tmp_msg_0);
    msg.custom.assign("GPBGJYZTYRNSXITMBXIZXKWJG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.4157463476488328);
    msg.setSource(17969U);
    msg.setSourceEntity(30U);
    msg.setDestination(6712U);
    msg.setDestinationEntity(160U);
    msg.lat = 0.5966411432435511;
    msg.lon = 0.12733125646817867;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.38465359937859833);
    msg.setSource(40200U);
    msg.setSourceEntity(107U);
    msg.setDestination(22938U);
    msg.setDestinationEntity(22U);
    msg.lat = 0.4650118003659952;
    msg.lon = 0.651500628845078;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.8037153957073636);
    msg.setSource(64323U);
    msg.setSourceEntity(195U);
    msg.setDestination(54785U);
    msg.setDestinationEntity(193U);
    msg.lat = 0.9666806360843153;
    msg.lon = 0.982991235082504;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.33703340903447443);
    msg.setSource(6038U);
    msg.setSourceEntity(191U);
    msg.setDestination(28350U);
    msg.setDestinationEntity(103U);
    msg.timeout = 10594U;
    msg.lat = 0.03112702050703753;
    msg.lon = 0.746239649885589;
    msg.z = 0.48416624126599794;
    msg.z_units = 193U;
    msg.pitch = 0.90609579587211;
    msg.amplitude = 0.22150762609578256;
    msg.duration = 52736U;
    msg.speed = 0.5867422949119094;
    msg.speed_units = 88U;
    msg.radius = 0.500193184258375;
    msg.direction = 179U;
    msg.custom.assign("FXFEGPXDMNKADTOJCTTAFZEDNXMASOPHOIQMCGVLFRACOYRRRUVBEFZIRIH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.9946157666948531);
    msg.setSource(18866U);
    msg.setSourceEntity(118U);
    msg.setDestination(7699U);
    msg.setDestinationEntity(91U);
    msg.timeout = 62208U;
    msg.lat = 0.6530144350849826;
    msg.lon = 0.4395440610126272;
    msg.z = 0.7577610946837359;
    msg.z_units = 109U;
    msg.pitch = 0.5060931267140811;
    msg.amplitude = 0.20775296886201777;
    msg.duration = 62209U;
    msg.speed = 0.6798111244101116;
    msg.speed_units = 111U;
    msg.radius = 0.04658992117499616;
    msg.direction = 208U;
    msg.custom.assign("EGPAPTYVZDBZXJXAIQCKBHVVJRQK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.84214386813277);
    msg.setSource(9869U);
    msg.setSourceEntity(117U);
    msg.setDestination(4856U);
    msg.setDestinationEntity(86U);
    msg.timeout = 28462U;
    msg.lat = 0.7573698928549419;
    msg.lon = 0.3857823511044186;
    msg.z = 0.38439171731617905;
    msg.z_units = 125U;
    msg.pitch = 0.5781398620807205;
    msg.amplitude = 0.5520055883112779;
    msg.duration = 5504U;
    msg.speed = 0.8309172413323378;
    msg.speed_units = 224U;
    msg.radius = 0.6829122185793443;
    msg.direction = 216U;
    msg.custom.assign("YEWJXZXRSCKWZQYKDJHDOJAHOCJFCAWLTIGPTATRQQNFSBKFHSHGRUCVTMXDIDYZFMJHURSDICZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.03462493328834726);
    msg.setSource(5827U);
    msg.setSourceEntity(125U);
    msg.setDestination(5928U);
    msg.setDestinationEntity(210U);
    msg.formation_name.assign("FOQOSVFHNQFZAXRCABTSDUHDUZPYVWIBUNYJGELOKADDWYWMSJKQQCOVIKEZABPUPBOIIHQJKDWR");
    msg.reference_frame = 194U;
    msg.custom.assign("NQFKRBNAOKTZSJMUSWVVCQVLIWEJIBGRROVHGWEBORZKLCEBWAFSCQZEJTUXDIDJEPNGFETIGJBAATWMYDVKLYFLGYWQIUNTOCSYJNYUAXHTGZZLMGGMPBEQTZTCMUXWVJHFKITPZRMRFZNLYUNHFHPXCY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.6098525021782176);
    msg.setSource(17657U);
    msg.setSourceEntity(209U);
    msg.setDestination(60376U);
    msg.setDestinationEntity(5U);
    msg.formation_name.assign("POYJCWPUNCIHZFYTSWKAMAGVBBZUGLXUNRWPRNATATYKZFNVSCMFMYIOOGAKUUKLWLRMSJEQWEFQZMWDLGPEBNGYQIXBIHIDRKBGUJVSIHSSJVMXXEURXHUSMWQDGLLFVEHTZAHZIBDWAKQQNDZIXYKGPPEJKDZTJQMQNZWDMNIJVFXEGRFMXDHUSFCWECORALUOVJTOAFKDROCLQTONYCQTHPXRVTOELTCB");
    msg.reference_frame = 174U;
    msg.custom.assign("ZYUJVRKMJAUPGXYTGWFOJBQXJIUACWTRGUTQMTPESCVRWCHYBGILYMDTEMGIDOHSNSDDHNSFBVBZNWDGAQLSQLPTVZWKXQCUIVITPORAZQNDHICEUTSBJPOQXOMRUNDFHPEFNVKJMAEGYUXYKAQDBFYELMKPKXIALEIFXKZEEDBTRNYSOVHZZFGHZZSUSJKLPIDROEJNNHWKLGBLMUOCXYWHCBHRWMZFVXOOLISPRWJYQVQVRBLJXPCAWANKGF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.9718101830629502);
    msg.setSource(29884U);
    msg.setSourceEntity(117U);
    msg.setDestination(40803U);
    msg.setDestinationEntity(224U);
    msg.formation_name.assign("ZYHDEVTUWHMVPZHMOXRWLKSUCJUBOJXBAFVHEFBSOEOPNZEYYKPRJYLPNJNQUSAWAESRRZNIHZMITIFSOVDMFJAJPFSMFNILGHMDCN");
    msg.reference_frame = 119U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 63588U;
    tmp_msg_0.off_x = 0.11107251280394492;
    tmp_msg_0.off_y = 0.3635786825466374;
    tmp_msg_0.off_z = 0.054727895875383625;
    msg.participants.push_back(tmp_msg_0);
    msg.custom.assign("HQASTTMHXCCCZYXUJVTYQXABFYLTJIUTEJFQIEXIRRIJGRLOOSVKILEZEPJJKPWUGGOYAMGHRZDBGYIVZQSDYATOKFECUJMNQNOBINDBFXRSADPXMEWQHNFLLMA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.6869682346056784);
    msg.setSource(6447U);
    msg.setSourceEntity(77U);
    msg.setDestination(26960U);
    msg.setDestinationEntity(175U);
    msg.group_name.assign("SXMIRJJHYEUDAIZQDFZPHZAKRFOOLALTLBHUDSSQWIXJCVNDFNJPPZQFAGFLTPTFBKMYAWMAKLVEWYXGWKCNXMDQBKTACEOGQJHJYXEXBBSLXGAJXMUZOFIJLKQVRPYOOUBPKQHKBVEJVGWWOGCEDYDWZIFNSDAHUGAHNEZDINMQVCULTTHMZWYP");
    msg.formation_name.assign("XNPCOYBTOOEMRBTNDLQHLUWLJPYZJWNFDHTQPGVFNB");
    msg.plan_id.assign("HCGMSZJUILHBQTMNHWNUJWSULWT");
    msg.description.assign("JQYHMEFDIKXMBTOXAYRHQOKUCRJABUNIRQMNRABZSSQLNMDYOYFPIMVLOMEWVQUXABHDHDDRMOPSGPZTSBXFGLSPYJXFEYMXCTILSKLZZPJGZUSZFQVFUCOTJWKGXLXPRC");
    msg.leader_speed = 0.3939558638909405;
    msg.leader_bank_lim = 0.5263471776808871;
    msg.pos_sim_err_lim = 0.4824180871280276;
    msg.pos_sim_err_wrn = 0.57148996240786;
    msg.pos_sim_err_timeout = 40015U;
    msg.converg_max = 0.6817840037700509;
    msg.converg_timeout = 2376U;
    msg.comms_timeout = 59209U;
    msg.turb_lim = 0.14245909308371973;
    msg.custom.assign("LADVFNTCYMSBHNXLHTISDXAV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.8642402498374437);
    msg.setSource(20906U);
    msg.setSourceEntity(213U);
    msg.setDestination(4349U);
    msg.setDestinationEntity(1U);
    msg.group_name.assign("FPCRKNMZITGPJBADIPOTUGMYTSBLVDKOKJSPXMVCBBSUZNOYJGEZTKZVEDWLANIPPMHMJAVVDACZK");
    msg.formation_name.assign("MNTTXYNWLSQANVMMCLLPXFKBIVKSPALPWEZCJEBBAKCHPZDTJAMGFPDU");
    msg.plan_id.assign("PVQDGGHFKJEWVOAKCQTHTZDNULCPCNPQMHZJFDQAASSWOCXZBVEELSDIWTEMFJQFQGGGMXHONBUPXGXYXMVIIRHDFWKSIXYOEIKXHSRMJFUQZBABIUFVTCOGUOCPYLNKWLPYRZKIZRBLBWZJHJWLAXUIPATIAAVCBYJCELGQKMOGJNNBQCRSETSGZPHKLVTRIWUNXV");
    msg.description.assign("UQNCAXNWZVOWEJWGZTEACBWCLHYJLEUSSGDTXRHIYZXPHDTKUVOKLZJQKPYPUZSKMVOIPIFVANECNTGJEDFZPCRPUCRGEBOPIWHRVUDJS");
    msg.leader_speed = 0.78975535516548;
    msg.leader_bank_lim = 0.8044544886521647;
    msg.pos_sim_err_lim = 0.42670406475548384;
    msg.pos_sim_err_wrn = 0.8017807239967113;
    msg.pos_sim_err_timeout = 29708U;
    msg.converg_max = 0.4726292553703699;
    msg.converg_timeout = 18773U;
    msg.comms_timeout = 26118U;
    msg.turb_lim = 0.9381141815516513;
    msg.custom.assign("ZQLLZXUNPDGMETHKVTLJANAWTNLOFQYZZOSZNJKLVOTTHPRBJJYHLJXGVTMOUGVCWKNTHRUFWTSOKSUZSMYCWCXBDCDCXZAPSFWJNNLCLIAODIQYPEPBLDVYHGD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.11288859007307805);
    msg.setSource(927U);
    msg.setSourceEntity(170U);
    msg.setDestination(1113U);
    msg.setDestinationEntity(233U);
    msg.group_name.assign("DNJNOVXCWUNLNKFWJQVOEOJKBJEVBLDKGIHTIZCBQRQSKNK");
    msg.formation_name.assign("PSJLQOWZDJHVNAKXVOCCXWNRJJISQUXVPPXWBJEXAFMJEMWPSCKZCOLADGFFSGCZYNXBSGCRUMGNECZYCPLDBOSSIKOHHMVKIRITVFKYUHUJHYYNIGBYVFNWZPUNETRBTPODDQVTLKQPZWZVDXTIRTJQDANAUEHAAHGLOFRJXIUAIPWMQRIBMLJHDMSPSGQZRATWEBOFHOZTZVMSTKKLADELVKTYKORGUUHBCNXQCBFEYRLG");
    msg.plan_id.assign("JKBKHLGMDHRQIENFGFDJFFKMBCUCHZBAOHQITNUUISDLVVXHBGVJCZAQJFXUWFVYIKCYWTBELFKOPMOAYETKAVMRCNWREPKNDSTJKLZYQWTYOQFSPZBJIAUZQXNPXDQQOYWTSHYAOIMIUDAXWPDBTMYINWMGAHBEYXWRXZXFOTPMXUQDVGTFPUWSMLLMRVBABDZVOGKCRGSLELTOYJHCEQCNNHGUGERSISPELSGPHCWVZSPREOK");
    msg.description.assign("IGSEBXQTNUZDKBIONAWVITMYJZEQUZTKOHPMWCLCFRZTGROXAYMFZKYFWHHWFJQHYHSOJDCYJOWBDFOGBUGXEJOFTSXFCUWLZHFZAISP");
    msg.leader_speed = 0.704241806939434;
    msg.leader_bank_lim = 0.44533047544552773;
    msg.pos_sim_err_lim = 0.7488508504312815;
    msg.pos_sim_err_wrn = 0.036856058653243595;
    msg.pos_sim_err_timeout = 52596U;
    msg.converg_max = 0.07038516721459831;
    msg.converg_timeout = 17086U;
    msg.comms_timeout = 11515U;
    msg.turb_lim = 0.05075358287128062;
    msg.custom.assign("PLSAIWPTGSPANNCKLATHHZTKQEQYJKCXMQVGDYRUMJMBZBGGPIMJJFGMQYBYHGVUCVEBHBDAWORPWCDXSRCFBMRECDJUWEXPALTOTHLWIKMGJHIQHOHLOHMYLBOYULNIBEDJCFLCUDSWXFKOJAFMZQZYUZFNAZKTVUIJSVKWOSQSCIETZTQVIXO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.681962287895157);
    msg.setSource(53011U);
    msg.setSourceEntity(148U);
    msg.setDestination(61751U);
    msg.setDestinationEntity(196U);
    msg.control_src = 15293U;
    msg.control_ent = 23U;
    msg.timeout = 0.8568570314670123;
    msg.loiter_radius = 0.17378905764344776;
    msg.altitude_interval = 0.005192823665165713;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.965196311679258);
    msg.setSource(25056U);
    msg.setSourceEntity(161U);
    msg.setDestination(2887U);
    msg.setDestinationEntity(154U);
    msg.control_src = 4324U;
    msg.control_ent = 102U;
    msg.timeout = 0.4623180418876185;
    msg.loiter_radius = 0.3563955578193061;
    msg.altitude_interval = 0.7667720088082168;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.13207997561784768);
    msg.setSource(12937U);
    msg.setSourceEntity(96U);
    msg.setDestination(22661U);
    msg.setDestinationEntity(162U);
    msg.control_src = 36684U;
    msg.control_ent = 77U;
    msg.timeout = 0.0911389097979034;
    msg.loiter_radius = 0.1941744844901343;
    msg.altitude_interval = 0.8203381769502269;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.5186556165461342);
    msg.setSource(37918U);
    msg.setSourceEntity(243U);
    msg.setDestination(8432U);
    msg.setDestinationEntity(90U);
    msg.flags = 230U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.5501718106996143;
    tmp_msg_0.speed_units = 241U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.4601360331837324;
    tmp_msg_1.z_units = 238U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.4982628217670053;
    msg.lon = 0.059587147592737644;
    msg.radius = 0.4164211971444025;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.7981982706414537);
    msg.setSource(34285U);
    msg.setSourceEntity(123U);
    msg.setDestination(52497U);
    msg.setDestinationEntity(129U);
    msg.flags = 48U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.8495899791654078;
    tmp_msg_0.speed_units = 133U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.3489425947730591;
    tmp_msg_1.z_units = 113U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.48303920135809575;
    msg.lon = 0.5808009632801503;
    msg.radius = 0.6130712469972242;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.4556920456235354);
    msg.setSource(10813U);
    msg.setSourceEntity(195U);
    msg.setDestination(35509U);
    msg.setDestinationEntity(242U);
    msg.flags = 13U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.9527728398796036;
    tmp_msg_0.speed_units = 36U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.08333578255825691;
    tmp_msg_1.z_units = 77U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.9014487535221398;
    msg.lon = 0.23619296748491847;
    msg.radius = 0.33016999980093753;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.5877043832104232);
    msg.setSource(62517U);
    msg.setSourceEntity(110U);
    msg.setDestination(36806U);
    msg.setDestinationEntity(10U);
    msg.control_src = 45207U;
    msg.control_ent = 116U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 58U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.9665906893726275;
    tmp_tmp_msg_0_0.speed_units = 129U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.25586150252926043;
    tmp_tmp_msg_0_1.z_units = 1U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.9237820601756765;
    tmp_msg_0.lon = 0.22248905575883815;
    tmp_msg_0.radius = 0.8155850717902308;
    msg.reference.set(tmp_msg_0);
    msg.state = 169U;
    msg.proximity = 123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.04914064158508924);
    msg.setSource(56227U);
    msg.setSourceEntity(84U);
    msg.setDestination(42727U);
    msg.setDestinationEntity(167U);
    msg.control_src = 18522U;
    msg.control_ent = 175U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 6U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.258314085790437;
    tmp_tmp_msg_0_0.speed_units = 80U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.9477627937361713;
    tmp_tmp_msg_0_1.z_units = 91U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.21289957980845298;
    tmp_msg_0.lon = 0.39657937528230347;
    tmp_msg_0.radius = 0.9175906550968752;
    msg.reference.set(tmp_msg_0);
    msg.state = 154U;
    msg.proximity = 44U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.8390604048226601);
    msg.setSource(60839U);
    msg.setSourceEntity(111U);
    msg.setDestination(53393U);
    msg.setDestinationEntity(185U);
    msg.control_src = 54384U;
    msg.control_ent = 36U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 173U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.1409338289706722;
    tmp_tmp_msg_0_0.speed_units = 254U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.9101053235645764;
    tmp_tmp_msg_0_1.z_units = 153U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.7386569386271011;
    tmp_msg_0.lon = 0.6344502510735668;
    tmp_msg_0.radius = 0.16508954711493462;
    msg.reference.set(tmp_msg_0);
    msg.state = 20U;
    msg.proximity = 133U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.986017349010815);
    msg.setSource(34759U);
    msg.setSourceEntity(80U);
    msg.setDestination(42990U);
    msg.setDestinationEntity(168U);
    msg.ax_cmd = 0.5633395129031504;
    msg.ay_cmd = 0.433828432188509;
    msg.az_cmd = 0.47535975465620994;
    msg.ax_des = 0.06767500781108982;
    msg.ay_des = 0.3222212511670244;
    msg.az_des = 0.9773311631299367;
    msg.virt_err_x = 0.7001069738271705;
    msg.virt_err_y = 0.22540204751202264;
    msg.virt_err_z = 0.6124539356118447;
    msg.surf_fdbk_x = 0.8072744448160816;
    msg.surf_fdbk_y = 0.09950289286065372;
    msg.surf_fdbk_z = 0.5950134368662559;
    msg.surf_unkn_x = 0.7133191525007002;
    msg.surf_unkn_y = 0.7894878981739468;
    msg.surf_unkn_z = 0.7137594843100648;
    msg.ss_x = 0.8670095307013296;
    msg.ss_y = 0.6499042090996635;
    msg.ss_z = 0.3288958042348359;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("NYODGUQXBXSPCJUFYLLWTZWRLXIYVFEWAIMMXHSLEGHTYTJJEIDDYQGBKPLKCDFOUCHDVSRCSMDJHXQCZGGJOXWOKNUAXTRZBAWCRNTRTTIFDZVMHZFRSXSIBKSYTGGNHAJQPXNMFWONC");
    tmp_msg_0.dist = 0.6071539624526235;
    tmp_msg_0.err = 0.41363421890024576;
    tmp_msg_0.ctrl_imp = 0.20147513261109828;
    tmp_msg_0.rel_dir_x = 0.19470808634528702;
    tmp_msg_0.rel_dir_y = 0.8971082037246512;
    tmp_msg_0.rel_dir_z = 0.8017956933027858;
    tmp_msg_0.err_x = 0.035535191822641976;
    tmp_msg_0.err_y = 0.7324907548475345;
    tmp_msg_0.err_z = 0.7483625329185707;
    tmp_msg_0.rf_err_x = 0.9391888927767574;
    tmp_msg_0.rf_err_y = 0.6632722648245437;
    tmp_msg_0.rf_err_z = 0.37321631361664853;
    tmp_msg_0.rf_err_vx = 0.17561731793120405;
    tmp_msg_0.rf_err_vy = 0.9462920215669054;
    tmp_msg_0.rf_err_vz = 0.3392185145329052;
    tmp_msg_0.ss_x = 0.5924725312873301;
    tmp_msg_0.ss_y = 0.40814712547245446;
    tmp_msg_0.ss_z = 0.5431422474444904;
    tmp_msg_0.virt_err_x = 0.5900171506739665;
    tmp_msg_0.virt_err_y = 0.6342729555000464;
    tmp_msg_0.virt_err_z = 0.6433477960288065;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.3961175074486105);
    msg.setSource(1039U);
    msg.setSourceEntity(17U);
    msg.setDestination(17797U);
    msg.setDestinationEntity(250U);
    msg.ax_cmd = 0.6900999428192843;
    msg.ay_cmd = 0.7555046383935825;
    msg.az_cmd = 0.7237296520735389;
    msg.ax_des = 0.5043246995469503;
    msg.ay_des = 0.7215563556679742;
    msg.az_des = 0.6959411363634697;
    msg.virt_err_x = 0.9357144601603428;
    msg.virt_err_y = 0.17529622201708683;
    msg.virt_err_z = 0.5738347982355313;
    msg.surf_fdbk_x = 0.4615651110273885;
    msg.surf_fdbk_y = 0.9510306470588874;
    msg.surf_fdbk_z = 0.4546939645131224;
    msg.surf_unkn_x = 0.3174160348926641;
    msg.surf_unkn_y = 0.5411891917143932;
    msg.surf_unkn_z = 0.881272906419099;
    msg.ss_x = 0.9456277593884277;
    msg.ss_y = 0.1345265674127405;
    msg.ss_z = 0.5122542001856122;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("CBNNURZURPEQXJKMWVHTNRBPVFTPOGDFDXOQ");
    tmp_msg_0.dist = 0.7252909234365142;
    tmp_msg_0.err = 0.17231368386491386;
    tmp_msg_0.ctrl_imp = 0.15710431684822534;
    tmp_msg_0.rel_dir_x = 0.818472130563253;
    tmp_msg_0.rel_dir_y = 0.5955511621170958;
    tmp_msg_0.rel_dir_z = 0.18289590811437773;
    tmp_msg_0.err_x = 0.883779776779524;
    tmp_msg_0.err_y = 0.5977569610589487;
    tmp_msg_0.err_z = 0.753706775073658;
    tmp_msg_0.rf_err_x = 0.2789256313923375;
    tmp_msg_0.rf_err_y = 0.14466909451732035;
    tmp_msg_0.rf_err_z = 0.40006685749030535;
    tmp_msg_0.rf_err_vx = 0.09374582574967194;
    tmp_msg_0.rf_err_vy = 0.2706113044043792;
    tmp_msg_0.rf_err_vz = 0.9700608612129448;
    tmp_msg_0.ss_x = 0.4193913597425828;
    tmp_msg_0.ss_y = 0.5065797781650747;
    tmp_msg_0.ss_z = 0.9428089355871995;
    tmp_msg_0.virt_err_x = 0.5497848139248109;
    tmp_msg_0.virt_err_y = 0.798481448814104;
    tmp_msg_0.virt_err_z = 0.9368391083762835;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.6519627964936948);
    msg.setSource(40322U);
    msg.setSourceEntity(5U);
    msg.setDestination(6502U);
    msg.setDestinationEntity(118U);
    msg.ax_cmd = 0.4087911510939374;
    msg.ay_cmd = 0.7898887114991849;
    msg.az_cmd = 0.5599005638154699;
    msg.ax_des = 0.09639008379006953;
    msg.ay_des = 0.21064932680717263;
    msg.az_des = 0.6823569556952624;
    msg.virt_err_x = 0.32520333076781793;
    msg.virt_err_y = 0.007760201849159598;
    msg.virt_err_z = 0.4730934520971988;
    msg.surf_fdbk_x = 0.516993383923411;
    msg.surf_fdbk_y = 0.7107750531606974;
    msg.surf_fdbk_z = 0.10771869431539238;
    msg.surf_unkn_x = 0.0913499864765367;
    msg.surf_unkn_y = 0.7349466041089032;
    msg.surf_unkn_z = 0.08526780481211005;
    msg.ss_x = 0.6212558165275549;
    msg.ss_y = 0.03688876094525795;
    msg.ss_z = 0.7077544765464716;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("CYCXDOAATCKZLBQGPNGQMBIQDOPWKBMEOAHKBYJIDWZGHEJUWFJOSNFYXZAMUNTWLNGKORUZXOBVSBMCFCSKPPFBUGQBULDRSEIAFDLBQFHUWQMZRAYVHVPJSWJTMCEVIHMZMKLYGGFTLNQYYRRVRZRXEVDRCDTUQAQGSWJOVFA");
    tmp_msg_0.dist = 0.9602028168220992;
    tmp_msg_0.err = 0.04322080365681469;
    tmp_msg_0.ctrl_imp = 0.1716822869009046;
    tmp_msg_0.rel_dir_x = 0.6908765092796206;
    tmp_msg_0.rel_dir_y = 0.594072612242468;
    tmp_msg_0.rel_dir_z = 0.23498096535064805;
    tmp_msg_0.err_x = 0.49438923698016235;
    tmp_msg_0.err_y = 0.6826321748515787;
    tmp_msg_0.err_z = 0.11383926640766096;
    tmp_msg_0.rf_err_x = 0.13424737313750656;
    tmp_msg_0.rf_err_y = 0.5938798502879954;
    tmp_msg_0.rf_err_z = 0.9643340487448983;
    tmp_msg_0.rf_err_vx = 0.9357767901285895;
    tmp_msg_0.rf_err_vy = 0.42264355806627885;
    tmp_msg_0.rf_err_vz = 0.13594715673501967;
    tmp_msg_0.ss_x = 0.24641911180165976;
    tmp_msg_0.ss_y = 0.19620963417896542;
    tmp_msg_0.ss_z = 0.6900866853646311;
    tmp_msg_0.virt_err_x = 0.3622645952912984;
    tmp_msg_0.virt_err_y = 0.7552536405107142;
    tmp_msg_0.virt_err_z = 0.8540640153663915;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.8103134414643088);
    msg.setSource(2953U);
    msg.setSourceEntity(20U);
    msg.setDestination(1758U);
    msg.setDestinationEntity(35U);
    msg.s_id.assign("JFXTYJBRPWNXEPQUIIMHIXGKPAPOHNWPPQSVXWDJKXKCTUNTDUGZQSQMPJSKCWEMDCHBQFZLAFLCXQTGUHZACJYZSJVZRLLPDENRMLCGIKYZUMIYOOAOIKWDWELQVBAVHWKGBNFGVSCQTNFFHOTEITOSYRXADNYZSKRGHNAOEVSQBEBBVSBPXLS");
    msg.dist = 0.7499877698062282;
    msg.err = 0.6639628317047064;
    msg.ctrl_imp = 0.5813798389279926;
    msg.rel_dir_x = 0.5356640226589378;
    msg.rel_dir_y = 0.4906705796957721;
    msg.rel_dir_z = 0.7483681307826894;
    msg.err_x = 0.05292851662246889;
    msg.err_y = 0.8171284224740096;
    msg.err_z = 0.6969320817363642;
    msg.rf_err_x = 0.7029181662512942;
    msg.rf_err_y = 0.7821062270730528;
    msg.rf_err_z = 0.2949417184687243;
    msg.rf_err_vx = 0.9464487351328893;
    msg.rf_err_vy = 0.5136318053993887;
    msg.rf_err_vz = 0.3372920493591268;
    msg.ss_x = 0.7555001718995747;
    msg.ss_y = 0.6247780270513612;
    msg.ss_z = 0.6197613585326699;
    msg.virt_err_x = 0.3094792345725924;
    msg.virt_err_y = 0.26085740984592876;
    msg.virt_err_z = 0.3504980403608817;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.9133348069413441);
    msg.setSource(25448U);
    msg.setSourceEntity(130U);
    msg.setDestination(21348U);
    msg.setDestinationEntity(95U);
    msg.s_id.assign("DZPXVUOZFYMHAEGLPRCHFGEOHFKRBWODJZRRJTZIMXFIAUCZPHDDNCHQEXKYMVRUAHBYCIJMAXUKWLXDXFUIRGSCNNJBKVUBWCROHZYRJMUYOQBBZWAIWMXGPLUPOKPFCVTNEYQK");
    msg.dist = 0.2807913005767042;
    msg.err = 0.9449422322950496;
    msg.ctrl_imp = 0.5900037899445996;
    msg.rel_dir_x = 0.0655197078712405;
    msg.rel_dir_y = 0.818991790497904;
    msg.rel_dir_z = 0.0003986071423403015;
    msg.err_x = 0.5118300068774079;
    msg.err_y = 0.7938990314102503;
    msg.err_z = 0.2303014757244659;
    msg.rf_err_x = 0.3253007152355345;
    msg.rf_err_y = 0.07656527474406372;
    msg.rf_err_z = 0.9067328291607357;
    msg.rf_err_vx = 0.0065249291050606395;
    msg.rf_err_vy = 0.910058258539115;
    msg.rf_err_vz = 0.49488831403194744;
    msg.ss_x = 0.22958187540503183;
    msg.ss_y = 0.1814010547046817;
    msg.ss_z = 0.3887606862705061;
    msg.virt_err_x = 0.7025037735861891;
    msg.virt_err_y = 0.3760428267143435;
    msg.virt_err_z = 0.6488573128369756;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.9015757388654696);
    msg.setSource(22479U);
    msg.setSourceEntity(179U);
    msg.setDestination(21796U);
    msg.setDestinationEntity(185U);
    msg.s_id.assign("NWZAGLIDOJYYFDSFYKHZTZVKVOTMEGHBGOCCGCQIWLAIEZJDUJYO");
    msg.dist = 0.5402328830474428;
    msg.err = 0.011817967861620704;
    msg.ctrl_imp = 0.7966349441263713;
    msg.rel_dir_x = 0.5103604525380345;
    msg.rel_dir_y = 0.12290691373081997;
    msg.rel_dir_z = 0.4764843844058373;
    msg.err_x = 0.8798041982074267;
    msg.err_y = 0.08066417537855608;
    msg.err_z = 0.02807808069907136;
    msg.rf_err_x = 0.11772485681551381;
    msg.rf_err_y = 0.8033505016298259;
    msg.rf_err_z = 0.9121589796418559;
    msg.rf_err_vx = 0.6162226705142229;
    msg.rf_err_vy = 0.9810883584561338;
    msg.rf_err_vz = 0.44041649928265747;
    msg.ss_x = 0.44877454312837484;
    msg.ss_y = 0.7023723077494279;
    msg.ss_z = 0.8042085456158966;
    msg.virt_err_x = 0.04785787062021929;
    msg.virt_err_y = 0.3487669622254167;
    msg.virt_err_z = 0.7262738644510311;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.7557366398255315);
    msg.setSource(24834U);
    msg.setSourceEntity(22U);
    msg.setDestination(64302U);
    msg.setDestinationEntity(109U);
    msg.timeout = 36273U;
    msg.rpm = 0.10689885396544763;
    msg.direction = 254U;
    msg.custom.assign("KLUZAKIVTERBJJSBDSZRFJHUFMXIFEVUXULJLCQILWAWDAEVVPYTGMLNKYFURUNKZGRAHERNPNJNVHGUNQVZQDPAPJTQQOYQPDROBLWJCEYOQWXCCMAOSDSXLTIJXRTNHGMFVHSCOHUOOPRNITDXBOBMOWBNZFEEBYSWPIQPVVFIDSCMZFWCBFBHLESGGZEKMXVZNDIGMZZWFAWKQAKBYYAKJCRGYHDYCOAWPGKXQRYXLIDKHETH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.4675199385865084);
    msg.setSource(34230U);
    msg.setSourceEntity(112U);
    msg.setDestination(23053U);
    msg.setDestinationEntity(75U);
    msg.timeout = 63510U;
    msg.rpm = 0.4638088501695269;
    msg.direction = 45U;
    msg.custom.assign("HNPVWCXLVOJOQUKDELFAGRCMSMNZUBEIPSSCIZTLYPHLZYCBCEPGHBSSIRQFXXOFIAHOXHGEQHOOZDJBPTROJXJBYHDAYNWTUVEUKWLNBPAQGKJZYDMLGUDSBBSKWAKWCAQRMATUQKNKMHVTYGHOFUQLXVMANOZWNTORCTNRJFZTMGXXZMJXYRAMWIUTDPWGEIASQPVGKYUPIJQFQBKPDFEYLRNYVUCWIFJVRSLGNJWZBRHCXSFDM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.44982724161832277);
    msg.setSource(5500U);
    msg.setSourceEntity(113U);
    msg.setDestination(44606U);
    msg.setDestinationEntity(155U);
    msg.timeout = 54080U;
    msg.rpm = 0.2781951747812569;
    msg.direction = 42U;
    msg.custom.assign("VBQPUZFNLJPOIUMEELWYCCNGSFHWGFNRE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.1627625183335496);
    msg.setSource(37640U);
    msg.setSourceEntity(222U);
    msg.setDestination(26152U);
    msg.setDestinationEntity(74U);
    msg.formation_name.assign("FAUOAYOKALAPUDMZJIDGBMRYWPKRTXSMIFWHLGSRQRXKGCEENIYQ");
    msg.type = 242U;
    msg.op = 20U;
    msg.group_name.assign("WNVEKUTYWZQAEMAPRSZOJXBXFHCLYZPSSQGSLTYPFRBDOKLNEIVPNVZZQUHIMJIYEJYPAHAPWNISJTKH");
    msg.plan_id.assign("XQDYHTKOAGOCIOQYTAWWURVJPTTPYKWXMJORJBMJLHQEQLPVWOFLQEFYDZFREWJWCCEYYBMBMRALMOLBUXENFKXNTGHVABEDWUG");
    msg.description.assign("EUYSHDMFLHFXKGAPSPVRNFLSGJWQJECISMBMXVZOYUICMCPOWXOHCOICJTZVEOTXGXRRNLQFAETRUQLAEBYEYKUTDDKDDCQEMIVADFRWJRGPFGBKAVTHGILATUAWHZYCNNBGHQKIO");
    msg.reference_frame = 12U;
    msg.leader_bank_lim = 0.6501610864772155;
    msg.leader_speed_min = 0.5977433330406665;
    msg.leader_speed_max = 0.1354684467776297;
    msg.leader_alt_min = 0.21945034403673302;
    msg.leader_alt_max = 0.7069590892422739;
    msg.pos_sim_err_lim = 0.9201323852484502;
    msg.pos_sim_err_wrn = 0.3837448465450062;
    msg.pos_sim_err_timeout = 20406U;
    msg.converg_max = 0.5792413680133521;
    msg.converg_timeout = 44738U;
    msg.comms_timeout = 48867U;
    msg.turb_lim = 0.7681671299598037;
    msg.custom.assign("MVYAABPJZOCGTOFLXFQRKRLQPYTMRCPVSZYSBKEQXHRLQDAWVDCCXDQGQZBESSZNFJJUELJUFMPAOOHGVVFIMNKVNOWVEJXRLODKYKNIPGKHRHTEUMGUMFKHIPBEHVZULHDEBMUGHWTJXTNLPDBWWOYPWZCHYLINXKTAHDASMWIQTWISGCUTWCZFRINXYQJZUCEZBAGRAWPBGOYFXIDMRIQAUNCQJNLLTS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.21660565260712927);
    msg.setSource(41055U);
    msg.setSourceEntity(6U);
    msg.setDestination(51244U);
    msg.setDestinationEntity(208U);
    msg.formation_name.assign("GFPLZZPIZQUXLSHMSFAYSUBNTEYIAODEFQHEYAYCWRANXJNYLGMWHJWUUUQPSEFQRTUQOEZXTXRMPBQYBSQXEMFMQRVOFDADKMQSJJRKMVLPKVGOJRNGMKCBDCEUMRAOLYQJKLSCHUIDIVHPAHPJZALKOKGLZBXFAGWFBTTNWZHIBCHZLISVORCTNORNGKMBE");
    msg.type = 68U;
    msg.op = 101U;
    msg.group_name.assign("HOYKBCLKCQYVUFTDKAXAYGIKFMABCIYQSKRBZCMUGZSQXNNQXEMFOAONAPUGFR");
    msg.plan_id.assign("ODUFDPDNUHKWICDWZEFZFDTOBJZWIAMZSZIVDCFOLNQKGGNRXZVPMIPMBEVKHSFUOAYDDNUHXXZCRORFWJECHKGCLUTTAPDYIXARGWETPYVXKBWLOHWYMQETZPUNLPSNESVQEXBVYRPLCQ");
    msg.description.assign("DEICNSVAGPBGTHNRWFKVIOOHRJOBWTBISJAVAYGZISJWRYDVUTFCEYNSXPZAYFWDFRAQFQKVEUITJDSQECHPRXGOJGDIVXTXRZAPCDXGBVQHWLOSBBCKFKBDWPVEYLOUQJQHFOPTYSLOUGPNTEMULNSUFCHEOMINNLBCOZKLGMBCPIHLGMWSUYNHJNAKUHMDBEVGUIXMYEYXJTZHAFMAQWVFDJQLRRZ");
    msg.reference_frame = 207U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 41376U;
    tmp_msg_0.off_x = 0.4041493898502624;
    tmp_msg_0.off_y = 0.7086426484952437;
    tmp_msg_0.off_z = 0.830061220187858;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.5574577454817433;
    msg.leader_speed_min = 0.2360219428739706;
    msg.leader_speed_max = 0.5157502442770019;
    msg.leader_alt_min = 0.40535432361493573;
    msg.leader_alt_max = 0.3611356252272879;
    msg.pos_sim_err_lim = 0.3063238477353615;
    msg.pos_sim_err_wrn = 0.6658672187700209;
    msg.pos_sim_err_timeout = 1204U;
    msg.converg_max = 0.054101222059869336;
    msg.converg_timeout = 17530U;
    msg.comms_timeout = 6400U;
    msg.turb_lim = 0.4381219146364608;
    msg.custom.assign("WMHWCVIFXBOTQEXAWIVSHDZYNXOFZCKNBSELMQHTWJEDRYCIPXHXVWEFKNLGLACPZCSSGKKTSBBKOIZZJGJUIIWFOFRPHSPAJBAAWTYFUBTQDKLXFQJJGMEHVLTQUMADYRKAZOPLRMNZUBNGWOTEDSGLVOUIPCQUVIBPRIJUVFZMTNSDLFBRWXQUDOLJEYCDYYGTOJYKMYBVHDNDNVHWOIAGFXC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.3339885338293773);
    msg.setSource(42066U);
    msg.setSourceEntity(174U);
    msg.setDestination(28075U);
    msg.setDestinationEntity(167U);
    msg.formation_name.assign("XIGPOSZVSPFWLMFEWSBRCZPEDGIGJHYIHBZVSYWFZKPFCRKACDXLPIJHWQCXYXDZXOEQDQPJBEOJWXJBYDENZVLVBMVSJSNCCAWTMLQRUTJSQGYIRMPKLFPBQCTSNQEKTURYBMFIOIOADABHCKJGNDZGEHKSCLKTZVNLLACNNBUEXSHIN");
    msg.type = 69U;
    msg.op = 91U;
    msg.group_name.assign("ASNZMFGDEQUGMCUIAKEQVSAPXEGZGLTOGALESSABFDCQLOKMNCTWJKBUQZTIWTMCLFFHZGVB");
    msg.plan_id.assign("DSHZNDFHKYOLJFJRI");
    msg.description.assign("FDPVHZAOJSAUDSPTCIGSFOWCFOBEJEWMVIYCHPDAFUQTOKOAYGMMQAKMLITLGFNDRPHOGVDTULKFSJEMSDCUJFAQMYZKXKZGRFMNWQGPBWVIEEXCZNEVQAFYYUOBUTTLFOGCCPIRWMQZHRCHVRRSICHJKZGJBIHLHDXYIXKQPPEQSJLRWCAVSTNTKJVQSYBGJOYROBZYQEPUXRTZMXMJLNYIAZEWBNHVHPKKUUBWADNNLGESDXXL");
    msg.reference_frame = 244U;
    msg.leader_bank_lim = 0.2904996589244031;
    msg.leader_speed_min = 0.8683296403393032;
    msg.leader_speed_max = 0.6778809908188481;
    msg.leader_alt_min = 0.4485546609272081;
    msg.leader_alt_max = 0.7341274605970315;
    msg.pos_sim_err_lim = 0.19045698967939528;
    msg.pos_sim_err_wrn = 0.736853076219134;
    msg.pos_sim_err_timeout = 12883U;
    msg.converg_max = 0.47636815345620565;
    msg.converg_timeout = 32275U;
    msg.comms_timeout = 17066U;
    msg.turb_lim = 0.7367413116548205;
    msg.custom.assign("EOVCJTIBUXMJTBHBJTJECJKCYGGEIGVGYDAYCCYKOEUWFAAHLAKIGKEFCXILWNMYZVNRMVSSUPRDPXLHRXNRYCXEHQHIONNYZLWKPPSFRNOSFAPMJPBCUUZDHQFWOLWXTUAQEIOKTFLZSGMZCBVQEWSROBAPQYFUJTAFVMKSVXXDQXQTIIWUMQRHVDGZHGNPHITIQCTLD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.21907729023069233);
    msg.setSource(57309U);
    msg.setSourceEntity(8U);
    msg.setDestination(21098U);
    msg.setDestinationEntity(2U);
    msg.timeout = 42565U;
    msg.lat = 0.720866526289757;
    msg.lon = 0.13476337777506853;
    msg.z = 0.24335478100822183;
    msg.z_units = 101U;
    msg.speed = 0.005418416755581856;
    msg.speed_units = 166U;
    msg.custom.assign("UXGOBIVFYESPZIJPKGXWAJLMZRWBTIJUNHZJDJEXQQCWMCTXGABNORCMPRMOOIQTGSNOWKCQNGGXLKRPBYWWELDDTWZGFPMUVMUVBLSFOVDHWXUFIAASIDJKZLMCUDPIJHTNBFYCQQBDXYPNZVVRKBEBLKANRBCIQIFYVNVHWGHTEZZZCPIEVTWOFVUTRLYGXFS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.7388416003057044);
    msg.setSource(53197U);
    msg.setSourceEntity(27U);
    msg.setDestination(11596U);
    msg.setDestinationEntity(37U);
    msg.timeout = 21661U;
    msg.lat = 0.18707193533433875;
    msg.lon = 0.4373041332224178;
    msg.z = 0.5734953435361159;
    msg.z_units = 237U;
    msg.speed = 0.5636132750850051;
    msg.speed_units = 120U;
    msg.custom.assign("CRHBPFYHJDLQWCMII");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.40793843617377445);
    msg.setSource(18151U);
    msg.setSourceEntity(26U);
    msg.setDestination(1662U);
    msg.setDestinationEntity(123U);
    msg.timeout = 3838U;
    msg.lat = 0.6383070728046851;
    msg.lon = 0.862707716268459;
    msg.z = 0.6728171759960999;
    msg.z_units = 129U;
    msg.speed = 0.18214619309865088;
    msg.speed_units = 187U;
    msg.custom.assign("LOTGSPHTSUYKLOWHFGHFXRUOURBEBHVVZEXTDAQZENZBWNYUZODZGGDBXLBKHLTIKIOBTNXJPFSEQNKLKAEALZLETBEVPFJPQSAYCWOHSKFCVJAYDQKXVMWQRSKHYALWORRMUXRZBMTSEQGRWXIQWHUUXIW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.3416941288913544);
    msg.setSource(8863U);
    msg.setSourceEntity(128U);
    msg.setDestination(50468U);
    msg.setDestinationEntity(85U);
    msg.timeout = 53819U;
    msg.lat = 0.6508831083864943;
    msg.lon = 0.9550847039005591;
    msg.z = 0.9728099150098252;
    msg.z_units = 253U;
    msg.speed = 0.9628287700081309;
    msg.speed_units = 114U;
    msg.custom.assign("IAKBPBSNAKPQZRNIDIGAFXCAIZRKDWOWUNQPEWSGWPGPYLPOTGJEGUVUJSIZLUKZIFNGJXHQOFKAFJXXJKDTXNSTFWJNMRPQWMLGQRNYKCOTOJQMRQIHLJZDSOUWYBGCSHCSERQHDCQBHOBOTRMRTHFPEDERILCFBPTHAKBHDDAXIUCZAWENJETCFEHZMZPMU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.1567766655446955);
    msg.setSource(6293U);
    msg.setSourceEntity(132U);
    msg.setDestination(32213U);
    msg.setDestinationEntity(234U);
    msg.timeout = 21661U;
    msg.lat = 0.6307385447901521;
    msg.lon = 0.554965146570325;
    msg.z = 0.8289216235709804;
    msg.z_units = 15U;
    msg.speed = 0.11516686188799041;
    msg.speed_units = 213U;
    msg.custom.assign("RLJATZEQVGZJVYTCQEOAWYPCSNEYQNGCQFFAJRRVFHKTKRIQMMZLIAZNSJVUICGPGBMBLOCJQPTQFZICJWADXAYGMZAOLHRVMLWSE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.7683903393546543);
    msg.setSource(10703U);
    msg.setSourceEntity(234U);
    msg.setDestination(44052U);
    msg.setDestinationEntity(243U);
    msg.timeout = 27956U;
    msg.lat = 0.19399205759835847;
    msg.lon = 0.5755475453115619;
    msg.z = 0.6271508206086317;
    msg.z_units = 38U;
    msg.speed = 0.7732553821005875;
    msg.speed_units = 160U;
    msg.custom.assign("BMBOWYWMPGJQBNRNZLZZFUMIWGMEIHOVTGZBLEFKUALLGQUPKFPEZDHRBNLAKXTHVDOIISQNIPFJOIMGUYQTCJMTNCWQWQYENRIRZHDDRVRKXRTYLMDPFPHZBEYLLSK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.6346694588862695);
    msg.setSource(9582U);
    msg.setSourceEntity(202U);
    msg.setDestination(44423U);
    msg.setDestinationEntity(188U);
    msg.arrival_time = 0.05175121107621816;
    msg.lat = 0.7488173560779715;
    msg.lon = 0.8986343243752692;
    msg.z = 0.15088156494967475;
    msg.z_units = 6U;
    msg.travel_z = 0.12235138625376596;
    msg.travel_z_units = 85U;
    msg.delayed = 73U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.8495456737818389);
    msg.setSource(5544U);
    msg.setSourceEntity(196U);
    msg.setDestination(12082U);
    msg.setDestinationEntity(184U);
    msg.arrival_time = 0.9001746709719032;
    msg.lat = 0.1274160398687968;
    msg.lon = 0.05122936378940801;
    msg.z = 0.020119167841771812;
    msg.z_units = 132U;
    msg.travel_z = 0.8017438140536148;
    msg.travel_z_units = 177U;
    msg.delayed = 159U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.36509762465314766);
    msg.setSource(26419U);
    msg.setSourceEntity(69U);
    msg.setDestination(20519U);
    msg.setDestinationEntity(50U);
    msg.arrival_time = 0.9663548240459082;
    msg.lat = 0.7784896236519167;
    msg.lon = 0.34313322496363974;
    msg.z = 0.36667307408309024;
    msg.z_units = 196U;
    msg.travel_z = 0.08003685646594316;
    msg.travel_z_units = 23U;
    msg.delayed = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.14192651504550413);
    msg.setSource(24558U);
    msg.setSourceEntity(158U);
    msg.setDestination(31247U);
    msg.setDestinationEntity(158U);
    msg.lat = 0.9491164646184865;
    msg.lon = 0.46281747977239873;
    msg.z = 0.24176607908833625;
    msg.z_units = 191U;
    msg.speed = 0.7948780596363538;
    msg.speed_units = 14U;
    msg.bearing = 0.5421783978395204;
    msg.cross_angle = 0.5837425981402171;
    msg.width = 0.22554412539404822;
    msg.length = 0.1086586779214106;
    msg.coff = 220U;
    msg.angaperture = 0.4173768353110957;
    msg.range = 35269U;
    msg.overlap = 80U;
    msg.flags = 79U;
    msg.custom.assign("DDKIRBHOCOQBRXWQQTRKUCVSGLNQFH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.48227069927936095);
    msg.setSource(55098U);
    msg.setSourceEntity(104U);
    msg.setDestination(15389U);
    msg.setDestinationEntity(138U);
    msg.lat = 0.7865242410451493;
    msg.lon = 0.4605014465281272;
    msg.z = 0.381763754214165;
    msg.z_units = 59U;
    msg.speed = 0.18524817852431896;
    msg.speed_units = 66U;
    msg.bearing = 0.9875527443640706;
    msg.cross_angle = 0.20988876473443008;
    msg.width = 0.9842450186788311;
    msg.length = 0.9289781723762821;
    msg.coff = 111U;
    msg.angaperture = 0.15260332666045484;
    msg.range = 55392U;
    msg.overlap = 45U;
    msg.flags = 78U;
    msg.custom.assign("IYLMPTABLHKAPYIRECHXSCMALOPFHEWGQRDMRBATDSBXPVGRINTENTCT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.2519256201738781);
    msg.setSource(35902U);
    msg.setSourceEntity(101U);
    msg.setDestination(11776U);
    msg.setDestinationEntity(125U);
    msg.lat = 0.5073754731090018;
    msg.lon = 0.35575248045667485;
    msg.z = 0.7696260055042943;
    msg.z_units = 210U;
    msg.speed = 0.4482077209678361;
    msg.speed_units = 161U;
    msg.bearing = 0.20537698212336786;
    msg.cross_angle = 0.504241112712955;
    msg.width = 0.8430495348061852;
    msg.length = 0.053178531823379394;
    msg.coff = 179U;
    msg.angaperture = 0.647600576076745;
    msg.range = 8363U;
    msg.overlap = 1U;
    msg.flags = 170U;
    msg.custom.assign("OMMYEKZAOUBGMAYTUQPFPMLAJGKIKCEORNZQSDLRDMYDAVTXWFYWOGPLVRNZKRPLBMDYTVGTFFLJWJPMXEOUHVZTCQBILKUNOIIBRCJVJSPOXKTUCYIZRQFBSNIVPUETDASKVJUYSMQSSCHCJHHYALDGXVIENWRLWJEHAWXSRZHFNAFTJFHBOQIXBQGOSMGYZCXQBITKCJXNIPFEDZGLDAZPRVQHN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.48805726685401873);
    msg.setSource(34045U);
    msg.setSourceEntity(33U);
    msg.setDestination(29946U);
    msg.setDestinationEntity(138U);
    msg.timeout = 20548U;
    msg.lat = 0.10912638199924796;
    msg.lon = 0.318630908268968;
    msg.z = 0.4646225903742234;
    msg.z_units = 107U;
    msg.speed = 0.4287782311397822;
    msg.speed_units = 137U;
    msg.syringe0 = 228U;
    msg.syringe1 = 153U;
    msg.syringe2 = 66U;
    msg.custom.assign("CYLEAIHVKJVTKSVTKJRGOIFQGSPXKETMPTNFGKTPSPUAOIFMHSGWRYOTHVWNBGPAZRIQEQDLHEOXCEUMVUHIXPBDNSBLIHPDEFDNPJFLMWQXVWRMVCAIRCAZUQBYSAQZRTEHKDFVJUUQLXLMNDNCTZAJDLNBIGWMDHZWYYJZBVYZOX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.20497693153907293);
    msg.setSource(20245U);
    msg.setSourceEntity(113U);
    msg.setDestination(20763U);
    msg.setDestinationEntity(82U);
    msg.timeout = 44748U;
    msg.lat = 0.5295359512087644;
    msg.lon = 0.681770761837818;
    msg.z = 0.9804078231007011;
    msg.z_units = 126U;
    msg.speed = 0.7415983778709975;
    msg.speed_units = 69U;
    msg.syringe0 = 152U;
    msg.syringe1 = 254U;
    msg.syringe2 = 68U;
    msg.custom.assign("DLTFSRAHOFDDGYPXUAXKLRGSUHQFYMTPVDIFMFOSNMLDKGSNECYUKUWZOBPNLXKOFJQBFKYCURXOJTCUWJQDCZMSZABNHMYIPHOHRZUKCHIXPLVXYAVQEGSPMLRMXPVHJFJHBDAZQGWIHUIGPJIWVEXWNWCSAIYVWRMJNLXTXAINZYTEACKPZZGIPBUDTTQVEGCHBTBTQCVGLUESTVSRQOAWIJWBCJENNKQDEYKBRZVLODFRMNEYESK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.9870101348941942);
    msg.setSource(26358U);
    msg.setSourceEntity(61U);
    msg.setDestination(43467U);
    msg.setDestinationEntity(166U);
    msg.timeout = 58124U;
    msg.lat = 0.6045609764149337;
    msg.lon = 0.16504732371629005;
    msg.z = 0.1935136460783322;
    msg.z_units = 128U;
    msg.speed = 0.5737817744863123;
    msg.speed_units = 234U;
    msg.syringe0 = 117U;
    msg.syringe1 = 81U;
    msg.syringe2 = 82U;
    msg.custom.assign("YAMMCPJQNYREDGFNFFNAUHPXQCEQKIZAHLEBWMLCRDWEXQMTXJNSEGNPBBBBIXISVQZILUHNEUPQNTHPNKKXJZRBYTOWYVUGMBWXHFCWYEQSTJIOGCJIQOCEWDCLVKAYTFFUFACAFAPSMO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.16105384333598383);
    msg.setSource(14699U);
    msg.setSourceEntity(176U);
    msg.setDestination(40804U);
    msg.setDestinationEntity(24U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.47026678094990026);
    msg.setSource(37593U);
    msg.setSourceEntity(35U);
    msg.setDestination(22563U);
    msg.setDestinationEntity(79U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.3730147157266318);
    msg.setSource(38301U);
    msg.setSourceEntity(204U);
    msg.setDestination(51913U);
    msg.setDestinationEntity(4U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.193601481787275);
    msg.setSource(7936U);
    msg.setSourceEntity(86U);
    msg.setDestination(14967U);
    msg.setDestinationEntity(29U);
    msg.lat = 0.02049808985492496;
    msg.lon = 0.12958422364181155;
    msg.z = 0.7050170253994992;
    msg.z_units = 182U;
    msg.speed = 0.3976902304657507;
    msg.speed_units = 218U;
    msg.takeoff_pitch = 0.38309628625607384;
    msg.custom.assign("UKUOFJMMQJNBLONUNMVEWASKOHVPNZFCGAZTKUCEYXVNWODQMIXARJGHHTCQXJYTISGBYMIISXFVQHPEHQXSGYAMJRUNTRVNYFKFOEMYQRZSNJZBTTEBP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.26537338567142443);
    msg.setSource(10694U);
    msg.setSourceEntity(193U);
    msg.setDestination(17107U);
    msg.setDestinationEntity(175U);
    msg.lat = 0.07503272834911678;
    msg.lon = 0.6603631345684449;
    msg.z = 0.7644388624341323;
    msg.z_units = 47U;
    msg.speed = 0.05326888824523446;
    msg.speed_units = 98U;
    msg.takeoff_pitch = 0.506805947457868;
    msg.custom.assign("SHGBNWIZLNUMBKZXKHKBPCFGCZVONLEFABLCPGSZTIYXCFDXWQYHLRHCEKDQBAATUTOLETFOVAJWWMRPUXKBRVTENUIJZORAMMGFIKTISBNK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.7206044065562964);
    msg.setSource(23087U);
    msg.setSourceEntity(12U);
    msg.setDestination(25644U);
    msg.setDestinationEntity(23U);
    msg.lat = 0.7094704017607806;
    msg.lon = 0.34805500802790823;
    msg.z = 0.7162516675026774;
    msg.z_units = 62U;
    msg.speed = 0.092976041108915;
    msg.speed_units = 237U;
    msg.takeoff_pitch = 0.6441602525099916;
    msg.custom.assign("BYIXLWMRMPYZCJXKIJIDUYHESSPQYMFZHDTOXYBNZSTPHSVGYRFVZVABLTQUZGCMZPWTZYQXIJFRNNOFAXNBEIBMJKSGFEVWTAJDJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.3046761332943966);
    msg.setSource(50518U);
    msg.setSourceEntity(207U);
    msg.setDestination(60825U);
    msg.setDestinationEntity(162U);
    msg.lat = 0.2426775772101335;
    msg.lon = 0.04582299732049;
    msg.z = 0.686191431979991;
    msg.z_units = 45U;
    msg.speed = 0.5319634532455904;
    msg.speed_units = 15U;
    msg.abort_z = 0.18657620160370547;
    msg.bearing = 0.988972358767031;
    msg.glide_slope = 39U;
    msg.glide_slope_alt = 0.1699693949718999;
    msg.custom.assign("ZFXHJNAEKPAUOHQRXTWPEJZW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.33008679300069055);
    msg.setSource(16169U);
    msg.setSourceEntity(101U);
    msg.setDestination(18002U);
    msg.setDestinationEntity(215U);
    msg.lat = 0.6084844724693577;
    msg.lon = 0.9748175997487528;
    msg.z = 0.1136468696561217;
    msg.z_units = 202U;
    msg.speed = 0.23052255275595912;
    msg.speed_units = 225U;
    msg.abort_z = 0.4490623819623538;
    msg.bearing = 0.26512878335205026;
    msg.glide_slope = 211U;
    msg.glide_slope_alt = 0.9511803970029094;
    msg.custom.assign("HDIUDCMAGSNEIMOXXJSOQVLNECFMTUFVGJWNAWMMQRRKJZDVSUXKTDWNOOARZJKYIQZKRWRAUVEZHMELOXCUPTWESVIYYPXMXNPQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.06569863485747074);
    msg.setSource(61940U);
    msg.setSourceEntity(224U);
    msg.setDestination(3156U);
    msg.setDestinationEntity(61U);
    msg.lat = 0.9205840884493757;
    msg.lon = 0.9551024984696604;
    msg.z = 0.8024994603347972;
    msg.z_units = 117U;
    msg.speed = 0.12537851260739508;
    msg.speed_units = 12U;
    msg.abort_z = 0.004066585481668827;
    msg.bearing = 0.19166268630488115;
    msg.glide_slope = 123U;
    msg.glide_slope_alt = 0.752431661889986;
    msg.custom.assign("KKWYPHGEVYGVHIZFHTMYUCQQNNNXYMETRRBXJZKXWAQMOHIDSCFEOFOCPYURKBCZKXCCUPIJBILAMUKPZRPPIBENGTCVKITHBXJMBSVQXADLGSNJEMTFXFWHFOVUSDQEODLMJWERJASOASPSDDIDKQXDOLVYWMMCKYJTUFONFGEWGYLMRJEPUZUAZLJVWOZGCBXNIFZTIBHTAZNXCHNFVGHYDQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.20472408014530774);
    msg.setSource(53344U);
    msg.setSourceEntity(250U);
    msg.setDestination(51893U);
    msg.setDestinationEntity(32U);
    msg.lat = 0.7610179033982787;
    msg.lon = 0.899321287947573;
    msg.speed = 0.5667435790786358;
    msg.speed_units = 231U;
    msg.limits = 11U;
    msg.max_depth = 0.614805565603637;
    msg.min_alt = 0.9514117446231196;
    msg.time_limit = 0.4494761904159924;
    msg.controller.assign("DCTOSKUXLAHSKNGBZJXTOYVGTHXWNBTCUPGQVHWAMZTFRDGZOIJIJZYNKNDVECNXKQZOTVUVOIMYTZPMJPSUZAP");
    msg.custom.assign("VCEXUHHNVKVWAGFKWJULCTYVUOJVXLSZOUQCKRVHSITUEMFFCXAOXNWLYJZJDKHNAPJBRLFNPXMNSRMGFOVJPFLGYAMIPZQPNHTAKCBPBTTAVXHBFYAGQCTWQCCVKMZLHORWMFEKEMZKASEMDBQSJNRPBDKBCEWGQURPZUD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.923809202664083);
    msg.setSource(56671U);
    msg.setSourceEntity(59U);
    msg.setDestination(31942U);
    msg.setDestinationEntity(40U);
    msg.lat = 0.42324339915652576;
    msg.lon = 0.9211924380331012;
    msg.speed = 0.6906666997572225;
    msg.speed_units = 175U;
    msg.limits = 253U;
    msg.max_depth = 0.4897685168427156;
    msg.min_alt = 0.4239075309536795;
    msg.time_limit = 0.3696486726290964;
    msg.controller.assign("WNRLFNORHXIEZCHBUSLDSLYQVWPQRAQEXBZIBRPWGLKQSEMJZWENZUUNMYLJOFHCALGVNDSTSAIQMKDEIINXXCOEOGNXTBURLQDVYVTNQMVDGDZHAZBFTATB");
    msg.custom.assign("NEIQFKNWQGKJAPFSCVSHOESCLKVMYYFRPBZYJMEQCQECTWVTVDALXIRRLPYIBTFOSZDHWWEZNGMVSIYJMJODDZJLTDHIWLYIDXICTASBNWWREIATBGSUHXCUKIZJSLNMHBNNGKLWPIOUMDCAOYZCELDHUUFXOHF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.5288217582240908);
    msg.setSource(27190U);
    msg.setSourceEntity(254U);
    msg.setDestination(46578U);
    msg.setDestinationEntity(41U);
    msg.lat = 0.665113207772491;
    msg.lon = 0.288467761214951;
    msg.speed = 0.7774456045870625;
    msg.speed_units = 103U;
    msg.limits = 149U;
    msg.max_depth = 0.9212474767284488;
    msg.min_alt = 0.2565951333725335;
    msg.time_limit = 0.11741555776260781;
    msg.controller.assign("IGBUJKMJONRVHSJRORSGFLDMLQPHIACNHGNXFBCDYTAUZCKYYUSWPMCQTMDSEHATIEXFQUDWXMCDEVPKLTPNFGLHFWHBXQVFNZKMGVZKCEEQZDTYIFXTMFBOTWZOXOWPUSAXHROG");
    msg.custom.assign("PKFBZIXALZTWMLXGKRBFUHQOEUOGVKYDNWNRZZEAGXFQOAPDOTISJIPIJAYIVQOPOCWZYRWHNSHIQFMCWRHKQLVMOXZXLWWFMXBRNGLCUYCFSYWYKCOSQHYZASRAXJITDUFLKULYGCMPJDZGBDDVELUVHBVNAJBTUVRGTOTMTCINPTHDHARXLKUECXEPTPTGFMQJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.623171172726509);
    msg.setSource(28351U);
    msg.setSourceEntity(100U);
    msg.setDestination(17932U);
    msg.setDestinationEntity(35U);
    msg.target.assign("MHLHVROPINXMMCCXSAEBXHVSKIYVIONDABFYYLOVVPOIJPV");
    msg.max_speed = 0.4782425215294076;
    msg.speed_units = 53U;
    msg.lat = 0.9144940999948122;
    msg.lon = 0.035403198450227436;
    msg.z = 0.17647325502704914;
    msg.z_units = 107U;
    msg.custom.assign("KDQPFFLHRIEHCTWAFVNJXMDDTSPJDCOYNBVGUTQAZMNHMOLIBFABJFWENUNBYDOXWFPZXMKKSTKKBCYJYETYAVBWXQMWRLENHRLWIXBAGULIZKSIKPCFQGVXZJIYOZPRHYZSYHKSXSCCJDMZPPMTCNRZVJNPQQHGTVWGOQONBIUSXTRJZBDZWLDPHAALAFTGRIXBEUGANICPEGK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.06283816186059854);
    msg.setSource(45163U);
    msg.setSourceEntity(0U);
    msg.setDestination(65453U);
    msg.setDestinationEntity(156U);
    msg.target.assign("HIMYKOTDHVMLTTYQKPPROPPKPZMWRLSTKJRMQEDWYSFZMPPZCYEIDACOBCFUJQMZMANJXGBGFUMZIHKIHLVXVDXUYGEBIANPGLFZLYVNNDMVPBKTXOTWCAZGJJOGHFRAOEKUIWJWSKBHUHXVCSWRQNQTREDFRBNGGQCOEDHKTBXCAYSIZVJSXLRCAIWNAWGINCULOFREPXYZFXKQLULFEOIVVANWEHRQVOUSDDCBYTFLJBYMEHQWSNSZUX");
    msg.max_speed = 0.09482490254873299;
    msg.speed_units = 187U;
    msg.lat = 0.0246682666163337;
    msg.lon = 0.5805065186466175;
    msg.z = 0.7806678613422688;
    msg.z_units = 18U;
    msg.custom.assign("KCFESXIZRZAFNWYNFDVGZJTUTWYMCBHRRAICGHONXYXISETFBGQJHNYWGREMJPAZGQBHQYOKYESTGWUCTCLEHDULZAJGGFYR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.9739510754933393);
    msg.setSource(19124U);
    msg.setSourceEntity(46U);
    msg.setDestination(37587U);
    msg.setDestinationEntity(236U);
    msg.target.assign("BUOFOHFVVGWMWHSTWMBRJOELLAZJUMWJBDQPVOKEXHDNXMXNMLBJZYKOVXCHIFQLLHTVBQTCRDSFPLBLIXPDDKDPZKQRZZCJNSXF");
    msg.max_speed = 0.2344174288382571;
    msg.speed_units = 199U;
    msg.lat = 0.48894770513091124;
    msg.lon = 0.4134566321514671;
    msg.z = 0.6393779491009676;
    msg.z_units = 251U;
    msg.custom.assign("IDIWOXSWVMIKGIMZCLJUOJGAGVNMKAADZCMLXATZDSHHDEGXYJVRYSBJKBJNUQOQXBHDKXBREHNTKTU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.3449117043796529);
    msg.setSource(32103U);
    msg.setSourceEntity(29U);
    msg.setDestination(3664U);
    msg.setDestinationEntity(64U);
    msg.timeout = 19526U;
    msg.lat = 0.2157515780553768;
    msg.lon = 0.7179846506712418;
    msg.speed = 0.48615795651482396;
    msg.speed_units = 193U;
    msg.custom.assign("LXXRTIOVQWVSBOAGMIMCGZMVFDJGKARKDSFKJHSPBCSJGIMLXNFWLWAPQZYGMAEVOQYDSGALHSLAFFRNLRYVTHPXKMDBVQUQNMBGVXWFHUTUIGYANONELZTOTOYCBCDPISJBPKDBOPXBQYIUTHDJZCMXLWIRWTZGHIOPKPQDUMBTCEWVIFZNYJWNOAUFAEDERQXEKFKYKP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.8634853846678804);
    msg.setSource(7236U);
    msg.setSourceEntity(130U);
    msg.setDestination(36856U);
    msg.setDestinationEntity(214U);
    msg.timeout = 33094U;
    msg.lat = 0.016488969045769797;
    msg.lon = 0.2320869168449632;
    msg.speed = 0.8891031359138165;
    msg.speed_units = 157U;
    msg.custom.assign("PRGRRPBJDQYQBCAIVDLJAHKFJDFXYTNXDKKVEFRMWUOKKUEQHPAWNELGVUWHZKYMVUFUCNISYCTZKNLKJROMZGBIWLFGZTPRJVJHVIVUGXXHSLLWTLFPBSYWEUVNZWYETZQMYPOQMSOHBXSAXAZZYTAJWMRCAWJOIUOBZRIMVCEGESFWCTSBXSERNIUOTMLQTLUDADXSEECMIDGNYFHHLGICBPAOTDBKOPMNSOXPZYDIBHGPVXQQRF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.11183964716419703);
    msg.setSource(29637U);
    msg.setSourceEntity(238U);
    msg.setDestination(9339U);
    msg.setDestinationEntity(53U);
    msg.timeout = 62646U;
    msg.lat = 0.25261939956702606;
    msg.lon = 0.5393246489378438;
    msg.speed = 0.9574748258642415;
    msg.speed_units = 69U;
    msg.custom.assign("PTUNPNLZKEFNJHDSBRSHYOYIEROSXFCFCHVOLDSMXAMMCNQAKQHACTXNLRYYDLPVFITCEALIGZBUWWJBQLBQVJGGNGPKEZSQWHSCZUTLFWVKBGBABVOOVMWFVXYPPZLQGYGJTBRICOIMKRXJJYHYOQMPMCSUNXAPGMSHXQEWFEJUUZQBXWEIEMZLURJDGVAIJDCAY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.9650368715327645);
    msg.setSource(42368U);
    msg.setSourceEntity(21U);
    msg.setDestination(63266U);
    msg.setDestinationEntity(47U);
    msg.lat = 0.05951456954202494;
    msg.lon = 0.3537836867425349;
    msg.z = 0.2415121165850912;
    msg.z_units = 134U;
    msg.radius = 0.1957711266711596;
    msg.duration = 27373U;
    msg.speed = 0.39674476394247193;
    msg.speed_units = 159U;
    msg.popup_period = 21532U;
    msg.popup_duration = 40035U;
    msg.flags = 93U;
    msg.custom.assign("NXQNGDDCBAWHRYPISYRUBGUYBOFVAVPDLHJXDESBRZXIEXZBPTCAMDVKICDFVKJHSAUNTRPOMMUMGOH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.5586925618618862);
    msg.setSource(887U);
    msg.setSourceEntity(171U);
    msg.setDestination(57988U);
    msg.setDestinationEntity(217U);
    msg.lat = 0.8966197378450115;
    msg.lon = 0.03234386708397041;
    msg.z = 0.3262751774744611;
    msg.z_units = 21U;
    msg.radius = 0.35487337306252564;
    msg.duration = 31768U;
    msg.speed = 0.28023326766589574;
    msg.speed_units = 94U;
    msg.popup_period = 6360U;
    msg.popup_duration = 15129U;
    msg.flags = 188U;
    msg.custom.assign("NXRBWVYUSUAFXCYATFPGLIFPUFMPHKMRQVWYWMZOIFMEILRWTQYVNJLBXGOSDJJIRPLNTQOUQULGTXNKVAFJWCWQIDFUOODYZJXRKEQZCMPCPSVHRFESCUVZJQIHSKKDEPVIURSHMZLOYLYXYFVTHAPQEJIBDSBMFETJGDENEPNALKCGLRJACKYHZDSIHBXZGGNRWXNBGTIBZEXUOOMYADXKWWQCSAAWTUPMMOZENBBHQJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.2987321445295229);
    msg.setSource(51179U);
    msg.setSourceEntity(194U);
    msg.setDestination(47244U);
    msg.setDestinationEntity(153U);
    msg.lat = 0.814027568376848;
    msg.lon = 0.47650965931315903;
    msg.z = 0.7265899954287792;
    msg.z_units = 86U;
    msg.radius = 0.8651604378275772;
    msg.duration = 1753U;
    msg.speed = 0.17111037784577776;
    msg.speed_units = 55U;
    msg.popup_period = 30645U;
    msg.popup_duration = 56583U;
    msg.flags = 125U;
    msg.custom.assign("UFVNZNPPNAMCZRSRMEMUULFDEDSMRFTZJTFXECRWDIZQSVDMBSUWBGBXOICNEDFHYTAPZCMZNTOBSRBYVAQLWGSCLYAAQKJF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.8632371070867307);
    msg.setSource(59658U);
    msg.setSourceEntity(203U);
    msg.setDestination(48550U);
    msg.setDestinationEntity(176U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.5563280802685376);
    msg.setSource(29150U);
    msg.setSourceEntity(0U);
    msg.setDestination(44518U);
    msg.setDestinationEntity(225U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.7053688793253837);
    msg.setSource(53991U);
    msg.setSourceEntity(129U);
    msg.setDestination(63285U);
    msg.setDestinationEntity(55U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.3781755899953211);
    msg.setSource(4484U);
    msg.setSourceEntity(91U);
    msg.setDestination(8598U);
    msg.setDestinationEntity(177U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("CGDBMDEDNAUVQSIQYERLAORJPRWOEVXPTEPEQUEHLVVPNYRJRNLULCYLMJVGSKRCQWZUTDXDMZMNTKBRJHODPJPPAFAXJLLGKNWXDXYIJOOHIUNGAZRMUZGFKCHGJWDKDAPS");
    IMC::Teleoperation tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.custom.assign("FFEHADTHLDQZMGQHSRMIAVYBKLGGYQNAOMJETSDLUHGZTVTJDQGQWDKRYAVYEOMMDOKCGMKJHOPTJUTUWVCPQWEGJAYIFOCOLXPTNDROSKCQKGLYIDJRNYLWVSCAKZCAJKHDTNJUXBQUVIWGPCERUYHAJXPLIWYXUCHRCLVNM");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.08919177807103362);
    msg.setSource(31391U);
    msg.setSourceEntity(10U);
    msg.setDestination(14065U);
    msg.setDestinationEntity(11U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("QFKKTTPGDLTBBXSOIRPEPWPHWIJZQYNNIBDERIOBCXTDCSVGYIRMTOZCWNFGJBCQFBJMHTASEQHZXA");
    IMC::LowLevelControl tmp_tmp_msg_0_0;
    IMC::DesiredSpeed tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.value = 0.9179865298521491;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 164U;
    tmp_tmp_msg_0_0.control.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.duration = 56962U;
    tmp_tmp_msg_0_0.custom.assign("CEJNLMLBOGSWZDHJADUGIVHCXQBBPPXPFNRRDIFJKODRGNMTVVZLGJLQISQYYKQEHURIMPCTEZVSXLTDNGXFFAOMAPKANSGTZCMWAGDSHZYWYPRSRVHQIQWASJCJXCECMTBWBPRKKYMFRQLTLTEGYMDZHUXHUJASUOIPALKAUWDKNYSDGCEUHROFXUOPOWCHWUYCFJWVLJGHFJXIKVOUIMEABNZZ");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::SingleCurrentCell tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.lat = 0.721692563795054;
    tmp_tmp_msg_0_1.lon = 0.37947135598137416;
    tmp_tmp_msg_0_1.depth.assign("HIPWZTUFRERIKKUTCTYUPCRCHIYZGLFBBSKUFZRXQWYIOZQILOGXPSAXRYEHFKFQVZKVDSTVKROQIEREMLBSQCFIHQOFGWPHZLJAQGZFNJJNJHGNUAMSJHHVBHJVLCALPYVVJMLDYQNRWUUURYKKOXVDMGMXQDOGAEMVAXWDEWTCKBLNZNCGCEPODUTBICRNBYJDPGHTZASYAEXWSTAIENXWEWADS");
    tmp_tmp_msg_0_1.vel.assign("HONDIFIGLQNWHOQHPPTEDTIMRVZGIMERUXQKJDCJCDJXLGWYDIVEXUGBFPATZBDGMAFFAXKOTIMLHHCSIRUTXYILBRRORJ");
    tmp_tmp_msg_0_1.dir.assign("ISXRJJZTILYVPUGZAHHCEFXQHMDFDBQADIFFQHQMKBNGNOVOJAYIKFYLAXFVANLPISCSYRUIFRBPPXRVALZPTDMAYEBZZESMDWWCPKWLBQHOJNJBJKCBUFSUSEODUNNSVQURZYOVVOGDLCECNKLQDEGIRKCSIHGWMAZNTTLQMDKJLOXXRTTTHJEIKNWTJBXXFGRMCPTRIJQVSEKGWGCOHUYZUDKXHZPOMUVWEGOWGXPUWAQBSEYVBLY");
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.4925738833223601);
    msg.setSource(22081U);
    msg.setSourceEntity(96U);
    msg.setDestination(27169U);
    msg.setDestinationEntity(213U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("TQRFVUARUHDBUYYDRCYUMWYJABPRDJDTLGHSNXIEQEAPDQSVWOWROPTJPILCMDGOKRNVANDJCDRVGXZE");
    IMC::Takeoff tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.11254185070164235;
    tmp_tmp_msg_0_0.lon = 0.5464899948391507;
    tmp_tmp_msg_0_0.z = 0.006485462382077589;
    tmp_tmp_msg_0_0.z_units = 181U;
    tmp_tmp_msg_0_0.speed = 0.5420852754503724;
    tmp_tmp_msg_0_0.speed_units = 220U;
    tmp_tmp_msg_0_0.takeoff_pitch = 0.8477313672125497;
    tmp_tmp_msg_0_0.custom.assign("SSCBESGTJILGZNMOUUADLGZJBQOSSIJPYRWJYCWBHIMGCWKTAOIIVWIQJNYODPILEWPDJGFSDLXMMEWKGNWVUTFIOLQYMVYMAVJZKEZWQPXYIEHALOUFPXSDDDLMMVOABUHRXTJQQACXVTDLKCTHYOWGETZKNFYHJAATPFPVKRXZFAZKFRNHCMWDPOOBZHNBCHCSKUBNITMTKKELDNUVRXFESUERQQFQRSRXLCNXRJAHUGXVZ");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.907029463321229);
    msg.setSource(5038U);
    msg.setSourceEntity(202U);
    msg.setDestination(29506U);
    msg.setDestinationEntity(108U);
    msg.timeout = 52093U;
    msg.lat = 0.6808499828417637;
    msg.lon = 0.17369825237714787;
    msg.z = 0.6457216699067719;
    msg.z_units = 27U;
    msg.speed = 0.9344805611997119;
    msg.speed_units = 33U;
    msg.bearing = 0.9771560199344342;
    msg.width = 0.5925309091284123;
    msg.direction = 156U;
    msg.custom.assign("MHKBKMJKBKCSTDBXQKNCDIAOBVJQDODUKLRALXIFZTNLGOPAEFQARWONQLTUVLTJRQVGECWCWPASUNWZPHIXMVVCPECDZZGXTJPTILDOVWUFXJTYGOGLCQZPIEOYMFHVMUEWWMAVSOYPZSSGFSBVYKXULDUAQBJYIDHFUFOBLJNEJYEIMPCRHNYJQPQQEYZZYRBH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.037756764609640836);
    msg.setSource(8700U);
    msg.setSourceEntity(54U);
    msg.setDestination(19788U);
    msg.setDestinationEntity(109U);
    msg.timeout = 39303U;
    msg.lat = 0.7740221715164496;
    msg.lon = 0.27462387494809326;
    msg.z = 0.13787639609826552;
    msg.z_units = 146U;
    msg.speed = 0.41746692760750015;
    msg.speed_units = 199U;
    msg.bearing = 0.6525491512135193;
    msg.width = 0.41188603020955405;
    msg.direction = 187U;
    msg.custom.assign("KZHKBQBBXMQQRLXWUICBAJUNENQCVQMKRSOSLNXPKHHBNRYVOFTISJPWTIFNRBMHVSUCHZEGMFDLJQGYZYKADZATYMXMVPLZITVHWIDEESUQXCYMPORYVLEMFLHRKABRSLFUDXGOAKWPRPAOMMFGXGHDYZKWJNWNJZOWFZVGCFOVGZK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.5697445081078341);
    msg.setSource(29642U);
    msg.setSourceEntity(54U);
    msg.setDestination(22251U);
    msg.setDestinationEntity(211U);
    msg.timeout = 26300U;
    msg.lat = 0.06772741180954911;
    msg.lon = 0.44743647876776593;
    msg.z = 0.8034270849282628;
    msg.z_units = 11U;
    msg.speed = 0.7773838155826638;
    msg.speed_units = 34U;
    msg.bearing = 0.07504569867798494;
    msg.width = 0.35286687476749756;
    msg.direction = 80U;
    msg.custom.assign("RFYVUEEUOUGMVOSWGOAHSBNHWCJQOAOPYKQDONCHFLGNMTIRSADLMHDYAGPIDRFEDZCZMMZCTVKHMRBYPWCXYNJSAONUOXIPTKDJYHKCDMQLENXGUXWWKBAZXHLTOEFZZTOKSMGMKLQVJFHHDIWQGFPTVZSXP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.061912015713170954);
    msg.setSource(60310U);
    msg.setSourceEntity(227U);
    msg.setDestination(6951U);
    msg.setDestinationEntity(8U);
    msg.op_mode = 141U;
    msg.error_count = 173U;
    msg.error_ents.assign("HAVCXETAGWEZIBPHCXNOARISGMHYOLNHVOUMCABYNESPRUDCZHNFECCOTGGXPMOZTIZFLCAHCSGHWTYXYDIMNXUNPQVRPRQBZREYMBJONITKDVJTLHTGJBKPRLUSAADQAKMDRCWGXGVZKWUQFGLKFPBFSLTEWGUFUMNPKTQQLOZBEBBROJCEYJKOUIQBWKSIAXLUMJVNFZRZYQQVOLYJMADS");
    msg.maneuver_type = 34071U;
    msg.maneuver_stime = 0.6476481913506228;
    msg.maneuver_eta = 64108U;
    msg.control_loops = 4241730965U;
    msg.flags = 114U;
    msg.last_error.assign("XRKYUQSVLPPYNTYBHBZXJHGYYTVIWWZBZGWMRSHWROAIOMOUVFSZAPSTUZUKHGILQHMLXRXGSDGJCCRMVZKWTDJDBGKQECVHBCEXJAMGNPNABEKTMXSWVIWMTSIOJGFLODZTHIWOYNHIKREPUQDBAECANU");
    msg.last_error_time = 0.11626938175379131;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.9183531817248574);
    msg.setSource(9006U);
    msg.setSourceEntity(227U);
    msg.setDestination(47397U);
    msg.setDestinationEntity(33U);
    msg.op_mode = 134U;
    msg.error_count = 235U;
    msg.error_ents.assign("YEQAUIDFOCSLMULAICNXQYYTQMPVKGKYFSPBHA");
    msg.maneuver_type = 54591U;
    msg.maneuver_stime = 0.4122338398554152;
    msg.maneuver_eta = 654U;
    msg.control_loops = 387188627U;
    msg.flags = 65U;
    msg.last_error.assign("FQOFGGIFHOJFIGCXWSBSYUTYKUKSVCVGFVVYRGPAZCARPHTPUEEWJZQDBWZWMCNBGDPLHWYUIPQGWQJLLHSGCIBTLONHEEFPY");
    msg.last_error_time = 0.6644230410383446;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.55068480068957);
    msg.setSource(44795U);
    msg.setSourceEntity(51U);
    msg.setDestination(16204U);
    msg.setDestinationEntity(67U);
    msg.op_mode = 72U;
    msg.error_count = 18U;
    msg.error_ents.assign("DFKBEMPBXIZCVETCQEFOBMPGKOLSDVWLMYSBJGEWEAIRNKVPFMQHXMIZYYSQONWWJHKGBHUFUKKUEUPKJIKCQNEDLOUCHUYQESYLPO");
    msg.maneuver_type = 63003U;
    msg.maneuver_stime = 0.0071933365831533536;
    msg.maneuver_eta = 57031U;
    msg.control_loops = 1313590518U;
    msg.flags = 48U;
    msg.last_error.assign("XYTGMTENKOZHZJPXAJKDWZVOWPPFSABCHSOA");
    msg.last_error_time = 0.45844007165358913;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.4257704458500986);
    msg.setSource(63550U);
    msg.setSourceEntity(117U);
    msg.setDestination(55718U);
    msg.setDestinationEntity(254U);
    msg.type = 211U;
    msg.request_id = 10351U;
    msg.command = 111U;
    IMC::FollowPoint tmp_msg_0;
    tmp_msg_0.target.assign("UYHSTKMJDWLIESUFQSYNLOLDQUHNVGXCOTYHWMDNDGXRDNGS");
    tmp_msg_0.max_speed = 0.7358768746273008;
    tmp_msg_0.speed_units = 213U;
    tmp_msg_0.lat = 0.881586879496489;
    tmp_msg_0.lon = 0.13911084810076235;
    tmp_msg_0.z = 0.9790316229054684;
    tmp_msg_0.z_units = 185U;
    tmp_msg_0.custom.assign("MZXOXSUQNROONKFSAAULJFHUZHBTCMXQCCJRYUHVKCYGIXBBJMAXPSXZINLVNRSIELTOEZOMMTSJWLNWVYKFPWZEWPUSEKQFVRGOBCHLHEDWNDOJNKUIMHGOYGZFGLZHQHDUTYZCKODWZMJAI");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 1648U;
    msg.info.assign("RCIVJKMEZROSOVXHFFSZHAJJLLXEGEVDSLVNJYDLDLYZCCEAWICANEMRKPWMLKOZUQYSGNLTROHHTXQTJKIJKBMDLYPPQSDLQMXGZKIQAVPHCWMSRPCGYEVFGIFCNMNLSHWOIQBAXWQXBBBWTBGPZNFIZHANEPCAIGKFFSDQVNIOSUHOPRVRYBKTYGUQJHUFRRWZBDXNTYXHMQZZVUGYYO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.7251925655007512);
    msg.setSource(20930U);
    msg.setSourceEntity(35U);
    msg.setDestination(7902U);
    msg.setDestinationEntity(233U);
    msg.type = 141U;
    msg.request_id = 54850U;
    msg.command = 101U;
    IMC::FormationPlanExecution tmp_msg_0;
    tmp_msg_0.group_name.assign("RPTADGUQAHJMYDUYKGZWGBBLMDWHLENGY");
    tmp_msg_0.formation_name.assign("ORMKVCGBDAXTPJZAZLZYDZMMVGKZWUOQABNHNEZHBEXK");
    tmp_msg_0.plan_id.assign("HTCERTWIKUKHPFSURAGNKVZCCNFZASXIMVMIFAYPHREBSBUQUBMRD");
    tmp_msg_0.description.assign("HYHBABEIBBRCRSDGUXQHNTZMRHWECEWJJKGHPVFSADPIMNUL");
    tmp_msg_0.leader_speed = 0.37194880404394226;
    tmp_msg_0.leader_bank_lim = 0.26304727849545506;
    tmp_msg_0.pos_sim_err_lim = 0.4060865350845585;
    tmp_msg_0.pos_sim_err_wrn = 0.05091432364059578;
    tmp_msg_0.pos_sim_err_timeout = 3955U;
    tmp_msg_0.converg_max = 0.5272671371705088;
    tmp_msg_0.converg_timeout = 28241U;
    tmp_msg_0.comms_timeout = 29811U;
    tmp_msg_0.turb_lim = 0.7562726052851292;
    tmp_msg_0.custom.assign("KYIYCQUVMOWQJXKBVXNOAXDEZGVXKSYLDQKOHFOSWIWMUJVOLYFXPJUZJRHAG");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 31467U;
    msg.info.assign("QDSVPSAXTXLARPZCOFUYULPYBULTKNJYTRFRHQGZEWOKYKHSEKXDWN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.7217395960553223);
    msg.setSource(50755U);
    msg.setSourceEntity(8U);
    msg.setDestination(62327U);
    msg.setDestinationEntity(154U);
    msg.type = 113U;
    msg.request_id = 5706U;
    msg.command = 216U;
    IMC::YoYo tmp_msg_0;
    tmp_msg_0.timeout = 39207U;
    tmp_msg_0.lat = 0.7127996227668896;
    tmp_msg_0.lon = 0.8152515006267027;
    tmp_msg_0.z = 0.2616556631331016;
    tmp_msg_0.z_units = 182U;
    tmp_msg_0.amplitude = 0.4459303697070415;
    tmp_msg_0.pitch = 0.4801891548282089;
    tmp_msg_0.speed = 0.8816747434335085;
    tmp_msg_0.speed_units = 163U;
    tmp_msg_0.custom.assign("HJWPMEABZWKFXYLJQVKTPSKGLFOKYIWISOZESROLFFQBTXHJIEQYNGASNFNYUQMJMWKSAXGWZXMDOADSGUSMZTMQDCGNKRMTPXQNPEYGFTTZUNITWMYDAFECFFVHCPYREPCMBZWVQDDIZUALKOYHCGXIDACQRRFOBJWZS");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 27937U;
    msg.info.assign("MUDVDKLTWBWPKAHZNEOKQCIFRLKAFYYLPHIQPGWMRJXFQOBYJURZLJLDCEQQVLEAPZPHWKQACYYIEPGVKQIAQSDZRHHUMDJYXRJDUAKYSDSWWHXNRNOGSRGIPCCKSGRYZKHNLNOIFOBM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.6630226768557824);
    msg.setSource(19844U);
    msg.setSourceEntity(158U);
    msg.setDestination(35479U);
    msg.setDestinationEntity(17U);
    msg.command = 8U;
    msg.entities.assign("SATFPWYAQJJVRGQALIXNNWAOICBHLDYRPLBBYDYMKCPKIVQSIFJOAECZQMJHFNDZSMEXVDCUBHFNGWZLQFISFBUOKJBMTIZXKD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.8266119899754798);
    msg.setSource(64498U);
    msg.setSourceEntity(99U);
    msg.setDestination(62813U);
    msg.setDestinationEntity(226U);
    msg.command = 195U;
    msg.entities.assign("JWWFFHELMGIVIRPNAOSSCGOUHZRBXSEIUDMATQTXPCXJYVVKIIOEOLFMPDAWJFJBQPZOAMKMKYXEZUOSLKKZRXFJMGLIBTYGDDNHCOSSZCGGWWK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.7463256694993257);
    msg.setSource(49990U);
    msg.setSourceEntity(70U);
    msg.setDestination(37588U);
    msg.setDestinationEntity(116U);
    msg.command = 38U;
    msg.entities.assign("ICTPGPJPAAHIQWGUKZOEZXFEXLCARURBGSOWDTBTRZASTXQRVDCIMKFWFXMYZEDCADOQHNELZL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.14751598033964541);
    msg.setSource(52173U);
    msg.setSourceEntity(205U);
    msg.setDestination(30062U);
    msg.setDestinationEntity(103U);
    msg.mcount = 9U;
    msg.mnames.assign("OZMNTUYNKWZCJYVSYFDGTJDYOZGHDKWQZJPADASEVBLAQFJCCQLDNSVXCTNKOXHJRRWSBQWARFKVJLJMEXVXPMTXFPYQMFXIDXTZIBWQKWYRNWBZTE");
    msg.ecount = 152U;
    msg.enames.assign("RUZOAAZHSXWURTQHJQYJJOSCDAOJXUSBBJZIAJVCBRWVCGMFYIDMFQYBPKOUOBUKKGZTMVFZPPWGTQRKWFVB");
    msg.ccount = 57U;
    msg.cnames.assign("LLSQDYDZBHRCPGDIYZVAJCTYHVZRLMFOXYCOI");
    msg.last_error.assign("KDUDXLVPDRMKDBAHRWNSPCCSFUWPNYHBYKJMLOVPOBDFYXIMUZEXRLTALOTACMWVNHAQMREFOCUHOTPAVZDHUSQSMIVDSGSGLQEFOGDZUUANFJHYMZYTRLZNVPNTEIHARCXATJWIGYPUMZJDJAWICBJOYQRGRIBHIZSIBVYHKKGYHGVCWSIVTBEKQQKFETPQAQQVLBCJKXPONFRULFKCGQGEBMFCYNEUDRZWISWXEPB");
    msg.last_error_time = 0.87967957758174;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.15084773427168974);
    msg.setSource(33717U);
    msg.setSourceEntity(139U);
    msg.setDestination(39153U);
    msg.setDestinationEntity(95U);
    msg.mcount = 213U;
    msg.mnames.assign("DGVVBQHUMEUTAANGJSNHGOI");
    msg.ecount = 245U;
    msg.enames.assign("WXKLVKLWAZUMMCYKVPGHUSRCPHBCHDETAXUEUMIRQWTMJWNPKCUAFOWPLOQODHTSLFQEJNFSIONQZTHNRGOBFZVKDLXJUBQNOIQUSCLSCHKIMAWYMHYXXZBVJXYWGXYBSVTWIJJJICRRPGCNSJTSZVDGTFHVJERHEXKYYBLGPAECBASFAKZRMDIZEPEUQZWLXCNDLGMDTDOFBUXNUPQMQGIERDZVYTPAIQBGEGYMYJS");
    msg.ccount = 168U;
    msg.cnames.assign("UHEGVZRJJMESOINDCHWINWDSQPLISQIIMGDXNSQKDUCXOHPVELPUKKMHJZLPVZXYUVAIAWHTYZVCTTWRJRWQHBRLRVBXIDUG");
    msg.last_error.assign("XBEKYSIYPLSZDDCSWSNYXPUKRKLDCFPB");
    msg.last_error_time = 0.8234998075751205;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.19036461653556114);
    msg.setSource(53341U);
    msg.setSourceEntity(77U);
    msg.setDestination(30754U);
    msg.setDestinationEntity(171U);
    msg.mcount = 248U;
    msg.mnames.assign("DSCNUOEKISVMQRJTYYGYXGAGHPCYZILFJQJJDRMHZIOGCPGEJAEEUXUNKCXKWABLOJBIMSUQKILUCSQBXQHFPIGUYZZSHROQDAWELRCSDVHCXMFHNRRUZ");
    msg.ecount = 161U;
    msg.enames.assign("CYAMINNVTDVZHJCILHORPYZFGHLBUMAQWFZJPSKWLRMSCHUCDUXBAJNOYQZIXVZJTJHHAFKKBQWHTQBREWOKBVKOXHUWQYNXGOCFDPRAWIAEQQCZKBNYRXSUEEOOIJWFGIQQNVWDTMRJREZYDZEJCKGULPPMLSUSSDSESGYFXFAGLTFAQYMPIBVDIMJBYOKY");
    msg.ccount = 232U;
    msg.cnames.assign("GPHVHKYXEAKECDFARQZKLFBAKZEKUIJVMSMGGZVIPDLKMRQHBULCPTUEGQSVLTYCCHJHHZRSOWEJXCQARGNCRFNTTUSIQBCWHJUDZMLOAQNTBGIRPNMLVJ");
    msg.last_error.assign("UJJTHRBVRPYNVMKAYIJMUVYMMVVIOKSDDQKSWHUKUOBCLKYFLUGTHALYNSWQALGGKZMBWGEXPPODVAHDZXCTVGJBBAXWHXTISNNKIERPMZOZWTGFOZCHMKNLVNRZYCWVUXRLXSDFBAEPESJELWFQBURFCDWQEAAKURWOGJJJIXGEBAKRUDQXLCZROPHSCPIGFEPYSCSOLYZFECIEFLNIPGYQAVFMSJDBTTRHHINH");
    msg.last_error_time = 0.5541089299329065;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.3239465457264996);
    msg.setSource(60476U);
    msg.setSourceEntity(14U);
    msg.setDestination(7274U);
    msg.setDestinationEntity(161U);
    msg.mask = 203U;
    msg.max_depth = 0.35809470859322534;
    msg.min_altitude = 0.1276402257747442;
    msg.max_altitude = 0.29045041086414636;
    msg.min_speed = 0.19576324964144354;
    msg.max_speed = 0.38669213012975223;
    msg.max_vrate = 0.7201650950263855;
    msg.lat = 0.32779284122300056;
    msg.lon = 0.48732302056539634;
    msg.orientation = 0.8304442397955213;
    msg.width = 0.30006850555644726;
    msg.length = 0.6550912771637215;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.5568435059821653);
    msg.setSource(34791U);
    msg.setSourceEntity(247U);
    msg.setDestination(61791U);
    msg.setDestinationEntity(96U);
    msg.mask = 109U;
    msg.max_depth = 0.23114772206564482;
    msg.min_altitude = 0.522903324407683;
    msg.max_altitude = 0.9668256765878215;
    msg.min_speed = 0.12948495074724242;
    msg.max_speed = 0.08969861106843546;
    msg.max_vrate = 0.0339750301270475;
    msg.lat = 0.7864568229543567;
    msg.lon = 0.5659793868591254;
    msg.orientation = 0.6059212432811572;
    msg.width = 0.10180647208516425;
    msg.length = 0.7436637123071191;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.07761150054731869;
    tmp_msg_0.lon = 0.7788792885188257;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.06089972212587669);
    msg.setSource(45722U);
    msg.setSourceEntity(239U);
    msg.setDestination(43377U);
    msg.setDestinationEntity(101U);
    msg.mask = 17U;
    msg.max_depth = 0.008649659684587752;
    msg.min_altitude = 0.35033466474185115;
    msg.max_altitude = 0.6041470722987458;
    msg.min_speed = 0.7215085890170344;
    msg.max_speed = 0.06018848313780445;
    msg.max_vrate = 0.8279125257208966;
    msg.lat = 0.8556278897372505;
    msg.lon = 0.39560662716989303;
    msg.orientation = 0.2831687186021439;
    msg.width = 0.6583938100746947;
    msg.length = 0.06946369906773697;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.7068973985040824;
    tmp_msg_0.lon = 0.2580336510450705;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.06046725609112846);
    msg.setSource(26401U);
    msg.setSourceEntity(94U);
    msg.setDestination(40947U);
    msg.setDestinationEntity(243U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.24876629994386112);
    msg.setSource(6456U);
    msg.setSourceEntity(172U);
    msg.setDestination(46955U);
    msg.setDestinationEntity(194U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.8328551416099231);
    msg.setSource(48660U);
    msg.setSourceEntity(159U);
    msg.setDestination(49043U);
    msg.setDestinationEntity(96U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.06682464542734312);
    msg.setSource(32682U);
    msg.setSourceEntity(151U);
    msg.setDestination(3056U);
    msg.setDestinationEntity(169U);
    msg.duration = 10072U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.7458486522947756);
    msg.setSource(4737U);
    msg.setSourceEntity(54U);
    msg.setDestination(64706U);
    msg.setDestinationEntity(156U);
    msg.duration = 63924U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.9204350987357534);
    msg.setSource(28775U);
    msg.setSourceEntity(73U);
    msg.setDestination(63001U);
    msg.setDestinationEntity(28U);
    msg.duration = 44394U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.07643960180219322);
    msg.setSource(36636U);
    msg.setSourceEntity(244U);
    msg.setDestination(63202U);
    msg.setDestinationEntity(70U);
    msg.enable = 224U;
    msg.mask = 3108036510U;
    msg.scope_ref = 3521697932U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.6290973220937425);
    msg.setSource(42261U);
    msg.setSourceEntity(46U);
    msg.setDestination(57512U);
    msg.setDestinationEntity(44U);
    msg.enable = 166U;
    msg.mask = 2494924166U;
    msg.scope_ref = 3088299055U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.0641021132112024);
    msg.setSource(64347U);
    msg.setSourceEntity(193U);
    msg.setDestination(15582U);
    msg.setDestinationEntity(16U);
    msg.enable = 147U;
    msg.mask = 1709395890U;
    msg.scope_ref = 250213982U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.42064292680729554);
    msg.setSource(21819U);
    msg.setSourceEntity(53U);
    msg.setDestination(17207U);
    msg.setDestinationEntity(34U);
    msg.medium = 43U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.2425907609930481);
    msg.setSource(42997U);
    msg.setSourceEntity(147U);
    msg.setDestination(33494U);
    msg.setDestinationEntity(174U);
    msg.medium = 146U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.9392022493050881);
    msg.setSource(26393U);
    msg.setSourceEntity(198U);
    msg.setDestination(63066U);
    msg.setDestinationEntity(52U);
    msg.medium = 12U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.9371166453247591);
    msg.setSource(39959U);
    msg.setSourceEntity(25U);
    msg.setDestination(35351U);
    msg.setDestinationEntity(185U);
    msg.value = 0.5874171224668144;
    msg.type = 249U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.6173747636714619);
    msg.setSource(12573U);
    msg.setSourceEntity(131U);
    msg.setDestination(31229U);
    msg.setDestinationEntity(251U);
    msg.value = 0.19346317736582863;
    msg.type = 239U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.4405708997795116);
    msg.setSource(37464U);
    msg.setSourceEntity(3U);
    msg.setDestination(26987U);
    msg.setDestinationEntity(183U);
    msg.value = 0.33266493664992114;
    msg.type = 185U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.8613737742863296);
    msg.setSource(41153U);
    msg.setSourceEntity(49U);
    msg.setDestination(65417U);
    msg.setDestinationEntity(251U);
    msg.possimerr = 0.36919866416523883;
    msg.converg = 0.3183398443026686;
    msg.turbulence = 0.36321214316346206;
    msg.possimmon = 128U;
    msg.commmon = 221U;
    msg.convergmon = 73U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.35651287758878947);
    msg.setSource(63502U);
    msg.setSourceEntity(138U);
    msg.setDestination(29654U);
    msg.setDestinationEntity(228U);
    msg.possimerr = 0.06652947291452305;
    msg.converg = 0.4875081065123896;
    msg.turbulence = 0.018554307711978635;
    msg.possimmon = 209U;
    msg.commmon = 241U;
    msg.convergmon = 50U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.6710489324014962);
    msg.setSource(28543U);
    msg.setSourceEntity(182U);
    msg.setDestination(47104U);
    msg.setDestinationEntity(161U);
    msg.possimerr = 0.1961696353531397;
    msg.converg = 0.4039828931451497;
    msg.turbulence = 0.5428679641268774;
    msg.possimmon = 87U;
    msg.commmon = 116U;
    msg.convergmon = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.7776893864357971);
    msg.setSource(40071U);
    msg.setSourceEntity(188U);
    msg.setDestination(42403U);
    msg.setDestinationEntity(197U);
    msg.autonomy = 197U;
    msg.mode.assign("BCZBOIVWGPKBHSTWMGQEOUFSBXHXCHGRWKTWOZZBMRCGHHPITMLTQIAWTDCXXEQBGNLQCJRCONOHLYRGUTJWIEBNXJSFRVLZLWDUXZCMLDAVWKMCRAYPRMFHDLYQASVKNFUPWWVJJODJMZEPHXHSCDTUQFKLLILFEYSIJMNYMEKSDKXZKAAABZUFPIJNQQDFIURVPTHPUEOORMUJCESZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.2130389946550253);
    msg.setSource(42960U);
    msg.setSourceEntity(192U);
    msg.setDestination(42999U);
    msg.setDestinationEntity(153U);
    msg.autonomy = 123U;
    msg.mode.assign("TXTOYWUNIFTJQHTCQK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.2355891883840222);
    msg.setSource(7536U);
    msg.setSourceEntity(85U);
    msg.setDestination(13186U);
    msg.setDestinationEntity(76U);
    msg.autonomy = 205U;
    msg.mode.assign("LUTLRLGXPGZIROTCATVIPVJRTEQUPQGLFNHVRWBOTIFOZGRMKLEMZEKOZHHNKQAIURLAYGBCDOXDJBUSZMKTDCLPOACSBNBZLYJDUVNKYDBKOEXRVUZUKUASLRJKIDCPNPWNSMFJNFXYBOLPHFUWIGXQMFHEHJSDXOYHETYQSZKWXDJAFTBSEVYQCAHMVNPWFWCWPUWSEKEGFJJQAOAVDCRNHFQDMTBIPQMMVQZWSCZIYVA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.6077306974247256);
    msg.setSource(8273U);
    msg.setSourceEntity(182U);
    msg.setDestination(64686U);
    msg.setDestinationEntity(90U);
    msg.type = 56U;
    msg.op = 153U;
    msg.possimerr = 0.9515588922904095;
    msg.converg = 0.496405621553345;
    msg.turbulence = 0.608634822359436;
    msg.possimmon = 82U;
    msg.commmon = 158U;
    msg.convergmon = 119U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.4082352090016491);
    msg.setSource(23566U);
    msg.setSourceEntity(182U);
    msg.setDestination(6563U);
    msg.setDestinationEntity(248U);
    msg.type = 249U;
    msg.op = 170U;
    msg.possimerr = 0.6329804635001737;
    msg.converg = 0.9108447104360242;
    msg.turbulence = 0.54471588207627;
    msg.possimmon = 126U;
    msg.commmon = 105U;
    msg.convergmon = 143U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.7321875228460641);
    msg.setSource(44722U);
    msg.setSourceEntity(167U);
    msg.setDestination(58331U);
    msg.setDestinationEntity(42U);
    msg.type = 199U;
    msg.op = 90U;
    msg.possimerr = 0.8141111135967826;
    msg.converg = 0.7744936984372347;
    msg.turbulence = 0.48393047483157714;
    msg.possimmon = 191U;
    msg.commmon = 138U;
    msg.convergmon = 149U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.29608195829873485);
    msg.setSource(26561U);
    msg.setSourceEntity(218U);
    msg.setDestination(51944U);
    msg.setDestinationEntity(86U);
    msg.op = 163U;
    msg.comm_interface = 246U;
    msg.period = 29142U;
    msg.sys_dst.assign("BKUBLKTXJFVRKPGNJPCJVRGQPQHIBFAEU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.012060075717836849);
    msg.setSource(4762U);
    msg.setSourceEntity(252U);
    msg.setDestination(24423U);
    msg.setDestinationEntity(169U);
    msg.op = 144U;
    msg.comm_interface = 70U;
    msg.period = 15133U;
    msg.sys_dst.assign("WRFIMWRQJWZIKSPHNTFJVMBUXNLADTROEDDQWRJXZQEJEKWANFCSKMHYSWBLCCLSUVHMQYHIRHLQNDPHKRVMYIHTCOUSIDGLSTOKMQBQAPZXLCGLDSWDBTDEGNPCBMNKAAVBJAUHYYKFBTZMZOPXJPEQTSWOFGMIZAGXSQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.6534299911470565);
    msg.setSource(41437U);
    msg.setSourceEntity(241U);
    msg.setDestination(39560U);
    msg.setDestinationEntity(11U);
    msg.op = 37U;
    msg.comm_interface = 0U;
    msg.period = 58841U;
    msg.sys_dst.assign("AXZZCQZZASXWTSTMCNSRBRQFPJPAKNVXRKVAXKCIKNJZCHOQGGVOIQJNOEENELRJLLHCCSOCKJAZSVWUUEMRULBHQTPPVMLVXOWHHYJMUGIURHUEZGYSZMBRUTFUJWKDVQRVGSAUIGRBGDKSPMGCIOYTCJBABKDDKRNOZTFPXOIHSCWYJPFYYFBMOLYHGELFPAIHQMGFOEDLWVEVPNFBPFTAYXDSNIDEIW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.06749988337100443);
    msg.setSource(44689U);
    msg.setSourceEntity(152U);
    msg.setDestination(38637U);
    msg.setDestinationEntity(113U);
    msg.stime = 967279248U;
    msg.latitude = 0.6871070248263905;
    msg.longitude = 0.2956186586808387;
    msg.altitude = 742U;
    msg.depth = 46458U;
    msg.heading = 52334U;
    msg.speed = 28190;
    msg.fuel = 60;
    msg.exec_state = 22;
    msg.plan_checksum = 43102U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.3693104248880068);
    msg.setSource(7307U);
    msg.setSourceEntity(149U);
    msg.setDestination(56788U);
    msg.setDestinationEntity(21U);
    msg.stime = 761125937U;
    msg.latitude = 0.586274569293166;
    msg.longitude = 0.09049152735168497;
    msg.altitude = 23755U;
    msg.depth = 23594U;
    msg.heading = 28470U;
    msg.speed = 14023;
    msg.fuel = -69;
    msg.exec_state = 59;
    msg.plan_checksum = 36993U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.23331427818043593);
    msg.setSource(56185U);
    msg.setSourceEntity(17U);
    msg.setDestination(21224U);
    msg.setDestinationEntity(73U);
    msg.stime = 2662124533U;
    msg.latitude = 0.5671722515064055;
    msg.longitude = 0.30621025201683205;
    msg.altitude = 7050U;
    msg.depth = 33163U;
    msg.heading = 29358U;
    msg.speed = -5487;
    msg.fuel = 7;
    msg.exec_state = 78;
    msg.plan_checksum = 30137U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.45603060767769477);
    msg.setSource(28336U);
    msg.setSourceEntity(151U);
    msg.setDestination(44265U);
    msg.setDestinationEntity(171U);
    msg.req_id = 49459U;
    msg.comm_mean = 151U;
    msg.destination.assign("AUHUMPBBYNENDXKTVPMWUGZGQUAMFBJQZNMRPFQSFXHOLFAIUUJIMZCEAYYSYUWXJLGWJLBAHTKPRVJGQCQFVAJSOCKFWMRLXDAYIWJOCNPRMDEEGYIJCZVENCZQJLQYHVONSODNP");
    msg.deadline = 0.16060224671169598;
    msg.range = 0.7220794959942998;
    msg.data_mode = 98U;
    IMC::SessionStatus tmp_msg_0;
    tmp_msg_0.sessid = 3331310771U;
    tmp_msg_0.status = 150U;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("XCDQERQPLTUGDWYOWDNRVJYBIOBLRCBUQUWTRAPHERHENATRVNCILIMIWCQAHCOSFJTLFWIXZGEJSSIIZHEDSXZUBNACSPYVQBCCWJPMSPSAQJDPVHMVOXOBMNLUGHZFMVUFDEHEWZKDTKOUJAVQXKYILYKKWTDGQXRDZMXAPBGTJRVVNXAJOEJNFLBEGSHVUHQXZJMNKGNXSLMIYOLOTLQYPSUFNHTMEWP");
    const signed char tmp_msg_1[] = {-73, 67, 97, 20, -5, -19, -101, -67, 108, 6, -80, 31, 65, 24, 94, -89, 63, -7, -8, -124, -47, -112, 5, -127, -86, 122, 82, 41, 92, 42, -127, 114, -116, 110, -53, 89, -59, 93, -47, -128, -5, 71, 46, -75, 4, 84, -43, -53, 56, -76, -70, 123, -100, -74, -23, -15, 21, 84, -35, 29, -22, -62, 53, -110, -46, -13, -118, 96, -62, -121, 28, 18, -23, 22, 23, -53, -122, -126, 24, 84, -29, 75, 123, 20, -51, 9, 98, 51, -4, 118, 54, -106, 35, -77, 37, 83, -30, -6, 113, 1, 101, 67, 12, 116, 5, -62, 57, -57, 43, 65, -6, 12, -81, 125, 1, 80, -126, -1, 65, 92, -95, -31, 87, -24, 95, 30, 118, 117, -85, -35, 107, 85, 13, 23, -38, 32, -18};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.8384454031991084);
    msg.setSource(42752U);
    msg.setSourceEntity(155U);
    msg.setDestination(27761U);
    msg.setDestinationEntity(23U);
    msg.req_id = 9279U;
    msg.comm_mean = 140U;
    msg.destination.assign("MKHLAGUBXKPREWM");
    msg.deadline = 0.9282527938390966;
    msg.range = 0.9802769745549543;
    msg.data_mode = 191U;
    IMC::DynamicsSimParam tmp_msg_0;
    tmp_msg_0.op = 68U;
    tmp_msg_0.tas2acc_pgain = 0.2924454586426297;
    tmp_msg_0.bank2p_pgain = 0.5112620022536557;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("EEDEWKNMJTPYQVQNBYWYXLZIJJYKKSAHTVUAYXZWVYNDAUXTLGHPVOXWOONFVRSYGZVARDORBKAHPNIMSCSEIZGIXHIOZNRJMCVILQIMBPBFLNRXXAMLTDGTBKBDVURUGWDJHTQMFQCZKYJRQIMANZRLIGHLGUEWMOSEKCCRWYCBOTPNWWOXQHPEWFGDXTCBMSXQUGFZFPVLRCSHUDKDFOFGJHATJFH");
    const signed char tmp_msg_1[] = {82, -88, 81, 84, -44, 115, 3, -117, 36, 75, 78, 111, 96, 106, 6, 17, 52, 3, -7, -123, -18, 95, 95, 4, 53, 88, -53, -91, 75, -70, 2, -1, 4, -57, 101, -117, 23, -66, 44, -46, -46, -83, -39, -128, 119, 89, -95, -60, -96, -37, -18, 25, 106, 92, -114, -4, 64, 97, -103, 113, -57, 33, 52, 60, 34, 124, -60, -3, -120, 34, 113, 50, 19, -68, 76, -74, -84, 114, 96, 56, 44, 73, 9, 51, -72, -73, 56, -13, -34, 78, 63, -124, -104, -66, 73, -117, 78, 70, -74, -126, 68, -109, -104, -95, 29, 102, 24, 57, 80, -113, -54, 14, 44, 121, 27, -69, -34, -40, -1, -115, 63, -56, -89, 109, 44, 108, 30, -103, 43, -86, 6, 77, -114, 41, -127, 0, -119, -58, 115, 7, 86, -9, 65, -69, 43, -100, 78, 119, -45, 122, 100, -63, 21, 15, -97, -68, -7, 12, -7, 82, -104, -91};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.707246337086486);
    msg.setSource(23162U);
    msg.setSourceEntity(48U);
    msg.setDestination(45610U);
    msg.setDestinationEntity(157U);
    msg.req_id = 14122U;
    msg.comm_mean = 193U;
    msg.destination.assign("TACBIXXZZZMJKMQMBZTJRUTUYDDEYRUYPD");
    msg.deadline = 0.6124446906967712;
    msg.range = 0.5900934583802495;
    msg.data_mode = 247U;
    IMC::PopEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("CBJVCQKUTRLICHEDTGRNMNXPICCDPEQYYFZYJVPCLIKUAMTUQJEUCSZSEEHTJKZGYHNCZDHGEGDPOFHEBAPUCDVFFUHWHQZRXUYPKRMXPNOQVTWFFGPORYLSVVIALZEBMWJDKGHJIMSWSAXJLKHZALTOXRBDQFERAQACDXGBFJSRWLMMGNIXUGEZWROJRBZPLNKUYAQXKOXKVSGFQIYZVINJTSSB");
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("ZTTHVIHATOIYHLZPLNKYPXVNKZGKDHTPCRXUBFGVJWFEPELUDCZORYBPLRRNWLQZWTTZVWNYXACSEPXVMBMJIAXEYQATEAQBDGFJLDIPVLNVUGOMWBBPIXOIMJQAZOCSJMJSKEAYZELYRSYOSKCNHXDMGKXJSFRZDWJNPKFHFSAVKGHRUQFBFWDUYEDUQSIUHERVGXIQUJCWQEOVMSKCPWQUOYFNOZ");
    const signed char tmp_msg_1[] = {68, 91, 122, -10, 99, -16, -75, -112, 79, -91, 58, 84, 49, 7, 118, -44, 89, -127, 84, -101, -46, -88, 63, 102, 12, -117, 76, 124, -49, -49, 50, -95, -104, -70, -95, -99, 11, 7, -31, -67, 107, 44, -53, 89, 89, 91, 53, 53, 99, 126, 48, 59, -69, 1, 45, -20, 16, 113, -58, 1, 72, -57, -85, -51, 112, -126, -3, -99, 74, -46, -10, 45, 25, 66, -46, -76, 51, -83, 15, 126, 22, 107, 82, -12, -122, -49, -85, -77, -107, 114, -70, 27, -51, 90, 33, -21, 4};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.07597483854149367);
    msg.setSource(53694U);
    msg.setSourceEntity(77U);
    msg.setDestination(46051U);
    msg.setDestinationEntity(141U);
    msg.req_id = 9546U;
    msg.status = 229U;
    msg.range = 0.24711353442315886;
    msg.info.assign("MGPUSWZFNALKCUBGZKHXTHWRKWPBBRSDZCMNEITEDJDYUQVDIYMWCTRGWFKYYJSAFBTBEZBQEVFPGLPNZXAPWSGXRMCVJHQONOIIJYEIVXLBHXGTOKCHLKDLAOCSQIEYLSMHQYISJABRIMQYCHNQPTGTVAIDSRFPOOKVOQKVNJDWUPKDGVXMAHHRLE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.8709085100124763);
    msg.setSource(2065U);
    msg.setSourceEntity(116U);
    msg.setDestination(22979U);
    msg.setDestinationEntity(89U);
    msg.req_id = 7215U;
    msg.status = 194U;
    msg.range = 0.34845106325798825;
    msg.info.assign("DJEFCICIJYIUKKTNRMONYNLAYVZTVYEYENFIGNGOUDPWHQDBHCUWHGZKBFPYORRSTALAXMMHPPKVQHFBXSCCUZFZIVIUAQZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.4078240742315796);
    msg.setSource(55316U);
    msg.setSourceEntity(40U);
    msg.setDestination(31939U);
    msg.setDestinationEntity(85U);
    msg.req_id = 45353U;
    msg.status = 161U;
    msg.range = 0.9892003834706912;
    msg.info.assign("VKFLZQDYKPLGDUSHTPTMYWLFSAPJXLLIUDHDRTJJBXSJJSOJSL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.6587716616225577);
    msg.setSource(59455U);
    msg.setSourceEntity(140U);
    msg.setDestination(37879U);
    msg.setDestinationEntity(206U);
    msg.req_id = 38565U;
    msg.destination.assign("WZHPFITZEWJTZSOBEVLGCXMLKFNANGNLSOVHCIRUFNFEMNEXRRDUITGNJTOZPADAPZJEXIIVESLOTEKUHMHQFLYQCCQUSAWKJYGLGIFOKTUFIMZVJNXQRIWHNEFGYDACIBDVLOXWWHCNHBADWYJSPKTHXVCARAUQUSTRQBCYNIPOYSLPVDFZTJHGJZZGSRRSOBQYKXGERMKVLHDKAOUBFBWTYCGBMUPAYERZPJPMSOMDVPWWYUB");
    msg.timeout = 0.4659764943326662;
    msg.sms_text.assign("MPINHGYQZFZOYJAOEDKAVKXPMELRSYZFTCEPUCUHKFENLDLDUIU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.18997065087761644);
    msg.setSource(12898U);
    msg.setSourceEntity(219U);
    msg.setDestination(40690U);
    msg.setDestinationEntity(246U);
    msg.req_id = 31620U;
    msg.destination.assign("RQZTHGQGZFTOHKUKWXSULJIRZGDIXAGRKOBFHRVSJOFRBONGLDJCCIYNTRHZKVSFWURYKEAYMSULGCDKTVWMVWPZAVZAADTMJMCNVEBJXVXIGLFWQNFDYWYNPLN");
    msg.timeout = 0.7079113359857899;
    msg.sms_text.assign("DFEWKSKTHVLOCHPHBISELZQWKUBOINAJZIDQPBKYLARBTJNBEGTYSFTXBVCCMQVTNBAOJJBPZDNPHOHPAURNHPQWUYIMFNWQOOHUSWBKSQJHYHIIYNLSXEJIWRFUDZDLGWROZLYRPZIJMKBVDSEUXSYCRCDMMCFVLKXPEHNMWWKAMXXIJPDOFRAFVTXIGQJNGMTZKEFLSYVZAFGZATRD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.15180898193450787);
    msg.setSource(17110U);
    msg.setSourceEntity(213U);
    msg.setDestination(46166U);
    msg.setDestinationEntity(194U);
    msg.req_id = 41662U;
    msg.destination.assign("KOTJDFNUOBZILIJVHAIATDGOBVWNTUQKCPIISVZLCRMAWIZQSZAALTVHJUAVNFENQSQFHXJEYWLVZICVXJC");
    msg.timeout = 0.8848169466551277;
    msg.sms_text.assign("XJPSXOMCIVSQKPQVFEZBHVVOUGYLYDQWUZUOQZVXVWKSWMFRCNBWAGUDAAJJINYTIWCTJHWPKGGGFARGGLMNBXKMAVOBALPEMUDNBSTHXPIAMCHIEDGBDKZZXFYFELSVFHIJIJWDQKYSQTYJDMIAHRLCTFSOZBQDBZUJIFTDXEVSCWPYUGPMRUJAKWDLYTOEVXTSCLNU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.4843590555762801);
    msg.setSource(43324U);
    msg.setSourceEntity(134U);
    msg.setDestination(11650U);
    msg.setDestinationEntity(230U);
    msg.req_id = 59949U;
    msg.status = 179U;
    msg.info.assign("OKCVVVSOZDIOCJCHLSHLEWXUVNRSWDNIZBWZMQOJDLYNKCTPOFGKJBTRNZQDYFNXCNBYJXURVURYEPOXTLSIOKLMIBISNKPLRXFNMGHAYCBLPZHKGTLSJDWTUZCFQVTJQPGPXGQWUUZNKMCPTLYXSNERHOWAHIUVBMQUXXFVOEDGBYTMZATFCJFPYLAHGECBVBEJQWJWDVQYEWIIMAKRYADSHUASIMTF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.6691242793475033);
    msg.setSource(36790U);
    msg.setSourceEntity(133U);
    msg.setDestination(59935U);
    msg.setDestinationEntity(214U);
    msg.req_id = 56747U;
    msg.status = 236U;
    msg.info.assign("YUYFMOKWGIDMYNOXADXXVAECRCILZESGCEWKBBAYZEZEOKXERNJEIVQCQDZMJQBEFMCFWGRBGQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.3590702175736643);
    msg.setSource(46596U);
    msg.setSourceEntity(199U);
    msg.setDestination(53291U);
    msg.setDestinationEntity(163U);
    msg.req_id = 57107U;
    msg.status = 249U;
    msg.info.assign("IKILZWYNGHVMOGWPNLTBBERKOERAHYMCHSOPUQJVCIJOLQKMFSJNUSHAPBKTCGQQVZEJMIUDD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.43093633107365237);
    msg.setSource(15113U);
    msg.setSourceEntity(228U);
    msg.setDestination(53333U);
    msg.setDestinationEntity(35U);
    msg.state = 251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.5261268407135378);
    msg.setSource(8850U);
    msg.setSourceEntity(61U);
    msg.setDestination(38288U);
    msg.setDestinationEntity(206U);
    msg.state = 250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.05750657626660349);
    msg.setSource(53967U);
    msg.setSourceEntity(160U);
    msg.setDestination(5075U);
    msg.setDestinationEntity(234U);
    msg.state = 129U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.5402103234628247);
    msg.setSource(7443U);
    msg.setSourceEntity(205U);
    msg.setDestination(48829U);
    msg.setDestinationEntity(131U);
    msg.state = 216U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.6311127850414919);
    msg.setSource(52106U);
    msg.setSourceEntity(56U);
    msg.setDestination(57758U);
    msg.setDestinationEntity(62U);
    msg.state = 50U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.9785514110325888);
    msg.setSource(2481U);
    msg.setSourceEntity(250U);
    msg.setDestination(9957U);
    msg.setDestinationEntity(40U);
    msg.state = 53U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.2844724715337056);
    msg.setSource(40827U);
    msg.setSourceEntity(242U);
    msg.setDestination(15941U);
    msg.setDestinationEntity(35U);
    msg.req_id = 31060U;
    msg.destination.assign("ULQHSVPWWXRQTG");
    msg.timeout = 0.9768765955676344;
    IMC::SoiState tmp_msg_0;
    tmp_msg_0.state = 234U;
    tmp_msg_0.plan_id = 49622U;
    tmp_msg_0.wpt_id = 148U;
    tmp_msg_0.settings_chk = 42164U;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.9201994385315487);
    msg.setSource(9262U);
    msg.setSourceEntity(139U);
    msg.setDestination(31673U);
    msg.setDestinationEntity(218U);
    msg.req_id = 65342U;
    msg.destination.assign("QTLIOOLDAVHYZKOXENPLLACHSCVVNYCWLARFDAJBHAHRBMKFTOXWVZIEVHVQPBFIMCTLSKWZINNLPIBOZM");
    msg.timeout = 0.39436328782402286;
    IMC::FormState tmp_msg_0;
    tmp_msg_0.possimerr = 0.27423225921368244;
    tmp_msg_0.converg = 0.1396010899599125;
    tmp_msg_0.turbulence = 0.09490730406083658;
    tmp_msg_0.possimmon = 77U;
    tmp_msg_0.commmon = 57U;
    tmp_msg_0.convergmon = 203U;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.5689002566806898);
    msg.setSource(23549U);
    msg.setSourceEntity(105U);
    msg.setDestination(16559U);
    msg.setDestinationEntity(101U);
    msg.req_id = 7069U;
    msg.destination.assign("RJHCSEHVIKBFZLNDLGLMOFMLEQHHCGXOIYZEYSRQRPLUFQCCMIXWMCHBBIQJXCGHBNI");
    msg.timeout = 0.14436768069893025;
    IMC::Salinity tmp_msg_0;
    tmp_msg_0.value = 0.15932439804913034;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.07417590615105174);
    msg.setSource(14786U);
    msg.setSourceEntity(114U);
    msg.setDestination(9165U);
    msg.setDestinationEntity(216U);
    msg.req_id = 45597U;
    msg.status = 22U;
    msg.info.assign("BNUMKXJPBODTNEICRBGLLSQRYLATQWRAHXEAMNVTUCWIPLSUHYVHBETFKHQYVFDWEDTHWVKMGEZGZIIHZBCTYVPXSSWVOZDDNFNUUGDHBMQVYQUJOTROTPGLSRNGPSLAQHUCOWVYOHFGEAZLTGEFUIIKJMAFBIBBNJXDCYMQZLPPEUEKXRQIURPMXKFDAIYMVMCCXFSWOELACTVJXGHRAJZJOJNISDAYZKXWNLZFDPSRNPWR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.2799221831593347);
    msg.setSource(59607U);
    msg.setSourceEntity(53U);
    msg.setDestination(63511U);
    msg.setDestinationEntity(227U);
    msg.req_id = 27919U;
    msg.status = 187U;
    msg.info.assign("MSNEAYRHAKVPXOURPLGDPWTZOIXXUGMDBTPNSEYJXHBOYKOILSZPOSVWINFMSCIIEMDVQYFZDYGZJAGNMGRJTAUQLZOSUUCWBVHBXNMTRZFHUSOKDEWXFKQGJFZJJGYRWJUXTDPNALTOKBYPBFHNRQXWHHWYDNREOSMKXQNLQKYLPWRVEIDMQQQZRBCREVFJCIUTFZZAVAEJTKHBXCMHVNVICBLCSCFBVGEW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.0008613578440780367);
    msg.setSource(59807U);
    msg.setSourceEntity(42U);
    msg.setDestination(44767U);
    msg.setDestinationEntity(24U);
    msg.req_id = 9799U;
    msg.status = 191U;
    msg.info.assign("BIBSELFSTONKICIXXPUMCHLVYNJKLIPQHMOJNCTUUIACLCHTWKMEGRWRBZMGNJZAJLHGQTUVMEIBGKAOOTKMMZPGSJYUZDWQGYQQZYOWDAOKBUVYIUUFFWMVHVYXDUDQPUXRNSZTCSXEWEZOBZMTWWVMQGPIRLXTSXCNFPOSACDDLKLKVJTEFVRGSWJAEDFEVREABLYRAPJJNBTPFXB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.18477045486434085);
    msg.setSource(33078U);
    msg.setSourceEntity(69U);
    msg.setDestination(32179U);
    msg.setDestinationEntity(234U);
    msg.name.assign("MDRTAQMPKMVMJTIVPRVUCWRHCCBRDJSLCBTVJZQYAKXGKLIYCXJHILHOOAJGFJFISTWDZPYELNAXUEDXDXTXFJIAWRSZDMMLFKNGVUZQOAHATYBHKPPLRIWSEXBOQIUSQEODYYEUHUGSNPJHOGWGWKWETVFTPCOFFRTNFLXKYBZQLMW");
    msg.report_time = 0.1264904532768345;
    msg.medium = 99U;
    msg.lat = 0.6051731910013891;
    msg.lon = 0.13238045176120827;
    msg.depth = 0.633381412332695;
    msg.alt = 0.398413756412188;
    msg.sog = 0.29390624528969556;
    msg.cog = 0.9392842475945515;
    IMC::VehicleState tmp_msg_0;
    tmp_msg_0.op_mode = 36U;
    tmp_msg_0.error_count = 68U;
    tmp_msg_0.error_ents.assign("HXFKXISTCYDVPMSDDLWXAJOZMMSAYQYDDUTWJWZFTGCZKDUNKEGJZEQWHXNJXDLEPVABHESBCCCIAEBEGIJAQCRCIAKJJRNAXHW");
    tmp_msg_0.maneuver_type = 9544U;
    tmp_msg_0.maneuver_stime = 0.3745046239919536;
    tmp_msg_0.maneuver_eta = 24572U;
    tmp_msg_0.control_loops = 3238187727U;
    tmp_msg_0.flags = 26U;
    tmp_msg_0.last_error.assign("XANJPQZVJATPLBNGKBAJZUCQRXLNLJGEYQRTHTBNIDRLCPEQXPMLGODMYFGIZDZZLKCMGDOWPLSOWUKOMXVIYQSWUQHVYDKUUTWUJCUNVXIWSLAGSTGYCATNW");
    tmp_msg_0.last_error_time = 0.31827437236631473;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.6212062614539363);
    msg.setSource(22324U);
    msg.setSourceEntity(25U);
    msg.setDestination(7114U);
    msg.setDestinationEntity(211U);
    msg.name.assign("ZFIPZLPHERJDHSBKEXEBHAOUENYLPMTQYGQDARKGXIUJPGIRBHMBAGPUSNVGYVRCINOMVZCTSPWLHLEOOUBBJXLSHEI");
    msg.report_time = 0.9644388156659686;
    msg.medium = 53U;
    msg.lat = 0.9774773553706941;
    msg.lon = 0.7832542504999663;
    msg.depth = 0.1617726089781112;
    msg.alt = 0.7746868372656956;
    msg.sog = 0.8480923668908343;
    msg.cog = 0.4400111778943002;
    IMC::UsblPositionExtended tmp_msg_0;
    tmp_msg_0.target.assign("LBFMZUFRFXUQTGXUFDAUWHTZYWCAHQGIQEPZKVIEDHJBEKZPHGDJJXOGJUTXGDYPOKVAS");
    tmp_msg_0.x = 0.7421878266728998;
    tmp_msg_0.y = 0.8367814040875737;
    tmp_msg_0.z = 0.3030636580934679;
    tmp_msg_0.n = 0.9960790266072718;
    tmp_msg_0.e = 0.8602185423422283;
    tmp_msg_0.d = 0.6456691496613112;
    tmp_msg_0.phi = 0.0017069475312954108;
    tmp_msg_0.theta = 0.4186726897886589;
    tmp_msg_0.psi = 0.5336238875768368;
    tmp_msg_0.accuracy = 0.5617523865443934;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.001015919780185226);
    msg.setSource(7308U);
    msg.setSourceEntity(64U);
    msg.setDestination(11781U);
    msg.setDestinationEntity(224U);
    msg.name.assign("ABEYLTWILNDQYZUJUPCDDSXFWAQCWKFCSLKECOMMTZONIDOGJNAVRVMCJMZR");
    msg.report_time = 0.8693237472321738;
    msg.medium = 94U;
    msg.lat = 0.4236113923865149;
    msg.lon = 0.12656658054215153;
    msg.depth = 0.2503503854142063;
    msg.alt = 0.28240450235349435;
    msg.sog = 0.2680040551471988;
    msg.cog = 0.3681995558632749;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.27983676902169474);
    msg.setSource(38055U);
    msg.setSourceEntity(89U);
    msg.setDestination(17352U);
    msg.setDestinationEntity(114U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.04997828883710076);
    msg.setSource(60284U);
    msg.setSourceEntity(13U);
    msg.setDestination(48720U);
    msg.setDestinationEntity(91U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.9462869730815049);
    msg.setSource(13896U);
    msg.setSourceEntity(250U);
    msg.setDestination(16881U);
    msg.setDestinationEntity(136U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.286334428792714);
    msg.setSource(46148U);
    msg.setSourceEntity(109U);
    msg.setDestination(35481U);
    msg.setDestinationEntity(140U);
    msg.plan_id.assign("MBKYEFTBTHQAPQOCUUZYPGYKJLSIWTRXJGSNXBTKUGDDLQLLDMSKIQINFDRADVNXPBXZXOBHMJPGIFUSECHCPPEHRVCEARYYKSGYPFLMJXLJZBHWBQWOFODVPUASPRHIOXRJFLRKDGTAHXKCDNGKHPBVEAVQNMODHNELITUWARQUAXETUXGNOOJUQQYZRCAJYMKKRCZSUVZEOVMHG");
    msg.description.assign("PPZYAYUCYTJYNJDTGSKLDLWTZGJKXYNFHRSZBCESEIGWCBRNDBXMMBLKUEDHVRQBOXHNMKWVXFEZKOESUZT");
    msg.vnamespace.assign("JCTZZVLREBAVRUTNBXQB");
    msg.start_man_id.assign("PTCMQIROIJQHXXSPTIQWMNMDZXLFFMRVFDDUAAXQGCYYEZNWGFNQKMVHQYWSAGGLFPWQHVWQIXQMPMLTIJKEWPHDSBRAJLEGEFZNPBBKZAARAKOODHJDNCNVSUTKILUKEPXGDUDVXNSICRRYZUPBJBGOFUOWBEXNTWOONIOLHZVTRHWKIEFRZLLGCZHSZLSGEMYBYVDNEAPIFVMZBTCRSXOYYJXWGCQSKCUJEUCAKDRTYVPCOHVLF");
    IMC::PlanTransition tmp_msg_0;
    tmp_msg_0.source_man.assign("KMYXKODFOOIXWAVTUUNSGMOW");
    tmp_msg_0.dest_man.assign("KPXPINMUHQWGSKFCSBIJZISVOKCNSRRLJROOFDPISEXVEJWXUWUOFCVBCMAGDBGFMHDLLUSNZZXQRWRSPINCATFJNZPNNGEZDKVCKGLFAKAPBOJOKJWQVBXLQYYPGREXQYSIEFUTCRQBJRJMDVSHFKZWMUCWMJLTEUJEPOMABBDYDCWPVXH");
    tmp_msg_0.conditions.assign("UHOVOPCSSWEVEYLNRQJJDNMJQIWULFROHKASUGNIZQMJOTMUHAMDXKOSPXIOBWMYAOCZXLUVTPXCCEOLBJIQQJFLRVHBMKJTGKAVGBBMNQFQPVVJGLEIPKWKYZNYSDFBMZWKKANHNGRCJSEIIIZUGLWLSKDXUERYXRQMCFZNFDQBDBPTGXEHIVAWENRQUKVZSRNLPHFUYDXVRTWBBTPTFEFDGGGZHACDCOZIYYLYHRWAETATPFDCZOSH");
    msg.transitions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.0403513455421306);
    msg.setSource(55559U);
    msg.setSourceEntity(125U);
    msg.setDestination(2828U);
    msg.setDestinationEntity(147U);
    msg.plan_id.assign("IPKEJERMYHNZOKLQVIFIBBHCVDIUHCQNQNWTETLJUQBYMAGCGMBEQZFSXJKXUVEYJUMPBCJFUTUDBHNPXKLSRBXYHXHYEMZXIGSUPSCHTOKKWIVPDQGAETWZFWCLEHCMVGOACDJWZMUKXZDNZESGUICWGTUWPWRGVMQQOVROGPATFNBKKNYTCFMNSYRSDAYSGF");
    msg.description.assign("WSKPEVDENRCVBLEDUGCBXOMYOMNZOPFZNEJYHTXYDU");
    msg.vnamespace.assign("HPQZUJXMDAWQGAIBIOVAHNUQHQPSBQTVSHOMCGQNRGXKWPYDWOLRAEMGSJKLISMJECEDZQWONOYGEXXWYXULKLNPFHKLJNRFYLUBEUKBOAJIHVAYKPYJZRXVCHNBOKMBBCQCLADWMWNFRETTKSANGISZCDMPEZHSTVZUISIHEHFVDPMFASFCDCRIGLNJVYMFWKEYQBXAZDBWFRUKRFPYUDJDVIRMTPUJOGXGXCEJIOYGOBTZNCZTVLFZTQSP");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("AZDULFLVYQAKKJLSXQTYFMOTXNLERYWGTRRVUCTFKDAIMLMJIPAYKBAQNMDSWSLYIAUBCRGNZHDBWFJAXHHWGPVJDSIQYWXDHAJEFCVEGMUCUTORPOHNCMSN");
    tmp_msg_0.value.assign("MVDHMJKLPWYNCAUNMSWCVKLSHPCLNAAHKDIWRGBFEUWNXXBGECGUKTSOZRSENKJJTMGOVEQUUDDSVXIYNYFLWVZFZDGYZQPPYSIBRRUCPDFSEXJWYLGPIZYOPIANPCLHNAXCQXBWTOIXOFJLERQZFUGBGUKXAQRQGMIHAGFDUVQDEOTLFXBKLSEOTTRBKX");
    tmp_msg_0.type = 40U;
    tmp_msg_0.access = 176U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("OUQSSAUTJEMQAVYYOUZKIOBWGAYBSJOGKNUKZOLXJYEQXBDBXDAZFXZTWHZBISFAUCWJGFRCFJINMSIWW");
    IMC::PlanManeuver tmp_msg_1;
    tmp_msg_1.maneuver_id.assign("GDLKNECMEBQFYEQHUSJXIMEJOHNJVHXOHFDRXBPHBUTIIVASVONMJKWGAVURBQKCZONHXOEGOSGBJWZVINVYZFPPHTPKNNFHNPEBSCUDAWFOFJDMPTUTSTAUKGUBCBYOMDRLLZJPYRTWIJLHIWAJYWDIKFXMTCSGQZXELMZOGPMAXEMAHPCPJRF");
    IMC::CommsRelay tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.lat = 0.5168223639886323;
    tmp_tmp_msg_1_0.lon = 0.17733466167638035;
    tmp_tmp_msg_1_0.speed = 0.3890397723974891;
    tmp_tmp_msg_1_0.speed_units = 51U;
    tmp_tmp_msg_1_0.duration = 38614U;
    tmp_tmp_msg_1_0.sys_a = 65294U;
    tmp_tmp_msg_1_0.sys_b = 28766U;
    tmp_tmp_msg_1_0.move_threshold = 0.881893343995426;
    tmp_msg_1.data.set(tmp_tmp_msg_1_0);
    IMC::PopUp tmp_tmp_msg_1_1;
    tmp_tmp_msg_1_1.timeout = 25490U;
    tmp_tmp_msg_1_1.lat = 0.3929920786619161;
    tmp_tmp_msg_1_1.lon = 0.0353663860927127;
    tmp_tmp_msg_1_1.z = 0.7568419810923606;
    tmp_tmp_msg_1_1.z_units = 115U;
    tmp_tmp_msg_1_1.speed = 0.7856365452275461;
    tmp_tmp_msg_1_1.speed_units = 189U;
    tmp_tmp_msg_1_1.duration = 7013U;
    tmp_tmp_msg_1_1.radius = 0.6627921705796134;
    tmp_tmp_msg_1_1.flags = 218U;
    tmp_tmp_msg_1_1.custom.assign("JNJWWUQTHWZZOMESDTLBCBMBBVLYODGQIZDLSTDAKYHHELXQFASDNURQALRFGRGPMOTKWFPNZHDPNCFZEGFCGYXIJFJNVZCAEGIYBJZHSSWIWUQYCMDRGXRWYEUSPLSJRUTHKHKFXKSKIJNVBUGLLSJLIMQORRAKUUBSDNJDFDMTBGFUAMJEXGTCPHCTQZVVMOEOXEOXWNKYOPYCVEZXUOVBYIYKWQXCPXPV");
    tmp_msg_1.start_actions.push_back(tmp_tmp_msg_1_1);
    msg.maneuvers.push_back(tmp_msg_1);
    IMC::SmsRx tmp_msg_2;
    tmp_msg_2.source.assign("TNHPCZGHRRMNHSTYZRJHLRBPCKFWWZMFTOGVDXLBMHAEJNIICYUQIYDATAJGVDLOFIMBISFWUYUNQJJCBDTONBUBDUQWWJOAKMHJXSEOXIXLMSPTZCMPVEGGOREOEJEEXVWPSFCHUVTQRFKZDVIWALPGDXBPWWZNYXIAICAJVVNKISVOLNLHNA");
    const signed char tmp_tmp_msg_2_0[] = {-96, -79, -38, 79, 101, -7, -6, -52, 5, 125, 51, -62, -81, -88, 87, 88, -93, -44, -40, 1, -119, 81, 119, 119, -123, 53, -59, 5, 68, -53, -117, -28, 41, 98, -84, -61, 31, 70, -44, 87, -44, -71, -12, -110, -51, -19, 111, -115, 103, -104, -104, -34, 120, 66, -33, 110, 38, -53, 126, -24, 8, 66, -96, 60, 113, -87, 40, -115, -4, 77, -63, 0, -7, -98, -79, -83, 104, -16, 67, 21, 93, -101, -66, 103, 11, -124, 115, 58, 77, 2, -99, -100, -86, 2, 33, 86, -121, 8, 83, -1, -2, -83, -72, 7, 30, 84, 125, -93, 41, 56, -44, -97, -5, 15, 122, 4, -66, -10, 32, 111, 53, 87, -87, -110, 89, -96, 13, 15, 70, -120, 93, 63, -2, -30, 102, 7, 81, -108, -89, -53, 104, -37, -123, 88, -52, 90, 89, 58, -111, 32, 39, -78, 81, -87, 19, -17, 89, -38, 57, -63, 66, 11, -27, -13, -8, -15, 37, 14, 10, 44, 64};
    tmp_msg_2.data.assign(tmp_tmp_msg_2_0, tmp_tmp_msg_2_0 + sizeof(tmp_tmp_msg_2_0));
    msg.start_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.6981903439635739);
    msg.setSource(45477U);
    msg.setSourceEntity(73U);
    msg.setDestination(57367U);
    msg.setDestinationEntity(169U);
    msg.plan_id.assign("RSOOHNEYIIDQNTGKRIXULBLLQVTPDKRVCCBENQSERHSWOVQCTEUA");
    msg.description.assign("HHBCAYRKBJFIMKJTPAPIMBBDRNLSKLDOVLELJQFXIXWVUVGDDYOQMWJMGQYNWSSPOUGBDZVXWOHPIMEFNIVFBASWGBVIADBIYHATLGAGZYRJCHNZFZJZRPTDLTHWCOYINSGSLEBNEKWZOVPXDCJWNKEYYGXLNIERCTRFKMSMCEECQQXUKMUTLVLVAPQAFIGHCKTRWR");
    msg.vnamespace.assign("MTPCTZZZQWLGIVBADBMQHASNRZKNYMOVLXGFZBXOUNTFWYLDQXRFYYNSPNUKKBGWCPTLRQYDDXDNSKEJYWAHIYHRXZCF");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("HOSTWCEHQXXTDMURANKYSHJWDGP");
    tmp_msg_0.value.assign("QCALTIHNEZQFALWLHUODXQAMXFYCJAWLKOLVHPYZZDGFBNGQFYCWJXDBBPDMDGKFMRXHBZBEUDSKPCVWZTGGYAYVTNEU");
    tmp_msg_0.type = 194U;
    tmp_msg_0.access = 111U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("RLWCPQZSAFCTGUWOYEGDOYJIHYSFYPSONPBXARVXTYOGISJLDGXERRDUYSLMQMJEQILSIBNRRHPBHEOTRXKCUEMQLUVFZVLMWBDVMXHAVGUFFOQZWDNRJTMALTWFBIKIKGIPBOTMFKRYVBPJAWUDXSKT");
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("WRSLPDXTDLYDBMUISUCPRTLDECLPPFUJJJOWKNARXPZYIFSYDTWMNCFHVHNTQMECFYUUXNKHSFCIEMBRQAJYMFCZSDGQQWSERTMVJZPNWKKCDXUGJCLWTMEAVOJLEZEUDAXIEULGVZBOWTGHMNQZOZCOHKIWHXRBKXMZCPEVSXOPGZGERVBABJJTGSNZODPNODLBFKKFYGTUXIRNHYHQWBSBMAQVXBILQ");
    tmp_msg_1.dest_man.assign("BRVWGPZLUWBSSGLTAKVNAUZZLRMWQPUESFDJYZIELXSYCRFCXOEMRVYLGIGJXDHCESHONKWYSAYOPNQXJDLNFVLIAHXHOEVPQNUHUXXURIWYDUHNGRKIGTKPHGAVZHUPNMMABCQENTKBSKTUOTOSGMPVEHRTWGMCEZQQJJVWBFFHPJAFYQWPUEDAWFBSBRCZMZBQVNCDIJYKTSPOLACCWYIZJMLDGA");
    tmp_msg_1.conditions.assign("COUGGQBKGVZAQOIWRJGTTRWJRAEMPETUXUHUWDMQITHZDQRAPWLZUVZJZMKNBJBNXAYRIVFDSPNEFZKRZAOLYHZGPMSUBIDLWVEIQVKDTCKJMIHSQSLGFNDHEQMGILSYY");
    msg.transitions.push_back(tmp_msg_1);
    IMC::ArmingState tmp_msg_2;
    tmp_msg_2.state = 60U;
    msg.end_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.32274243196210917);
    msg.setSource(64942U);
    msg.setSourceEntity(125U);
    msg.setDestination(61120U);
    msg.setDestinationEntity(116U);
    msg.maneuver_id.assign("DIUBZORMWOGNNDUFIDYVXTAMRZBNKMEAFGOZFSIFGHOPPSHPCTJSSAYHKKUPSCMCNIGRHUB");
    IMC::ScheduledGoto tmp_msg_0;
    tmp_msg_0.arrival_time = 0.9557459622153298;
    tmp_msg_0.lat = 0.5631833850330622;
    tmp_msg_0.lon = 0.3609207102933165;
    tmp_msg_0.z = 0.15728137831507394;
    tmp_msg_0.z_units = 182U;
    tmp_msg_0.travel_z = 0.9578715883703149;
    tmp_msg_0.travel_z_units = 248U;
    tmp_msg_0.delayed = 120U;
    msg.data.set(tmp_msg_0);
    IMC::QueryEntityParameters tmp_msg_1;
    tmp_msg_1.name.assign("ESUPHDPPHIKFQTURWBKANXCJJKWYFXYXIPBCDLLLCKWYTFTUZGWAIDTOIRMLQYCBQAJOSDXTUVCXWRGTGFURYTAVUZYJSNYATIRLVCIZKMMEXZBLZDPKRCWBEHIVHHVRNEKNLGOAFYMNSOCZKCMMARHDFQTBQWEENFAIMVZQMFMVSMQBHZJQGPLIDARVGVQPYNOJNSZVSCDEXNKUJWOOHSEPXTJYL");
    tmp_msg_1.visibility.assign("VRBMAXTHMEOVGJIOXOOWTZRHMHLYILZJUEDGRWVPKQJDGUNZLLXYMROECSIVAUSGWRWUHHESEDPMLZVRYMQVYLZDKXATXYNCWFTSUJIIQUPNKFSFIFSQCKWPZTARXCKPWJHRKBLADGNFIFVDOZGQANSRAHJKKUNAXEZDGMFIEQSBYQNJVPHTFQYUWGEBWVPRMBKZPCQDZXBCTN");
    tmp_msg_1.scope.assign("IBNLKZUSCIGFWJBYKWARUUTDDTXXTTAXPALSHFRYYQOEOKEHIHBXIFPTRVJCVGPCPALHYZOCNUKGYNGMJPZPWTQIZXXZKKDMETINLLQLRMVAYDCOSWQIACICUJNEJNXHOJMKQEWZYGRGGBVGWDGMHAAIXJLZUUJBOJZOLJTCCWMQCSFHRPHDAYTVPQFFZBSV");
    msg.start_actions.push_back(tmp_msg_1);
    IMC::PowerOperation tmp_msg_2;
    tmp_msg_2.op = 176U;
    tmp_msg_2.time_remain = 0.10410705444700319;
    tmp_msg_2.sched_time = 0.2531044996459182;
    msg.end_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.027554336800247325);
    msg.setSource(55673U);
    msg.setSourceEntity(224U);
    msg.setDestination(57729U);
    msg.setDestinationEntity(49U);
    msg.maneuver_id.assign("QNZNTDYXDFSFVQSQLACQCPSVMZYJLTXASFTBUWCMDOADBNEYLHKWCKMTIGDAEELIVNINXLCREOIDZLFUCFHUIWUKNRSWDUSOFLYOQEZGXMDKXHJMTEGSEEFBHYKMCVXIRCYRBYBCOWPEKJMMFPSUNIPPYBKAJGXFQZFVGNPYWTDHUUNZPHAGBVITSAGTJARKWBJBXAJOGEXRMOVOZTRLKSVJNQK");
    IMC::StationKeepingExtended tmp_msg_0;
    tmp_msg_0.lat = 0.21930099676123915;
    tmp_msg_0.lon = 0.41756099299728855;
    tmp_msg_0.z = 0.28300600711872415;
    tmp_msg_0.z_units = 50U;
    tmp_msg_0.radius = 0.6466589432634711;
    tmp_msg_0.duration = 56231U;
    tmp_msg_0.speed = 0.8469997255214895;
    tmp_msg_0.speed_units = 62U;
    tmp_msg_0.popup_period = 10920U;
    tmp_msg_0.popup_duration = 18896U;
    tmp_msg_0.flags = 84U;
    tmp_msg_0.custom.assign("VTFNDGUXQHXWAICMLUKUEJNVBIMFQHFVMZXXCXJNDZCGJPUQIXPUETGPSWEWCQFSVPASWRRVRUHDQNOWKLVVFSBOIFDLMXFDZKPONNEMRRBFKGLXPVWKKOHCAKKUMOSJOGTHWERXASTSMRHYHPDMYJDGIIPIEFSNYJYZOOEGL");
    msg.data.set(tmp_msg_0);
    IMC::HistoricData tmp_msg_1;
    tmp_msg_1.base_lat = 0.5499535142758593;
    tmp_msg_1.base_lon = 0.19138945942948105;
    tmp_msg_1.base_time = 0.5586528918681612;
    IMC::RemoteCommand tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.original_source = 17362U;
    tmp_tmp_msg_1_0.destination = 12135U;
    tmp_tmp_msg_1_0.timeout = 0.17228396717398609;
    IMC::TrexToken tmp_tmp_tmp_msg_1_0_0;
    tmp_tmp_tmp_msg_1_0_0.timeline.assign("SLZJKZXSPZQDOBFVCSQQIEOHGMLQEKAVAKCWSILIYUZLEDFNHTDGACXFPNMVMRMMGXGYSOEUEVWPOXVGRVRJPSWGFXBACHBUBZTWOEOHRQODKIQSXKWHOTF");
    tmp_tmp_tmp_msg_1_0_0.predicate.assign("RXYIHCOHDLARX");
    tmp_tmp_msg_1_0.cmd.set(tmp_tmp_tmp_msg_1_0_0);
    tmp_msg_1.data.push_back(tmp_tmp_msg_1_0);
    msg.end_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.33819263581398484);
    msg.setSource(46953U);
    msg.setSourceEntity(177U);
    msg.setDestination(16827U);
    msg.setDestinationEntity(169U);
    msg.maneuver_id.assign("IAKCNEQBMADJMMNXPZVFIPYVBLDETJIQPIHOSZHKTIVYWRBKAPNPXNJJFYLRZKRNFXXFFEOFVEYRHJIARBTNXRNPVCFTDRUYKDMQGGCUEZMBAEVFKHP");
    IMC::FollowPath tmp_msg_0;
    tmp_msg_0.timeout = 61627U;
    tmp_msg_0.lat = 0.40580544322629075;
    tmp_msg_0.lon = 0.41788929850508627;
    tmp_msg_0.z = 0.42400266597510916;
    tmp_msg_0.z_units = 10U;
    tmp_msg_0.speed = 0.6455073162227417;
    tmp_msg_0.speed_units = 231U;
    IMC::PathPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.x = 0.5537024863958434;
    tmp_tmp_msg_0_0.y = 0.67741353541888;
    tmp_tmp_msg_0_0.z = 0.019977136928311823;
    tmp_msg_0.points.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.custom.assign("AVQVQLUYNWIKPXDWBGCZMXXLBNZTTDMEJXIQYFCMWBSZHKITZSRHEGSMNGYEDALQYAALWNRZSHEOJOCPZEKARVUUXBGBPOCCRTUFLJYMEDHXVDGJQQAOLNMPXONTTWBNPUXRUVCAUBAEXASXFCKZROFLSGCLYWTMIOUKZNIPETKVMYPWRITDEQSE");
    msg.data.set(tmp_msg_0);
    IMC::QueryLedBrightness tmp_msg_1;
    tmp_msg_1.name.assign("XREKUAYTIVKVSGSUEWYBGAEAYLRXFGAXSBBISBCCQQIETKWKRWXLNTULGVTLTZYJOAQEXMZFESKSVZ");
    msg.start_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.8150789187477583);
    msg.setSource(34220U);
    msg.setSourceEntity(227U);
    msg.setDestination(3808U);
    msg.setDestinationEntity(45U);
    msg.source_man.assign("BVNIVIHFQUEAHMANRIJZJGBZFSETCBALUKYEKNPASTFWSODXGPCWHOIBIEDDPJVOOWGICNHUQYKTEEHMAUGNDERRWFDXSJBRTUVUYSYLTXKEMLKLRFJXAFBMVCCJFYOCXBTNXSQDGNMDWPKKKZMMIXIFUWRYASGZKRVSOTAYRJZZOQEACILHPNYZQYVGQZORCUPOPXSWWFCRDBBLDANUSTBXNHUGLJPTPLHI");
    msg.dest_man.assign("OCIMWSSKJAWDRWVJTZGXREONJMRBUZOUCFLZJHUCBCGESGBAPHQJJHMHYNEFTBLGLIUNJARMNMDVYKQINBGATSXVAOVHDOTYQGQZHKERLXNWPSBFNMHDMINFQNMKLTYJBIIXFFYWPWKISIQACLHXSLRBPQTGVBTOUDVGZAOIZJKSFRGFUOZQPMLIAPYQPHUZXZKAFEPYSKFNOTCTUERKVEEDORCCUZVCYEJYXHWPRWWTQWXSAL");
    msg.conditions.assign("GUNPKCCKZVOYMSKFPALELCAJEXYWILDBHEUAERKRJILLIWRIINIFPJLHRHBASDSJUGGSZZVEXFTMXFYSCLPAOTGVYKZGABANTYOWQVKAEEHXZRYBVJFQQODTYWTBBQMUQUWDILVBCZCXDFIOTORPCDPHFYPYOZEKDBHMTUXCCVTDZQGRWRKNXQRNCMOMGJBUMPKQSHQVNJWDAFKUNJXHLFNVXLXDIWHWOSIEFNBSNMSUWAMJMVGS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.09619943771005401);
    msg.setSource(32604U);
    msg.setSourceEntity(66U);
    msg.setDestination(57598U);
    msg.setDestinationEntity(228U);
    msg.source_man.assign("SREGVXHPIDFQHSCDMOYUBAEDYZNFZWLXNKJUNXANTIYXDPWTWTAZCSTOCDRVICKUKIYWUMEUKFUEPWUALAIQYMRQGKFSHZUMTDLFVPVRVJVZEXXGCGFTTFMUSNZHDLLQJCWAMIOBFOLOQHDFAWNWNJBZCHLOJUNLJLRYBSGOKPKDCYIVKZCEJEMJLHWVVNQGBIDTBBIPGRTSCPRKBJQORISYOGMYHXWGBFRAHQATJEBYQ");
    msg.dest_man.assign("VHOJXRJFBOGDZLULIQGHVXKRFXBWXHJVPEPCGAQXAKNHYUZSVDUBOBXODTLMETCHAYDOSUBNRRJRVXRPYNMIPKQNTISIADGZTCSAHRGGKDFHPJWXWPWYYQRTTYJUCICQNEDYSFQILMEKDUZLBHUXOVZN");
    msg.conditions.assign("YPGNPYBUCVNENZZMMZVLXTBQDHRXJMLSTPWBLCYOQASRENFGONDVDVFEMRXMKRLJIRJOPXSFKWZJRNOUCNTCJDYZSKABNKVOFCQLRYCNKJZIVJCTAIHTSEAQWLGUCTMGFVJDWBUUIGQNEFSLHOKHVBUGHDIGSZWIXEMJFBOZGDCRDYIXFPLSSUYD");
    IMC::IridiumMsgTx tmp_msg_0;
    tmp_msg_0.req_id = 26747U;
    tmp_msg_0.ttl = 54758U;
    tmp_msg_0.destination.assign("CXUYDMKVPKXTLQMZTIKGOFJBGACNVGUXTYOLFKUBRHJJYQAPSFAGYHIBEKINXMALTBKCVHIJMUPMSTHELPRQFSPUEDWWCIJQACRQNLIWDUUBHXMANVHFOQTOESFMZZQNKQWANYRAFL");
    const signed char tmp_tmp_msg_0_0[] = {72, 8, 86, 78, -89, 107, -123, 72, -62, -68, 9, 31, 15, -89, -49, 111, 78, -82, 74, -36, 38, -55, -114, -60, -80, 7, -117, 11, 56, 19, 6, 16, 109, -14, -96, -20, 1, 55, 36, 2, -85, 68, -69, 98, 53, 101, -86, 76, 6, -112, 80, -98, 83, 89, -16, 117, 27, -47, -37, -49, -45, -19, 71, -87, 41, 8, -52, 35, 88, -122, 84, 56, 69, -53, -81, 81, -35, -65, -23, -92, 18, -81, -15, -18, 83, 68, 103, 68, 60, -73, 54, -43, -81, 65, 47, 6, 113, 27, 41, -25, 82, 18, 125, -79, 11, -36, 1, -84, 6, -19, -41, -119, -111, 22, 110, -9, -64, -123, -80, 111, -74, 82, -22, -65, 34, 87, 0, 66, -78, -124, -54, 87, 62, 93, -76, -90, -66, 94, -20, 45, 101, -86, -9, -87, -79, 112, -29, -77, -26, 23, 56, 39, -42, -58, -80, 56, -95, -7, 124, -84, 75, 98, -73, 47, 97, -34};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.035438413206927755);
    msg.setSource(63508U);
    msg.setSourceEntity(58U);
    msg.setDestination(15647U);
    msg.setDestinationEntity(24U);
    msg.source_man.assign("SMVEPAXIOKMZJFHVXLAOWCYEFWQFDVIOBHBWREIFQJBUTTBOENEITUYOUAEJTFGKTZNZLLVCFIPWXLNGGHODSTZDNVASXGKNKIBHFXPBAJSPKXJGWKBGKVZEOXKFAJETDHUHPLMUGOLNRAVPZBDSBIHKUQTPMZILCRUFQIMACZUDGGCNDWYRDGRQALREQNHJNUCYHCSDEZIMMAPRFUZYSKXMWNOYRJYQLYVYPCQWDYW");
    msg.dest_man.assign("OXPRFMHAUNQIFFKIOXLQFDAIICDQSFKCYANDLSCZNMJMDXQZZWMJRINANICS");
    msg.conditions.assign("FCKEXNZZWNFTVIZDGBJRLVVHUNNIKSPXIRMXEEAWLNGKZJMBKJTYMZQVVWQEALLEUPFAUG");
    IMC::DesiredVelocity tmp_msg_0;
    tmp_msg_0.u = 0.5009566823217798;
    tmp_msg_0.v = 0.07482513741338459;
    tmp_msg_0.w = 0.8074370376120105;
    tmp_msg_0.p = 0.32157073586121065;
    tmp_msg_0.q = 0.07953062193807703;
    tmp_msg_0.r = 0.6324016662659897;
    tmp_msg_0.flags = 217U;
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.966427954858793);
    msg.setSource(37807U);
    msg.setSourceEntity(179U);
    msg.setDestination(19837U);
    msg.setDestinationEntity(134U);
    msg.command = 141U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("PDROBJSOMSAWRZYTMXRJDPXLEBCTASNTBBTVJOPHMKNGFOICMUXIHKTUIRZHNSDRFBIQKEFENBDSCTEHYAIHFZQJFOYGGSOMDHQQKFSAZVLOYZGLBAEORJDRPAZUTXVJMBEXPDKIWNQMQKILTLLUXTIYHVKEFCTPNSRBCIQZZCMYGPRGWYGEWEFCMLBU");
    tmp_msg_0.description.assign("XXDMQFKTJIZNOTQJAPEIBZNXAVZDXNCSJXERGBMOLHETYLIVQOPYHLNDVERSRHAUHRVPSMGCWYTGNHJGDSEZ");
    tmp_msg_0.vnamespace.assign("EASVXZHZURJ");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("DPXMJZZFERUEGWYPGHYVECOWIYHNLSHLJQDOVQKBJZLBMPRKDRPIVOLXOLDTVTAUYXCKVWIJQKXICEOCATSFTFRDKRJQAJFQIGUFISQUYDNAWNWJGCLZJMEKBEVRWEMLRUZSZJPNX");
    tmp_tmp_msg_0_0.value.assign("EKCNIUSYKGCAPPTZVMGSYLZCQERWDSIJ");
    tmp_tmp_msg_0_0.type = 47U;
    tmp_tmp_msg_0_0.access = 136U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("NSXCSIIHDISUMFYULFTCQZKOZQWUXCPITYQHESOJJKUINBXQJNBGNQEXMBIOMATXTTLJDQLRAIUBPGHPENVEABPCVKWFDSD");
    IMC::PlanManeuver tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.maneuver_id.assign("VGTRWPEDVNNTOSJQJZINUKBFHQAXSZQMALTUHWVSKKZEQKKYOYMYOAVJNBCHYCXIXYDGSERYLOJSQLEDMBREMEXCVCGEIWXPBOROTTRWLSFZOQMXQIAFPQDFZM");
    IMC::FollowPath tmp_tmp_tmp_msg_0_1_0;
    tmp_tmp_tmp_msg_0_1_0.timeout = 61932U;
    tmp_tmp_tmp_msg_0_1_0.lat = 0.37305132069993374;
    tmp_tmp_tmp_msg_0_1_0.lon = 0.9404315992962162;
    tmp_tmp_tmp_msg_0_1_0.z = 0.30559976277243983;
    tmp_tmp_tmp_msg_0_1_0.z_units = 184U;
    tmp_tmp_tmp_msg_0_1_0.speed = 0.43177051320600957;
    tmp_tmp_tmp_msg_0_1_0.speed_units = 247U;
    IMC::PathPoint tmp_tmp_tmp_tmp_msg_0_1_0_0;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.x = 0.7558079947490319;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.y = 0.9205642880396199;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.z = 0.5225823129063186;
    tmp_tmp_tmp_msg_0_1_0.points.push_back(tmp_tmp_tmp_tmp_msg_0_1_0_0);
    tmp_tmp_tmp_msg_0_1_0.custom.assign("DQWKYUJURJBSLIXXMOZYGIQWVHZNMKZRGNMLYDTSRPNW");
    tmp_tmp_msg_0_1.data.set(tmp_tmp_tmp_msg_0_1_0);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_1);
    IMC::PlanTransition tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.source_man.assign("MYITYBGVCEIITWMUZNOONBSDRQTMXTIRNAHFVCGNVYLNDHBIFFCLFSRHBCIENJNUAMBBFESJVSYVDAVXKRKSJPLOJPLBJWLZSBEAQHYXRLOPHWXTDHMUKUJZTGZKRIMGTMMQOVYV");
    tmp_tmp_msg_0_2.dest_man.assign("BXLFULRXKBEBZFIDUSEVMLJTXYENBAMHIGTFDBKXPQYNTWDFAJWQTEMIXQYXRZSHGPVOYONQUHZGHZWKCNFCRSTORGYJIKITHSSWAAKEWRLJPACNSCHXPZURLTNCLSMUIOUQVVDONJDVHEXPYYLPTGEWWYDUOBHUZILBCEJNKNKVBVBKQGKRZGNGLRPFPQMFOSXU");
    tmp_tmp_msg_0_2.conditions.assign("EMUFYRLPLNENGOQRHMNTHYBGXODJYTUOINURIASMJDHMKCGJXVIIGRDZVBMAVDUXFQKKIDCPSYEPZVHCTQFUALQWZAWDRPLLLSQLYMFTNDXBVSGRXQSCQQXKNWARAYJKCOWVGEXREXJUWJNFIZBZHFPBCGLTJUFDMSKHGWKOPCJSTPHRXLEMVZSUUTJYHGKWABTVGCRDIKZWEXFVKCAMLWIUBYOQNPYMPQZCNTEBESZE");
    IMC::PlanManeuver tmp_tmp_tmp_msg_0_2_0;
    tmp_tmp_tmp_msg_0_2_0.maneuver_id.assign("QFIEYZVLJBKKBNZYYROQGMCJPXOSAKLVBWENSGWDNHIGCGFPZDVCXJNWVRYQHLBWSHTTMOUMOCAOQZAVRMPMEIIAZWFFZTXJDQRDHTBYJVBKCIXUBWJGCPELACVSMUMVYOIPYNHUNWPRQUKUDGXANORLTRLRMAMXPITDYKKE");
    IMC::YoYo tmp_tmp_tmp_tmp_msg_0_2_0_0;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.timeout = 31354U;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.lat = 0.526394971754706;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.lon = 0.7348836731446066;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.z = 0.09991757047781069;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.z_units = 151U;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.amplitude = 0.29797914254168756;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.pitch = 0.07263661316492498;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.speed = 0.30628444502856056;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.speed_units = 28U;
    tmp_tmp_tmp_tmp_msg_0_2_0_0.custom.assign("OQDSVRHPTLPREKYOZAZAVGZFDGVIGMFXCURQHJPA");
    tmp_tmp_tmp_msg_0_2_0.data.set(tmp_tmp_tmp_tmp_msg_0_2_0_0);
    tmp_tmp_msg_0_2.actions.push_back(tmp_tmp_tmp_msg_0_2_0);
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_2);
    IMC::PWM tmp_tmp_msg_0_3;
    tmp_tmp_msg_0_3.id = 73U;
    tmp_tmp_msg_0_3.period = 1565766743U;
    tmp_tmp_msg_0_3.duty_cycle = 3621791648U;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_3);
    IMC::RSSI tmp_tmp_msg_0_4;
    tmp_tmp_msg_0_4.value = 0.3202562988777352;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_4);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.47423222111763486);
    msg.setSource(55140U);
    msg.setSourceEntity(252U);
    msg.setDestination(27534U);
    msg.setDestinationEntity(40U);
    msg.command = 234U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("LBOXHEMGOTFKEMNZCQRZHQTZINPWDNNXSYYPKAYLVK");
    tmp_msg_0.description.assign("JRIMDYGDUOWNOUGDBIQLUFNFJAKQYQYAZTNIZMOIGPDWXVLVRNHEXTVDPPCBTUAKYUPNXBKGELEVOCUQOLHWFLZTYXFRJPU");
    tmp_msg_0.vnamespace.assign("MYEUXVXTZQDUYKZQLUQHTBVYMLTWSLCKOCBPUPFSKGNJRKOURAAPBNINDZNAPXAAQFMUWZOJLRTFARFGKOFXXBWTLISBJMHDZYBYRUMXGVJYZYTBFVBTPHROXTIWERRHMQKHCMVGPSPHNDRVIHYZHWFNC");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("KNRASECRAKKLJBHEPPGFHYZVYUSFVJHUNZOEFYNFZIEHEPZBXXENXRBCDQSFMJUZLTNWTRFHDDLUSARMPNNVCNMMJLTRIYBLLSMCOKXNYQRCWWTOKSSOJIGTLQKWZCDHIWMYFCXKVOYDBMPAKTFCMCVQWAFDRGIPGHBOUSXOJIBUVCBPGXJXRGGYPPEDGWEVRAOSIKXBXEITBVDMZUQVAQYH");
    tmp_tmp_msg_0_0.value.assign("LRGHCZCNYQRCMBGHRUGXLLSEQAVNOTGCRTVYWZFMQPMOFGZEBBHNMOZXSRLPSTDHNIIELDCKDKFXSTRKRDPDIUVXNIEYUHLMHFJVNQ");
    tmp_tmp_msg_0_0.type = 47U;
    tmp_tmp_msg_0_0.access = 78U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("EEZUHJQYKLYEMWUX");
    IMC::Phycocyanin tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.20386467569823874;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    IMC::HomePosition tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.op = 196U;
    tmp_tmp_msg_0_2.lat = 0.0845161820122603;
    tmp_tmp_msg_0_2.lon = 0.35044626306270954;
    tmp_tmp_msg_0_2.height = 0.9098638625467036;
    tmp_tmp_msg_0_2.depth = 0.4898188081520044;
    tmp_tmp_msg_0_2.alt = 0.9136838974365951;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.01453018015713714);
    msg.setSource(36409U);
    msg.setSourceEntity(247U);
    msg.setDestination(16742U);
    msg.setDestinationEntity(204U);
    msg.command = 39U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("HPFMOCXDJZFIKDFANASOUZSKVNZCUWTMTYPNEJJQORVQRLIWAGOAVSGQHDUQTLCSMN");
    tmp_msg_0.description.assign("ZKBYKGSZXOVJSQDGWJKZMJOJOZICAVMYXAPWEIJXDANIDQJTTFUEAYUOPTNYUBLHAOJTPCNBTEMCKEESNDHWOPWDLNMTXIQVNLHCEMARUTMFVWPZJQXMEYHZKDDUBWZFYLIBLNZLXKWNCRRFJVBXAPSYBUGOGNRPCAMAIGIDFFZORMTSJLUXFHVTKUQSGQYLRLXUIYBPPGVENWFOGIZCCYCRWHBRVRBHQFEKEDHGXVHCKIMDVSALGSOTSSUWH");
    tmp_msg_0.vnamespace.assign("IGSRKRBOJJFKHUNVQMSZNNUITBEESZFNLVKDYPEDIUMXUCYBJIWZWKAPLAAPMMURESJXIWGAVGGENSMOAWHVWUYBOEPUMLNKQOPLLPXCOQTFMOXRELGIAZKHEKFQRJSQGDXVTYZYVRJPWDLAHBCBFJII");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("DEDJFQIINLUBEAMAGIJLPDZJOCKTOMRIVBCKXCTLFZEXRNWAXGRMYZHNTQCKJXVCOAACX");
    tmp_tmp_msg_0_0.value.assign("PPAWRRPZMCRTNOJOEBYWOLGNTKYASPKCVAKWIQQPWUKOYHLBHJIVMKZVREFIFXDRXGNEUVPDTCWFSGVJXSXIRXWJMDVPCNGJHTZZHXKWJFDNCYLXFUQSGLLSSOCLYLIBOWQDMWZXSELEYZQNSRTRPUZHZDLSIYOFNPCQAGIEOHQTAATEUY");
    tmp_tmp_msg_0_0.type = 253U;
    tmp_tmp_msg_0_0.access = 74U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("SIIHZICEWYTEMQIOHVTFMWLONKBONLJKDXUOEWLSQZSRYXEWMXLWELKGGCNNOFJTNCYNANEGRVRCHQVZKVWAICSMTVETPZWBAPAPYSWBMCHNTJXXJAHLPXODM");
    IMC::PlanManeuver tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.maneuver_id.assign("KKEMZCOJTTHWPWULWVGGFWWYGIQFILLPFMZSCKDGKXEQWQXKNIUEADGPONRRQLAUDVTVHMYAYZBWTNSYSJCFHOPNBXQTNJLTDMZLYXSMAKBB");
    IMC::Alignment tmp_tmp_tmp_msg_0_1_0;
    tmp_tmp_tmp_msg_0_1_0.timeout = 30678U;
    tmp_tmp_tmp_msg_0_1_0.lat = 0.7738987281564919;
    tmp_tmp_tmp_msg_0_1_0.lon = 0.8992537562953015;
    tmp_tmp_tmp_msg_0_1_0.speed = 0.331340089875661;
    tmp_tmp_tmp_msg_0_1_0.speed_units = 57U;
    tmp_tmp_tmp_msg_0_1_0.custom.assign("RCBDAXPAPAATXXWQPEFROZFXKCHVECOOWUFSKUCSGMMJUQBTLCHFYUVYJQYPFNVDBFVAIEWEXTRXZYUBTMUSSYJGMYDADIFCKSNTPEVRMONYNNSTIODOBPMHHFHLQDJEHAWZSFPIIAZVGNDLLGNIKPBUXIXIZVYARCGQLMKLNARGQRDBWGENRKK");
    tmp_tmp_msg_0_1.data.set(tmp_tmp_tmp_msg_0_1_0);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_1);
    IMC::PlanTransition tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.source_man.assign("JMAKZCISGNCEPAIKYDPHFICLTZMSJRTDBDTRHUAGCSWOWMYZGNUFBTNC");
    tmp_tmp_msg_0_2.dest_man.assign("OCKFYXDXZIZJREUYKWCDFHCIPOWBYLMRRBJIIFPKZGDAMKUVEOVNQAYKQFPNVRVQIUFRHGUDZTJHBGCZZWEVSWXCXTTEGLLQHAOBXXSWHMJVUTCQOASTQPSLAIVKJLUBUWYIHNFBHFCWWGNOYTZIRDGBSEADHY");
    tmp_tmp_msg_0_2.conditions.assign("ZYOBVRVGGLBBXCSEZSWYEIUILIYECUUIOGDREAHDGFOKDJNWFVZLAYCAJQKMFLHFZCLXQADNKBOKXPIYTJVWDUDTKZFDAKFLUMEQWMZOQFUWBKGSOYHRTGXBSYTKELTJJVSUJWMSQLQGPZJLXPHQZZKPQPNROMEUTTSDGEVANOMWVPVERCHAFCNFRIQIDIMJHTLPNBSIUHVDHGSNXAENCGHMPCBPZQMWBYAJHSFXKMXRTNRBIUX");
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_2);
    IMC::IridiumReport tmp_tmp_msg_0_3;
    tmp_tmp_msg_0_3.frequency = 1663424153U;
    tmp_tmp_msg_0_3.info.assign("JTAOXONZHNMMAUSCLCKPXXBJKAJVEKBSHPHRXNDTGWTGKZEACCHYRWVYDZOEFWNHJACISBVXDVZUPOTHMKYWVHFLUHJCARXFHLVCYXQJLQBSLTFIWZWOJOPQBLEBFDYIAMVYXQRLKDIELPGUAJLHMKMNNCZSSFFPRGZIDDXUGUGZYKZRDTTGDMQJBNVFNSRKICEFSIWPODUXMVQPGEUWAEIWQABWFYIPMBNMGSRSVUOJQPREBLITEYORCZ");
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_3);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.06679578411710752);
    msg.setSource(48176U);
    msg.setSourceEntity(84U);
    msg.setDestination(61020U);
    msg.setDestinationEntity(83U);
    msg.state = 230U;
    msg.plan_id.assign("MNRGYPGFKVXFIXDGCRFLDJCFNXSVBWDCEEKBCOFKBBHRRPIZEKAHFAKUNUXANPUDCZEJCZNYCNQVPLZGBQFMQDXORUFOPJAAYGZUHUDLZZQOXFEZXLJPYUWCOVGWMNNZISJTMLSXHVCOGSRUIIESIKTZTACMYRJKLFTVWKTVAMPTSJTSPBKJXBQLROAYWSWVOGHEEMBNQGN");
    msg.comm_level = 169U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.8325566666648005);
    msg.setSource(28855U);
    msg.setSourceEntity(188U);
    msg.setDestination(61772U);
    msg.setDestinationEntity(64U);
    msg.state = 142U;
    msg.plan_id.assign("FYHJTRKOESVSXRRVJUIWGPNZDIGHKVXDKYLMPNJPXSYXOTJHXLWXL");
    msg.comm_level = 164U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.8067174043741331);
    msg.setSource(44475U);
    msg.setSourceEntity(147U);
    msg.setDestination(27294U);
    msg.setDestinationEntity(6U);
    msg.state = 90U;
    msg.plan_id.assign("QIAZHKZZQPZOUGKYTKKLPURQCDREENGAFRZWPY");
    msg.comm_level = 53U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.5847747125381698);
    msg.setSource(11488U);
    msg.setSourceEntity(77U);
    msg.setDestination(23583U);
    msg.setDestinationEntity(93U);
    msg.type = 220U;
    msg.op = 2U;
    msg.request_id = 3981U;
    msg.plan_id.assign("UMRBNWRTWPLVFDVFNQAEFTOOZVRJYIXEMEHFQRGJKXDEMFPMDXJLHQBVWMHKLGZRWJITVNHYULOLAPYGYZQCUZRKQUQCHHWCOFUQZOIUSIRMDRCMGLAJBIML");
    IMC::IridiumTxStatus tmp_msg_0;
    tmp_msg_0.req_id = 2820U;
    tmp_msg_0.status = 67U;
    tmp_msg_0.text.assign("XJJYOAEWMZYYFIUFTJQFGYWASQBRSCPJGHCDUVNOCOSAMRLGRDNJVMXKVVEGPQLNDPZDDPOFDACKBCCWSVHJEBIDKKLPKULOLHHGRGNOVSIAALTIFLETMIACPRTWCGROFQ");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("VPBNJOYOCYTWTSOMNNIMXMKYJRQRZUBWIMLPEKZZXTUHOHVJBLLTMSYTYEHVIKUTDROILPXTYNVMIBBXCRPNXSSBVGAWLEBGKRKIEQUVFGZSAEJWJDUUFRGUCKIJCTCGFWBOOYYQPCCVYWEXEXKZGXALSPAZGSNDQIOWDPOFLLKINRKEQMCFGRAPSLBEUQHUHEMCSSDHJVHAFAHJAFDWXAQNQQLGJRZDZVZQXWNUF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.16576357239117578);
    msg.setSource(38173U);
    msg.setSourceEntity(114U);
    msg.setDestination(55932U);
    msg.setDestinationEntity(133U);
    msg.type = 174U;
    msg.op = 196U;
    msg.request_id = 43032U;
    msg.plan_id.assign("YLAWLTFZYXIPPHMUIVZSBUEGLOECRRIRXBQTFRIYDEIQTXJGLOSKYPPZMWLOVNGPFZFZRWMGYLJLWVAMYOKTDYJWWJOVTIDNDURXWNNSQNWUBKFJCWDBUQAYHAHVNGPDSNKVUHBXMXGBSCLJCMGFRTSCAQBTNVIANXKESGGUVRETPLDQQWURKZOGQVEAJEOTZKABJRTCSDHCFJMCLIKUBQFIUEYMDZPDKFXQMMS");
    IMC::RestartSystem tmp_msg_0;
    tmp_msg_0.type = 79U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("JODZLPLIJEPQMCKLTXNDRDHRTBDBZBIXEQPOBWMJGHHZOTWCKBSZBTYDOXFFIUHQIRMFNVLKPBLMHNZFAYCVRASFACUSJVIAUSFGZTBJJCMNAFVKOKGQGIYSAWXKLAHZHIGVQJCXQEOWMYSQATLOSKDUKKWDXZVSMPUEZTYETMVVREFLYSYGOEDNIDWGBPVLUGHYN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.9163802947499552);
    msg.setSource(3244U);
    msg.setSourceEntity(247U);
    msg.setDestination(49247U);
    msg.setDestinationEntity(39U);
    msg.type = 47U;
    msg.op = 110U;
    msg.request_id = 26003U;
    msg.plan_id.assign("QOYGTCJDTVVUVTMNKWQTHNYCWVOEVSAUUEZRLKKZYIWFULYIIYYSFTXFBWAIQXCFKHDBWJGPBMHPN");
    IMC::QueryEntityState tmp_msg_0;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("AULHQIVMAPWNYWYGZKARUADVIKFZCKLPYUDBWZPNKNEKOJCXVRSYUQUXMJIXFWEEZGZDOPLKAZZGBCOUCECMFLRJSNJGKHCPEEIHLQSZOTHSXMVDNRJWIGDTYXXBWRTGWRPFMFDRUEWTQKSSDJTMYNBIOGCASDXFBLOIAVMQYRHCEBVTBELYAVUMTOXDUHTLFOSAJIZNNSFJCTXQNIHVGKDOPROBPCBNJWMG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.6257082274630351);
    msg.setSource(6759U);
    msg.setSourceEntity(221U);
    msg.setDestination(24159U);
    msg.setDestinationEntity(47U);
    msg.plan_count = 52403U;
    msg.plan_size = 4281058803U;
    msg.change_time = 0.14309336372044612;
    msg.change_sid = 24727U;
    msg.change_sname.assign("AOMSTUXFIZQQAJNCRHYEUVPDTASQNKDLTIEFODYZPHOBZYQAKZCRYEVEUIBSSKMHXLKVSLVWMVWUUFETEPFOKWHBGMKWSIYMRVRPRYCIRGILCNSPWJWCSOFBONXVRMEVWATQKCZPJCCJAGTDJUGZQICTTJDFABIUEBJSNEOTDMLLIWDXGMMXDYSW");
    const signed char tmp_msg_0[] = {-32, -118, -48, -111, -65, -52, 38, 87, 7, -78, -46, -92, 86, -127, 27, 54, 46, 109, -27, -74, -57, -45, 71, -120, -113, 108, -79, 102, 56, -51, -118, -43, -44, 49, 77, 33, -88, 59, -62, -89, -119, 76, -66, 119, 119, -48, 114, -112, 75, -82, -125, 53, 23, 126, 42, -24, -2, -95, 70, 7, 75, -33, -88, -59, -100, -106, 48, -124, -16, -69, -8, 32, -85, 6, 25, -47, 20, 72, -60, -28, 112, -6, 84, -45, 43, -126, 53, -108, -65, 88, -17, -29, -40, -9, 110, 7, 59, -125, -53, 25, 31, 108, -115, -114, 72, -62, 91, 102, 102, -31, 60, -84, 20, 119, -14, 34, -94, 87, 86, 91, -92, 65, -50, 106, -56, -83, 45, 117, -30, 96, 61, 108, 103, -53, -7, 4, -39, 3, -87, -65, -123, -124, 70, -39, -50, 24, 110, 100, 7, -10, -49, -32, 65, -50, -80, 97, -28, -66, -65, 36, 39, 23, 39, -92, 89, -28, -114, -81, 107, -49, -104, -102, -93, -16, 45, 116, -57, -78, 94, -100, 9, -90, -18, -95, 64, 96, 2, -121, -15, -104, 97, -78, 73, -80, 85, -105, -25, -79, -114, 33, 12, 45, 54, -100, -54, -82, -5, 53, 55, -98, -93, 84, 69, 42, 63, -32, 99, -91, 3, -84, -73, -27, -87, 54, 45, -35, 64, -16, -41, 107, -73, 83, 7, -86, 112, -89, -126, -58, -68, 39, -32, -59, -104, 57, 4, -35, -110, -85, 102, 72, 73, -44};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.7295428953529867);
    msg.setSource(33586U);
    msg.setSourceEntity(138U);
    msg.setDestination(10354U);
    msg.setDestinationEntity(212U);
    msg.plan_count = 37407U;
    msg.plan_size = 1139215999U;
    msg.change_time = 0.233147037709602;
    msg.change_sid = 63906U;
    msg.change_sname.assign("OXLWKXGANLGVFUWTSJRKSIRANDBDLRAOCPIGFBMRWCI");
    const signed char tmp_msg_0[] = {-86, -47, -82, -56, 93, -8, -109, -94, -55, -46, -52, 10, -32, 71, 5, -8, -9, 55, 113, 39, 52, -33, 73, -29, -21, 118, 96, 93, -49, 77, 77, 88, 122, 2, -68, -88, -88, 125, 56, -83, -69, 36, 57, -120, 97, -83, 42, -18, -87, 91, 11, -5, -15, 123, -34, 59, -115, 94, -19, 53, 29, 28, -39, 117, -106, -62, -4, 45, 119, 98, 44, 4, 62, -28, 91, 84, -22, -26, 47, -54, 83, 78, -30, -43, 16, -123, -34, -48, -67, -23, -93, 89, -114, -11, 43, 58, -102, 42, 14, 79, -16, 46, -47, 118, 12, 80, -98, -41, 4, -34, 75, -78, -40, -84, 101, 63, 114, -29, -38, -42, -47, 37, 37, -91, -23, 124, 95, 63, -79, 16, 32, 75, 100, 33, 69, -52, -19, 90, -97, -107, 28, -37, 108, 20, -69, 61, -103, -24, 57, 98, -110, -115, -81, -1, 13, 106, -104, 18, 7, -63, 22, -101, -47, -100, -99, 42, 56, -86, 87, -78, -128};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.6332805474856465);
    msg.setSource(63003U);
    msg.setSourceEntity(118U);
    msg.setDestination(52106U);
    msg.setDestinationEntity(20U);
    msg.plan_count = 16969U;
    msg.plan_size = 418203810U;
    msg.change_time = 0.9067756155496373;
    msg.change_sid = 49021U;
    msg.change_sname.assign("AEKWMAEOJRFGGRLUVXKZFWBYAFATHBILFMUUCZFETXZWCNOHCTMRNLTSJJFZQYLXJYMWVGRQN");
    const signed char tmp_msg_0[] = {4, 68, -25, 83, -66, 108, -94, 42, -58, -109, 75, 28, 58, -93, 4, -7, -96, -51, 78, -55, -2, 97, 28, 100, -88, -7, 81, -44, -48, 115, -111, 29, 75, -23, -40, -51, -12, -99, -63, -1, 40, -120, 72, 121, 42, -26, 105, 55, -30, -95, 71, -28, -66, -31, 91, -18, -68, 6, 87, 13, 54, 50, -71, 14, 64, -25, -122, 77, 17, -125, 126, -42, -16, 55, 16, 123, 54, 63, -81, -57, 91, 90, -35, 90, 118, -108, 1, 82};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.6448980049303749);
    msg.setSource(17264U);
    msg.setSourceEntity(15U);
    msg.setDestination(63423U);
    msg.setDestinationEntity(230U);
    msg.plan_id.assign("AKTFOTLUTYHICJLWZXLVPLJNSOXURMICQOTRVHPQRKBXAVOCOJWUVDYH");
    msg.plan_size = 40224U;
    msg.change_time = 0.5116575310503212;
    msg.change_sid = 15762U;
    msg.change_sname.assign("IHVCXPODIHBHRNBYZWHDKKWSQNXNNIERVURJPBKEPTVDBOXZFXMSAYCUGPXAVYJTJFHCGFPXELYQSTJDJKOONMFRUZHVIEXGLETTRJMZKWNVAWNAPSKDRIOHMAAFKMSBDEFIHNUWQPSWHDMQPZQIUUXHKQJMZSWLS");
    const signed char tmp_msg_0[] = {1, -77, 93, 64, 72, -91, 66, -53, -40, 65, -104, 118, 87, -90, -79, 44, 32, 28, 75, -84, 17, -6, 76, -33, 76, 32, 9, -67, 21, -28, -86, -71, -115, -7, -101, 104, 84, -23, 85, 12, 84, 8, -70, -29, 91, 40, 13, -121, -28, -124, -55, -41, -95, -29, 105, -5, -115, -117, -64, -84, -56, 101, -2, 15, 48, 67, 1, -67, -110, -109, -24, 75, -39, -10, 1, -81, 100, 126, -34, -128, -42, -35, -61, -127, -35, -46, -23, -98, -10, -43, -71, 79, 82, -77, 28, -29, 33, 94, 14, -6, 61, -110, 7, 7, -90, -87, -5, 76, -80, 98, -58, 81, -70, 6, 36, 89, 7, 30, -89, 45, 86, -16, -111, -54, -104, -88, 32, 9, -34, -98, -83, -39, 48, -125, -20, -22, 62, -106, 120, -121, -23, 63, 27, -78, -117, 64, -94, 78, 31, -31, 118, -123, -84, -70, 69, 88, -93, 121, 77, -80, -124, -51, 12, -34, 48, -12, -87, 11, 38, -102, -33, -113, -56, -46, -86, -84, 77, 101, -22, 67, -65, 34, -115, 66, -25, 51, 14, 75, 79, -13, -56, -57, 40, 26, 17, 88, 96, -41, -115, 86, 73, 114, -54, 12, -75, 121, 57, 9, 8, -2, 26, 56, 50, -59, -121, -52, -109};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.6875741004527125);
    msg.setSource(31791U);
    msg.setSourceEntity(242U);
    msg.setDestination(38680U);
    msg.setDestinationEntity(229U);
    msg.plan_id.assign("CEVWMXIKLHBPQYEPMCXRJVZNBRMXDEZAUYNMLORCZTJNMWFKIKOEMCGVYNFDEDLSUPQDUJTUAHGBGUCHADJSJKZWKJPORCLIGBKEMIGPBPOUSAMRJPFHFXTVLOJYYSRNGCGQSMRLPUYSTVYZDZTMAVOQQFOUONROBEUTYWTZUNZXIEQTFWFNIYOBWKLBAAJJKEHXQSPWXVAWINSVPAGIQZDALVQGICHXHHRDXRTCBHDZN");
    msg.plan_size = 32305U;
    msg.change_time = 0.07065997518404543;
    msg.change_sid = 42171U;
    msg.change_sname.assign("EOUKJGQHIVJRKRGCWIOWXAYEAWDZYBPTSUHLSVQWZANIAQBALCSJNYUZYBGNODXSNDHRZJEMPQJLGGTRKOCPTIVLBXXFDCKZJAUXZBJCILKNHMLZKQGXTQWKFUXOQQTMWDJVNPPVIUVDVEECT");
    const signed char tmp_msg_0[] = {8, -89, -115, 122, 95, -94, -118, 60, 70, 57, 119, 104, 50, 52, -41, 73, -62, -66, -122, 10, 58, -7, -61, 114, -63, -49, -30, -84, 41, 51, 76, -121, -81, -78, 26, -96, 44, -39, 2, -101, -80, -94, -101, -62, 59, -2, 83, 85, -35, 46, -105, -124, 119, 73, -2, 32, -56, -39, -45, -75, 74, 125, -102, -96, 45, -25, 117, -67, -94, -36, -17, -104, 20, -63, -1, 84, -89, -120, 41, -117, -95, -67, -20, 63, -106, -25, 90, -30, -84, -81, -114, 13, -21, 14, 98, 18, -111, -82, 25, 75, 117, 60, -50, 107, -91, -69, 81, 58, -106, -111, 107, -57, 42, -60, -68, 19, -31, 15, -96, 114, -18, -112, -109, -50, 123, -10, -99, 88, -57, -87, -114, -83, -73, 65, 20, -52, 65, -103, -31, -38, 116, -6, 27, -81, 4, 41, 112, 13, -82, -97, 101, -93, 96, -91, -101, 72, 113, -62, -91, 62, -25, 9, -59, -122, 32, 34, -13, 79, -29, 60, -123, -86};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.17157349888493922);
    msg.setSource(39204U);
    msg.setSourceEntity(46U);
    msg.setDestination(49389U);
    msg.setDestinationEntity(175U);
    msg.plan_id.assign("PANOJMDCKWZTALJFLSWFHQRDLTRLFVTWXVDDKRMSPBJHCWGHPEXFDNRXPNHQNYODEHSQFYQLUWLQETZCUIAMYWZIRSECOTUKXFQKVNJSJNWIVBNMBFYCRCZYREQRJIKLPSOKVUOPRXMAAVSYUBTLHMGMXXGN");
    msg.plan_size = 37899U;
    msg.change_time = 0.46582886560121395;
    msg.change_sid = 63382U;
    msg.change_sname.assign("ZEPAQXRWDBZMGGVQQPMSYNBFZLOLMKJSEVUOXAWYEWXGHCWYZSWLTSGOEEEOKOEDKFNRWOPBVGROMRHMWUIIITONSNEYJLTRPXIGACDBUHUQDYQYDFAJXQICAFBIAPACZZIFXRDTVHJMOJWPGVSYCNRBSRTPTCJNCK");
    const signed char tmp_msg_0[] = {13, -22, 44, 3, -121, 64, 97, 89, 11, -29, -73, -38, 46, 71, 86, 115, 86, 89, 101, -26, 106, 96, 73, -95, 65, 14, 74, -71, 94, -109, 31, -56, 41, 0, 98, 37, 117, -9, 17, -84, -72, -128, 19, 3, -109, 6, 86, 56, -92, 22, 89, 82, 13, 93, -32, -39, -15, -33, 89, -93, 96, 74, -69, -6, -114, -62, 50, -18, 29, 124, -104, -81, 66, -50};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.9438277981795944);
    msg.setSource(4401U);
    msg.setSourceEntity(156U);
    msg.setDestination(30777U);
    msg.setDestinationEntity(76U);
    msg.type = 238U;
    msg.op = 98U;
    msg.request_id = 63414U;
    msg.plan_id.assign("JUXXJSXGIOQLHHSTWCMTEAMWHNETLXRUSVQBVJYLPGABWFKVBRBSBUKXGZDJVCBCNOGRFCYEPWUZYNYOSHVHCECHBPSPKEDULLXJETLDYHPTIQXAUVOESZTHGQFRFMZ");
    msg.flags = 46048U;
    IMC::LblRange tmp_msg_0;
    tmp_msg_0.id = 62U;
    tmp_msg_0.range = 0.4039314441052362;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("HJDNKTPXICQAAUYXUIYLLWDKMNWTEEWRUCJXBTDGRBUWKSDKQCZGOMJTHZRGXTFGKOYLVKTJNELBPTQPWCIRQUZNFVYKUSJFACFVRVBNFTVYUPEQVYNBQTSZNRZPVEIAULXDJDZSILFUFJRPIQFCRWHCGEANZILZHIBVRODSMEAHBLIAVWJOLWMDOSOQCIFBZPGYKBSDEMAMXOPAAQT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.517705336901546);
    msg.setSource(17667U);
    msg.setSourceEntity(182U);
    msg.setDestination(12902U);
    msg.setDestinationEntity(212U);
    msg.type = 46U;
    msg.op = 29U;
    msg.request_id = 8793U;
    msg.plan_id.assign("LDWUCESDOSGECWAOYLNETYKNZZFANGSLHVQAFDECUQUHZSAOHQBOJXVRQKFDEZWPIMLURZSRIUYIXOXBFYWQIPLMLTJNMDQNXFZVYMGILMYQMKXDTBKHUMWPMQGACCWCZTUSEIXGASPIWXYCCTCDPVJBPWBKUKHJAJPVBJX");
    msg.flags = 60570U;
    IMC::AutonomousSection tmp_msg_0;
    tmp_msg_0.lat = 0.4750273956583212;
    tmp_msg_0.lon = 0.9200813757819533;
    tmp_msg_0.speed = 0.3682666989657003;
    tmp_msg_0.speed_units = 215U;
    tmp_msg_0.limits = 144U;
    tmp_msg_0.max_depth = 0.166258652534516;
    tmp_msg_0.min_alt = 0.7499784705591905;
    tmp_msg_0.time_limit = 0.655050477698766;
    tmp_msg_0.controller.assign("WBEXJXTMQFZNPKSACYHSUBUXYKOMEGZQHAKKLYHESYFRDXJIAGXUNYSKVPYWVDAGCDRBMOKOEHUPAFGKISMLFOVUL");
    tmp_msg_0.custom.assign("MPHSCYXQKYEDSUGZMXZULPTPCNUXORSNKOBHQTMCLDURLDZQF");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("SSLSEVTYWSIAMVDYCYFOWCZZJOLXVIKXRQAYYIBNBRMGSDPFVWPNGIWDCILKBIJKHHYFXHSGPIGOJUMCRUHGPECFNGLJGKQMXXSDXFWUVZTHKTSWHTDQLABUID");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.5928813280105849);
    msg.setSource(23688U);
    msg.setSourceEntity(102U);
    msg.setDestination(12207U);
    msg.setDestinationEntity(122U);
    msg.type = 79U;
    msg.op = 161U;
    msg.request_id = 300U;
    msg.plan_id.assign("ZFLVIZONNMEATMCHDSYDUXRENGZYVEYPNNTKBTSEFQDHUZBUEMFXSJSCJKDWABTEVMCPCQFLEUKSASYUIJWNDTGWQVBGOQGAWJKOKZSLWUBBDACKWVELJVHGBJNXMDPGFQROZXWVYYDCQRQHRWGIZEFKVZPOLRXMFIIAAQOTTREYBHPSPIIYDAPYGFHXPRYMNHMXWVQKBIOUCJLWNTSGLOMULRVMOGBFCPCZHKXTRIUHJJXQNKAAROLTXUSI");
    msg.flags = 36503U;
    IMC::GetOperationalLimits tmp_msg_0;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("FUKOXXCOILGKLQBWPCSAWJHVSKIELORVQUHYONRDSVKPUBDQHP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.483895958990881);
    msg.setSource(43980U);
    msg.setSourceEntity(18U);
    msg.setDestination(62302U);
    msg.setDestinationEntity(32U);
    msg.state = 107U;
    msg.plan_id.assign("JAEHNHIIIBXJETP");
    msg.plan_eta = -1609464853;
    msg.plan_progress = 0.033634633742225306;
    msg.man_id.assign("VYQQKZXLJOUQPBOIAZMUJJLCFCAVWNMBBDPKSIKLFBSMAMLDZKCRWYTAJHPSRPILNJRCEZQCHROUVWWDKANUMWXBNGXCCIFSTMOMQUBJIGXDDOXOVSLZTEWKDBGOQGMNUU");
    msg.man_type = 64116U;
    msg.man_eta = 162903302;
    msg.last_outcome = 132U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.490647091613327);
    msg.setSource(34662U);
    msg.setSourceEntity(112U);
    msg.setDestination(10547U);
    msg.setDestinationEntity(27U);
    msg.state = 205U;
    msg.plan_id.assign("WBWNRGKXHSIQLOJFFBZHQKTZVAPCAAJUVMJJQOMFTGQYOXSDNEDMSTSGGMFBSGXFJHFHLRUWYPYHBPOPLQNQRBWDGOODVLCHIPXEPNQCZESGGWMNRCKTASCMNYDXNCJZFIIWXJQQIUQAIUHGYVZKYYVONRPIWWPWJDZYDNVMXAHAZKEXKCBMUUTIEMEORKHGZPSEKVUSBUAZCL");
    msg.plan_eta = -528356374;
    msg.plan_progress = 0.4396203061863365;
    msg.man_id.assign("JGYQVVFBSECTOZXTUTKBYEMLRTYIJBJOOKLEUYNIAQPUZFGZZMWCNCIWMFOPOVDLRDRMHSXUWESHQHLYKTNXMSIJBNWOFGDRQMMFKMCWPCRIVBYWIPHAMUBSUBKAPEGPDLGDWQANKINWZDRORXZCDV");
    msg.man_type = 56883U;
    msg.man_eta = 1880685040;
    msg.last_outcome = 244U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.6730929868524306);
    msg.setSource(3052U);
    msg.setSourceEntity(139U);
    msg.setDestination(54814U);
    msg.setDestinationEntity(151U);
    msg.state = 216U;
    msg.plan_id.assign("XBLXTEOPDYGUHWRIFAWBUXPBZJTKEQLORSZEWCRTIGPMPXTMRTIJQGNVHSKZLEYQNMPZZKSKVSYAWRUEFRXNADISVDUTBEAWJFIKZKKOKEEJNRHGCQHLTGLBOMUFJDXMVTCAAYTNKGQJDYYMXMQWPZQPMDVFCICNJNUPXUCAFBQNSVYEKFCOBCDNBILUQJVXLJBWLNUYPHYHAHWIEQPMDDGWGSLOLRORUTHOJVDHRBIVZCOZISSGAGFSWAVOFX");
    msg.plan_eta = 369708475;
    msg.plan_progress = 0.770884563680068;
    msg.man_id.assign("DBGILBWRCDREFAYQNLBEFAYAECEURIDEO");
    msg.man_type = 2445U;
    msg.man_eta = 1077628254;
    msg.last_outcome = 184U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.06934825400983613);
    msg.setSource(4998U);
    msg.setSourceEntity(57U);
    msg.setDestination(54209U);
    msg.setDestinationEntity(142U);
    msg.name.assign("ANTGUXDNLFFVPBETMBBJKEPQNLUOJFTBIXIKHPZBUAASSNJTXPIWJKSZMKBZPAFTTOHQLNTDGADGPLQBPUMFHGFSWTJFVDWWJEK");
    msg.value.assign("SMKOHADWGCYBLCHIDOLDNWFVYKXAULZIMRKKLEHGPPNBIVTTEXCKZQNWJWWBPL");
    msg.type = 139U;
    msg.access = 36U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.7767072115648389);
    msg.setSource(22255U);
    msg.setSourceEntity(180U);
    msg.setDestination(10292U);
    msg.setDestinationEntity(170U);
    msg.name.assign("FZGKJLHIYWZCQYGWORZJMFNBIKBHPSGLPWXVEERXOYTXSGDSPQZSOCPNXJAPQDTFBWFUMFKOSWYUYIGLMBAWGTFTCIHOKHCENMVAIRKCRGRUQODLOYAWEDDRMKJFKCZMOIDQKJKPVBETASMXOLPIBIHWNARNDLLYVBPXBHDZVDHYEHIKJIFQSXCQZZGVNALVWCWPCJESUMNVANSXZTHJRNZAFOTUGECUJUSVRJQYEAXPYMLMDQTLQNHERXTUF");
    msg.value.assign("BMMRALGWEDQZVBKBWNIKTCLNQETXRVFUEIIEBGLGYOOXWUMIPZZMKBEFYNCBAHKNOHSTGDAJYMAJVHCWCNTQDGBUYOOCXDHMFVWPPRZDCVZWHJRUPWBONIMXTFTSYIPLYJNZPHXSKETTDCGEDQ");
    msg.type = 210U;
    msg.access = 113U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.9930641161074738);
    msg.setSource(8495U);
    msg.setSourceEntity(6U);
    msg.setDestination(25843U);
    msg.setDestinationEntity(70U);
    msg.name.assign("QRNKKEKAOPQFNEBFZYJAFZWICMOUDMVKEJVLGBSCQWDRHKMDARKBEUCEIRPCDDJSIRHRZFYYFFYBBCSAPZHMQHNUUKJDZWTRREHVRWQXPRLDYPTJGMSATIHZVDWBCLLOTHJXSAETNPOMBUIGULWLDEIMCYQWLVEFXVYIXCQCOAHLHPWUZVXSNSJGBQZYHNVXNXGXFNQXTASBUNWPKAPMNOUASFGZITJV");
    msg.value.assign("PRPCWGPMUF");
    msg.type = 111U;
    msg.access = 248U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.2931190775389485);
    msg.setSource(14579U);
    msg.setSourceEntity(252U);
    msg.setDestination(2409U);
    msg.setDestinationEntity(179U);
    msg.cmd = 133U;
    msg.op = 204U;
    msg.plan_id.assign("QJRLVSSFCGTNCAWXSZDVBYQVZSWJCBYHFOJLBZSZQOPYFXXVSPTDMCJIALOJNNEKPXQDXQEVJYDRYUMIZOXTGBVBRKDFUVSBIIXLYNMTCAWQWTCBZEMDYUHOKKEGTQHMCWPUYSRHIDLFMBCOMJCAAJFPDTQRFGYHOHNPXIKNEQZJGIGIHNEFBUVLKMAYFEMGWEUSTLAOGZJAHHUWIRLDUDUAUERTOGTFZKRWWWGRPKEIHBMLVNLSPCN");
    msg.params.assign("PBUXQPBEDUDOYPHCKENXZMDKQK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.8770430504945703);
    msg.setSource(63532U);
    msg.setSourceEntity(5U);
    msg.setDestination(59420U);
    msg.setDestinationEntity(73U);
    msg.cmd = 107U;
    msg.op = 106U;
    msg.plan_id.assign("GYFSXGIESEINHVEBLHFNCAJ");
    msg.params.assign("XFILIAUFHXUMSWZGIGMDZCNGUZAZJZBKNOTQVRJVPHXCISHEBLPHBAXVOJDOIYEXJBIRTLFEKHMIDFOXLKMXQAVTN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.7142764279328083);
    msg.setSource(2364U);
    msg.setSourceEntity(9U);
    msg.setDestination(38106U);
    msg.setDestinationEntity(93U);
    msg.cmd = 195U;
    msg.op = 99U;
    msg.plan_id.assign("CVZSPJBORASEZXVWYPJYITFWHBLVQYLGUZGCVRSGXMUPQQMFNAAKINEHVFAJARAAUJLAUHBZJXKHLWOBVNUXLNNCPCINTIGKUOTXIQWPPSAOJBDMIDYIKQOAKMZTSTUOOMWKQWYUDNDEDZYLIDWEMDYWJKLRTLFISCQKLPUCZODMGKLOVHRBPVHXHOHRQXFCEGZFTYGYHETUFEZEWCMMTEPGWGQ");
    msg.params.assign("DBDURXEUIPWEACGKDGZEJUZIANLPXWMZSYLBWSVBRYDEAODSFTZVMJIHSMMMLOCLAZJXUZJOGKRMVCEBKSNPPKCPDOHOWYPZBTIDGCGTHPLTFJLTSBVQVOBQMYGBJTJXLSURFZNNRQJUVCCDWAVQAKQVUFWHAHBVFHNHTICMUAVYEDGLKONXEYCOIHTGHFONYAESFIEHPRIDMT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.32379686871320357);
    msg.setSource(53073U);
    msg.setSourceEntity(143U);
    msg.setDestination(48252U);
    msg.setDestinationEntity(151U);
    msg.group_name.assign("UKFBKJMSHCZCAISNWCDLPAGDRQSYAPWIWKLJGAPXBGEBQERHDNTMTYYPYZE");
    msg.op = 86U;
    msg.lat = 0.3431166207847294;
    msg.lon = 0.43433946232804366;
    msg.height = 0.33255614271593426;
    msg.x = 0.3618757065204312;
    msg.y = 0.9816828796448493;
    msg.z = 0.5228725457864675;
    msg.phi = 0.49334023507852287;
    msg.theta = 0.719454649401184;
    msg.psi = 0.4548119996853961;
    msg.vx = 0.8172703402458745;
    msg.vy = 0.7114299859865514;
    msg.vz = 0.27665039016512494;
    msg.p = 0.6306661865108568;
    msg.q = 0.4610588892822096;
    msg.r = 0.5862456478622948;
    msg.svx = 0.20741133636085463;
    msg.svy = 0.770041303172766;
    msg.svz = 0.9646348814627158;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.1464287178472362);
    msg.setSource(61076U);
    msg.setSourceEntity(213U);
    msg.setDestination(32663U);
    msg.setDestinationEntity(127U);
    msg.group_name.assign("OHASEEJFNYRGUKLTMFPFDOVXVLJDMDYCKHYUQHOIVFPCBUCVGYTBYCPTOHLYGONWMFNQNOZCKITXEGVZLAQGRCHUZGOQIZEPFRNKPKSRSNGLKXSIBRBVRJVWTLNIFDRZCAL");
    msg.op = 18U;
    msg.lat = 0.11141863936883323;
    msg.lon = 0.7756447733166387;
    msg.height = 0.5323731412346799;
    msg.x = 0.9180964136818518;
    msg.y = 0.7847611208713159;
    msg.z = 0.985544575506284;
    msg.phi = 0.09029197477660278;
    msg.theta = 0.16557129750732813;
    msg.psi = 0.1639683791761316;
    msg.vx = 0.20220418324922385;
    msg.vy = 0.20763431871455174;
    msg.vz = 0.9281406549447087;
    msg.p = 0.7745386752450687;
    msg.q = 0.41793878701831955;
    msg.r = 0.12809195184425148;
    msg.svx = 0.48047405733346715;
    msg.svy = 0.5961050952718963;
    msg.svz = 0.7332485332409766;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.9225901752866682);
    msg.setSource(42617U);
    msg.setSourceEntity(203U);
    msg.setDestination(1959U);
    msg.setDestinationEntity(51U);
    msg.group_name.assign("WMJSMLPFBLYQMKHPDASHRZRLUQJKWUPFGTIGXVVRFKRDIJMUTUTGJZJNDGOKYWOTURVAABFYLXKMMEFOZJAWZGYNARWCZFVOZRJZEJXVVBMTZBQFPNTUCWYNZDINGQXWSFCBWHKOSXBOPDOSUBIUHIYADIYKLSFEUDAANJPMIOSHVHDPEHSNIMLHLXIVEYXWC");
    msg.op = 131U;
    msg.lat = 0.7889807834189309;
    msg.lon = 0.5337547593898239;
    msg.height = 0.9795943967945396;
    msg.x = 0.07469995564123655;
    msg.y = 0.6402785934347194;
    msg.z = 0.73970994112061;
    msg.phi = 0.6076129163218718;
    msg.theta = 0.6038323259141483;
    msg.psi = 0.08246882192551219;
    msg.vx = 0.6824094702639106;
    msg.vy = 0.5407242940218256;
    msg.vz = 0.761881090734334;
    msg.p = 0.45131421475027644;
    msg.q = 0.29142884960632287;
    msg.r = 0.9025410631756312;
    msg.svx = 0.5711621041041771;
    msg.svy = 0.7188422986812577;
    msg.svz = 0.5040090492705717;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.6155278513958311);
    msg.setSource(17511U);
    msg.setSourceEntity(254U);
    msg.setDestination(12507U);
    msg.setDestinationEntity(214U);
    msg.plan_id.assign("GRJYUWRVARSFZRCBTUJRJVACLFDVEZPSSGHGKSKCDLKHFOZIKWIXYZDTALIXKOLZHCJVWHUPBSXVOQMOSLNTOQOHWGMHSUGZRRQWGXGB");
    msg.type = 201U;
    msg.properties = 97U;
    msg.durations.assign("JQKIAZHYICLRQHFLBWBRZUYUIJKGVPYKKTHKHVYQSJLLHZRCRPSGAENDXAZGLLGKBQFWTPQNKMDQZQLSGEJSAVGZRKTTOQOBPRAWJRTHJMGNVDXBOTBPDSHQYXJYUCEXXMOPHVMKVGABLWRUEEYEUMCYMFVMPKBACFMEFRITZOXAININBUZFCDMRAIHOVPXXLCDZOYXTFXDYGWLF");
    msg.distances.assign("YSKWZBQHOOUTIVBDYUZTRIHWUKRSUXNOSZNQACVENKLNY");
    msg.actions.assign("EKSIHRQQPONBWZDSFOHLROWYOJHMFBAGFKBECYCTXKBYJNURFENKAFLPCEFNIXSHVNUOWAQMXCRSAZKRGHTYNTMBMWQXTCPZGVWXXYRJFPWVMNRCLBEKDUDINIKDGTGBEHNSUPOZAQPWZEGZCDQDMQXLGJXWFSIMFDVVBEIIMVHC");
    msg.fuel.assign("CQMHHBOJMSNCZJQDABYYRNJWUIUWQWBKOJWXVGFQQYNDYPTQHBSDRCABXIIRFESOLWOGKVPBPYPEPYOKCKDEZAJWXDQMAHKKDMXDERURSRF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.3424508568562086);
    msg.setSource(21991U);
    msg.setSourceEntity(150U);
    msg.setDestination(49534U);
    msg.setDestinationEntity(18U);
    msg.plan_id.assign("LYRNBLAJMEXJWAUADWGYOLHIUFFCWPKRYMICVOEODPSTZELCTVBQFZQRSOHAUKILCJIVRPKUTRVKTKQCADFGMNTRBCAFZKXGUWXJFWNAMMG");
    msg.type = 248U;
    msg.properties = 64U;
    msg.durations.assign("UDPLEIGEQSOGDUZVZVJOYHXGHHGCVRHBBWMCCDIAZYQEFYEKZEPYUDHDELPVHJSHLNRQRFOGNOCGTVNYAQCYSGZLHTISXRKKXVENFZOTP");
    msg.distances.assign("IFJFKWAFOAXCETWZWPBJXGFTUFWKOKBMBKENSHPSDGBOHAVFNVERRDDWZUIHYCCLWVHLQPVVBZDVCZUWTLLJRZXNDSEOSQLBLYHCTWTXFETJBUAGASDFAMMRNNJIRAGXQZUXHBVNOYTUY");
    msg.actions.assign("WJXZOBEHJSJQVGJUVCREGWBTLERPRGANRCWHPUQDXHAYMDMIZFSGTPIDVODGPNTBNTKFKJVLSXFUWSZDYYFJMUKZVKTZNQNXCVTCIUMGBABOYYAIFOFKIRLRHDVFXPNZESGXACCHIQPYYDLVEWXTRVBOIZMMQVGSOJGTODJXMKACPUGZRWLLFIINCZUWSEAAXMHQLSTHCDBSFZETPXLYPBROHUKEQDWKKUNHWAKJFBELEYOWBYQUCQOMHSNNA");
    msg.fuel.assign("QHRDIDYWLIDYLM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.05062925064775914);
    msg.setSource(24160U);
    msg.setSourceEntity(254U);
    msg.setDestination(24909U);
    msg.setDestinationEntity(173U);
    msg.plan_id.assign("BKLKUVHHHFRHPVMGWUAPNOMIZKPVGKRJRMWKBJOUJWBYGHPXTFMTINAGCQZQGOMFQHOVOCRDUHSUDKRJAMVCTLOXSZSILDBBSABZNKWMDVJMFPJSFIOURSWQCEKGAKGHYKPCVYHZNDSGVYTXIBXYDLECFAYOTRVAWZGNPIAREFFTVQCJANZTYLLYLENPSFJUFUIBHEPZICDEWPNCCQXX");
    msg.type = 113U;
    msg.properties = 63U;
    msg.durations.assign("JARGZHCVJTWLMRZCFGFJWFFBYMBVSPSRTJECQMKCWOHVAJBOYTIPEGYOPVPMHUNRSDXSCXIWXMSPSBGQSAIIWZBHNIACEUYTWQHBCGTEEUJAYNNNROAAAFPHQQXOFEULTINBKEFKZUHYWENIHJ");
    msg.distances.assign("WXAUEPRPDQMVAEHXPCQRCYFZNQBQFPFTXHASGKOYWYDGZSILQZMTJ");
    msg.actions.assign("TOJHWBWKOZKZRYCZBEMLWZSORJUOEWLYPUXHBGNGLUTUXSXQKADFASIMNDSFWADHYYPOQLTWZXYPLTVPFJMDESHHQIFOVMVTDZRMMTUDRQBISLKMXXXCZCQTUQCLKG");
    msg.fuel.assign("NHZDSLDBHLLELRLRUXLXZEAIFBKDERQFOJKDBMDJQQQZBNLPVYVCHJBICYTAYRJYGEKZPHYPIIEEXEOUWFEVACCVAQWUHDWRPICQJNVDHUYZSFGIXULSJGUWCDNOVTCRYUZXLKWPPRTFTQCG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.08492741682284);
    msg.setSource(56656U);
    msg.setSourceEntity(178U);
    msg.setDestination(4664U);
    msg.setDestinationEntity(217U);
    msg.lat = 0.9021288272024406;
    msg.lon = 0.5774034664109927;
    msg.depth = 0.6057461722557032;
    msg.roll = 0.44148242319824715;
    msg.pitch = 0.6208912460440345;
    msg.yaw = 0.6519447386536089;
    msg.rcp_time = 0.8692508487826954;
    msg.sid.assign("KHUHCETGWCUFBPRSIFHDBBDEASZIIOYAUTSCRMXSPOYIRLCFHLOYGMNYARJFTOWJIAXFE");
    msg.s_type = 195U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.6274166168595185);
    msg.setSource(58209U);
    msg.setSourceEntity(170U);
    msg.setDestination(50006U);
    msg.setDestinationEntity(155U);
    msg.lat = 0.6097829071502919;
    msg.lon = 0.14101328814098446;
    msg.depth = 0.4840477186498978;
    msg.roll = 0.8416823564766956;
    msg.pitch = 0.14275646097952155;
    msg.yaw = 0.652203578273412;
    msg.rcp_time = 0.656829465037545;
    msg.sid.assign("BIEFLZUEVUMMVQCVFWUBRXRJGMRFVZHKBCOHYDNUQNMDOMRXZTYENZNCINRNPKJXTITCAXOJVKPTGJCTIKEXGLEXFYAEYFCNXZJBSKVMPEJMQDDWSTAHLIJHBCWIOFYFALFUENDUQLFRPSDLLHPYBOVAJPPVOOWLRUJUYZKSOZSIEWPZVGYWYWNG");
    msg.s_type = 168U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.08769987377547728);
    msg.setSource(59605U);
    msg.setSourceEntity(135U);
    msg.setDestination(16850U);
    msg.setDestinationEntity(24U);
    msg.lat = 0.012035897958214803;
    msg.lon = 0.31552997197704535;
    msg.depth = 0.3770018493168068;
    msg.roll = 0.4998009357389879;
    msg.pitch = 0.0265029731415386;
    msg.yaw = 0.5945674602410469;
    msg.rcp_time = 0.7167611458135491;
    msg.sid.assign("TZATNBXLDKNMHYGKKAKZAGXWESVXMODBFQYXNQWULRGCMSVQCMCUARANAXPFJJTJZYEWOLSRCZLSJIRXVSBRWSXUHOGBOHGFTMMPICVRABPEJBBDRURJAFLYDDTHEGFVWZYUQQVSEAFMWMNWQCVBDDHHNOUPUULZCCLXOGNJZEITYJDHIX");
    msg.s_type = 172U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.4599780499605711);
    msg.setSource(31673U);
    msg.setSourceEntity(95U);
    msg.setDestination(36491U);
    msg.setDestinationEntity(176U);
    msg.id.assign("ANEXATCFEIHCJBDYEVPGIOWCCFWPTNLSPKJHQSWBNIUZTEIRBLQLZTYSIVPVAALQBNUUNPJUHQYZOGNMRXWKXZCKVVXEGMWTWO");
    msg.sensor_class.assign("FEPVRWKZOJURNBJINWWCGUDJBQOFRMWKCYNITBLJSHTWPVGYFMSBIAUNKLJDKZYRQLKJHBSSUWETIXHTDPPPVKRKUFSVJLUEQVTEOACOXOYTWKMWMTYRAXNFACFBJNVZX");
    msg.lat = 0.7283056513798715;
    msg.lon = 0.8883714579680716;
    msg.alt = 0.2910606998448281;
    msg.heading = 0.529454643941547;
    msg.data.assign("ZSWJNNBSWYYQFWZKYIZIARQORTXOQXLHUHQADKDTRBTECTMEMFLKIXWRQCXRNLBATFOWJXJYSVCSPPLSNGINYLOPBUPUFSDJWYTDTZIGZNVGWMECHRNZFHKNLPEDHMEYELJUSFJXOGQGCCUGHDBDLKBANVUULYRVWEQMBGGEKOQYPFZQPMUHFCBDWPCMAKJFTDIBVCIVXLXUCOOIRJDTVVJZASKYOZEVTXMUIHOXAPIWFGH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.1998955831978797);
    msg.setSource(44951U);
    msg.setSourceEntity(175U);
    msg.setDestination(7427U);
    msg.setDestinationEntity(210U);
    msg.id.assign("HHWFFEGTGKZUZDBOXMPUQAKSIXXLGQGIZGYBABLLUOUIAJRAARSCSJFV");
    msg.sensor_class.assign("DKSNMVRJMCLOGWATMATGENNLSSPFAPVQVTZOIOHRIBEWOPHNMPVPBURWDQDZODXZLFRIFRBTXCJLHXEPLVXNYKFKXFLEAGTWCIITCUCVAGOFTOGJMKSUGSSTVASLNUWEMYFUUXZYRGDPBPCOXUZGSRKGUVVEJBXBRNKKJCQVEPQJTNMKYCYLZALEMGQQTFORHEJXSWZIWDFIIQCSIUQHZYXCHPBIYKQHWMND");
    msg.lat = 0.6725204049035749;
    msg.lon = 0.6758554096673877;
    msg.alt = 0.007884277425757924;
    msg.heading = 0.38022365973138683;
    msg.data.assign("TRUOYIHOTEPBATMDONXBHSVZFRGQIFPSLJTPWNAWKQROIMZFJQXJXEXTLFTOEPWTLKDCZUGNQKCGRRXCXDVYMMYEJANVJPCISWUFAPBS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.927755889612769);
    msg.setSource(38482U);
    msg.setSourceEntity(254U);
    msg.setDestination(28155U);
    msg.setDestinationEntity(155U);
    msg.id.assign("MXYFLQSPIPNERQFWTPLQGKLPYHQXJPRPJUSARUVOKHPUIYGMSYRLJZXKQCNQCNIIJRFINDSZHKDILXTZHVPWGVGAGAATMJBEOCFWBEIQROYSLDHZCZUAEIJCUKVJHMVCAVUNGOAKLS");
    msg.sensor_class.assign("GXDCZKEBVYTFWZKXAJYVZDMZRLMWCNZCMPQIAQZTYWCW");
    msg.lat = 0.6483640820478758;
    msg.lon = 0.5516485684748507;
    msg.alt = 0.07822625032213959;
    msg.heading = 0.3816696549431233;
    msg.data.assign("AQLRTCJQXRFCQIBEGYYASRFSCFPAZGBGRZPMULQKNNCSAOMVQYBUGVJBWWULPFKOTNIUJCGOPLEGTOHFBPKJLBZQSSUDGDZTYVELIYSVXUPROZURBHWVMRCKYMKZKNWLADQBOQSUMBFH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.6983027614471157);
    msg.setSource(56998U);
    msg.setSourceEntity(157U);
    msg.setDestination(28513U);
    msg.setDestinationEntity(101U);
    msg.msg_type.assign("DFJTNCIBJTXUZBKSSYVYCSCMMNMGNAMWAXNAPORHIJTUWOHFLYTVWLOVCWIQJPKRZKGSKJREKXFUTXBVT");
    msg.sensor_class.assign("NOIZSKOBLAEYHFLATMGLKUKTYVQCVOUBISRPWNCITWTVHXRSWRXJWSFGKXEWPHOMJQUDGNQIBMAWZVHGRV");
    msg.mmsi.assign("LGZTFMRVFDFWEOLXENWXTDDGANJQFDFHMPIBZEU");
    msg.callsign.assign("TIZOZMSZUIEEDFAFAQTBBPNVPFDYLRSCWTWKQJRPNHKEPSASRNOHWRJBHLUAVIBEPUVPDXSWXAFMXQGDXNLMVEKOOSUPGCCJNOQIOFUCOELFLNQAHKEBJOY");
    msg.name.assign("HXNSVPTWYLTAEOAYCQIMWJENHCMOOFSRKKDJWXTXREHLVJMPFIJWGXAVVVYLRODNVJWFLLAPDDQYKZKCPSYZSLBYDBGUPSGCIROIZAARBMEQZUHXWGAFREVQTFSTTGHQMDMDHOULCNFMZWLBTEEBBJVQSGFBXNNZWVUVRQQWZIXBIKMSXNMFKQTZUGKYHSOPSYL");
    msg.nav_status = 16U;
    msg.type_and_cargo = 78U;
    msg.lat = 0.6324870697082013;
    msg.lon = 0.5051571086491871;
    msg.course = 0.9070088286332576;
    msg.speed = 0.20557581869379482;
    msg.dist = 0.3111096744923382;
    msg.a = 0.2711410804632156;
    msg.b = 0.6047228477815509;
    msg.c = 0.20446287884616365;
    msg.d = 0.964562806966811;
    msg.draught = 0.3200561963066265;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.133491371798251);
    msg.setSource(27794U);
    msg.setSourceEntity(190U);
    msg.setDestination(64918U);
    msg.setDestinationEntity(251U);
    msg.msg_type.assign("OQFEWSIQWREBFMQGNUTQKPOEZXBFOVVCMHNENDJKACOBHJXYIQQZSOZALCNWEQTCABMYKZIAPICQOUHMRTUXFPEXRSKBSTYCCUODPRMNJZAIVCVLXDYMHGRKHJWD");
    msg.sensor_class.assign("FZCKPXOFFYGTPECMELFYMFFDIVOMAINQEEQJNXMULFUSEHKSLYHJUNWCCKHYOSQXBLXMSYCMCLXUQPHABVXKEBQDTGZPGILWAJWXLRCPNTLVRVAVKXXRODAWINPDOHWSTTRTDTZNTGQFUZZI");
    msg.mmsi.assign("OJDMJWZARZMFKNKPZXXLGIVQFYSPMFMHZOCPSHMFIUJRUUJXWSRIYWTNUHCZGYCOJOHLVNVRDUTVQEBYAGGQVYEDOZYNCAPIGTETEBCRSLZMGKIYTPIRHDPSDNFYVGKKEZXSVQKRNUKQBKCXFDVLTJQB");
    msg.callsign.assign("JYBFJZKWXEZSIOXTGQONMBGWNQSFDETIKQKANEBSLPBADKXTCRSYOYHVAGQKAUILTCDZFPAJWGDFMYVUTRKNBLJDPNBAWVBYIZKXRUXSGHZMCVBERSCUUTJHUZOPGUEMIHJDLQWHZVXQSFRAPRCPMMQMODEFHQFYKKCJEVMHPCFPGGTVOKTUSXYHVSCWZPNWI");
    msg.name.assign("XJUCSGOULJJPHLOIBXYOQEWZFWSIMUKRKWBIFIDUEJBEOUCAFDAKDNHAROGJGLISERIBAPYZWGCJVQWYPMNVHJPKDXKHZYP");
    msg.nav_status = 185U;
    msg.type_and_cargo = 232U;
    msg.lat = 0.46234260913435943;
    msg.lon = 0.592196968159847;
    msg.course = 0.05662241879655183;
    msg.speed = 0.7429599338288024;
    msg.dist = 0.09826052165725463;
    msg.a = 0.8513553059509193;
    msg.b = 0.43884236936835486;
    msg.c = 0.3369189383630563;
    msg.d = 0.308770058818123;
    msg.draught = 0.43636072778958035;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.5455793241742399);
    msg.setSource(12325U);
    msg.setSourceEntity(233U);
    msg.setDestination(37900U);
    msg.setDestinationEntity(174U);
    msg.msg_type.assign("XBKSTJNFPMDIDPFZJZZKPTXAHXQUPFATUEUACASHUXOKEGUMWEAVHBUENSMXIWIILBSZECLCRXOTORRHZHAFIPMMMYMSDPBPWNBMGFJEQAWJKQVLTCWPCOZYEAGDKZYMUKZFVFRHRQOWQLCESNFCSYHBYNEDTOHIODVHSKYNJGGQOUWTQXPDUNBSLOJJDXWUWLQTCZJLVKGXHRJJXIRVVDFVZQLTBYTECRRVGWRYGLKBCNDOV");
    msg.sensor_class.assign("CXNDQFXBUXTFAABAPJROYAFHBLMFVFZLDVCRPUUEYAGWYYQRYSBWCLJYWPMCEUGGXCNBWMGOPRMILTIXMFZIDCECETCKURJTILHCQBAPEQPGQTKESZWYJQESEGHKVWANZSAHXOFKDYOKVUOSIPVCZHOXUZILHQGKQZRDNYOTBOJJMWHKWKNFANPBNTIPFZSU");
    msg.mmsi.assign("CPSBRTDLTVWJPDHSVZAKMGIGEUOHFBUPMKYWPAWZPFLLSTZT");
    msg.callsign.assign("SMDSSBIJASWUMNWJBVSSEFWLURZXHUWQTXCXLGYPNKSHHJZGPNVFQKTMNCVCFS");
    msg.name.assign("ZROOYPMAPWZIHDFKXQVWXQSBEAHTWBYVHCLJTCDIMNOKFNUFGKVUPSASJLNWPQEINFMMOKDDQJEDGZAAYGIEEJAROY");
    msg.nav_status = 132U;
    msg.type_and_cargo = 162U;
    msg.lat = 0.6228953984464304;
    msg.lon = 0.2699545162976854;
    msg.course = 0.6884656356791967;
    msg.speed = 0.28049513057621245;
    msg.dist = 0.9269470675168964;
    msg.a = 0.8598954384951045;
    msg.b = 0.07063932838766562;
    msg.c = 0.6691920955325555;
    msg.d = 0.7854666814510517;
    msg.draught = 0.9917523549705495;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.8012777238228956);
    msg.setSource(8699U);
    msg.setSourceEntity(52U);
    msg.setDestination(34607U);
    msg.setDestinationEntity(83U);
    msg.id.assign("XJJVUIYNBZQMHBABQOYKCHAHQHZXUIIPEZUNVXKIGSSICJZNXXAEKLOECQAEXTPHEPRZTSFICIGXYIURFSHBKVUDCNYVMZKSXYHZVQDLWQMKRFFTPGQDBGJXPKLIUNDLBYYUGANJSNTCHYLDRFVRAPTLRVVMGRGATFEZJEEQUSWOPGWJJMQCTAGBPBAGYMIKOOPLHRUHCZQDKWFTRNFYTWSFSTVPZAEDJCLOE");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("XMYQHUEJGKNOVSXWHETLDNMLKXJSVZEYB");
    tmp_msg_0.feature_type = 224U;
    tmp_msg_0.rgb_red = 64U;
    tmp_msg_0.rgb_green = 168U;
    tmp_msg_0.rgb_blue = 238U;
    IMC::MapPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.051861204179757925;
    tmp_tmp_msg_0_0.lon = 0.9039158432555936;
    tmp_tmp_msg_0_0.alt = 0.722374389326283;
    tmp_msg_0.feature.push_back(tmp_tmp_msg_0_0);
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.43099417228731673);
    msg.setSource(16846U);
    msg.setSourceEntity(209U);
    msg.setDestination(17327U);
    msg.setDestinationEntity(233U);
    msg.id.assign("IVBLFYKJIKDKUSRMXQHSLEBUWUMNPRNYHWQTUAITVQZYGBHKOZKNADTBFXPFLQTDAHPKZRYKAOJJCRMJDIGZNFCPQHTCXBNCWIWUOIGLKVYIMGKRMAIGEALYSDFWPPVTYNCXWQWFCNMFREBQSXOGDWMMVLHEWSXUJGDNJBBFPVOSTOEEHBXFHEPFGXZQWOOHUTCZDVSSYBNECDEXCUAMGPPHZVJRIJJLISEZVYOK");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("GKPMBTHOFLBHIIBPWWCYFWUVWKSVXPQUWUUNQGWZAYRMJQTMYCILCYTEVWFXFPHHJDNENONJXZEGXVCMREKXJFHVQBNYALGVFNRSSJTBXMLIOOOCNQKWYOPGQCLWADUCROIURATHCSMQS");
    tmp_msg_0.feature_type = 128U;
    tmp_msg_0.rgb_red = 26U;
    tmp_msg_0.rgb_green = 241U;
    tmp_msg_0.rgb_blue = 153U;
    IMC::MapPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.4268040366844217;
    tmp_tmp_msg_0_0.lon = 0.5855187571514517;
    tmp_tmp_msg_0_0.alt = 0.9806956202354392;
    tmp_msg_0.feature.push_back(tmp_tmp_msg_0_0);
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.5660918203317997);
    msg.setSource(11404U);
    msg.setSourceEntity(137U);
    msg.setDestination(13902U);
    msg.setDestinationEntity(221U);
    msg.id.assign("ARMTEYYIYNXUHQBDTBEQABHXMFZWYICFXAKKZDDVMZTVUTNFGLUQGLVVSFWNYFEYGMDINGDJJSAPOCQCPHGKBXOWXIKOPEKNWSOYUUFGSPXASRKNSQOVWIMDCTRLTHLESHGCFQMCHUTREJDGWSIIZRLQEMYBIVURFCPYVALOMJZDVBHRUOTPSEEDCZILLFVBNRKKXQGX");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("MUCAZVXAWKKRAHUOUIVHZZBMYFDTATDBFQRGEBEJTOJLFCKAXYXQBVWKAQBCHLERQLGCWDHOTGREOCNSOWJPYMRQQTIDIEIGNHMNYTXPJI");
    tmp_msg_0.feature_type = 59U;
    tmp_msg_0.rgb_red = 111U;
    tmp_msg_0.rgb_green = 176U;
    tmp_msg_0.rgb_blue = 154U;
    IMC::MapPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.1545964274793119;
    tmp_tmp_msg_0_0.lon = 0.6170707150799495;
    tmp_tmp_msg_0_0.alt = 0.6075611836364777;
    tmp_msg_0.feature.push_back(tmp_tmp_msg_0_0);
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.2453679188332043);
    msg.setSource(29971U);
    msg.setSourceEntity(58U);
    msg.setDestination(19720U);
    msg.setDestinationEntity(39U);
    msg.id.assign("KHIBPEKYAOSJKVXXWNHRKEIETZFMIQVHCQDJCAAXDDYGMVQFUITJCJSRPSBWYSBUWRAUDNNXIHSRQJLZCERXAOOKVESYVSWZMTLXZWZMYYLQMOIKTNOYDZLTTDOUULCFREFPUZTNCVISVQWUDOWAELOGTBMGU");
    msg.feature_type = 129U;
    msg.rgb_red = 185U;
    msg.rgb_green = 250U;
    msg.rgb_blue = 42U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.6638312383501952;
    tmp_msg_0.lon = 0.4242994945955092;
    tmp_msg_0.alt = 0.2015177163627736;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.20265346872846457);
    msg.setSource(35923U);
    msg.setSourceEntity(190U);
    msg.setDestination(59351U);
    msg.setDestinationEntity(161U);
    msg.id.assign("ZAKZDNVPGTBKURDYLUJJELRBEVBUXXNJMOOMZSCQQJMAYJXTHAZYVYPTVCCGXTGBGRZUHSDJGNZDRQPHBVDOWZMCHQRBTEMHUKAQIFOGZMCXVICNJXSEDNIGVHLRPZPALYNNAEXSPEISWUMUQTUWGFHAPFCJEOOWYGWTNUWDCFX");
    msg.feature_type = 6U;
    msg.rgb_red = 51U;
    msg.rgb_green = 139U;
    msg.rgb_blue = 98U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.7095004631811136;
    tmp_msg_0.lon = 0.19154697051294856;
    tmp_msg_0.alt = 0.6012485959883286;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.2622037045793735);
    msg.setSource(17044U);
    msg.setSourceEntity(26U);
    msg.setDestination(14378U);
    msg.setDestinationEntity(218U);
    msg.id.assign("CKXHMGUJEUFLPFNJGLVUIDKBCDMQZWPJZQPHVMSMZEOFITAJBYGELYOARIDQXKIOCBNWSRYJAXRIUDKIGIKCMTNFQMNOUBREGTKYWTGQAUSOKZNDWHHOAYCFZTHXDKLEQCPPOJQDSYAHJSGFPSVOGWIEUPUPJFZZNCTQHBHDLVACJLTVXBFYNQOWMLJRQAEBW");
    msg.feature_type = 219U;
    msg.rgb_red = 119U;
    msg.rgb_green = 37U;
    msg.rgb_blue = 178U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.08519297771589551;
    tmp_msg_0.lon = 0.5359063388020895;
    tmp_msg_0.alt = 0.38543473059249733;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.4563695759227171);
    msg.setSource(45159U);
    msg.setSourceEntity(21U);
    msg.setDestination(15875U);
    msg.setDestinationEntity(109U);
    msg.lat = 0.793852134571237;
    msg.lon = 0.929398206886729;
    msg.alt = 0.9691123058850863;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.9410649470748959);
    msg.setSource(18365U);
    msg.setSourceEntity(67U);
    msg.setDestination(11193U);
    msg.setDestinationEntity(165U);
    msg.lat = 0.18925894817575606;
    msg.lon = 0.42103466642724086;
    msg.alt = 0.18157955669060555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.3044911571649659);
    msg.setSource(32743U);
    msg.setSourceEntity(47U);
    msg.setDestination(65501U);
    msg.setDestinationEntity(92U);
    msg.lat = 0.8171914731622163;
    msg.lon = 0.6281406600563737;
    msg.alt = 0.38534976326786385;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.6375426735783379);
    msg.setSource(29010U);
    msg.setSourceEntity(144U);
    msg.setDestination(59985U);
    msg.setDestinationEntity(237U);
    msg.type = 47U;
    msg.id.assign("XZQNQWQWQGYEBAFLMMEEPHPMPQNIOJJJVVMHOMPCXDTBGANGZAVPPJCNECWRYUEWZIDPQSHKSSUCDYRNFUJXSDIUVBODWBCRFGRWWALTHWWYKTTKTOMTIMFFJLXNELPHDIGASFBIBZGYPLGUZKYRJKXIZU");
    IMC::LeakSimulation tmp_msg_0;
    tmp_msg_0.op = 227U;
    tmp_msg_0.entities.assign("PYZDUYLPBYKZOVBOQEGQLXXTBLYCAVAUAWXYKVFHFQODGDTFFWSGGWSWRDMRAIILBVLCUJTEVZEEUYUZHFHFJELBTGMYCMTWQJPWRNIFQICSWFNLUCHNYRXIIK");
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.7288029196078997);
    msg.setSource(59803U);
    msg.setSourceEntity(163U);
    msg.setDestination(542U);
    msg.setDestinationEntity(60U);
    msg.type = 73U;
    msg.id.assign("ZILYKALBKQEFCANTSMUYUVFQYKAURTXZQMKGMZFKJZELZVKPZACIXAUCDMRMLI");
    IMC::WaveProfile tmp_msg_0;
    tmp_msg_0.ampl = 0.24235788701150685;
    tmp_msg_0.dir = 0.2122489786714683;
    tmp_msg_0.freq = 0.6015284493095304;
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.8856583584409964);
    msg.setSource(41075U);
    msg.setSourceEntity(0U);
    msg.setDestination(38688U);
    msg.setDestinationEntity(15U);
    msg.type = 8U;
    msg.id.assign("OJMWXBCCKLGUUJALJBJIXFAAYGLGWZWCFGSWSNEOTQVRPYZJYAMSDZDKOAMNFBQLIHWXETVSLCSLVGTETIHBUINCLFVURCHMEBJJFARZJOWUDQGMZSGNPQDINHCIUAUFORMZOQNKWTFHGEBPAIOLYZFMSPBP");
    IMC::OperationalLimits tmp_msg_0;
    tmp_msg_0.mask = 198U;
    tmp_msg_0.max_depth = 0.0807913579016214;
    tmp_msg_0.min_altitude = 0.2841825221229427;
    tmp_msg_0.max_altitude = 0.27289667339087065;
    tmp_msg_0.min_speed = 0.799489958937838;
    tmp_msg_0.max_speed = 0.540524459088368;
    tmp_msg_0.max_vrate = 0.1641251504312229;
    tmp_msg_0.lat = 0.9878853785269218;
    tmp_msg_0.lon = 0.28949542403139217;
    tmp_msg_0.orientation = 0.2575155397027733;
    tmp_msg_0.width = 0.7096502927887027;
    tmp_msg_0.length = 0.07669198754415996;
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.740720147568547);
    msg.setSource(29199U);
    msg.setSourceEntity(238U);
    msg.setDestination(56796U);
    msg.setDestinationEntity(112U);
    msg.localname.assign("JHMCTMMXRBWBOFOQZHPQM");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("FHCMHLFTNKDNKXSTKBHFJTALIIMGWRJBJZJZUEPWLIHBCGQXLHAKKSQZMZXEUNCXSDEPVFZSPPTWPPIIOTOATAJSEUSMVVEWTDVCOOCDWJCPBRAXEAUCDJZXKYFOYPCGIVYQBUSSRMBJMRATDSOZNOBXNLFEKITXNHQQRRZJVUGYGXYQSUULLVMQLRFZOIWKKIJWMVAKUMHHFVWPGYRDVELPHYHNYQYNOMIZBXEEBQW");
    tmp_msg_0.sys_type = 106U;
    tmp_msg_0.owner = 20669U;
    tmp_msg_0.lat = 0.413244398152776;
    tmp_msg_0.lon = 0.5806808813213693;
    tmp_msg_0.height = 0.8071547316709963;
    tmp_msg_0.services.assign("LHXWHSKECKWWMRFEIWQBBWSHBHJELRMUPWXDUKEMFWDPCARSLQDJBUVPGYCMPZFMSSTEHKNSOIGOBZZPKCZRQUTHLXIOXRTZPBWRBVYAFBOLFYQRSKXNNATUEDMHEIKSZJXILFNAAKCHRQJQVGTJGAGJCUDGEQJXJGMYZNERBICVTDGAKQXWIZXPJVZDMOUCDMOXUFYQTDNLYTPZHGOCAUPLOYQJOWTOBFSNLY");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.8384588224057605);
    msg.setSource(21196U);
    msg.setSourceEntity(18U);
    msg.setDestination(18527U);
    msg.setDestinationEntity(94U);
    msg.localname.assign("OFSPAPHPKNONTKIYBGJQFRDRJPAUOOAFWBNSJKOFXVQKUCRJDWRCGGOACMEYYPDHTABDMMAURGRQZENI");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("QBZTDRMHHOSZJCZQMSAIIVBQBRGFXVPENYWUIJIWENPHNMWOIULQJFDEJCDNBJZTGISNPJPSJFGCNDYPMLSYQFLTITCARQWXZAYNKPLKXUNSXFMUJIK");
    tmp_msg_0.sys_type = 91U;
    tmp_msg_0.owner = 829U;
    tmp_msg_0.lat = 0.8398654133419939;
    tmp_msg_0.lon = 0.6129484553543864;
    tmp_msg_0.height = 0.26567104850689593;
    tmp_msg_0.services.assign("IDWVCIEMOZMKTEEIXHTBNTGGQWODJCBNGPKHHHWRSHXZSYKY");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.5803539938415472);
    msg.setSource(39261U);
    msg.setSourceEntity(176U);
    msg.setDestination(35854U);
    msg.setDestinationEntity(110U);
    msg.localname.assign("EAKWGPAEAYLUYSQRBEZZYVJLGDQRDUGQNHGSTCTKEWKYNYVNXEJDNYRRSIIDTQSRAQGBKHOVKEBFABEIJDHLUPHGPFUFNRFRPSMOTWDPCRZWQFKZXL");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("IALEGWWPBPYHCWVLCRHRAQECYYZKXAFOZORSL");
    tmp_msg_0.sys_type = 156U;
    tmp_msg_0.owner = 1649U;
    tmp_msg_0.lat = 0.019866634854719623;
    tmp_msg_0.lon = 0.15199581594756595;
    tmp_msg_0.height = 0.7072910500161764;
    tmp_msg_0.services.assign("KZBDNWMVKWSFNTWHMUNLQXXCPAJABHWZCVJZOPXPPRIXFESROGEFNPDLWKYYUKIXESUXEJLFJNMXQUTVRNABXIGGMDPQAOYLCDSHPTMFICLUQEYSEMPUVMYIZTZJBSYCGGJTUFPLDVHHYSRGANBSHKDTIKFFCRA");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.5645807509891304);
    msg.setSource(32165U);
    msg.setSourceEntity(95U);
    msg.setDestination(21690U);
    msg.setDestinationEntity(183U);
    msg.timeline.assign("FCZFXVLJPINKHAYEENXOQCBKJSAQPTPQCHOLVUPLGKYTGUXNHGJNIGFIXFUILQAEZMTABJIAOPMSLEBVUIZEDPOHQFQRIXPRVMZUEZNMPDTOMCOJOWBJRKYAJWZBFOBEDUXAGLNREIDDASYWJVSPTDHEMYDQWDCXFFLNYHVHZFKPRYKVHKWUVXYAIF");
    msg.predicate.assign("VREMCQZFCUYRESVRKJHAMZANTEXLADIJUNOVEINIKIAUTHTYLHHXXFRGPJWJDIJKAAOPOLSCBGKRCUFZ");
    msg.attributes.assign("FJAMIZUBZRCRFDTGHIMJNMXSEYKZDHKQIQKXEPPGPMOCRLCOZHJIZYIQWKFBIHHTBVWTWYLDILEEQTNFKBGWYMYX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.4338411255850533);
    msg.setSource(9187U);
    msg.setSourceEntity(198U);
    msg.setDestination(15542U);
    msg.setDestinationEntity(96U);
    msg.timeline.assign("VVDMGJWOISJPCSWXMVAYJTXFCAZKHKENFNHJVIJZSDTOXZNWABXUNUIERATUOWQVZXBQLMCTYMCLKJRTKOXYOZUEKFMASTDHMLZVNGEIRURUGARYSWGSLDPDPVBFHOHFNMWOMBQQNZEKEIIJKMAGIOYHZVSRBYPULAMQPGGWBYABTRHEXELHOQDVGRTHNDTJBEPCWUPVLPISYSZFOHQYLFKCYFRFXQNSWDLQNABIDPKCBUWECFZQXXCGTKJ");
    msg.predicate.assign("PKCIJZWOPFVPQCLEGEEWKJDBUAJZKTAZDTXYODCICMIRGOFIRRMDHNERXAUAKUBNYVFNKEU");
    msg.attributes.assign("EHMFIBRKPRC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.35060704579559787);
    msg.setSource(58078U);
    msg.setSourceEntity(15U);
    msg.setDestination(6033U);
    msg.setDestinationEntity(193U);
    msg.timeline.assign("SWMJSIGZPNBXMBFZPWPNKFZXJVTQNLEHRMTKPRTOZDPYERCYFHYYSDIIKELCUHBBHDQWQGGOILLMAZAGVXNVXR");
    msg.predicate.assign("YZWPLMQYMNVXCKFJRQATIGBDESTJFPVCTPBKUWIRYUWIOKBVIZHHDTXKEJNLZRCHXJULWPGQUJQXRYHPDRRZRIJYHQBXEYNRDWNAXVACFYOLCQONAEGWIQJDIBAZMTDLMNRLGOHGSYZSFMAOCJOCX");
    msg.attributes.assign("XOZKMKLAJDZIBYSJTVFDWVURPXSHHZNFQNCYAYELOWZWTNPEAMYWDDILBQQDSLKCZTYPDIPJKVCMEJBJPJSURAMSDYBMFLTBNWIXGBHPNLPUTYGEWGUXVLEYFIUAOGYWZFHNFODCJXVOCKCUXIZECMAKWZMUDLSPTOAUHSMFVNNRHDRRVRBBJVHBQMGIKXFQXBUWOQJSRGGRHRKOMIHWTKCQUFJEFAXXPQNENGKHQZEOVZCSL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.5333649819621066);
    msg.setSource(36535U);
    msg.setSourceEntity(202U);
    msg.setDestination(7042U);
    msg.setDestinationEntity(229U);
    msg.command = 106U;
    msg.goal_id.assign("BIJPJGSKJESHUNHEMQJMZLOKWYCTVHMVXMKJUMEQSZUZXOGDPWROOPRMHNAXSFCRPXYBCREUFLJXVEWDGDLZMKGLQIPNUEQOJANVKTPUBNZAHBUWEIYRJLFLXMUOLKNNREGXGVCBDUCHSWFEKRROATYYVSJNLCWGYYHTTVOTWSZPNQWQOXCCKOVQAYL");
    msg.goal_xml.assign("WPAYQPVXGLMJUQBVJYTSSMNYEHGQMOKIFJGPGKRLVVXYIGWGKNBW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.9256450199048899);
    msg.setSource(26463U);
    msg.setSourceEntity(100U);
    msg.setDestination(54880U);
    msg.setDestinationEntity(231U);
    msg.command = 50U;
    msg.goal_id.assign("ZFBPSCFYMCASJSXHJPETUFWQIMOLVSBVWDKIJGTUTJHGVBZMFXINYZQQPRHQHDMOEORAXSCPRCNDGIXVTFZGNRUEPAPKKQIOEZU");
    msg.goal_xml.assign("ZZSHLAODUPFMJQDX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.6086857401039446);
    msg.setSource(54838U);
    msg.setSourceEntity(51U);
    msg.setDestination(47548U);
    msg.setDestinationEntity(186U);
    msg.command = 133U;
    msg.goal_id.assign("INZKSWNBXLTGEBUAJTXGXYCZJNYVWLSNVKDARKVRHXXPWWEYQUPHGVXVFFAENKEOQETYAHVJADMRHDPMDNVQ");
    msg.goal_xml.assign("CKNXSETKIRVRXCKEBIOOG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.04298773250856258);
    msg.setSource(57275U);
    msg.setSourceEntity(186U);
    msg.setDestination(15591U);
    msg.setDestinationEntity(238U);
    msg.op = 71U;
    msg.goal_id.assign("ZYOQIXBQDRDETGFWQUPFCWNVNMZZCCUAKLIMGPYFVZLNSXBTIPMLAZWVBQGTHMKCZNREJXSRHCSBYCJGWEPXMOJDKQTUWKNLMYUARIGQORRJSNVPSKAIBKGFNBHJWTDPGOOMRDFKBFZIFYLDHIPLBSQREJOUEQOTCRBAEXUVXDRBUQIHXPLWYNGFTI");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("WXTZHUDRTGMTCPFGIIOLDWWOUGBBCMZFBMETKLKRDASQEJUWSXWPECFLAKHFPMCJFCMZMYHVYQUJDLNPHLNDZJHMNPBJOINLOXBRWKVWYRYCUSFQIZHO");
    tmp_msg_0.predicate.assign("VVEQPILSVEISFDKWGZBDOXYQEH");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.6996839555859817);
    msg.setSource(54984U);
    msg.setSourceEntity(229U);
    msg.setDestination(43526U);
    msg.setDestinationEntity(187U);
    msg.op = 189U;
    msg.goal_id.assign("IRVRAWNIHTTKCOGSZQBYDYXJCDOSJTXPUCTWPQYOOWYVTXMURSJOWPEBLFIJHDLJMBSKGDDGPCRFAUZSWRVPKKGPMYYOIVGVQKAOTTQXGKEWKVORHAYXFLZZNLUHZVXBDKMGSCIZCILXNFWBFAWQDBSLNAP");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("IKOPCKGZFMGCQNDLZESDZLOWAUKLTCFMNJGIFHJKGVRFYXIPSKAFYOQZZNEUPKWYRDIMAWQHUEDXNCFYHYMSLKZGBHTOOYEJLZFCQJNUFCQLRRDTJMUDPWQAPLTMQJ");
    tmp_msg_0.predicate.assign("HGPOVYIWINADGAWJSBOKEFZCSTLTFMNZHDSYYEWZFOBXRGMJMKQSLOBGOQELFCKCWHZXNFZXPCKMCVCVEM");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.9272044187675255);
    msg.setSource(11244U);
    msg.setSourceEntity(145U);
    msg.setDestination(52317U);
    msg.setDestinationEntity(218U);
    msg.op = 236U;
    msg.goal_id.assign("IIOVNAPQRNNRDOCIHJKASEYFIIFMKSXCDVQAKBVMUGHEJRBKBYGLVXZKNUIIATLCJGPTTUGVOGWEUCMWETHSDOEXTPXIFOUMNEWFQVZTMQBAPRSYWWZHWSZTHQSFKZJMSRPAKJQRTHAEBKXFWLQDMCPMXXUUZVEIOJJNHDEDBBYDFDBLVMQULKWHXPAGSYECLSYO");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("NKIJGSNWUIUQDXEHNZEGPPRHUITURGIKGEZQTHCEFMSKBMUEBGDBLPEMQXOYTMFFBAMXRRWABSZNJXRYDFJWYXGZHRNVAJDCNAYJELCHJZVCCWBVWFRJVMCZSXHMPLHXBDZDGSOJAJXATBGPPVLY");
    tmp_msg_0.predicate.assign("XWYWQIHAAEBUILOLLACBKPJDK");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.8025583601852048);
    msg.setSource(17224U);
    msg.setSourceEntity(85U);
    msg.setDestination(62646U);
    msg.setDestinationEntity(8U);
    msg.name.assign("CSYXSJAJJWDBTGSEPFTXGJISBIPBLAB");
    msg.attr_type = 210U;
    msg.min.assign("ZFUAHLIXUTKTXUGPDKBJVYYYLZOWRBSUJFDXFYDLGSRBHAM");
    msg.max.assign("RXJJVNVOWWQIUDYFXDRFSFEJZRXOYBWGIYNDSNNTPKGQEPMDPVIKXWKALSQHXZZULIZQDCEFERWFJQGBVZTLBUQVGLVNMSACBMLBIUAMKEZTTRJCSPEOUEPICQRFBHNJETINJPRFMSQKLCUVVBQJHCCURUCLMYKNDHHHHOXKGAXSOUPMNALYMBTWYFOOCZOTWJKZTHMBDLXZEWYHRCAASIGDWSYXUFIKDYMENKLYOVPATWDS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.18299588943833112);
    msg.setSource(49474U);
    msg.setSourceEntity(51U);
    msg.setDestination(21740U);
    msg.setDestinationEntity(170U);
    msg.name.assign("SEVBPTLGMNJBSAABAKJHIPMOOXXYPMQWQJVUQIFZAAEZJGXOTUONSOIDVKFIPKXMZYHVTIHZBCNOJASUEGGHWJWYNPODCCMFWLHICESTYBNOMGDWNZUOCLUFGOLVFFXAJYLQHTTGEZYRDTWURLKIQQBHJKBMQTMATNRMYSLCLRTCPKFVXDEUYEYNCARLWGRVAXKUNCEXUNPGHVVCBF");
    msg.attr_type = 177U;
    msg.min.assign("GJQGJGUUSKBOJFA");
    msg.max.assign("DHEPXANFYIVISTLXSNEHLLZLSZJHILWCCDIYVDFDEFQNY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.5276846273711756);
    msg.setSource(36539U);
    msg.setSourceEntity(252U);
    msg.setDestination(3094U);
    msg.setDestinationEntity(166U);
    msg.name.assign("VVXLDOGETTTSZVOLGPDHTNJYAVJKNHPNFYUHKGCUPOZJFVALVCPNQYXJAMRJJCYRWRIKFUEBKTDRFHROFTIAY");
    msg.attr_type = 246U;
    msg.min.assign("SOSCLWJLLRBXCHYZXNHPOZENABLLNORKIJXBWTFTBZBPTFJ");
    msg.max.assign("AIHEHHFEEMROQUSRAFUMRPWQSXEERXNBHXGV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.01086981165826506);
    msg.setSource(48428U);
    msg.setSourceEntity(17U);
    msg.setDestination(32730U);
    msg.setDestinationEntity(107U);
    msg.timeline.assign("YLTSROEWAVSXWFBKBCVUDVSQYVKTNFFXTGQZXBRQKOXIGXIMQCBRWNPEQEOSZEGHAXFARFMUTPVLHBZKHECNSMKJGNXNUQEDWJDZOIHCNAMTPOUUWYRGRULIKLYAVUCWYDMUPJPXRNAWJZATNZGYHOZMLSIAHAJJSBAOHWESFLTKGQRMSLVCULC");
    msg.predicate.assign("MNGGVAKLZKNXRGVCWUABMHDMBQM");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("YVQJRXPZXOODBQFJSHATYSCGGOZTCLKEBIQDMHCZXFYPOHFMMVPZALDCRZAZWWCBYRSPXUXVXRXHBHPNSWOVLGMGUJZTLJRDTXEOBANGCTNVGWSQELNWTKZLTSOJVUNIAHWUNIFEGBUPMOURIVQVUDHSMDHXPFQHVAMSNJXKMIKSIYJZZCKTK");
    tmp_msg_0.attr_type = 22U;
    tmp_msg_0.min.assign("ZGROLWBMDWRRONHUBBCXGHTTFYAZOIMWUUFAQLTMIE");
    tmp_msg_0.max.assign("LBDTXMCSWJFDTEXOUX");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.6086113348675466);
    msg.setSource(49839U);
    msg.setSourceEntity(193U);
    msg.setDestination(65309U);
    msg.setDestinationEntity(169U);
    msg.timeline.assign("LSIJNJOXLIKDQZHGVGTWZVXCEYYONEIRECFVEBMUFCARHTZSHUFSWYIKRIWFCBPWAIUDHRBKE");
    msg.predicate.assign("OGUBHPTGXCAYQBPRDKUXOHUVMVWTSYIRGXINTZRDPEAOSGDVWKXYWYSVMSFQTUHYEIIANVGLJJFVJCNSHPJHFBIWLBECMKOGQXSKDBFHRLTVECYYQLWJNIZDNWZSIKCZXLLTEEDIROTFQTOYZPMBSQVWIJPGTDNMZJLGHMDMFVEUJZEFE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.20387823621054413);
    msg.setSource(42201U);
    msg.setSourceEntity(124U);
    msg.setDestination(3274U);
    msg.setDestinationEntity(45U);
    msg.timeline.assign("BTUPXMIVSZRZSCTGQKBZKMUPAWAIWZUUWGESGJEBFQHQIIGDEWQXFANTLEHLNNKIIJJVVYORNJUZFEVDQFGBCDNAQLMMDOOPCMKBTVJWXCRVYGJUVYUZEOTXHAMLFSOANSLXHZWICSOGODCHHFYYPKNGYPKRDGPSQHPOEMBXAFKNMQYFZWSCDP");
    msg.predicate.assign("JKNVSPFUEFRRYFIDDORXILQBMAWNXVKRKHNCHXZWJJGQRFMUWIOSDBIZFZNGWBFJBPVYHHETCWYZGGXWLLDQAAKXAUARECSKGQJODVBPOPJTSLIMKCIRLDYTYZDGXCCWDGSUIJPRQEEPVSHAITZQBNKFLVBTRNVDSPEFMUQVGNOFMWKPOIJYLJZSUFVHIQTOKTUHXYBMCEZUZTGGAYCKCLHAZBBQLS");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("YHWGEKMKKALXIZDHRTTNZCDJVHWSYNFOPYJNITMIZUIMRWRJNVMYQHTLRGRZBCSMTDOFSM");
    tmp_msg_0.attr_type = 22U;
    tmp_msg_0.min.assign("ODTXAGHFSATCBMKYHFXUUNJYWHTICVIMYFQETDSBAJBEJRMRTQGZBCGRLEPHOSXJGYQSZKAOWHNKCKLGECUUNUZRHIDXDQAMBTVFMHDADNUVMLZWQIQZPIRXJBUSTOHZNBXQ");
    tmp_msg_0.max.assign("LJQPONXOJPETUFMMEFNJYLZNJACMXTWIH");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.6241180128276053);
    msg.setSource(42667U);
    msg.setSourceEntity(133U);
    msg.setDestination(29758U);
    msg.setDestinationEntity(170U);
    msg.reactor.assign("CVTMNAGGCLHKWOAXRZOUILBKGRZWYAYDVSBCFAUTWWPWMEGQRKTWULXOPCDJSQADGJIDPLJYSCIMJZOTSUJMOANDJIAZBWJCRBDGHSFNFTAVVEUVNGMZDUFXOYTGVFKBPCZSMUH");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("KILPGDBCZROMZABCQFAQTEGITVSOBRMRHBINYPMYYDTVWWDUMNTFAYAJOCLDNYKHKIEAOUQUGXVKHQECCCVKDSKBLGZUIKHEQSUNGOXDVREWJQAMDEBPGW");
    tmp_msg_0.predicate.assign("RJDQDNXKZLEPWEFZPICMYHKMEPUIZAYABGMFSCDHFEORTTCUGSIYRTLPQZKUTWICWNXZWHPJKLVCBFOCRBVOLNKSSWBBXFDVCNOHLRBFZOKHXPBSKAURACIUGGRVPHHMPZOYNSFNZEBXMVSAEFZATEGVMKOAJPXBFHDGYYT");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("FBKTKGNISYAIDMZMLNEBALQUNYPGEDBVATGXWKBNV");
    tmp_tmp_msg_0_0.attr_type = 250U;
    tmp_tmp_msg_0_0.min.assign("DVOAFXJGNQTYIYNKQGKPFURBCHZXHKAKMPUIHAAPILEIDJFKMXCGCBLRQKNCUTUCDWWWSOPARAOLWWLSINZGRTBGIROFVVOJRTSNPKSIPTZQBOJDFUQIAGBUSJZJGUARFWEQEDSYIMYNTCMDMFNLERKIHUBYUSTVGVCVXHYWLQKPOECNWVDCLVZXAWQJZJUXVTHPBMLTESESKMWFNAHMBOEGRYETFCHZDOQPXSBXLZFYZR");
    tmp_tmp_msg_0_0.max.assign("OVFTDVQFNGSPTHMXXGPERGPXTQLRLZAQIBHFWDPAZIOUXBCCZIWSSNXOVMLDEFNPHZWABAFLKDEYPNVWVCCDHJBDGEZFENLSVBOFSMBLHOOU");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.48103335170712136);
    msg.setSource(42957U);
    msg.setSourceEntity(130U);
    msg.setDestination(41458U);
    msg.setDestinationEntity(183U);
    msg.reactor.assign("QNWVVNDNBKDIOSDLUFZFPKUMZZSPXDGNWQMXDUTFLYIMUCBNHPEMPQJVRMIOGTSQJSALHKLYKIZS");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("JPGAUVOBSCGWYNSOZYOUNUDEWKISIZQFATSKLHNDHLCVYIKUXQMLPIKYZDWIQMNMEMTBBYBCYOCLXAGAOBTETBLJFCE");
    tmp_msg_0.predicate.assign("POPJGLKCGBHNLXHFOTIAKMTRGRXEWZBTQCRAYDVLLUNSNHCSJEVVSBAXLZHYTQWETJCRKFKORPKZBPENYROZRDDVUMAPASSKEQOHRQWYFZXVTVFNEWGGCIWOEXSKSNFTMYQHAIKOWVWSNUBLLAJFBSZUAPYID");
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.3365477502774753);
    msg.setSource(25457U);
    msg.setSourceEntity(176U);
    msg.setDestination(62665U);
    msg.setDestinationEntity(245U);
    msg.reactor.assign("ZOVPEXHCWVNRWUUPNZHRQUTJXVOTTYGEYPZFOGTSCMXGWIDMHUUYVKLVNALEODHDEMROXDSYCSZABUSGKZMGFQSERRFJKKJCLRGPXFKCIKGPJBESPTRXTOPCBHFLQXDCMGBLDTQUWI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.8692845427398569);
    msg.setSource(2805U);
    msg.setSourceEntity(76U);
    msg.setDestination(22968U);
    msg.setDestinationEntity(226U);
    msg.topic.assign("AMZGVNDDMHLQENSPEGPQHLTUCWHMQZLELVTNBYHYZJWXKQLAOAAHLPBGKJOTBBENXDPCMWFFVJPAUKSWGWHSASURVZQSIJYNPWASPNYBMZUTJVJAGLVDWVMJSWMZFFJVBSSHTOQOWPOEGBFUTUVXIYHLXTYNDCKXJRSGJDLURXXCZBIIOIKRTXEEUCWREKGDFFONOYTIRDLUBQCCGXYICRDYKOPYZQRKEZADCQAVQKNRRI");
    msg.data.assign("YIPVSMAVGVRDYGKPJPSCWGHFXBKACQUBZNDMBGQKODNRVTMROIZMVHYZKNRTGSPUQYZMQROEYFWFONU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.016344162747546798);
    msg.setSource(25723U);
    msg.setSourceEntity(0U);
    msg.setDestination(43409U);
    msg.setDestinationEntity(203U);
    msg.topic.assign("VJPLMTMLSUOGFFGAOPPERKIWKTRYGLSFVXZCJZRNDZUTNOXDWXGJEZBKUIMODADDPOCLVUZXBGSSVDECVQLEJPLNMBHPEKIZCYMTZWWQULTNTIWSIQAQJEXVVEMSHKCGHOGHVKUUSWL");
    msg.data.assign("KEHBYVPILHVYKUADRPFICCWTXDO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.3806986843428205);
    msg.setSource(49173U);
    msg.setSourceEntity(109U);
    msg.setDestination(21605U);
    msg.setDestinationEntity(74U);
    msg.topic.assign("JDUXYLCWXDCIPZEORQTNLIUSRSYFOTJUAPVJAAWCBKJMZJDMSGQOPLJYFEMGSDTNPLIKHZSHJRBDJQPQWMTNFRBBZLXTRIXTNIPYKKPZDKBFCGQUYNAEGVTWPYNTFVKYBYGLFVYKQUCUHJIFWWDHGEWMNSIEXWGIQUABRVEOPLOHSECFEEVZMU");
    msg.data.assign("VNTMNIGRTLKZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.7954717696891863);
    msg.setSource(56252U);
    msg.setSourceEntity(229U);
    msg.setDestination(60733U);
    msg.setDestinationEntity(102U);
    msg.frameid = 107U;
    const signed char tmp_msg_0[] = {-76, 30, -58, -91, 36, -110, -13, -51, -5, 16, -92, 119, 7, -56, -100, 13, -55, -51};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.9734067703344847);
    msg.setSource(27162U);
    msg.setSourceEntity(90U);
    msg.setDestination(57264U);
    msg.setDestinationEntity(25U);
    msg.frameid = 38U;
    const signed char tmp_msg_0[] = {69, 39, -37, -114, -73, -36, -16, -67, 49, -29, -50, 57, 39, -61, 8, 98, -88, 23, -67, -10, 116, 46, -108, 62, 82, -69, 39, -87, -77, 52, 112, 2, 102, 31, 71, -58, 85, 100, 116, -70, -66, -84, 23, 119, -4, -113, -79, -77, -122, -56, -77, 76, 87, 114, 44, 86, 97, -120, 92, 7, -98, -92, 110, -123, 86, 56, 104, -105, 118, 18, 71, -23, 67, -76, 122, -120, -12, -107, 65, 22, -14, 38, 44, 120, 35};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.38985616794338274);
    msg.setSource(8503U);
    msg.setSourceEntity(135U);
    msg.setDestination(56002U);
    msg.setDestinationEntity(239U);
    msg.frameid = 88U;
    const signed char tmp_msg_0[] = {-111, -114, 99, 80, -82, -73, 40, 24, -109, 56, 85, -122, 63, -60, -90, 90, 90, -10, -50, -35, 47, 13, 84, 111, 115, 87, 90, -110, 39, 55, -81, 31, -57, 125, -31, -56, 118, -106, 62, 18, -91, -92, 124, -127, -46, 36, -58, 30, 84, 65, -112, 33, 125, -16, -63, 67, 13, 72, -10, 20, -66};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.8775721913776068);
    msg.setSource(47246U);
    msg.setSourceEntity(46U);
    msg.setDestination(65038U);
    msg.setDestinationEntity(88U);
    msg.fps = 79U;
    msg.quality = 143U;
    msg.reps = 3U;
    msg.tsize = 24U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.8572836483368801);
    msg.setSource(43423U);
    msg.setSourceEntity(89U);
    msg.setDestination(11752U);
    msg.setDestinationEntity(123U);
    msg.fps = 120U;
    msg.quality = 45U;
    msg.reps = 131U;
    msg.tsize = 7U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.08294561199713557);
    msg.setSource(44566U);
    msg.setSourceEntity(11U);
    msg.setDestination(9764U);
    msg.setDestinationEntity(188U);
    msg.fps = 24U;
    msg.quality = 143U;
    msg.reps = 219U;
    msg.tsize = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.08864948546873708);
    msg.setSource(54654U);
    msg.setSourceEntity(11U);
    msg.setDestination(409U);
    msg.setDestinationEntity(16U);
    msg.lat = 0.23813731517155923;
    msg.lon = 0.35232505379862533;
    msg.depth = 45U;
    msg.speed = 0.4490494804175811;
    msg.psi = 0.609489913177713;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.04559603946022006);
    msg.setSource(40447U);
    msg.setSourceEntity(212U);
    msg.setDestination(18429U);
    msg.setDestinationEntity(174U);
    msg.lat = 0.7078724893013998;
    msg.lon = 0.8157784957153827;
    msg.depth = 16U;
    msg.speed = 0.36690883164714305;
    msg.psi = 0.33834742377784877;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.167750127692597);
    msg.setSource(20802U);
    msg.setSourceEntity(92U);
    msg.setDestination(40889U);
    msg.setDestinationEntity(201U);
    msg.lat = 0.07553213060243924;
    msg.lon = 0.6564931520821381;
    msg.depth = 168U;
    msg.speed = 0.9604471547855195;
    msg.psi = 0.7971721040101862;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.25546863841264233);
    msg.setSource(35138U);
    msg.setSourceEntity(199U);
    msg.setDestination(44716U);
    msg.setDestinationEntity(10U);
    msg.label.assign("TOXIYCQLJYVDXCRMGKMETHYJHKWHPWFYYCQCVPXEABVMWTCAZBOAFTVSRZNZRFOVTDSONNSOURRNJIMAEFHBBMNBDERTLEJIPEEFLYMNYIDZPZZAFQSFPVCOXRXWDPUQRHZIGJUQKKMMECUCBGKNXYVLVBPJIALXDXWAHGURQUWZDJPSHHHUYIFKFQTOUSBSGPVN");
    msg.lat = 0.8747754800172626;
    msg.lon = 0.27052177539560407;
    msg.z = 0.5730389888254435;
    msg.z_units = 237U;
    msg.cog = 0.2605330909190242;
    msg.sog = 0.9518479712497977;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.9698605968101007);
    msg.setSource(42005U);
    msg.setSourceEntity(187U);
    msg.setDestination(36917U);
    msg.setDestinationEntity(245U);
    msg.label.assign("XITGWJATZQHUJIDWZSKKTTRKAPFUHLTGRSDDXNMHLRPOHWYKICECWMNFIGRUEDILXJWUHCFDRNAMMKJTARYVQQENKZVDJEWVXUKHPYTGBCNTPCZVVBDENEXOKQBNGUBGEERABQEMLDEFRCMCIKXYBSFJVFHNUJZXCZ");
    msg.lat = 0.6628464207082284;
    msg.lon = 0.13506625211828893;
    msg.z = 0.32164181975612083;
    msg.z_units = 194U;
    msg.cog = 0.5756155003665309;
    msg.sog = 0.8497314682302518;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.3487030260935472);
    msg.setSource(60350U);
    msg.setSourceEntity(223U);
    msg.setDestination(25976U);
    msg.setDestinationEntity(250U);
    msg.label.assign("SGMVOAQUFTDKUPZOBDYPDCYOZZILIUDZRXJNKRYNYOSPMMWRUMHPFVLWZOXTAQGBCEKDPEHNLWRAGIBDMNPTCWRMYHFYPAJXKVXBCVYCXJQFCQDGHJKQKBBOCVXRZJHGPNMHUSGEBOUKJZGGVTQULSTBLEKYVHSWQWWOYIXKIIACDRFRWGFJOIJFLNQETNTSCKUZVRSUXJAQNSFJIZEBLTNSHRNEY");
    msg.lat = 0.2449592584815421;
    msg.lon = 0.7640315670461495;
    msg.z = 0.797853089158873;
    msg.z_units = 51U;
    msg.cog = 0.11947791076464842;
    msg.sog = 0.5935837951074701;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.19514101765021186);
    msg.setSource(27190U);
    msg.setSourceEntity(231U);
    msg.setDestination(55469U);
    msg.setDestinationEntity(13U);
    msg.name.assign("XMXFVCKHTRUDPVFROHIUAYXAVFUGCLAQMKBPMZIHVFJVDJEGXIBNLLADXSQSUVJDOHTMEIKVNXSOWLEFGAGDCYQFECGOQXQDBDHIYNGDEXNAMNUUYZZQZUTTIBEETGWHDMNRTLBBTTNYLQBHSBZRUKVNYGZWZOPERKMKRLMYO");
    msg.value.assign("TYFQSIFKXSYXQLBIFZYJPEXBLSVZCYGAAOUZRLOJAMFPETDKYQTNGJKVDHVGGRJSZRQFJBCPFTVPCGBOKDWXDMISWOIZTMFOEKVBBJPLOHFGDVXVRIGZANDBYUZMCAURKMGUIAQKBXUPSIHUBHMTSYSXIHUIYJWQHPJSWFCWEHCQXTMNWPEKEEHLJDNKPMLTMOZOAXUJCEWZQWDOVMXLQANEGNRAIYBNVUDTH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.8142298924278772);
    msg.setSource(30624U);
    msg.setSourceEntity(62U);
    msg.setDestination(3105U);
    msg.setDestinationEntity(41U);
    msg.name.assign("SBKAPDUJMMUFDXFYYAMPKQAEDJRJRTQZFJZTHOCYVGZGVEWHWTLKBRKQMRQVQNVCEEZNLIIOXHBFJQPAHANUIVZXSLYVRNANKSSKXZUFWQMRBQODXBFFNETKSCSVUCWTMYPJJRAIJPKVSGLIX");
    msg.value.assign("CFQZTQTDNBARSRENPCESTOBJCGLSRAMQYLXNNHZQVWIPTIIZFUCXPILYUMDYJUBZUJGJDWSXJAPEKZCATVZJVEHPDXFAWOBKDZISVEOYNGFKPDINZAFAUHKOMJCFIVBETMAYYKLXURIUHSLVNXAGQHSEPUPJKGLGLMBYHOXETFZQFZHBFCBADQCRWSYGKDGWUWPSBXQGKRPNMBI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.6222724101899421);
    msg.setSource(62349U);
    msg.setSourceEntity(41U);
    msg.setDestination(65275U);
    msg.setDestinationEntity(191U);
    msg.name.assign("JKVGKTCTBURJRGAFIOSTIXFFIPSBDZUBGFEEIUELQAROAGRXWY");
    msg.value.assign("CBNVMEPXIMDTLWMNEJLHVGBBJCAHGZGIKVZGATNUEEXHEUZSRRMYSQILNDITWFJHOWCDGTGZZYPOMGRYKQJIFZGPELCLOXTUXHFZRVCAVXPPPANFQJSOL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.03363778982244481);
    msg.setSource(16444U);
    msg.setSourceEntity(178U);
    msg.setDestination(59797U);
    msg.setDestinationEntity(126U);
    msg.name.assign("CJZWSGJLAOVKRZOAOMJVJPPEWCCZFCMXLSLWUNQYVGDRMYWZDFIGDSYAWHJCMEYTDDAQKOTTDEOPIGYKWNXWUHA");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("LOOVWQYMTERJDXWOGNMIJUWFKTFJJBCNQZEHPEADPRSEQFJJFXHQGXIUYQCLRIHAJHCRSBXXUFHQJYWJZYBHFQVOZGLXNGKUWVADEKZRIMCHBPICUOUDXMIPFQNXMRVZEWFCRTVFBSDYALVLSECNDYBPWWNZXSPAKAGQZLNHWAGKSGLOBSRIDKDLUMUMTMZAJGOB");
    tmp_msg_0.value.assign("BHJCXHEIIYHTJQOOPRDWEOTCZABWYVURVQNSOZPMURFSJYCNINPSDIYIFJEYFEYVWZVYXLWEUCMJDBDCKBNPPTGHKOOLVBOGUA");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.1544543079527092);
    msg.setSource(30619U);
    msg.setSourceEntity(12U);
    msg.setDestination(50287U);
    msg.setDestinationEntity(207U);
    msg.name.assign("ZHYIEJDTJTMEIAMEYVMSTGIKTFXZPJKTXYPERYVSQYJDLXHDUUWZDWACRQRHSLROHTPHQEDBBVXSIXBDFMWLIFCJCMZGUKIWUTHATKSUAQHVJNRZBXOSCRGFOPDMFQIIRNACNUENUMZKBGKWYMNPLHWOUVSFPLEVATOCZEYAON");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("ABVIDEKMOSVBMOIRWYOVKJYMAAIRMQDBBSTKJDYGWIWNZDPTJNCFUCXYGJEGDRVYXIGNEKNWCWEKQBKBZELLBVZNNUWNZVRTHLGEYBWCMKQLSJILRDPSTMCKMVEPHUSOROZQGGHPHSMGMRUPWPFNQCSXOEJXRFAOWUZXIPYEUVBJTTKLF");
    tmp_msg_0.value.assign("YNITDESPHBQGPIBUQGFUYBOTBWBKDQVKTVAGYWSCPOSWQYGXNDIUPPEWZGMVEIWWH");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.028918967507449267);
    msg.setSource(10558U);
    msg.setSourceEntity(122U);
    msg.setDestination(23029U);
    msg.setDestinationEntity(81U);
    msg.name.assign("KHQWTLYLDGFKBYLSTSQODN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.9037955752252721);
    msg.setSource(36282U);
    msg.setSourceEntity(37U);
    msg.setDestination(36990U);
    msg.setDestinationEntity(209U);
    msg.name.assign("ODDHZKTWNJELDLOLSPCHWGOUHGWPRKOXPJAPNZBHFNKSMCLXFPQCGIXDSXINRFURDCIUPXQYVNKVFJSJYSEOBEFXLDMXHAFRYDZTQBCALVJWKMSRUWXZUCAKCHBWVAVCPGYLAGFVNPGHHWFOROHCNFBUEZZJQVMIQETQTGETWVKGOUJZVKFUOUTGJWIEBHA");
    msg.visibility.assign("SONEXLKXFAPHVTPMXCMYKYMVEDCXFDDVKJCPAXZIIAGTQVZGCDBZFORSKJTPZCQTBNICWSRDYBQZHRISXIWLXILHZZCNHDNQDULOJBEUJABUHGTEVGTVPDHMOOCMVBLFSNWYEUSEAHPIKFUYKMBZEWYOBJEGQALARPQRYLPJQIUGRDFRVWFWOMOMMUYJNSKXSAZVJWDBTW");
    msg.scope.assign("YJSIZLEMKHVANCNMLQBYPQCQSXRIXTRWWAGYNTQRXRQHUGUFSQTNDEHUIZCJLPBBSVRRFLOYJPWDRSGRKYEHPTLJZFHAJFAYWUVTHCFJMFLOBTGYKEAZSDXPTLJKFKMDGLFHOZCDXRDISDVFOBZJUVONGTBWIDGXASKNCYAGKAZZBVKOMHINUIPMBQUONC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.4339341728829157);
    msg.setSource(44766U);
    msg.setSourceEntity(226U);
    msg.setDestination(4894U);
    msg.setDestinationEntity(92U);
    msg.name.assign("TQLOEFCDUMARBORLSXTHFJDDOHPTABGOVEGYCNGBRWLBNPSIRRYPLLBYFZXENMUJNXJSHKHZBQSVLOSMXDERURLK");
    msg.visibility.assign("GYGWGAQCUKZKSKBUBQVTXYEEULVXIIJOHUJAWSAOCOGOESBFSWQPOVPRRXYWUBDXNHKPXITZREFHNTKMPDLZLHMLEOFDRRDMYFJVGJEWKAEJQUZJAJVTRSRQI");
    msg.scope.assign("OBXXRUKELKRFDOYDKZNSVGTGMSBNKOAJHCPPSGBHUFMKWDYZBUIMIURRTEZRBVZEHMUKFIQYQPITVXHNVAJQRTYVVSRCLDCSONLANMHZDPWBOQJBJLAEYTXEPWTXMPQXJCIEOLFVGUIFIUMBFFSJKLKEAQHUTXYCZGWHCXOAQNWRGPCOLBK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.8083765140943155);
    msg.setSource(58247U);
    msg.setSourceEntity(140U);
    msg.setDestination(8151U);
    msg.setDestinationEntity(56U);
    msg.name.assign("IPNGBWJUSJFKFVLU");
    msg.visibility.assign("PLPYDRTHJIUPWONVSJOMBKTVLJMGXCKYGXXEUPKXILTGNCXZKBSQJRORCICUEEWSKHGQQWBBSZIHJMMJXHLRMINYZVPNEPYNQGDARCOWXYEYVTFJOLFOMNTD");
    msg.scope.assign("IMPECLUQWHJVVDHKBGRYXXQKTZLZDQXMYYOINQIOBFVXGRGCMHHTEILTCUIXFRJDBPMBRDXHCWAHRQQLJGLWGBZSTESOKGRODSCNUAPEOQNAUPVPTUYQOUYPWESIYUYWSBEWMXOFNERLFALGATBHZTDJFEVKWQKPKGANXHOZBJICONLHOKXKZKNGKPCFHVCJTMZJZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.0695763501371478);
    msg.setSource(63219U);
    msg.setSourceEntity(234U);
    msg.setDestination(5594U);
    msg.setDestinationEntity(79U);
    msg.name.assign("RBYFOOROQPNNOWDJLNVHENKUZUDTZMAEWVJKLAQFOHIYPLHJCEESCIMWVKXRAAFCRZPVQLLUUGVMBZGOCMGYATYYXUMASTEWOCBSKWQJTMQYAICRXBINBXSHZTCQJJAGXFSHMEESXRHWJBYYXFGOPKMRSFBDDUFQSTGHQRZIKIKRNWJMHPCLUZEPLFNKUCVUIDBDFJRAQTZGTBIVDDD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.4687379483336256);
    msg.setSource(52231U);
    msg.setSourceEntity(154U);
    msg.setDestination(49894U);
    msg.setDestinationEntity(74U);
    msg.name.assign("UWXFALKKMCHSHHCMVTTUJCCDVOPIEYGHKNJGSJLNURYTWFAXFERZCOAUOORVPPTLQYVVLSZWVFVXXYINVMQJFGMQICAQPQEWWSYWSLPAJRWKPJNYSDEDKAYQGMXRRKRGTHBAAFNSIWPZULNBIQIIKTCRHU");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("URPZLFMMZLBXPGBRJMCKVRUDQZESFHLH");
    tmp_msg_0.value.assign("LJKXZNUUGKOOKKGDDPJMCMTZDIJNFNGJEUSVWCSXXLYMBDJRVEEXZACTALUDNCMTTJGCIVGVVGCATMSFILFRIPQXZUJDQDJBFSP");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.2695821116244711);
    msg.setSource(14361U);
    msg.setSourceEntity(59U);
    msg.setDestination(35782U);
    msg.setDestinationEntity(204U);
    msg.name.assign("QZLARUYLQNJXDOMXEE");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("EKIUALJPGNXUFISHVWYSZRLYAYGDZNESWXJUOPBVDWJNLDIJBMACALLQFHNTJCCKACEPVHYKWBQWXWWVQTZOLBJB");
    tmp_msg_0.value.assign("KXZNQCZKBJGMGFDJHRTDBVOKVMOVAEYDUWLXFIHZRPLMEITNSWBVCHPRISPFUHCKMEBRURLJNXVYVHQDJHXKWFGZTTDOAETAUBSMBDYZPLZIEFJMAVMUOQNJSGKYCZWXUBWTKPILJKTEKTFDXTUASWSRYMGJQYNCTEVSHQCINDOVGGQCXGEAIGMSPXOJBXBHQAORYONJUCFHLXMCAUZIPNZRWFEAIZNFDCYLUSNLIYQYPHOWOL");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.7937524335944279);
    msg.setSource(37572U);
    msg.setSourceEntity(114U);
    msg.setDestination(54997U);
    msg.setDestinationEntity(158U);
    msg.name.assign("ASLNKQWOWMNPFIIHYOEISVRXEBKEDCLGYUANTRFVOVMWXTQTZWISSKVAHXOLXMNVDQCNQZDCLHSVSFKEIRNGUDCPHGALJHIOYZFZBUVGBCKBBSVEGLWPQDKQJWEWZE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.7911360793718405);
    msg.setSource(17393U);
    msg.setSourceEntity(33U);
    msg.setDestination(62060U);
    msg.setDestinationEntity(142U);
    msg.name.assign("LKFKJXUMRMMKZGTNHESJTJPNLPBJCNUNARAOFCTRVSFNYLXLDXRWGGYYZSIBKXNAWWSBCTFUHNKBEKNGPGYQPCJWBQPMWAHGPTYKBGDHFDAONIOQVHWCXHBGOPITIHUQKODFDIYLUQEJSZLUUJE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.18854747698816854);
    msg.setSource(54818U);
    msg.setSourceEntity(14U);
    msg.setDestination(46739U);
    msg.setDestinationEntity(194U);
    msg.name.assign("QGRBSUODPMGGHXTBXPA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.7396871709060816);
    msg.setSource(61890U);
    msg.setSourceEntity(121U);
    msg.setDestination(10833U);
    msg.setDestinationEntity(110U);
    msg.timeout = 2378999200U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.05042419178952706);
    msg.setSource(16243U);
    msg.setSourceEntity(5U);
    msg.setDestination(33993U);
    msg.setDestinationEntity(246U);
    msg.timeout = 3122849265U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.7904215286215707);
    msg.setSource(29779U);
    msg.setSourceEntity(145U);
    msg.setDestination(1235U);
    msg.setDestinationEntity(66U);
    msg.timeout = 359121588U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.763478885235387);
    msg.setSource(20719U);
    msg.setSourceEntity(122U);
    msg.setDestination(64375U);
    msg.setDestinationEntity(135U);
    msg.sessid = 770446431U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.7788134857604424);
    msg.setSource(10807U);
    msg.setSourceEntity(11U);
    msg.setDestination(4196U);
    msg.setDestinationEntity(124U);
    msg.sessid = 3918905653U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.4459435489469077);
    msg.setSource(17697U);
    msg.setSourceEntity(55U);
    msg.setDestination(32321U);
    msg.setDestinationEntity(12U);
    msg.sessid = 974353471U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.6622729352503651);
    msg.setSource(17198U);
    msg.setSourceEntity(150U);
    msg.setDestination(6370U);
    msg.setDestinationEntity(129U);
    msg.sessid = 164413665U;
    msg.messages.assign("UOVACSLORSDVGRABENMINKQMCQTSVHKTJUGBJNJRAFFLCJKAHLXPCXXYDWYCKIGHBSJWYMGLFOMJZRFHTHGCNOJTTIYOBRTBHXIDYUVUNMYILCCCCOZRABRTGVDAZYGIVNOQZFIWXOZKWMBFFDTOWHNUSHGIZQPSLLEIQRVPFQZDWAEMYDZBPUPAXSMFEAWOJXSPQXU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.17645148503565244);
    msg.setSource(61911U);
    msg.setSourceEntity(211U);
    msg.setDestination(28607U);
    msg.setDestinationEntity(24U);
    msg.sessid = 790920012U;
    msg.messages.assign("VKREGPRQWMFMKGZSHCXHPEV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.3292309744560997);
    msg.setSource(51322U);
    msg.setSourceEntity(78U);
    msg.setDestination(7304U);
    msg.setDestinationEntity(11U);
    msg.sessid = 2796588513U;
    msg.messages.assign("CHIEVHUJUOYLTUTNGDFLAQQDREZTKKCLCVDMMQROPTYPWLFEUIGMHKSYLRIBHWXQJLTZJHBRJYTVTCWZWFFSRTBAXINKDDWOIJCEMJZIOYGYSAFRCIKLMAHQVPXUSJRLOGEZLMEGFWNJQVWINWNTOUUFKI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.07456689356207313);
    msg.setSource(32187U);
    msg.setSourceEntity(190U);
    msg.setDestination(23616U);
    msg.setDestinationEntity(24U);
    msg.sessid = 701302080U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.09119397087090264);
    msg.setSource(44101U);
    msg.setSourceEntity(159U);
    msg.setDestination(22013U);
    msg.setDestinationEntity(114U);
    msg.sessid = 2895335334U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.278684554113264);
    msg.setSource(53022U);
    msg.setSourceEntity(11U);
    msg.setDestination(13326U);
    msg.setDestinationEntity(200U);
    msg.sessid = 4179078095U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.612365260813256);
    msg.setSource(24355U);
    msg.setSourceEntity(103U);
    msg.setDestination(60487U);
    msg.setDestinationEntity(200U);
    msg.sessid = 2766089102U;
    msg.status = 32U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.9863929825899145);
    msg.setSource(58305U);
    msg.setSourceEntity(223U);
    msg.setDestination(30517U);
    msg.setDestinationEntity(106U);
    msg.sessid = 1580478838U;
    msg.status = 237U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.4695399531617872);
    msg.setSource(2954U);
    msg.setSourceEntity(234U);
    msg.setDestination(11625U);
    msg.setDestinationEntity(202U);
    msg.sessid = 3340591933U;
    msg.status = 145U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.12533537312219178);
    msg.setSource(16234U);
    msg.setSourceEntity(247U);
    msg.setDestination(6866U);
    msg.setDestinationEntity(77U);
    msg.name.assign("MRLLDOCPPAYACIGYKKCZEHYAEWMEVWBEHNSPXGNWERGMJVQSOCNFAWXROLKMTXVZOKCLQWBTXDOTKXWOENASOLUNOHPVRURJURZFBPVVQILYSUFTUGIJATYWI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.062053888163048465);
    msg.setSource(10698U);
    msg.setSourceEntity(143U);
    msg.setDestination(25034U);
    msg.setDestinationEntity(155U);
    msg.name.assign("XHEUMVFVMNDJDOFVDCBVKDNNCSJRHNFBEQJJRIAQLDEGSIGTQYZNFTKLQWGAXZBUTMNILITWKHMAKPHWTYVJLOUFXIHKETLNUMSPTGFDTRGOPWJCVXMHKIRQEGCXHYDZSEUETOLPFDBCRSPMLUKTXVW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.7928449794523796);
    msg.setSource(13220U);
    msg.setSourceEntity(83U);
    msg.setDestination(51175U);
    msg.setDestinationEntity(14U);
    msg.name.assign("GGQEFYDLBDFHBJPQISFZLTZVSZMKIOIDIDZJVRCTPQFXWHVGSACGHWCVIBKOWXWDUUACKAYSMQPFENLMCZEURJZAOIHYUUCPSBJSTFKOEXRQSYVYZVITUDNTARXCNRJVHNLWYLCTRXOOEOXQHWDQJJAKDRBAATMVSNHFFGNSPMQLTEWPPFUEKJQGNDVWBTGBPKNLUNKHPHRWIUNHLXXMGCLOGECBBKMZMRLU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.31467675256227434);
    msg.setSource(37399U);
    msg.setSourceEntity(124U);
    msg.setDestination(32236U);
    msg.setDestinationEntity(215U);
    msg.name.assign("KZFASYVDPKZWBKIGMVPEIPJNKGVIHLYGIZTHHEQYAZHDIOLUOKTNBYMJRTNWQBFQSZCMTUUBNRSSTHRAWWIQQFRYJUCHOIZDEOLCATGPYPTEUVVWFLMDGSSIXSBGDHDHATJAGJPRHVAQXPBNYLWVFXRAPCMGEXUKNZEXQQKPFSRWDONXUNLVCOOZDEEIFVLAFMWFMXJTCQMVCLDXKJXRCOJOCWUSHEEROYJBBZAGINMFBZKCYRTU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.4064077343801884);
    msg.setSource(30856U);
    msg.setSourceEntity(185U);
    msg.setDestination(35423U);
    msg.setDestinationEntity(104U);
    msg.name.assign("FBHYPQNFWMKOZGKHOBYXJTFSLQRPCQDUJEMEJUXBMAEVLIHQPISZTKLQTIKFOQKBFGCSJWYZLKQREPXUYIV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.14188656345718675);
    msg.setSource(11172U);
    msg.setSourceEntity(27U);
    msg.setDestination(29254U);
    msg.setDestinationEntity(187U);
    msg.name.assign("TASEANJWVWLVBGHXTAQCKTRMHPOYTZVIWMEXOGXOLJKFUCWBQOSIDLNFLTHCIPCSRDILWJDYOQNOUCIRMIZQDYOLAKKUNLFFMBJTESEPCONPNEJATWZMVDHVFWPVSGGSDUDDFIEYSXQWFXMWHUWBEHQBV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.22326391898172382);
    msg.setSource(41692U);
    msg.setSourceEntity(5U);
    msg.setDestination(51440U);
    msg.setDestinationEntity(155U);
    msg.type = 57U;
    msg.error.assign("ZNFMXOVFNTDRHIPSJZYKXZPQPJTZGXIRWOZHNFXEHZFIXTVJFFPSTGRMOSYXFSLEJAKPLWOAYQGIAWQADCYIBVCIJJHUGUNKPIVCKVEVUKUNYOTUSRXKSVEBXXWYWGIWFPZSFGYRXCOIYIDLFLNVEDCKAMTLJKCBOVZRMPNKEMUBCYWBQLHALSOUNPABOQQLCDGSOTUTGARUCWGHDWQBRCGMHADQMNTETNSMJQQDBDEZEKUZHHMVBPJLWD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.9712425844034518);
    msg.setSource(44895U);
    msg.setSourceEntity(246U);
    msg.setDestination(29616U);
    msg.setDestinationEntity(42U);
    msg.type = 163U;
    msg.error.assign("GKFFQRMFCCALFQZEMQUYLBWBKEGLAUXXTNRYJYSRCLGKVYFJASRPHVBVOIXCDICPGBXFVMOAJBDVUISEINVKPEZCVITBMNPSLLJNFSHZHB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.0728850392173741);
    msg.setSource(50196U);
    msg.setSourceEntity(187U);
    msg.setDestination(6758U);
    msg.setDestinationEntity(101U);
    msg.type = 203U;
    msg.error.assign("MUSHKWBUERRHGGQDFBDTLLFLDBMAUKFDRKWCWEJYYFNWZNXGVEPRWNNXIVPUGDKNWOJMSXAAYYASPIEAQQRTKXXZBZLDJQLNSOCEWIEVEGROFBTMTUYHYIGDLXUUMJZFZZTSFMPBLNXHLOPGOTLUAIGRVRTAZWHJNUJIDCINOQPSIQHZCJKJMPEZMBMXOQDXBKNVJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.3915174837384813);
    msg.setSource(48142U);
    msg.setSourceEntity(242U);
    msg.setDestination(39174U);
    msg.setDestinationEntity(10U);
    msg.seq = 48727U;
    msg.sys_dst.assign("CJGUMWNLTIDTDBHPYXTYOVBPVCMFGIPXXSIXLGHUKOEHEHVXLR");
    msg.flags = 157U;
    const signed char tmp_msg_0[] = {-124, 79, -22, 43, 14, 31, 109, -40, -116, -128, 120, -56, -26, 120, 27, 13, 87, -73, -120, 126, -54, -37, 27, -28, 38, 123, 19, 13, -56, -41, 18, -69, 119, -91, 45, -79, 76, 70, 37, -94, -78, 72, -37, 68, -16, 35, 61, -12, 79};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.6749838096356882);
    msg.setSource(51570U);
    msg.setSourceEntity(229U);
    msg.setDestination(22843U);
    msg.setDestinationEntity(34U);
    msg.seq = 34561U;
    msg.sys_dst.assign("YZUSKFUSQUDNLGAFQGACSMPPNYUKBDCOMGJBXQLOWSFICNXJRROPHOCHZJXEMARLOFYAGKPXPQTCMUIECXTOVTFDOKLNTYHSGJBUJUNHXJVPSTLZSEWFPPID");
    msg.flags = 83U;
    const signed char tmp_msg_0[] = {-35, -70, -47, 48, 39, -52, 33, -83, -117, 74, -20, -86, 101, 106, -16, 117, -43, 46, -86, -127, -53, 61, -81, -73, 112, -39, 72, -40, 87, 35, 47, -94, 83, 38, 63, 18, 121, -119, -104, 81, 47, -78, -2, 105, -109, -100, -73, -34, -33, 95, -118, 60, 66, -47, -74, -98, -126, -110, -37, 19, -85, 37, 41, -58, 22, 17, 89, 104, -125, 58, -128, -27, -66, -14, 114, -83, 50, -127, -104, -114, -71, 27, -71, 72, 99, 103, -110, 96, 34, -108, -38, 11, -1, 7, -116, 12, -62, 26, -38, 67, 85, 42, 56, 43, -52, 1, -120, -24, -13, -126, 19, 59, 60, -31, 83, 82, -52, -101, -79, 59, 88, -63, 1, 47, -127, -122, -64, 49, 119, 44, 98, 92, 22, -98, 92, -38, 46, -113, -120, 121, -93, 81, 80, 27, 13, -71, -44, 67, 102, -40, -9, 42, -28, 96, -25, -44, -24, -103, -61, -77, -59, 83, 71, -107, 94, -19, -65, -101, 94, 43, 94, 104, 10, -17, -58, -75, 86, -100, 121, -49, -16, -123, 18, -53, -51, 33, 111, 75, 56, 116, -123, 18, -20, -100, 85, 76, 90, 68, 78, 0, -20, 48, -127, 49, -74, -75, -20, -95, 119, 29, -52, -126, 93, 45, 1, 39, -1, -86, -35, 100, -113, -97, 29, -30, 21, 43, 41, -110, -26, -88, 87, -39, -26, -112, 72, -12, -7, 67, 67, -113, -80, 55, 63, -124};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.4832214082375855);
    msg.setSource(12821U);
    msg.setSourceEntity(217U);
    msg.setDestination(18206U);
    msg.setDestinationEntity(204U);
    msg.seq = 26749U;
    msg.sys_dst.assign("VNXBRGJZQBGUFDFDNZFCPJAPMVWBYKAGIIQMJTBYVXJOVZKSXSVXDATVNYYDJMTLAYWFLTTVWUNQOCOZHCHUTXVKZFNWXELEJN");
    msg.flags = 88U;
    const signed char tmp_msg_0[] = {84, -84, -95, 22, -69, 55, 70, 93, -53, -34, 82, 23, -64, 39, 95, -110, -34, 40, 94, 8, -100, -53, -119, 3, -106, -124, 65, -28, -82, -50, 58, 76, -125, 30, -108, 62, 20, 114, 40, -20, -13, -84, -96, -64, -5, 55, 53, 77, -44, -123, -44, -92, 99, 91, -101, 69, -120, 100, 109, -40, -53, 29, -65, -63, 19};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.22097124430623516);
    msg.setSource(15848U);
    msg.setSourceEntity(149U);
    msg.setDestination(48886U);
    msg.setDestinationEntity(171U);
    msg.sys_src.assign("PEWGFZSAQNKBPDANAIQJAQXKBBGMVGQJQUSGGORCXPRLZMTWUCBIZBLSEONYTEUFJUVLVKXWZIRJUYMWNEZLIIYKVJRGLVTSCHGWMXDCNDFVXPYCMPQURFIHBUALDPHLVMHFJVWSRGPHXBEQMZTVGMMIYNEDDOTXN");
    msg.sys_dst.assign("HCUYREXDWTBVNEMMWMCLFIIVLWPGNDMLUJSXOOHRYYIUMEGDAGQSAJXOGPQRMBLNMJJTLYCINSCSOEBNIVRSDBYSQHZFGFCGPHIBNUYUUBAOWYCFWZKZXBKVZKKNDVIPVXZJNBNJMWHAQDTTZTXZYFHDKUEGZMRKUQDHECXRPOWAVAPPMETQCRKFWIXPGPLCWFUKSLLINDCJYHTBPAVTUJREGAQKF");
    msg.flags = 183U;
    const signed char tmp_msg_0[] = {2, -97, -110, 99, -56, 7, 73, -113, 81, -24, 93, 54, 60, -113, 37, 77, -78, -125, -107, -90, -89, 91, -27, 25, 2, -127, -34, -42, 73, -3, 78, 75, 76, -120, -31, 98, 84, -102, -111, -101, -54, -30, 46, 28, -124, 28, -83, 123, 90, 51, 51, -41, 17, 64, 86, -21, -124, 0, -10, 100, 69, 69, -62, -9, 44, -34, -3, 45, 114, -93, -81, 51, 66, -13, -111, 43, -87, -28, -28, 111, -108, -62, 4, 97, -5, -124, 106, 50, 43, 47, -51, -43, 55, 122, 109, 99, 13, -57, 16, -98, 9, 32};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.5243277571647942);
    msg.setSource(14379U);
    msg.setSourceEntity(86U);
    msg.setDestination(28084U);
    msg.setDestinationEntity(5U);
    msg.sys_src.assign("HXFISYIBURGRYWQITRSDXAKOPKCQRMOJSBLEZMXJMGIGONPACXZVIZNCMVHDDWUJDMJOQWBWZRVNUKJSCVJFYWTBUPGNYHSLTGGNAALIRIWFYOJP");
    msg.sys_dst.assign("GRUJWODKPEWS");
    msg.flags = 65U;
    const signed char tmp_msg_0[] = {-49, 38, -6, 52, 25, 114, 92, -54, 17, 23, -8, 108, 81, 81};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.8102474748894775);
    msg.setSource(28747U);
    msg.setSourceEntity(117U);
    msg.setDestination(51143U);
    msg.setDestinationEntity(58U);
    msg.sys_src.assign("PTDZZIHKATHHPKVRURNRINWKJQWZMXSJMEBEI");
    msg.sys_dst.assign("IDBGMRRAZZIWVXENDOZNEUDXXBPCQKPKMOSOATWXULVQXOKUARGHMIYFVAZKFRFMSKINYVDHMQIYFVIEWWATCNYPBIOLPFLEBOUHHNJERFPVWHAQDREZZHQXMJNJVJBZQLJDKGGJKZGJDISWOYFTOPNHLGVAZIERJYGSDJUXCLHLTBJQBMWKCXOKCCUPASBGQDIKUCTCTATRULUDEEZGCFTBNSOHHYMVEMYGMPTSWLNSWXT");
    msg.flags = 125U;
    const signed char tmp_msg_0[] = {-79, 43, -65, 43, 67, 63, -29, 47, 126, 24, -86, -87, 32, -4, 7, -18, -17, 95, 70, -34, -47, 126, 92, -78, 124, 53, 34, 98, -55, -19, 62, -114, -19, 40, -77, 16, 45, -118, 90, -49, -54, -3, 29, 12, -25, 111, 21, -41, -126, -17, 19, -66, -15, -73, -66, -115, -120, -127, 6, -93, 120, -27, 94, 13, -126, 1, -87, 79, -23, 98, 47, 98, -84, -80, -63, 19, 45, -53, -6, -33, -91, 48, -48, -125, -17, 68, 111, 49, -84, -46, 35, -107, -73, 12, 86, -40, -73, 46, -63, 39, 50, -53, -92, 4, -90, -116, -24, 16, 99, 22, -59, 45, -98, -38, 60, -118, -125, 108, 100, 41, -95, -103, 101, -51, 58, 47, 76, -101, -119, -124, 28, 69, -109, -57, -85, -74, -8, -84, -31, -46, -127, -68, -96, 52, 94, 75, 4, -21, 94, 53, 75, 52, 43, -38, 7, 51, 35, -71, -47, 105, 28, -109, -116, -94, -106, 16, -52, 121, -78, -91, 49, -126, 126, 65, 123, 33, -91, 6, -92, 50, 92, -120, 85, 53, 104, -119, 63, -8, 118, -4, -32, -59, 60, 31, -2, -123, 107, -45, -127, 14, -107, 2, -23, 89, 117, -19, -115, 107, -104, 111, -55, -61, 34, -63, 76, 115, -17, 98, -125, 107, 26, -34, 94, 111, 124, -29, 115, 54, 104, -53, 23, 22, 105, 47, 109};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.6570658738486198);
    msg.setSource(50743U);
    msg.setSourceEntity(19U);
    msg.setDestination(15776U);
    msg.setDestinationEntity(121U);
    msg.seq = 383U;
    msg.value = 196U;
    msg.error.assign("NKAYMDFWVLGXYYBOPKROTAEBPENMTWIIMFLEZPWKGAAURIJPJRUSRMDYVGYPTXRUKCICZGTVAJJSUEEV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.07368210568910838);
    msg.setSource(10108U);
    msg.setSourceEntity(29U);
    msg.setDestination(41788U);
    msg.setDestinationEntity(64U);
    msg.seq = 42437U;
    msg.value = 33U;
    msg.error.assign("JMBVVMFVJIPMLJXOGRKRFEPZDCGESCTWBIDYVTBZDVFAWONINBUVXQMRZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.3873020183470781);
    msg.setSource(30171U);
    msg.setSourceEntity(101U);
    msg.setDestination(46593U);
    msg.setDestinationEntity(220U);
    msg.seq = 45876U;
    msg.value = 56U;
    msg.error.assign("WKJAKNDVMQJIQJTUZNFUMBHLDBDMRSTACZGVKJUAXYFZPJMYPOFBZLXOFSHHVNJICAFYOYXKCFZMHAGIHXTDWNOAPSGCIKQVNFZUGWEFWQFOGGGMKJXVNVLZUSTCNDCXTVLKEWGEU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.12066801988660181);
    msg.setSource(18838U);
    msg.setSourceEntity(205U);
    msg.setDestination(59095U);
    msg.setDestinationEntity(76U);
    msg.seq = 10556U;
    msg.sys.assign("LKSYPGSNAAWZIGEGLOUNTJJJFEDGGYQVSBXNXCKMRTJFXJLEYZTQYTDWQTSUUHYMADUVWNFUIKUOZCRFVMEFZGECGUYCHREBFAVLVEPDTNZSHPMICSJRPMC");
    msg.value = 0.2808223749347917;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.3308632599656526);
    msg.setSource(10063U);
    msg.setSourceEntity(20U);
    msg.setDestination(31051U);
    msg.setDestinationEntity(56U);
    msg.seq = 60064U;
    msg.sys.assign("TLGELAPOKMGENZFTDDBXSGSBTWXZQYAXNRMYOVVYXCSSJZAQQXRYGFAQRFPCHZSALUT");
    msg.value = 0.7708716899680133;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.6049576256783018);
    msg.setSource(52489U);
    msg.setSourceEntity(135U);
    msg.setDestination(47179U);
    msg.setDestinationEntity(112U);
    msg.seq = 55172U;
    msg.sys.assign("ARZUVSCLFGSDMCROKOBDSTJPGGHCNRMPYXWQCUFIENHHTJBQOVCZASRFZYONLBYYYKANCSEQQVYEBLAXRNOYAHBWYMEUTXUJWDQMEHIWBBNTADHQIZITFWNGVKJAYBEKPZKMZZUWUFKDIOPXIUVQPPPSBGCQM");
    msg.value = 0.5965527865287321;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.5500965527632816);
    msg.setSource(20319U);
    msg.setSourceEntity(254U);
    msg.setDestination(42171U);
    msg.setDestinationEntity(148U);
    msg.seq = 35467U;
    msg.sys_dst.assign("GMZPMXCIZTMYCZHYHKLVKKYOWYSRGBMSRVVQZAODBFNOQLZCAQMIGQXLTDZKPSXFHSUEAMKSOWQDATIBJCWFFCQQTAIYJLP");
    msg.timeout = 0.7261538507362814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.5027011830253493);
    msg.setSource(60843U);
    msg.setSourceEntity(149U);
    msg.setDestination(7342U);
    msg.setDestinationEntity(152U);
    msg.seq = 58080U;
    msg.sys_dst.assign("HNGWUWWSETARMIVELBQMPRYQPGFFUFQBWYUDKTKZXFZURIOLQPWWUIEEDXXRJXKJLJJXCIGLMCDOBOZIJROVUUFAXYRNYYHMSGCQNBZRKPFMJAVQZNZTHQJLVHCFF");
    msg.timeout = 0.9000286947848931;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.8266586676931061);
    msg.setSource(15613U);
    msg.setSourceEntity(123U);
    msg.setDestination(43592U);
    msg.setDestinationEntity(211U);
    msg.seq = 49780U;
    msg.sys_dst.assign("ZDGUTDLKMTPNTTZSSIFNPGPKPDFPYVYFJKXRMZYQLBMDPIWHOHISVKSNBKWVZWUGHNWGRFSEUZCXNDJWBBDDSUCIIJBVRIIDBCJUWCQLTJCOKYHGFESFYKIJIZ");
    msg.timeout = 0.6670269916181588;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.5686328804713412);
    msg.setSource(2394U);
    msg.setSourceEntity(92U);
    msg.setDestination(5835U);
    msg.setDestinationEntity(78U);
    msg.action = 101U;
    msg.longain = 0.06486750651550055;
    msg.latgain = 0.3877311073006344;
    msg.bondthick = 3287689296U;
    msg.leadgain = 0.47841074861527;
    msg.deconflgain = 0.21253954535655406;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.2243270462812591);
    msg.setSource(55826U);
    msg.setSourceEntity(85U);
    msg.setDestination(35677U);
    msg.setDestinationEntity(85U);
    msg.action = 178U;
    msg.longain = 0.23386275045670513;
    msg.latgain = 0.9338318274853583;
    msg.bondthick = 2381110070U;
    msg.leadgain = 0.9116759474230396;
    msg.deconflgain = 0.08608259431155574;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.8381760348165721);
    msg.setSource(11323U);
    msg.setSourceEntity(110U);
    msg.setDestination(2915U);
    msg.setDestinationEntity(38U);
    msg.action = 19U;
    msg.longain = 0.2685061644109955;
    msg.latgain = 0.13150503085012588;
    msg.bondthick = 3610441278U;
    msg.leadgain = 0.42439933523431983;
    msg.deconflgain = 0.538604317858227;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.8980363026939485);
    msg.setSource(32651U);
    msg.setSourceEntity(55U);
    msg.setDestination(43459U);
    msg.setDestinationEntity(203U);
    msg.err_mean = 0.6699175287873025;
    msg.dist_min_abs = 0.21263952083907567;
    msg.dist_min_mean = 0.1830684570583344;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.6392087119086943);
    msg.setSource(27956U);
    msg.setSourceEntity(5U);
    msg.setDestination(29715U);
    msg.setDestinationEntity(22U);
    msg.err_mean = 0.23689259379310212;
    msg.dist_min_abs = 0.5892548510075448;
    msg.dist_min_mean = 0.08152798867738875;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.6136105776063512);
    msg.setSource(11906U);
    msg.setSourceEntity(233U);
    msg.setDestination(53077U);
    msg.setDestinationEntity(27U);
    msg.err_mean = 0.5383524608485554;
    msg.dist_min_abs = 0.07059195937148666;
    msg.dist_min_mean = 0.21248678752765926;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.5019017742775463);
    msg.setSource(29067U);
    msg.setSourceEntity(201U);
    msg.setDestination(30733U);
    msg.setDestinationEntity(205U);
    msg.action = 59U;
    msg.lon_gain = 0.4737632887125681;
    msg.lat_gain = 0.8719217196866796;
    msg.bond_thick = 0.8429671397979588;
    msg.lead_gain = 0.6329193022260725;
    msg.deconfl_gain = 0.9022795526409312;
    msg.accel_switch_gain = 0.36834117330072147;
    msg.safe_dist = 0.5935974527817693;
    msg.deconflict_offset = 0.44429461429228145;
    msg.accel_safe_margin = 0.8936812880634368;
    msg.accel_lim_x = 0.38052208572696977;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.6936820161294032);
    msg.setSource(16268U);
    msg.setSourceEntity(137U);
    msg.setDestination(24812U);
    msg.setDestinationEntity(105U);
    msg.action = 60U;
    msg.lon_gain = 0.945534978034138;
    msg.lat_gain = 0.7465529901505995;
    msg.bond_thick = 0.5598734811625312;
    msg.lead_gain = 0.19528238466214876;
    msg.deconfl_gain = 0.2584735281743812;
    msg.accel_switch_gain = 0.2504176085393176;
    msg.safe_dist = 0.45412644770166555;
    msg.deconflict_offset = 0.40531134896147225;
    msg.accel_safe_margin = 0.31528860121066904;
    msg.accel_lim_x = 0.48223130286457117;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.9965116945692722);
    msg.setSource(5998U);
    msg.setSourceEntity(51U);
    msg.setDestination(45761U);
    msg.setDestinationEntity(124U);
    msg.action = 26U;
    msg.lon_gain = 0.16855165753396184;
    msg.lat_gain = 0.5306207107501058;
    msg.bond_thick = 0.2538409647833052;
    msg.lead_gain = 0.2401862899543581;
    msg.deconfl_gain = 0.7724883819970075;
    msg.accel_switch_gain = 0.447287412344354;
    msg.safe_dist = 0.17636523546561167;
    msg.deconflict_offset = 0.450136628267402;
    msg.accel_safe_margin = 0.6866683498706067;
    msg.accel_lim_x = 0.44493626102679584;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.09596428945411273);
    msg.setSource(8881U);
    msg.setSourceEntity(178U);
    msg.setDestination(52676U);
    msg.setDestinationEntity(37U);
    msg.type = 123U;
    msg.op = 151U;
    msg.err_mean = 0.34248752181256825;
    msg.dist_min_abs = 0.9602989112767977;
    msg.dist_min_mean = 0.5545907649708844;
    msg.roll_rate_mean = 0.36018463930730593;
    msg.time = 0.768624353803372;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 115U;
    tmp_msg_0.lon_gain = 0.8265873170039609;
    tmp_msg_0.lat_gain = 0.7647382472571249;
    tmp_msg_0.bond_thick = 0.5252899209495598;
    tmp_msg_0.lead_gain = 0.6126019440404942;
    tmp_msg_0.deconfl_gain = 0.13852196388241556;
    tmp_msg_0.accel_switch_gain = 0.5382998719846278;
    tmp_msg_0.safe_dist = 0.8599729560771499;
    tmp_msg_0.deconflict_offset = 0.6875637468484923;
    tmp_msg_0.accel_safe_margin = 0.5566413954432031;
    tmp_msg_0.accel_lim_x = 0.49165820490748124;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.14852850510102578);
    msg.setSource(53702U);
    msg.setSourceEntity(250U);
    msg.setDestination(48885U);
    msg.setDestinationEntity(13U);
    msg.type = 145U;
    msg.op = 243U;
    msg.err_mean = 0.4461497419926933;
    msg.dist_min_abs = 0.6657499981382967;
    msg.dist_min_mean = 0.042538150066680935;
    msg.roll_rate_mean = 0.844746634136658;
    msg.time = 0.013337737200009081;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 221U;
    tmp_msg_0.lon_gain = 0.3824379041446403;
    tmp_msg_0.lat_gain = 0.06378584295245715;
    tmp_msg_0.bond_thick = 0.6021968164012271;
    tmp_msg_0.lead_gain = 0.378577262524291;
    tmp_msg_0.deconfl_gain = 0.7518174345198732;
    tmp_msg_0.accel_switch_gain = 0.15549950013396285;
    tmp_msg_0.safe_dist = 0.055099369293417744;
    tmp_msg_0.deconflict_offset = 0.31989944083142974;
    tmp_msg_0.accel_safe_margin = 0.9300017983210337;
    tmp_msg_0.accel_lim_x = 0.2765339454545235;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.5943066617143816);
    msg.setSource(13338U);
    msg.setSourceEntity(185U);
    msg.setDestination(5884U);
    msg.setDestinationEntity(58U);
    msg.type = 109U;
    msg.op = 75U;
    msg.err_mean = 0.7505771683685987;
    msg.dist_min_abs = 0.6962246328210732;
    msg.dist_min_mean = 0.9869176085604149;
    msg.roll_rate_mean = 0.3514578605245755;
    msg.time = 0.38634450494139305;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 25U;
    tmp_msg_0.lon_gain = 0.16604188644976736;
    tmp_msg_0.lat_gain = 0.45211058905574686;
    tmp_msg_0.bond_thick = 0.5802806801631284;
    tmp_msg_0.lead_gain = 0.7384435124258049;
    tmp_msg_0.deconfl_gain = 0.013275954399018408;
    tmp_msg_0.accel_switch_gain = 0.22419201630186336;
    tmp_msg_0.safe_dist = 0.5824595051583161;
    tmp_msg_0.deconflict_offset = 0.10965268715253629;
    tmp_msg_0.accel_safe_margin = 0.634266927092309;
    tmp_msg_0.accel_lim_x = 0.02136283535379424;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.8960075523604831);
    msg.setSource(8104U);
    msg.setSourceEntity(147U);
    msg.setDestination(21987U);
    msg.setDestinationEntity(92U);
    msg.lat = 0.4140792368221349;
    msg.lon = 0.35092889012754225;
    msg.eta = 3472351100U;
    msg.duration = 41815U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.22185999929276468);
    msg.setSource(55927U);
    msg.setSourceEntity(127U);
    msg.setDestination(44605U);
    msg.setDestinationEntity(169U);
    msg.lat = 0.47365860721128494;
    msg.lon = 0.04582363602285966;
    msg.eta = 4015766179U;
    msg.duration = 15063U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.11705683636301933);
    msg.setSource(16133U);
    msg.setSourceEntity(88U);
    msg.setDestination(39322U);
    msg.setDestinationEntity(6U);
    msg.lat = 0.8503665466685535;
    msg.lon = 0.8250878223084693;
    msg.eta = 4039249604U;
    msg.duration = 52015U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.8189439808466963);
    msg.setSource(52989U);
    msg.setSourceEntity(220U);
    msg.setDestination(41843U);
    msg.setDestinationEntity(43U);
    msg.plan_id = 56981U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.3615956284767917);
    msg.setSource(21459U);
    msg.setSourceEntity(203U);
    msg.setDestination(37791U);
    msg.setDestinationEntity(223U);
    msg.plan_id = 19666U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.0405184740197877);
    msg.setSource(15697U);
    msg.setSourceEntity(190U);
    msg.setDestination(5443U);
    msg.setDestinationEntity(182U);
    msg.plan_id = 34251U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.47498050781086865;
    tmp_msg_0.lon = 0.21267896082414373;
    tmp_msg_0.eta = 129844088U;
    tmp_msg_0.duration = 7141U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.13561396524825853);
    msg.setSource(26327U);
    msg.setSourceEntity(150U);
    msg.setDestination(447U);
    msg.setDestinationEntity(191U);
    msg.type = 213U;
    msg.command = 152U;
    msg.settings.assign("BBOTAGZFYSWEEULRWYMJOGHAMOHDALWPVVJLHQFVSZRUXLPGTFRAYWLGNXSGFOBPRWLQUOSHPLDDKVWATZNMCDSPHKATHYJYABUNVQUURGJSPYMXNJCCGOIPCXOBTGEIQBWHKKTGICJIUEFSNQESUXONMTDZIKFYBCTCMBNJSHXPTJEETIVXQIXKYNBJDIDZNWOYQVRRDUKVA");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 51072U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.8594586562444196;
    tmp_tmp_msg_0_0.lon = 0.758690430902387;
    tmp_tmp_msg_0_0.eta = 2849275471U;
    tmp_tmp_msg_0_0.duration = 592U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("CRJDICNTXOLKYNRUVHLFIDHFHMGKZHRKSEMNSPRFHTVTXSSZWUYHXTMDWEBVHYZLVQWMYKKSTJJBOEHUNVJMLYXWJIBQBQYJCGFGRIMADOGXEKZGASNOPVAAANYUATZTZBUYOLIVPPZHZGSKBPLROPFWDQXCDDB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.5056508431912872);
    msg.setSource(748U);
    msg.setSourceEntity(60U);
    msg.setDestination(55613U);
    msg.setDestinationEntity(129U);
    msg.type = 238U;
    msg.command = 119U;
    msg.settings.assign("QQYVTMNYMAHDZTOWQWUIIUHTLWJNKBATZHSFJAVTYTEMQJEQWHPQZDXYSLEK");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 1335U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.3623509608816229;
    tmp_tmp_msg_0_0.lon = 0.5586809577598859;
    tmp_tmp_msg_0_0.eta = 287450648U;
    tmp_tmp_msg_0_0.duration = 50791U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("BRVUZVFATOGLQFZOCUMWRHYSJYCQINLYJPULHGMVZMSPGTSPAEWQUFGMVAEGFKTYXBZRSZP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.2528779538366883);
    msg.setSource(57039U);
    msg.setSourceEntity(77U);
    msg.setDestination(39836U);
    msg.setDestinationEntity(122U);
    msg.type = 102U;
    msg.command = 13U;
    msg.settings.assign("BIMNMYWRRTPVHQQTYIXWZKFFABYAXTRHGPVTQSEAITYXWVJLHUCFDSZSKMMNENFMBFBROWOPGS");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 65469U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("JLYHOTBEFGIOFWNEWZXGRSLFNZOEVOPDFKYTILJABUXOPQVMRXBBUVRCZMEIZWBFYNJOQGWAKCDQTFQUWNWUIXYOEGYDBIFDRZFUXIMHWXDLGPOCEPLLSTRONNSPRHJGTEDYUVXVUARGSHVSJDBDPRSNKOHBSDUTKZIMRBLNHGZHCSRJJQCLKECZJLXWMIDFJTVJQQPAPAMHFCHKUVSYBWIANCQMEAYCVLNCTQHQPKITTEUGPWVKZYYGSK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.44277203435984);
    msg.setSource(30147U);
    msg.setSourceEntity(34U);
    msg.setDestination(12833U);
    msg.setDestinationEntity(161U);
    msg.state = 88U;
    msg.plan_id = 57799U;
    msg.wpt_id = 44U;
    msg.settings_chk = 35893U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.6994970753935427);
    msg.setSource(5324U);
    msg.setSourceEntity(37U);
    msg.setDestination(14522U);
    msg.setDestinationEntity(28U);
    msg.state = 6U;
    msg.plan_id = 25113U;
    msg.wpt_id = 135U;
    msg.settings_chk = 34074U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.9045159294531836);
    msg.setSource(8500U);
    msg.setSourceEntity(164U);
    msg.setDestination(8387U);
    msg.setDestinationEntity(150U);
    msg.state = 66U;
    msg.plan_id = 26443U;
    msg.wpt_id = 124U;
    msg.settings_chk = 15896U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.7882444638009771);
    msg.setSource(34280U);
    msg.setSourceEntity(171U);
    msg.setDestination(12505U);
    msg.setDestinationEntity(152U);
    msg.uid = 234U;
    msg.frag_number = 210U;
    msg.num_frags = 213U;
    const signed char tmp_msg_0[] = {60, -56, -95, -5, -9, -98, 122, -127, 103, 44, 26, -110, 14, -9, 97, 1, -10, -30, 39, -110, 57, -103, -43, -94, 112, 89, -58, 16, 95, -2, 6, -47, 119, 77, 8, 49, 52, -50, -45, 101, -22, -105, -64, -79, -101, -128, -106, -9, 8, 41, -57, 122, -63, -62, 33, -71, -35, -97, -81, 25, -20, -88, 21, -22, 66, -21, -123, -72, -107, 97, 121, -117, 80, -84, -110, 80, -31, 30, 74, -122, -76, 96, 9, 121, 80, -14, -100, -31, 40, 62, 55, -54, 93, 26, -40, 116, 22};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.10416537607694498);
    msg.setSource(31865U);
    msg.setSourceEntity(34U);
    msg.setDestination(49240U);
    msg.setDestinationEntity(206U);
    msg.uid = 19U;
    msg.frag_number = 218U;
    msg.num_frags = 63U;
    const signed char tmp_msg_0[] = {110, -102, -103, 74, -38, 29, 85, -88, 7, 38, 78, 107, 26, -61, 123, 23, -19, -123, -51, 97, -65, 93, -91, -86, 18, 88, -80, -13, 124, 125, -43, -72, -77, 83, 17, 52, -122, -104, 7, -54, -37, 120, -99, 57, -5, -115, -28, -14, 32, 99, -33, 112, -7, -20, -67, -120, 106, -88, -67, -10, -103, 83, 77, -42, -41, 96, -66, 67, 19, -85, -23, -39, -72, 37, 54, 55, -31, -41, 60, 19, -4, -22, 66, -54, 34, 12, 62, 24, -64, -91, 23, -66, -28, -23, -18, -67, -38, -54, 61, 96, -107, -50, -32, -3, 79};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.921734250614122);
    msg.setSource(2918U);
    msg.setSourceEntity(178U);
    msg.setDestination(7847U);
    msg.setDestinationEntity(194U);
    msg.uid = 126U;
    msg.frag_number = 216U;
    msg.num_frags = 206U;
    const signed char tmp_msg_0[] = {-13, -51, 6, -25, -22, 59, -112, 55, -82, -36, 26, 91, 84, -84, -60, -100, -68, -34, -2, 25, -35, -12, -38, 53, 26, 58, -35, 53, 25, 119, 82, -21, -22, 9, -52, 103, -39, 32, 107, -59, 71, 53, -66, -31, 9, -41, 43, -5, 85, -5, -123, 122, -103, 99, 126, -76, 9, -24, -26, 90, -39, 31, -55, -10, 105, -102, 13, 47, -111, -122, 82, 69, -4, 44, -58, -58, 88, 35, -20, 104, -8, 92, 117, -43, -66, 94, -35, 65, 112, -106, -70, 20, 116, 111, -28, 31, 38, 19, 69, 55, 83, 48, 56, 93, 91, -2, -85, 108, 8, 126, 17, 102, -99, 1, -38, 88, 35, -82, -101, -86, -75, -55, -127, 10, 95, -124, 113, 59, -85, -40, -17, -42, 113, -73, -72, 29, 115, 30, 113, -121, 97, 95, -39, 115, 89, -84, -6, 54, -11, -108, 103, -42, -114, 112, 91, -59, -71, 46, 66, 1, 19, -53, -48, -98, 43, 9, 126, -126, -13, -1, 6, -125, -80, -59, 60, 39, -7, -116, 77, 102, -35, -122, 47, 104, -78, -94, 55, 93, 25, -43, -13, -45, -103, -36, 67, 110, 45, -11, 33, -43, 106, 37, 94, 44, 1, 11, 83, 18, -26, 126, 74, 77, 57, -13, -44, -43, 52, 10, 43};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.4440081925727678);
    msg.setSource(18362U);
    msg.setSourceEntity(238U);
    msg.setDestination(26535U);
    msg.setDestinationEntity(249U);
    msg.content_type.assign("YMNCVUKHITSFTRXTVGXBNBZEMNRKOGGHGHIDWXJSIYRJWJJEWULCIMNVQIQJWWT");
    const signed char tmp_msg_0[] = {-12, 51, 12, -66, -110, 89, -70, -65, 36, 44, 98, -73, -102, -53, 45, -102, -110, 115, -19, 80, -23, 103, 116, -24, -29, -115, -125, -115, -1, 53, -126, 123, -97, -74, 73, 15, 46, -86, 47, -37, -30, -87, -21, 81, 96, 28, -97, 105, 74, -91, -92, 59, 39, -76, -18, -73, 12, -79, 53, -63, -32, -18, 39};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.7899903034803578);
    msg.setSource(28061U);
    msg.setSourceEntity(11U);
    msg.setDestination(8250U);
    msg.setDestinationEntity(25U);
    msg.content_type.assign("PKTGUEYZOVFHVYRDOTQNDOZQXUSZTQCPRWJHLFGLOAIVTGNGBEMNULGWUJZDAGPJMWYYJXQXRTIINRICTUTMDUEMZRCNROIQDKRDYITAFSXFPJMNEKVSCPIOCPYQQSFVUFXPVHVYNNEXMTHVJBZAFEDQHZUSAKGCBNVUIWQRIGASWSJWBBQX");
    const signed char tmp_msg_0[] = {14, 0, 40, 93, -2, -16, -63, 49, -64, 16, -45, -69, -66, 124, 55, 37, -62, 31, -29, 86, 105, 120, 77, 41, -82, 52, -29, 83, 78, -127, 69, -58, -128, 87, -78, 45, 38, 48, -73, -22, 3, 101, -72, -128, 59, 102, -109, 26, 10, 97, 113, -54, 108, -31, 107, -91, -3, 7, 17, -121, 92, -58, 68, -29, -68, 87, -38, -125, 81, -71, 122, 80, -111, 57, -6, 49, -70, -67, 44, -81, 77, 27, -37, 61, -38, -69, 53, 87, 98, -67, -116, 23, -39, 43, -28, -27, 121, -108, 22, -94, -70, -107, 55, 17, 34, -25, 53, -92, -62, 69, -87, 42, -6, 12, 8, -75, -115, -3, 101, 98, 100, 42, -88, 44, -15, -122, -126, 37, -116, 69, -29, -106, -48, 111, -9, 26, -124, 59, 67, 26, 63, -32, 37, 23, 17, 2, 109, -11, -75, 32, 110, -18, -54, 49, 24, 22, -26, 15, -95, -124, 4, -71, -40, 78, 97, -38, -126, 119, 32, -25, 93, 46, -53, 92, -59, -77, 43, 47, 31, -103, -5, -123, 58, -17, 17, 117, -42, -19, 6, -30, -100, -68, 109, 69, 30, 37, -108, 90, 84, -111, -77, -54, 85, 77, 92, -80, -20, 94, 73, 61, -76, 60, 91, 45, 84, 69, 125, -112, -86, 76, 12, -8, 30, -100, -4, 14, 67, -71, 40, -78, -111, 74, -95, 101, -101, 11, 123, -27, 45};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.39852816377354605);
    msg.setSource(15923U);
    msg.setSourceEntity(179U);
    msg.setDestination(61443U);
    msg.setDestinationEntity(232U);
    msg.content_type.assign("TPWVDWBNJJKYVLZLOBIDJSSSOIMHSPFHQEQDQOUEXUGPIWRUGPUQVUKPSFZHXR");
    const signed char tmp_msg_0[] = {66, 43, 43, -79, 112, 24, 87, 91, 56, -23, -99, 95, 94, 79, 55, -30, -71, 49, 55, 62, -117, 30};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.29142366256305763);
    msg.setSource(40071U);
    msg.setSourceEntity(169U);
    msg.setDestination(19546U);
    msg.setDestinationEntity(142U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.5939374663682107);
    msg.setSource(42661U);
    msg.setSourceEntity(24U);
    msg.setDestination(19456U);
    msg.setDestinationEntity(10U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.4858461124627198);
    msg.setSource(15807U);
    msg.setSourceEntity(28U);
    msg.setDestination(63054U);
    msg.setDestinationEntity(227U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.8448452189334743);
    msg.setSource(41147U);
    msg.setSourceEntity(108U);
    msg.setDestination(4576U);
    msg.setDestinationEntity(219U);
    msg.target = 29646U;
    msg.bearing = 0.6135808364372742;
    msg.elevation = 0.7875476665228096;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.4584022676384858);
    msg.setSource(9543U);
    msg.setSourceEntity(219U);
    msg.setDestination(21460U);
    msg.setDestinationEntity(37U);
    msg.target = 21290U;
    msg.bearing = 0.01251513439591967;
    msg.elevation = 0.11191732135225652;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.3218502630913852);
    msg.setSource(10300U);
    msg.setSourceEntity(70U);
    msg.setDestination(61545U);
    msg.setDestinationEntity(198U);
    msg.target = 34522U;
    msg.bearing = 0.6396514044333328;
    msg.elevation = 0.8029120274307034;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.8449619777970162);
    msg.setSource(48558U);
    msg.setSourceEntity(183U);
    msg.setDestination(59284U);
    msg.setDestinationEntity(247U);
    msg.target = 27142U;
    msg.x = 0.36489282360658515;
    msg.y = 0.7592548516597991;
    msg.z = 0.2254724023439656;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.9361127038867475);
    msg.setSource(42419U);
    msg.setSourceEntity(158U);
    msg.setDestination(62002U);
    msg.setDestinationEntity(72U);
    msg.target = 38539U;
    msg.x = 0.47606815695929217;
    msg.y = 0.48622438960806236;
    msg.z = 0.27010035034502455;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.763222375169269);
    msg.setSource(34663U);
    msg.setSourceEntity(239U);
    msg.setDestination(6509U);
    msg.setDestinationEntity(37U);
    msg.target = 54262U;
    msg.x = 0.9585335832072319;
    msg.y = 0.9737952296633702;
    msg.z = 0.23417805009713377;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.14671942450017694);
    msg.setSource(26650U);
    msg.setSourceEntity(246U);
    msg.setDestination(57215U);
    msg.setDestinationEntity(210U);
    msg.target = 24591U;
    msg.lat = 0.20354075923756465;
    msg.lon = 0.8256677231838545;
    msg.z_units = 103U;
    msg.z = 0.8289204638239892;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.4932285090293711);
    msg.setSource(16446U);
    msg.setSourceEntity(100U);
    msg.setDestination(293U);
    msg.setDestinationEntity(23U);
    msg.target = 37883U;
    msg.lat = 0.4946800230002555;
    msg.lon = 0.6818063175463351;
    msg.z_units = 118U;
    msg.z = 0.047069847008668675;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.3006710095628735);
    msg.setSource(10865U);
    msg.setSourceEntity(71U);
    msg.setDestination(40183U);
    msg.setDestinationEntity(217U);
    msg.target = 26299U;
    msg.lat = 0.9878223474497672;
    msg.lon = 0.5697971927058715;
    msg.z_units = 19U;
    msg.z = 0.6467831906896495;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.5122982800513524);
    msg.setSource(35992U);
    msg.setSourceEntity(137U);
    msg.setDestination(35147U);
    msg.setDestinationEntity(21U);
    msg.locale.assign("DHJWIJLNXQVXUZXBSFMSZAWUESIRSMZAYBDBFEJEVQZHUQSEYUBVJJAFZPKJXGMTIPWYPIKJLASGCWCHHSVXNGZAENFBBLLLYAWECTTKYDRQTPMGIOXUPVDJ");
    const signed char tmp_msg_0[] = {-96, 4, 35, 0, 9, 11, 72, 82, 97, -104, -116, -121, -26, -14, 67, 31, -30, -101, -98, 11, 53, -88, 105, -79, -51, 60, 107, -28, -90, 90, 117, -71, 123, -34, -13, 69, -38, -6, -115, 51, -104, -86, -42, 47, -125, -52, 2, -49, -15, -17, -20, 95, 42, 89, -76, 4, -128, -56, -116, 93, 106, 92, -29, 21, -56, -70, 41, 75, -11, 44, 12, 32, -25, -79, 18, 69, 0, -94, 115, 40, 75, -84, 10, -8, -92, -4, 61, 40, -57, -28, 41, -57, -22, 34, 20, -73, -22, 107, -32, -106, -35, -92, 16, -86, -6, -33, -68, 95, -82, 123, 101, -55, -1, 1, 51, -69, -96, -2, -88, 126, 113, 71, 24, 110, 101, 100, 98, 36, 78, -71, -128, -81, 98, -7, 0, -44, 73, -114, 41, -84, 82, 28, 91, -9, 112, -38, -82, 29, 117, 116, -52, 41, -36, 47, -72, 63, 108, -17, -86, 56, -31, 88, -31, -9, 61, 92, -7, 124, -38, 126, -71, -37, 10, 23, 56, 78, -43, -107, 21, 8, -50, -88, -47, 107, -4, -75, -31, -52, 94, 55, -26, 14, 33, 72, -127, 21, -45, 117, 124, 95, 26, -51, -92, -33, 4, 76, 90, -64, 112, -94, -116, -57, -36, -25, -28, 125, 42, 109, 22, -114, 125, -56, 40, 19, -41, 80, 34, 29, 17, -14, -48, -52, 0, 92, 125, -80};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.25500625984708514);
    msg.setSource(12834U);
    msg.setSourceEntity(107U);
    msg.setDestination(32448U);
    msg.setDestinationEntity(22U);
    msg.locale.assign("DFFGWWHYIJPYLHQMKWPKGFIMERZAOSFPOPCBYELAGHXKGUXDVZJEZDMQJZOQKCJBBKTKNEZBANFUDVHCVHDQTPFWAXJQJTRJNIJUEYLNNFXDKPMECJQLGHGVEQOSHMYBATZDXZYQXNVERKOVZXRIUBWRVHLHBAMOCSIMMNRUBBSWPTAPLTWMKDOLTLMZIASGJLSWGUNCENCCPQYRIIUOCD");
    const signed char tmp_msg_0[] = {22, 17, 123, -9, 98, -85, 21, 84, -123, 5, -70, 110, -71, -32, -20, 91, -23, 10, -18, 63, -92, -35, 113, -40, 101, 69, -18, 57, 97, -40, 55, -20, 108, -100, 39, -74, 63, 13, 39, 46, -39, 21, -38, 46, -12, -38, 24, -28, 78, 35, -94, -36, 18, 64, -117, 15, 96, -3, 37, 45, -59, 111, 20, -31, -84, 123, -34, -95, 125, -28, 84, -22, -81, 117, 74, -75, -107, -109, 39, 48, -128, 72, 82, 81, -11, -25, 57, -56, -109, 11, -98, 36, -68, 35, -63, 84, 23, -127, 111, -111, -89, -51, 54, 35, 6, 79, 92, 59, -90, -101, -98, -116, 118, -50, -39, -94, 94, 105, -32};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.7397793064854479);
    msg.setSource(26437U);
    msg.setSourceEntity(124U);
    msg.setDestination(25324U);
    msg.setDestinationEntity(170U);
    msg.locale.assign("IHYKMUZWXYQYOXNIIWNYTIXUGMUFOBBCAORZZCSTBTEYVVDEABLWCEMKXHKXOATKYNJOEEMQBBFEQACZHDLPAIWRULGXSLGUAWJTLCJPQHFTGYLQMVLLOQFHGJVMVCONWUZYIWIIPSVLEKIEKSZSYDRPAPJMMWHGGXEXZVUPXFYOEFJADHFNCKDRPJPFRPDKQQSZHSWFNRDASHSFQGXCBTV");
    const signed char tmp_msg_0[] = {-87, 40, -19, -98, -35, 15, 79, -71, 69, 45, 45, 29, -23, -52, 119, 27, 3, -19, -1, -24, 76, -13, -108, -113, 36, 44, 106, -89, 116, 3, 89, 47, 76, -25, -89, -97, -32, -128, -36, -27, -43, 68, -123, 93, 112, 23, -120, 35, 105, -118, 42, 69, 61, -106, -67, -46, 82, 42, -83, 23, -58, -87, -95, -57, 108, -44, -1, -22, 101, 12, -14, -3, 103, 47, -32, -53, 0, -111, 97, 72, 114, -114, -29, 86, 23, -97, -65, 39, -124, 11, -94, -36, 64, -28, 45, -49, 23, 71, 35, -3, 111, 84, -118, -120, 93, -89, 25, 27, 110, 105, -114, -88, -54, 54, -121, 4, -110, -74, -51, 13, -119, -18, 125, 125, 99, 66, -60, -44, 27, 62, 110, -72, -106, -21, 74, -11, 99, -40, -87, -71, -124, -23, 126, 117, -39, -123, -107, 42, 46, -104, 71, 44, 89, -20, 27, 28, -67, 37, -53, 113, -72, -75, 41, 14, -5, 96, -74, 63, 104, -124, 23, 28, -90, -67, -33, -126, -41, -66, -117, 75};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.44131970348838423);
    msg.setSource(12345U);
    msg.setSourceEntity(75U);
    msg.setDestination(179U);
    msg.setDestinationEntity(241U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.5844502272695876);
    msg.setSource(59433U);
    msg.setSourceEntity(82U);
    msg.setDestination(33525U);
    msg.setDestinationEntity(44U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.488963830409214);
    msg.setSource(37529U);
    msg.setSourceEntity(201U);
    msg.setDestination(49013U);
    msg.setDestinationEntity(51U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.14090612972994854);
    msg.setSource(3560U);
    msg.setSourceEntity(49U);
    msg.setDestination(60811U);
    msg.setDestinationEntity(64U);
    msg.camid = 211U;
    msg.x = 23678U;
    msg.y = 3441U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.9486448026637758);
    msg.setSource(4705U);
    msg.setSourceEntity(196U);
    msg.setDestination(34757U);
    msg.setDestinationEntity(219U);
    msg.camid = 67U;
    msg.x = 29473U;
    msg.y = 46534U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.12369800984813295);
    msg.setSource(48587U);
    msg.setSourceEntity(52U);
    msg.setDestination(58345U);
    msg.setDestinationEntity(123U);
    msg.camid = 148U;
    msg.x = 37635U;
    msg.y = 50122U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.488019154194805);
    msg.setSource(45724U);
    msg.setSourceEntity(31U);
    msg.setDestination(57527U);
    msg.setDestinationEntity(242U);
    msg.camid = 125U;
    msg.x = 14866U;
    msg.y = 35118U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.7942800015240921);
    msg.setSource(22432U);
    msg.setSourceEntity(154U);
    msg.setDestination(64265U);
    msg.setDestinationEntity(23U);
    msg.camid = 82U;
    msg.x = 40727U;
    msg.y = 36561U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.7037789423015827);
    msg.setSource(19727U);
    msg.setSourceEntity(39U);
    msg.setDestination(58715U);
    msg.setDestinationEntity(163U);
    msg.camid = 188U;
    msg.x = 11264U;
    msg.y = 30399U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.9591694268933213);
    msg.setSource(57465U);
    msg.setSourceEntity(222U);
    msg.setDestination(47516U);
    msg.setDestinationEntity(202U);
    msg.tracking = 72U;
    msg.lat = 0.6175890871178401;
    msg.lon = 0.9495751363163827;
    msg.x = 0.024309844512643508;
    msg.y = 0.7455169806362254;
    msg.z = 0.24587359518747742;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.7166032859666794);
    msg.setSource(28101U);
    msg.setSourceEntity(204U);
    msg.setDestination(42710U);
    msg.setDestinationEntity(176U);
    msg.tracking = 124U;
    msg.lat = 0.6099866797115099;
    msg.lon = 0.390140553841539;
    msg.x = 0.4003522293528755;
    msg.y = 0.6155963455047352;
    msg.z = 0.37038893499233816;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.2376833112259139);
    msg.setSource(61948U);
    msg.setSourceEntity(170U);
    msg.setDestination(24058U);
    msg.setDestinationEntity(210U);
    msg.tracking = 169U;
    msg.lat = 0.9228827454615587;
    msg.lon = 0.5488289848686365;
    msg.x = 0.07732003291441514;
    msg.y = 0.4753990876631742;
    msg.z = 0.8834802875594562;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.7216963712569413);
    msg.setSource(24108U);
    msg.setSourceEntity(167U);
    msg.setDestination(23374U);
    msg.setDestinationEntity(79U);
    msg.target.assign("TUZAXQYMDZCLJBDPACKVAOPJRRQBKAWFEMPSDHMXVOCBGMXFNBADVFTONIRQEXSULQCVKRIUWZEGZKZBTSHLJDVCJJAEXGEFKUWGRXDKWOSHNZNVWRLLVPFCPULMOJZMPNIGIYQJFNPTXWTLIGKAQTUZQBZUONHYTBALYTGEDYRAGXOHHUBSMQEFAUIOMIWBINSYCGXNOIDLRSLKNVFUSFJRPCBQTCWYTKVKCPIEHMSQYDJYH");
    msg.lbearing = 0.7901869708139617;
    msg.lelevation = 0.5076304828658839;
    msg.bearing = 0.2875577300646117;
    msg.elevation = 0.2277448857093568;
    msg.phi = 0.9196444886430202;
    msg.theta = 0.8912145826310598;
    msg.psi = 0.87432921145408;
    msg.accuracy = 0.22325812008435497;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.841122382522239);
    msg.setSource(64303U);
    msg.setSourceEntity(75U);
    msg.setDestination(47470U);
    msg.setDestinationEntity(51U);
    msg.target.assign("PBHAEXWWQNEAFULOKQLOTQIQJPQYCARXIYQHZOJCSLGRFWKSYFBOQCAEZHFWDFFPNJILGWRXQJSQYKEEDCBIXGWVXBEBUMHWMZJPHSCTJKUVUTODNMSDNADDU");
    msg.lbearing = 0.26023451341678727;
    msg.lelevation = 0.7811598686983798;
    msg.bearing = 0.5089727908530683;
    msg.elevation = 0.10794035197430696;
    msg.phi = 0.5115182885836823;
    msg.theta = 0.16842559926106648;
    msg.psi = 0.7839016723316238;
    msg.accuracy = 0.4812075530655503;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.45149248780807916);
    msg.setSource(16453U);
    msg.setSourceEntity(148U);
    msg.setDestination(51391U);
    msg.setDestinationEntity(219U);
    msg.target.assign("OOVGXEVXJNBYELEHQHIMXZUXZLSFTINXTBORJMUHCFHIQYCVIQHIJEYKCUKAILGALGMKTFNXQACVGUSKLNWIYUWVQGUBRRKLYPXPOTQTPBDJNEIPZOJRDAMAPEGNZMZEXSBYOPNRRLZCCSWMFDCBD");
    msg.lbearing = 0.4863397519625091;
    msg.lelevation = 0.02120440331175344;
    msg.bearing = 0.4318159769180936;
    msg.elevation = 0.5463614594167171;
    msg.phi = 0.9263136261895657;
    msg.theta = 0.3247642265040904;
    msg.psi = 0.8872385855149505;
    msg.accuracy = 0.21956675646847457;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.5400819496975257);
    msg.setSource(34868U);
    msg.setSourceEntity(214U);
    msg.setDestination(22939U);
    msg.setDestinationEntity(27U);
    msg.target.assign("IOCUBJEBXSDWLDSWHWZAVSWOPXLYB");
    msg.x = 0.4456749094657888;
    msg.y = 0.43247619076454114;
    msg.z = 0.986213538465667;
    msg.n = 0.2953395025620499;
    msg.e = 0.08763321967794913;
    msg.d = 0.019116612535009625;
    msg.phi = 0.6825613300614696;
    msg.theta = 0.05728049776293154;
    msg.psi = 0.24682922320773537;
    msg.accuracy = 0.6644193105460169;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.35246755887762826);
    msg.setSource(20527U);
    msg.setSourceEntity(7U);
    msg.setDestination(63111U);
    msg.setDestinationEntity(92U);
    msg.target.assign("KMVIHYOYHNVFQXVOABQACCAEAVHHZIDGYFDLIWGFLRPNOCHUD");
    msg.x = 0.6108220604993901;
    msg.y = 0.17181497497178855;
    msg.z = 0.22410480655218545;
    msg.n = 0.9565905691367265;
    msg.e = 0.5464121770340782;
    msg.d = 0.8466092668256239;
    msg.phi = 0.761068967566461;
    msg.theta = 0.18244048806594348;
    msg.psi = 0.6573484557919443;
    msg.accuracy = 0.02530872032514908;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.08710880503510976);
    msg.setSource(19756U);
    msg.setSourceEntity(115U);
    msg.setDestination(47844U);
    msg.setDestinationEntity(87U);
    msg.target.assign("YSEDPRDKWEZVSMBCQDWZFACWKUUONWLUNZJOUADXMDPZKHONLOZLBVWUITMEYDZPJAALTCLEFWXBFTPXVCFMBPPMHGDKNIQGVBXZDYBACJGQMZCFNOWUVENLSMROXQPOIQUGITBSEOSBHHQMHTKJHQPYXJJVUXFCUYHTYGDJSOTYFRFYNUEAICRHKKNIRRFXKRQLATJGDXCCSSOTGIYERPGBWISNFLZTQPKLJVRAWVIBHKJGQA");
    msg.x = 0.1992423883733595;
    msg.y = 0.898019599553011;
    msg.z = 0.771216917050316;
    msg.n = 0.3496757496673044;
    msg.e = 0.20142695851262027;
    msg.d = 0.880190755929899;
    msg.phi = 0.14419291013775126;
    msg.theta = 0.3214404536854518;
    msg.psi = 0.6071712548989651;
    msg.accuracy = 0.9518431941477836;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.8948720041146805);
    msg.setSource(15733U);
    msg.setSourceEntity(146U);
    msg.setDestination(42304U);
    msg.setDestinationEntity(181U);
    msg.target.assign("NCFWQRWOTFXZSVGDEZYYLOEUGPFAECXNMGOJSYWDCITZWDTGMAPSTTPANBPXMHEANLXRIAHIYWLKNSBGEEHOKPFSDHIMBCTFOQIVOMJRMZ");
    msg.lat = 0.7540980245907551;
    msg.lon = 0.2555094007300661;
    msg.z_units = 241U;
    msg.z = 0.3822971360608972;
    msg.accuracy = 0.04979245578998248;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.7586676850127269);
    msg.setSource(5785U);
    msg.setSourceEntity(157U);
    msg.setDestination(21465U);
    msg.setDestinationEntity(110U);
    msg.target.assign("WHJEMJXFULTBKPQTVKRERADXQWHANARSNHXZSSUDDZGOQLEHVIFDOZNFFKAI");
    msg.lat = 0.7347115269771864;
    msg.lon = 0.27458824028006545;
    msg.z_units = 231U;
    msg.z = 0.011588232563124579;
    msg.accuracy = 0.39793706685336405;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.7140698646699635);
    msg.setSource(30275U);
    msg.setSourceEntity(114U);
    msg.setDestination(35432U);
    msg.setDestinationEntity(19U);
    msg.target.assign("VFGPWVNQHBPCLSLZHRGCBGWMNGDDYRVKCWFPCNMIOORFIEMDXTTDWJAVUUEHMAGBSKOQQAUTPKZJSDZOKAQSVVVULXNCTIEXPBJDNFANDTLOTWJCZILQIMKNHMNCJWUGQWZASFXOIGWYBTXXYCFVXUZYBJGZOQSUSCFGSHIQVRAHDMYPBTRPMPFVNFENUZSJMWTHXYOEJYABMSQFTZPER");
    msg.lat = 0.1326691253744232;
    msg.lon = 0.9030358341483451;
    msg.z_units = 89U;
    msg.z = 0.8967736004382404;
    msg.accuracy = 0.3377473768095054;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.7580792497199574);
    msg.setSource(59077U);
    msg.setSourceEntity(35U);
    msg.setDestination(38456U);
    msg.setDestinationEntity(126U);
    msg.name.assign("TEIDAMVPQLBNQQFLDXAECRQSUKKTACFZEULNYHMYKDHRUWNULFMVYOBRIPRCPQCWINYIHKJDK");
    msg.lat = 0.7591450602813454;
    msg.lon = 0.3882148611270766;
    msg.z = 0.6597591189756058;
    msg.z_units = 43U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.13243075454963305);
    msg.setSource(61015U);
    msg.setSourceEntity(53U);
    msg.setDestination(45595U);
    msg.setDestinationEntity(10U);
    msg.name.assign("QMHEQZDURPKALXFFSYHNJPTDALZMSXAJTIOYNSFLGDNAWDNAMPUBBCAHLWGXCLQERCCHQGCVOYQSBOKSCFPSZRVVMVNVQRKAIIVLSEKGRYWPFQTIBUARJFXUIWZMLYYGWHDEVLUMVBIPYZIKJZBIMKOKVSUDMITHKJOFFOZDMQKPENABEHJWRZHJA");
    msg.lat = 0.9789678499816638;
    msg.lon = 0.9502737246539891;
    msg.z = 0.3780828353557707;
    msg.z_units = 108U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.584467486782535);
    msg.setSource(61240U);
    msg.setSourceEntity(82U);
    msg.setDestination(54582U);
    msg.setDestinationEntity(18U);
    msg.name.assign("MTASKQKQDRNWVQBVMRUQMZLTITGKHYFYNMBXZJJPFUXPZWCRHXIWJYFYZGMVNFQPTBCADCGHEELVMNKAADFFLUNILSXDCUFRRZDPXCVVNFGRLOWRBWBDKHCWPBIEMVHQKQH");
    msg.lat = 0.44849425796786757;
    msg.lon = 0.8345713790128915;
    msg.z = 0.20917611213460774;
    msg.z_units = 209U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.7658740658689759);
    msg.setSource(28403U);
    msg.setSourceEntity(26U);
    msg.setDestination(30624U);
    msg.setDestinationEntity(126U);
    msg.op = 100U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.19499494043844934);
    msg.setSource(332U);
    msg.setSourceEntity(49U);
    msg.setDestination(16080U);
    msg.setDestinationEntity(76U);
    msg.op = 177U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("VLJSYJSVHCSQOCXXBSLDEESOIFXZEHLPEMNUXKAINCITMAGHDKOPEOKTXHKLEQUYPPBDJMJKWLTSTFGYLJCRUIDTOZMVFGMRAVXSYIZRAZUTAQHORVZDTPVHIXLQKDBF");
    tmp_msg_0.lat = 0.020037827109788187;
    tmp_msg_0.lon = 0.9287158777836838;
    tmp_msg_0.z = 0.5691965253648128;
    tmp_msg_0.z_units = 53U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.44052198391981845);
    msg.setSource(15379U);
    msg.setSourceEntity(86U);
    msg.setDestination(45989U);
    msg.setDestinationEntity(138U);
    msg.op = 1U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("MSVHELJDTFVTUJVKLZSCCABRNXIJJRNDKFROTKFYGADLPRLHWZVHNUWEJBNASSERFSJUUMDGAYAWOX");
    tmp_msg_0.lat = 0.5243232357499262;
    tmp_msg_0.lon = 0.03268761701467193;
    tmp_msg_0.z = 0.6089606515006736;
    tmp_msg_0.z_units = 41U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.06254812825160805);
    msg.setSource(42066U);
    msg.setSourceEntity(158U);
    msg.setDestination(6411U);
    msg.setDestinationEntity(41U);
    msg.value = 0.08212119849662047;
    msg.type = 9U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.7424057763709933);
    msg.setSource(39615U);
    msg.setSourceEntity(170U);
    msg.setDestination(61656U);
    msg.setDestinationEntity(190U);
    msg.value = 0.7880499241103344;
    msg.type = 25U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.5437674565166072);
    msg.setSource(45886U);
    msg.setSourceEntity(118U);
    msg.setDestination(28034U);
    msg.setDestinationEntity(137U);
    msg.value = 0.5058714071850254;
    msg.type = 222U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.3386887559048283);
    msg.setSource(36213U);
    msg.setSourceEntity(75U);
    msg.setDestination(43381U);
    msg.setDestinationEntity(149U);
    msg.value = 0.2640433423763149;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.9645865606624752);
    msg.setSource(31390U);
    msg.setSourceEntity(96U);
    msg.setDestination(37306U);
    msg.setDestinationEntity(188U);
    msg.value = 0.523873589635502;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.8221004611770092);
    msg.setSource(62374U);
    msg.setSourceEntity(136U);
    msg.setDestination(49510U);
    msg.setDestinationEntity(224U);
    msg.value = 0.07585166845077784;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.3668862605895329);
    msg.setSource(13423U);
    msg.setSourceEntity(120U);
    msg.setDestination(53872U);
    msg.setDestinationEntity(198U);
    msg.timestamp_last_service = 0.46227330630104646;
    msg.time_next_service = 0.2505976810041908;
    msg.time_motor_next_service = 0.11205552928433626;
    msg.time_idle_ground = 0.5485853666278036;
    msg.time_idle_air = 0.5160719150077081;
    msg.time_idle_water = 0.6238265017121111;
    msg.time_idle_underwater = 0.9207485060625488;
    msg.time_idle_unknown = 0.8193825772495613;
    msg.time_motor_ground = 0.8546739441214212;
    msg.time_motor_air = 0.23988666969584183;
    msg.time_motor_water = 0.9003530082145208;
    msg.time_motor_underwater = 0.03592193942584698;
    msg.time_motor_unknown = 0.9104661232349058;
    msg.rpm_min = 27949;
    msg.rpm_max = 13457;
    msg.depth_max = 0.5783953677158064;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.16383583256110168);
    msg.setSource(42288U);
    msg.setSourceEntity(173U);
    msg.setDestination(45793U);
    msg.setDestinationEntity(125U);
    msg.timestamp_last_service = 0.8648993898795808;
    msg.time_next_service = 0.05621883741882028;
    msg.time_motor_next_service = 0.9108256353987481;
    msg.time_idle_ground = 0.4691986114979264;
    msg.time_idle_air = 0.474022885258347;
    msg.time_idle_water = 0.6293582236434909;
    msg.time_idle_underwater = 0.07098149836319956;
    msg.time_idle_unknown = 0.02887030310722616;
    msg.time_motor_ground = 0.6551825534166238;
    msg.time_motor_air = 0.8744078274186595;
    msg.time_motor_water = 0.27715480027148365;
    msg.time_motor_underwater = 0.7953124933851169;
    msg.time_motor_unknown = 0.5420037619858238;
    msg.rpm_min = -19129;
    msg.rpm_max = -26249;
    msg.depth_max = 0.34384011818551274;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.3013790846805494);
    msg.setSource(39288U);
    msg.setSourceEntity(14U);
    msg.setDestination(57338U);
    msg.setDestinationEntity(197U);
    msg.timestamp_last_service = 0.5332504002867776;
    msg.time_next_service = 0.379881426023991;
    msg.time_motor_next_service = 0.7871543459819897;
    msg.time_idle_ground = 0.7155611728964977;
    msg.time_idle_air = 0.3539778016466457;
    msg.time_idle_water = 0.5477178984443155;
    msg.time_idle_underwater = 0.19725738242124524;
    msg.time_idle_unknown = 0.9257605981213302;
    msg.time_motor_ground = 0.5230480656653244;
    msg.time_motor_air = 0.9476629108455462;
    msg.time_motor_water = 0.3047047234292297;
    msg.time_motor_underwater = 0.48528527835413526;
    msg.time_motor_unknown = 0.14039277128192118;
    msg.rpm_min = -4686;
    msg.rpm_max = -16769;
    msg.depth_max = 0.8527620755202218;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.6448958098853923);
    msg.setSource(42284U);
    msg.setSourceEntity(165U);
    msg.setDestination(53278U);
    msg.setDestinationEntity(153U);
    msg.severity = 152U;
    msg.text.assign("BFSMSYINDWBDVIPIYDBHOREGRLXNXGJQDCXCPMZGGHULVWQOVVFDFGZKXFQILJBZRPKSJCEPNTAMOOEFTOYWQYKUJPYSAYEUVFFXMLZMWXHILHMUCDXOSBLNVUDKCPRRTAQZSEUJHYWTTADJBBEJMBNJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.4723270006211764);
    msg.setSource(11808U);
    msg.setSourceEntity(179U);
    msg.setDestination(56690U);
    msg.setDestinationEntity(247U);
    msg.severity = 102U;
    msg.text.assign("FAGMKWGJOBWSGAWXCSNJBTJCYFFVSXDMIOCPLMWLQLQCPZFJRYXAJYXPYCLMHPASUNTJJIFMFVUIQBYIETHVXUKLZOOHTSUZIDMRMPRNORCQYKUPMELGAOOKBOJEFPEVFRPWHHXUGKABQPRAYKWCQZNLUWTMKUADBDNPJQZBHCHSJTDYUNDGWIVKQKWCXYLEZXZANSGLXTERF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.40369300606068903);
    msg.setSource(5532U);
    msg.setSourceEntity(182U);
    msg.setDestination(10855U);
    msg.setDestinationEntity(221U);
    msg.severity = 185U;
    msg.text.assign("ZXOIVZIFMLOWVYQUDGVHPCRVJKJTMPFSOSCBZSAOAKTJYPDPFUKGROLKDHJGQMZXNPMZTQIXXISVCWULRETBAAZJXYLKECQHFHK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.9953864345582196);
    msg.setSource(26682U);
    msg.setSourceEntity(128U);
    msg.setDestination(7842U);
    msg.setDestinationEntity(55U);
    msg.channel = 69;
    msg.value = -1756916389;
    msg.gain = 242U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.5026111135466148);
    msg.setSource(64608U);
    msg.setSourceEntity(238U);
    msg.setDestination(9674U);
    msg.setDestinationEntity(130U);
    msg.channel = -19;
    msg.value = 856677689;
    msg.gain = 244U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.5522320977030529);
    msg.setSource(32298U);
    msg.setSourceEntity(150U);
    msg.setDestination(26834U);
    msg.setDestinationEntity(1U);
    msg.channel = 66;
    msg.value = 990324373;
    msg.gain = 69U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.5416204379581785);
    msg.setSource(48035U);
    msg.setSourceEntity(239U);
    msg.setDestination(55974U);
    msg.setDestinationEntity(0U);
    msg.ch01 = 0.9031162892164432;
    msg.ch02 = 0.22958735250270856;
    msg.ch03 = 0.5735628086399672;
    msg.ch04 = 0.728415590147154;
    msg.ch05 = 0.21851311926492756;
    msg.ch06 = 0.6585191939388383;
    msg.ch07 = 0.6154759933219797;
    msg.ch08 = 0.0299227540367607;
    msg.ch09 = 0.2837242092922653;
    msg.ch10 = 0.040898007303719175;
    msg.ch11 = 0.644177639116857;
    msg.ch12 = 0.8662642675098553;
    msg.ch13 = 0.2266300089534966;
    msg.ch14 = 0.09635749941632477;
    msg.ch15 = 0.592635058631102;
    msg.ch16 = 0.5193568629150405;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.516437873956227);
    msg.setSource(28983U);
    msg.setSourceEntity(135U);
    msg.setDestination(7731U);
    msg.setDestinationEntity(232U);
    msg.ch01 = 0.5818848840706864;
    msg.ch02 = 0.6171679368171553;
    msg.ch03 = 0.42898021570049727;
    msg.ch04 = 0.8793297566362083;
    msg.ch05 = 0.4213340310675977;
    msg.ch06 = 0.8905194057059946;
    msg.ch07 = 0.42696288901324564;
    msg.ch08 = 0.6231501910822643;
    msg.ch09 = 0.41388351635141374;
    msg.ch10 = 0.08824674919978148;
    msg.ch11 = 0.27152897308408375;
    msg.ch12 = 0.9418890665207799;
    msg.ch13 = 0.8399243108730914;
    msg.ch14 = 0.263386389866511;
    msg.ch15 = 0.3284078085439879;
    msg.ch16 = 0.6647227437538853;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.6748971324515177);
    msg.setSource(56397U);
    msg.setSourceEntity(213U);
    msg.setDestination(15176U);
    msg.setDestinationEntity(173U);
    msg.ch01 = 0.9450959609774127;
    msg.ch02 = 0.7207092646044928;
    msg.ch03 = 0.29106624457847186;
    msg.ch04 = 0.6773319954306003;
    msg.ch05 = 0.5137261903351629;
    msg.ch06 = 0.5918353988191545;
    msg.ch07 = 0.17270890833368813;
    msg.ch08 = 0.9400958038329296;
    msg.ch09 = 0.07506919086684938;
    msg.ch10 = 0.7483293388620612;
    msg.ch11 = 0.5130125964997668;
    msg.ch12 = 0.783745557337633;
    msg.ch13 = 0.5696738077729444;
    msg.ch14 = 0.04093386249369779;
    msg.ch15 = 0.8971896195577416;
    msg.ch16 = 0.15160800931120166;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.7918737326660857);
    msg.setSource(29521U);
    msg.setSourceEntity(135U);
    msg.setDestination(59202U);
    msg.setDestinationEntity(196U);
    msg.op = 104U;
    msg.lat = 0.9274794891543757;
    msg.lon = 0.2301083782633131;
    msg.height = 0.13483063129075246;
    msg.depth = 0.9043785962809744;
    msg.alt = 0.9520049063818784;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.5065032662171061);
    msg.setSource(1550U);
    msg.setSourceEntity(203U);
    msg.setDestination(13292U);
    msg.setDestinationEntity(40U);
    msg.op = 248U;
    msg.lat = 0.49568414580855025;
    msg.lon = 0.4616220442304717;
    msg.height = 0.020687252243532628;
    msg.depth = 0.07431373184597123;
    msg.alt = 0.16376862955393345;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.9405538860967995);
    msg.setSource(11335U);
    msg.setSourceEntity(239U);
    msg.setDestination(15487U);
    msg.setDestinationEntity(68U);
    msg.op = 254U;
    msg.lat = 0.909071987105179;
    msg.lon = 0.17648101144171457;
    msg.height = 0.9715603928346868;
    msg.depth = 0.993749119184654;
    msg.alt = 0.23363502776923128;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.8636307142175376);
    msg.setSource(5411U);
    msg.setSourceEntity(145U);
    msg.setDestination(6285U);
    msg.setDestinationEntity(78U);
    msg.name.assign("RLGREIUMDKGCWAROPYPEDOVNTBXEMNXJHSKSFVTQSBILIWXEGGJQBLFTKNQIXJUBQYJHYZZATIVCLXOSVBPHPBAKDGLRUXFKCMEXBSMOPIOCONFQDPRWUKZONVSDCZZKATWGVFHTPYLDTHAKZOCAFVFEOFWUZNUWNEJXHVPYWTLGMVWQSRYNGLRIAWACHJRIDCYDPJQUHBGEMCXZFIAKYDQ");
    msg.value = 110U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.30749241737871036);
    msg.setSource(25405U);
    msg.setSourceEntity(239U);
    msg.setDestination(56586U);
    msg.setDestinationEntity(105U);
    msg.name.assign("YXHSWQMBESOZZNVNPHAERGMXIOGFRJBKZUDXTETVZLLUPMZOOXRMSYZLREUBBPVEQGYTNAGXZBJOWMDTWHYOXYRPXPICTLDZGJHQDQXUGCQVHWGFAPFTASOLBWROASHDLRJVKFPWCGVPLYJ");
    msg.value = 48U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.4275030544985131);
    msg.setSource(47521U);
    msg.setSourceEntity(81U);
    msg.setDestination(51605U);
    msg.setDestinationEntity(179U);
    msg.name.assign("AZEWKQATRIMXDHNFVELFGRBLSQMWVNCAOXCFAWUQCJXKIILCWPEHPOQISCJYOMTPASYJZRCHSBUBFDZEIPEHNQMBGGFHTRIJCEJVHEHAJUJYNMMUVOXUBPMZQNNDCKYDPKAEZABMFFQDXNYKLYTRPATXOOHJNWQZUGVOCWPEJCGODTGLRXWZQRTGVTBSLDDKOBYUSVWZKSOSJGIIXNYBHIVMYKLLIKUSDBHKWWZFDTG");
    msg.value = 5U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.7633069399291559);
    msg.setSource(57395U);
    msg.setSourceEntity(26U);
    msg.setDestination(3753U);
    msg.setDestinationEntity(175U);
    msg.name.assign("UOXDYOUTTQFAKLQNQKQVVCBEWIZMFHLSLHURDNBWGPTSSDXCMUDNLKHVKLJCPFACMVQFVXKRGRIYVJFDHIBGPEJCTOERAXAOSJLNESNUPPKNYZIBNBTKWFCLFPDJAELTUUEJDCSMMAREMGBSRZY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.0030028812179577757);
    msg.setSource(23624U);
    msg.setSourceEntity(252U);
    msg.setDestination(22376U);
    msg.setDestinationEntity(235U);
    msg.name.assign("SFXJDFAGZXXGDHKQURWDHESUBUOFFJPWUZXMHYJZWMONIOQPMGPTWMXZEYWTZTGVZPSRZDSLKUFQWXJTIEIHGMCGLSHAETBKNRNVPSCGCNVELWYZRCUQXNFYERVSBOXKTOQTYFLXKQHHYJMNVKBZMRPINBLLLJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.8587014558323626);
    msg.setSource(22420U);
    msg.setSourceEntity(116U);
    msg.setDestination(51499U);
    msg.setDestinationEntity(245U);
    msg.name.assign("MDFNIKXNSQTPZWF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.3655741118235092);
    msg.setSource(58742U);
    msg.setSourceEntity(233U);
    msg.setDestination(2991U);
    msg.setDestinationEntity(99U);
    msg.name.assign("JIEGVPKPSNXXWCFZRSGKIOEEVQSMLMZGPQIXNNIIRIXFWHLYVYYAYEAYJDIJVTZSCMZDBAJLDKPMEHPJEKRQPUFVYMHVVFUOGXUCIWHWZGFDTSCEAXSJQLTROZZJAOCQDURGAVBRBHUBDIGTUOHRUTITWNUUKNCPCAQFQLJRFTXCLPUBRDTMNRS");
    msg.value = 125U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.5835548685519846);
    msg.setSource(22563U);
    msg.setSourceEntity(76U);
    msg.setDestination(12789U);
    msg.setDestinationEntity(227U);
    msg.name.assign("SVFSFPNTOQXZSLDVDVBBVUXWOOHHTTUFZRKWBGZNOCGDLMVRLGEIDKPYSUGGZTKMTUTRKEYWCASBHDJSXFDHFQGJOVYJTUUGDRVWZXMLYAPQUCLKJFAEERDCICSAKWKUZPWVFCWIIZDEMRNRWAHYEYGLXOXRLMJFNICPXYQWKIPQQZELCT");
    msg.value = 109U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.034010104244141526);
    msg.setSource(56015U);
    msg.setSourceEntity(235U);
    msg.setDestination(13903U);
    msg.setDestinationEntity(67U);
    msg.name.assign("PRBYRQASECATNGJXZHWWQCALAFZJCGJLOTKTKQDUNRHGBTFYMMBFVFVMDFGSVXTRRWCNPPGUUUKIDAVQGLLSORSMQGVYQUWBNVHYHVGFYEBXQITKXNQNJSVDNSFITISBGXYLRRJBVWBBT");
    msg.value = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.9120450893058595);
    msg.setSource(43245U);
    msg.setSourceEntity(156U);
    msg.setDestination(11325U);
    msg.setDestinationEntity(93U);
    msg.value = 0.6354868452360354;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.8468524092178416);
    msg.setSource(30222U);
    msg.setSourceEntity(52U);
    msg.setDestination(37574U);
    msg.setDestinationEntity(225U);
    msg.value = 0.09434643175658608;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.5582593560692527);
    msg.setSource(13827U);
    msg.setSourceEntity(39U);
    msg.setDestination(25594U);
    msg.setDestinationEntity(161U);
    msg.value = 0.049431880296081476;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.37702101420475775);
    msg.setSource(34564U);
    msg.setSourceEntity(80U);
    msg.setDestination(56823U);
    msg.setDestinationEntity(224U);
    msg.value = 0.12507199993302143;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.2693149919629836);
    msg.setSource(23234U);
    msg.setSourceEntity(52U);
    msg.setDestination(32207U);
    msg.setDestinationEntity(221U);
    msg.value = 0.5158084473982777;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.23449233280354276);
    msg.setSource(40710U);
    msg.setSourceEntity(159U);
    msg.setDestination(13267U);
    msg.setDestinationEntity(194U);
    msg.value = 0.10388962703706217;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.17777334095316055);
    msg.setSource(52812U);
    msg.setSourceEntity(11U);
    msg.setDestination(35853U);
    msg.setDestinationEntity(121U);
    msg.ampl = 0.6076108461350618;
    msg.dir = 0.8269545092061505;
    msg.freq = 0.8336067748592649;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.7981359335569765);
    msg.setSource(8030U);
    msg.setSourceEntity(182U);
    msg.setDestination(13850U);
    msg.setDestinationEntity(110U);
    msg.ampl = 0.84942509209667;
    msg.dir = 0.6235622012257939;
    msg.freq = 0.6262010147005355;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.6794564077983308);
    msg.setSource(59335U);
    msg.setSourceEntity(230U);
    msg.setDestination(277U);
    msg.setDestinationEntity(63U);
    msg.ampl = 0.49267425692267386;
    msg.dir = 0.4375423528496042;
    msg.freq = 0.7950168011776282;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.7423565867383266);
    msg.setSource(40674U);
    msg.setSourceEntity(175U);
    msg.setDestination(16513U);
    msg.setDestinationEntity(93U);
    msg.value = 0.8280241506055677;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.2621895297538481);
    msg.setSource(25218U);
    msg.setSourceEntity(81U);
    msg.setDestination(35844U);
    msg.setDestinationEntity(67U);
    msg.value = 0.12413597902118889;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.4697931921644992);
    msg.setSource(35387U);
    msg.setSourceEntity(254U);
    msg.setDestination(56581U);
    msg.setDestinationEntity(144U);
    msg.value = 0.5199168703673601;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.3344280129945787);
    msg.setSource(34229U);
    msg.setSourceEntity(3U);
    msg.setDestination(45214U);
    msg.setDestinationEntity(28U);
    msg.value = 0.1762989882645939;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.22321922523769133);
    msg.setSource(15922U);
    msg.setSourceEntity(13U);
    msg.setDestination(7149U);
    msg.setDestinationEntity(171U);
    msg.value = 0.338041256609406;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.27283569270877184);
    msg.setSource(32987U);
    msg.setSourceEntity(220U);
    msg.setDestination(17883U);
    msg.setDestinationEntity(235U);
    msg.value = 0.3747402064684515;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.9285831514262278);
    msg.setSource(23557U);
    msg.setSourceEntity(234U);
    msg.setDestination(6003U);
    msg.setDestinationEntity(193U);
    msg.value = 0.3233318871730755;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.9036570961998247);
    msg.setSource(63413U);
    msg.setSourceEntity(246U);
    msg.setDestination(51343U);
    msg.setDestinationEntity(41U);
    msg.value = 0.9674072158018237;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.3841616749857494);
    msg.setSource(51895U);
    msg.setSourceEntity(213U);
    msg.setDestination(10197U);
    msg.setDestinationEntity(148U);
    msg.value = 0.944058813496469;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.4850050983154862);
    msg.setSource(8151U);
    msg.setSourceEntity(222U);
    msg.setDestination(46130U);
    msg.setDestinationEntity(165U);
    msg.id = 37;
    msg.state = 36;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.8852275982030848);
    msg.setSource(64617U);
    msg.setSourceEntity(64U);
    msg.setDestination(43624U);
    msg.setDestinationEntity(113U);
    msg.id = 21;
    msg.state = -70;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.18151160262998078);
    msg.setSource(50552U);
    msg.setSourceEntity(214U);
    msg.setDestination(16869U);
    msg.setDestinationEntity(32U);
    msg.id = 9;
    msg.state = -10;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.38727971107877657);
    msg.setSource(5472U);
    msg.setSourceEntity(122U);
    msg.setDestination(41908U);
    msg.setDestinationEntity(95U);
    msg.angle = 0.6205667182336085;
    msg.speed = 0.8520202349158965;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.8014960528898455);
    msg.setSource(59195U);
    msg.setSourceEntity(211U);
    msg.setDestination(38380U);
    msg.setDestinationEntity(219U);
    msg.angle = 0.755784970059098;
    msg.speed = 0.5457913996415364;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.559910556086725);
    msg.setSource(27145U);
    msg.setSourceEntity(213U);
    msg.setDestination(38691U);
    msg.setDestinationEntity(11U);
    msg.angle = 0.9224889332847119;
    msg.speed = 0.11395407036859406;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.2560963593998886);
    msg.setSource(32954U);
    msg.setSourceEntity(103U);
    msg.setDestination(41820U);
    msg.setDestinationEntity(39U);
    msg.dir = 0.836546597450612;
    msg.speed = 0.20756563443942722;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.6493028363978428);
    msg.setSource(59034U);
    msg.setSourceEntity(222U);
    msg.setDestination(53799U);
    msg.setDestinationEntity(91U);
    msg.dir = 0.14746465758605376;
    msg.speed = 0.20299263236641363;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.22249348564370264);
    msg.setSource(29243U);
    msg.setSourceEntity(118U);
    msg.setDestination(32317U);
    msg.setDestinationEntity(82U);
    msg.dir = 0.27149241466453433;
    msg.speed = 0.19324157521070517;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.39693312847816586);
    msg.setSource(64114U);
    msg.setSourceEntity(112U);
    msg.setDestination(2827U);
    msg.setDestinationEntity(74U);
    msg.x = 0.3237644988710481;
    msg.y = 0.9992714528774712;
    msg.z1 = 0.5889296205534567;
    msg.z2 = 0.6003115643451998;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.500679752887565);
    msg.setSource(58528U);
    msg.setSourceEntity(199U);
    msg.setDestination(44004U);
    msg.setDestinationEntity(208U);
    msg.x = 0.8479303814425406;
    msg.y = 0.8966732055426533;
    msg.z1 = 0.15548833302284226;
    msg.z2 = 0.2936437872336517;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.5333059736941589);
    msg.setSource(33196U);
    msg.setSourceEntity(121U);
    msg.setDestination(7849U);
    msg.setDestinationEntity(133U);
    msg.x = 0.22186775902028122;
    msg.y = 0.5901540295852518;
    msg.z1 = 0.4343854007562449;
    msg.z2 = 0.4590836534101216;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.5264284997418963);
    msg.setSource(19452U);
    msg.setSourceEntity(68U);
    msg.setDestination(4682U);
    msg.setDestinationEntity(184U);
    msg.mmsi.assign("ICFALQOGSHAMIEZGMJUUOSZQCRVGMBKAKXKHFEIMXPIUKGEANQKZCIGPYRRNBTYGJIUJNQIGLYMIXQCVNCAJKAWNYVPNCEFBVDHXUOTTOYHQJXOZJEXJRVWVHRVSFRQMSCPEFFHGDDRAKXDTFHMCDZTINYBLLDYNQSQ");
    msg.lat = 0.7619270684366737;
    msg.lon = 0.9751569259686144;
    msg.x = 0.019799107081267753;
    msg.y = 0.7439171841822015;
    msg.speed = 0.003767878428766025;
    msg.course = 0.3552881850599544;
    msg.dist = 0.5792807875912948;
    msg.length = 0.035784679709871314;
    msg.width = 0.9274308750340662;
    msg.o_vect = 0.4272490398334814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.5247808029896195);
    msg.setSource(42202U);
    msg.setSourceEntity(41U);
    msg.setDestination(27128U);
    msg.setDestinationEntity(234U);
    msg.mmsi.assign("KBOXGHWMRL");
    msg.lat = 0.6632187980333086;
    msg.lon = 0.7693960361690735;
    msg.x = 0.9776288962260057;
    msg.y = 0.6829382162536471;
    msg.speed = 0.07248948451404713;
    msg.course = 0.26835652673916044;
    msg.dist = 0.842695644003978;
    msg.length = 0.8453100432528285;
    msg.width = 0.6173472715405968;
    msg.o_vect = 0.559045099761907;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.19122339143176437);
    msg.setSource(59015U);
    msg.setSourceEntity(168U);
    msg.setDestination(367U);
    msg.setDestinationEntity(38U);
    msg.mmsi.assign("KAYVLAELVCRBWZHKRTYOUMMPXAAFHPWJHOCQSGPFGIUOQYHFPTOOWHBMPOWSCJGYCZUKGBTAXKZSINJZYQKDWWURXSCLRUBARVSMLSBAJFLTLSQXIDHDIOEOIVBIVRDSBHEMQZOPDNAYOYQCJXXVZNFTRVDZPMNKRWIBYWLKKDBGUYQTDMXVJRFEZXCTIXVETJDFIGHTMITNGUCFCFJMGWNGEEGAWDLKPCENFJ");
    msg.lat = 0.2409326584263327;
    msg.lon = 0.8316540597509354;
    msg.x = 0.804743085835943;
    msg.y = 0.8188298147681095;
    msg.speed = 0.9760439431088627;
    msg.course = 0.425102343667799;
    msg.dist = 0.3514488868536858;
    msg.length = 0.09333175414177597;
    msg.width = 0.7787176000622484;
    msg.o_vect = 0.0030274146466905405;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.21208714458091904);
    msg.setSource(36177U);
    msg.setSourceEntity(115U);
    msg.setDestination(18606U);
    msg.setDestinationEntity(151U);
    msg.depth_at_loc.assign("LEYNOWBQFMKTTLWDORSTXRXNSUSGWAEGXLKLDHLZFZWZTXMMWZIHBJQRTBHMJFZGAVNEFQIKDEAVYJJBFAPLWYJDPTRYGUJJKBSHIHYYUZFXC");
    msg.danger.assign("SQASELGXMHWBGSFINEADFNEXFDHWATDVWVDRGPMJEZEXIFUJKIRQLRWLKWPTKVGWAVJXGDOOCQZPCRCBZNXZEEMYSKHVTDMCQAOWQTVWIUOKMDCYYTPBFSYGADYCRJHBITHPKFPXKBPYIKXDLYBHMHENZTEOOTLHOAQZJZKUJNZJSHFJMICFSCULBJRRNTMPUHRVNO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.5434151598812293);
    msg.setSource(39724U);
    msg.setSourceEntity(0U);
    msg.setDestination(12632U);
    msg.setDestinationEntity(74U);
    msg.depth_at_loc.assign("SSGZCAWBIVKYUITWOSGMNH");
    msg.danger.assign("MYCQXHDYGVSVPLYPJMJVNODKCTAIYAOPNQCZUEIFTNGYEHUSWGXLJBEWEJVQWRKMBLBNIORETNHKOHBDIDZSUZNXSOCWLXSUQYRDDQZOJYWDLFQDVDFJTMAASKLLXNXANPBKEXRHAYWGIBHP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.7113200909224833);
    msg.setSource(5461U);
    msg.setSourceEntity(247U);
    msg.setDestination(46128U);
    msg.setDestinationEntity(183U);
    msg.depth_at_loc.assign("CHVGANJBNMBR");
    msg.danger.assign("PSDQBOUCPDDIAANTLNOOWTZASPCAYTXHLEZGJRZZYREVZULLYGLXDEBJLHFRQKMHKJEBWPUKMOAWXEWQKBVYZVPJXSKFGQWENWCUNFOWXYIHQZSFWTMIEHSKEAUPVJMNYWBDCMKKXFPRXAHPRSJTIBHJTDZYIGUQUCCFDURAIVWKSOLBVMPOIHBNHZKSGGRCTBMJIHOGRQXSVQTUOBDIYPCRQIZLOAMMYANFMVTQRSNDVCUEFXCNLGGV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.9055482078314215);
    msg.setSource(36355U);
    msg.setSourceEntity(219U);
    msg.setDestination(14170U);
    msg.setDestinationEntity(187U);
    msg.value = 0.05234602123760923;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.6685435661148399);
    msg.setSource(38085U);
    msg.setSourceEntity(223U);
    msg.setDestination(44273U);
    msg.setDestinationEntity(40U);
    msg.value = 0.33490191927548074;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.7786726484431742);
    msg.setSource(49848U);
    msg.setSourceEntity(237U);
    msg.setDestination(55645U);
    msg.setDestinationEntity(52U);
    msg.value = 0.9575693535547518;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.6669798527725902);
    msg.setSource(11947U);
    msg.setSourceEntity(107U);
    msg.setDestination(32588U);
    msg.setDestinationEntity(41U);
    msg.beam1 = 0.701258664562591;
    msg.beam2 = 0.8429658291904811;
    msg.beam3 = 0.01148485408953992;
    msg.beam4 = 0.21656531855623018;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.26050501925207137);
    msg.setSource(48710U);
    msg.setSourceEntity(110U);
    msg.setDestination(34771U);
    msg.setDestinationEntity(56U);
    msg.beam1 = 0.012220682399887162;
    msg.beam2 = 0.6322625003424334;
    msg.beam3 = 0.23873570137358202;
    msg.beam4 = 0.13946081030311053;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.821657440001703);
    msg.setSource(13890U);
    msg.setSourceEntity(140U);
    msg.setDestination(7099U);
    msg.setDestinationEntity(40U);
    msg.beam1 = 0.3310940783190446;
    msg.beam2 = 0.19423340130502698;
    msg.beam3 = 0.4742485653340551;
    msg.beam4 = 0.5575329006420318;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.5684007562471783);
    msg.setSource(3717U);
    msg.setSourceEntity(135U);
    msg.setDestination(33536U);
    msg.setDestinationEntity(253U);
    msg.beam1 = 56U;
    msg.beam2 = 174U;
    msg.beam3 = 210U;
    msg.beam4 = 252U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.5654842383755398);
    msg.setSource(10372U);
    msg.setSourceEntity(140U);
    msg.setDestination(10911U);
    msg.setDestinationEntity(85U);
    msg.beam1 = 213U;
    msg.beam2 = 175U;
    msg.beam3 = 229U;
    msg.beam4 = 218U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.8860044369514392);
    msg.setSource(19354U);
    msg.setSourceEntity(119U);
    msg.setDestination(62622U);
    msg.setDestinationEntity(25U);
    msg.beam1 = 9U;
    msg.beam2 = 213U;
    msg.beam3 = 59U;
    msg.beam4 = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.6664917937612492);
    msg.setSource(16509U);
    msg.setSourceEntity(213U);
    msg.setDestination(41788U);
    msg.setDestinationEntity(14U);
    msg.pos = 0.3751141466361364;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.893637957801777);
    msg.setSource(40988U);
    msg.setSourceEntity(166U);
    msg.setDestination(8144U);
    msg.setDestinationEntity(66U);
    msg.pos = 0.812937441129214;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.9092827191212686);
    msg.setSource(4824U);
    msg.setSourceEntity(109U);
    msg.setDestination(33271U);
    msg.setDestinationEntity(204U);
    msg.pos = 0.9766337561690541;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.9148440910112405;
    tmp_msg_0.amp = 0.2372822716955444;
    tmp_msg_0.cor = 64U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.7982152807494708);
    msg.setSource(22784U);
    msg.setSourceEntity(241U);
    msg.setDestination(38U);
    msg.setDestinationEntity(227U);
    msg.beams = 89U;
    msg.cells = 9U;
    msg.coord_sys = 198U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.9246831861737018;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.34291850331242946;
    tmp_tmp_msg_0_0.amp = 0.2522386657041892;
    tmp_tmp_msg_0_0.cor = 156U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.5978837449834095);
    msg.setSource(8020U);
    msg.setSourceEntity(202U);
    msg.setDestination(6817U);
    msg.setDestinationEntity(125U);
    msg.beams = 145U;
    msg.cells = 183U;
    msg.coord_sys = 148U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.6470283339340189;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.952660056659002;
    tmp_tmp_msg_0_0.amp = 0.057617593903888875;
    tmp_tmp_msg_0_0.cor = 205U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.5528699088203258);
    msg.setSource(5341U);
    msg.setSourceEntity(14U);
    msg.setDestination(1210U);
    msg.setDestinationEntity(186U);
    msg.beams = 190U;
    msg.cells = 47U;
    msg.coord_sys = 237U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.7766818147389984;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.09803030545388092;
    tmp_tmp_msg_0_0.amp = 0.09683364518676196;
    tmp_tmp_msg_0_0.cor = 157U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.3377452477720514);
    msg.setSource(28642U);
    msg.setSourceEntity(87U);
    msg.setDestination(53982U);
    msg.setDestinationEntity(133U);
    msg.vel = 0.12589243897952018;
    msg.amp = 0.788936274976439;
    msg.cor = 121U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.8287087009909804);
    msg.setSource(26582U);
    msg.setSourceEntity(140U);
    msg.setDestination(38059U);
    msg.setDestinationEntity(123U);
    msg.vel = 0.4796033432899468;
    msg.amp = 0.356554784220801;
    msg.cor = 244U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.5686079618142091);
    msg.setSource(42737U);
    msg.setSourceEntity(136U);
    msg.setDestination(7877U);
    msg.setDestinationEntity(222U);
    msg.vel = 0.03748036294400192;
    msg.amp = 0.39972997790393194;
    msg.cor = 20U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.7357688956451157);
    msg.setSource(2511U);
    msg.setSourceEntity(143U);
    msg.setDestination(50819U);
    msg.setDestinationEntity(110U);
    msg.serial_no = 1324631878U;
    msg.unix_timestamp = 3525485534U;
    msg.millis = 21149U;
    msg.trans_protocol = 66U;
    msg.trans_id = 1889232197U;
    msg.trans_data = 5608U;
    msg.snr = 39U;
    msg.trans_freq = 152U;
    msg.recv_mem_addr = 56710U;
    msg.lat = 0.3877992128098754;
    msg.lon = 0.7270381454448644;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.5879671851850061);
    msg.setSource(60704U);
    msg.setSourceEntity(254U);
    msg.setDestination(23987U);
    msg.setDestinationEntity(226U);
    msg.serial_no = 603580067U;
    msg.unix_timestamp = 3964093515U;
    msg.millis = 55934U;
    msg.trans_protocol = 164U;
    msg.trans_id = 3266719375U;
    msg.trans_data = 15970U;
    msg.snr = 128U;
    msg.trans_freq = 37U;
    msg.recv_mem_addr = 44338U;
    msg.lat = 0.20897504678188772;
    msg.lon = 0.8340866223584185;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.3466114113453237);
    msg.setSource(25383U);
    msg.setSourceEntity(222U);
    msg.setDestination(52357U);
    msg.setDestinationEntity(199U);
    msg.serial_no = 3056697535U;
    msg.unix_timestamp = 3542336526U;
    msg.millis = 1585U;
    msg.trans_protocol = 190U;
    msg.trans_id = 1229430580U;
    msg.trans_data = 3570U;
    msg.snr = 91U;
    msg.trans_freq = 106U;
    msg.recv_mem_addr = 57866U;
    msg.lat = 0.8589532159555924;
    msg.lon = 0.5795658248118237;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.32244242279885627);
    msg.setSource(45104U);
    msg.setSourceEntity(175U);
    msg.setDestination(579U);
    msg.setDestinationEntity(25U);
    msg.serial_no = 652272652U;
    msg.unix_timestamp = 2010630975U;
    msg.temperature = 0.6534493368525011;
    msg.avg_noise_level = 70U;
    msg.peak_noise_level = 170U;
    msg.recv_listen_freq = 181U;
    msg.recv_mem_addr = 42460U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.023672087005181863);
    msg.setSource(36807U);
    msg.setSourceEntity(58U);
    msg.setDestination(34525U);
    msg.setDestinationEntity(24U);
    msg.serial_no = 4290718512U;
    msg.unix_timestamp = 2793205711U;
    msg.temperature = 0.21531736699477788;
    msg.avg_noise_level = 51U;
    msg.peak_noise_level = 63U;
    msg.recv_listen_freq = 161U;
    msg.recv_mem_addr = 61709U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.7210299573228536);
    msg.setSource(50322U);
    msg.setSourceEntity(190U);
    msg.setDestination(29716U);
    msg.setDestinationEntity(48U);
    msg.serial_no = 1318127114U;
    msg.unix_timestamp = 793684544U;
    msg.temperature = 0.9684256554864861;
    msg.avg_noise_level = 166U;
    msg.peak_noise_level = 170U;
    msg.recv_listen_freq = 174U;
    msg.recv_mem_addr = 4545U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.6034190395508745);
    msg.setSource(62802U);
    msg.setSourceEntity(223U);
    msg.setDestination(48942U);
    msg.setDestinationEntity(169U);
    msg.frequency = 2622260684U;
    msg.info.assign("ZOEZKDBEPDGJWN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.7070545287345343);
    msg.setSource(37332U);
    msg.setSourceEntity(229U);
    msg.setDestination(11976U);
    msg.setDestinationEntity(206U);
    msg.frequency = 2494185428U;
    msg.info.assign("TOBIFHCMQFPNITCTGBRFQGIRVTFSKYISVLAQEOAWDTZTRAUKDECITIGZDMYSZGBEHBKVPUXAMZYCUCRHQGOCKLWJSNLDQQKYWBEWHZDBLCPBLYLQMWBLRPMFEDSMFDWXCROXUJMUNJJDAXKYRSQMYUXSUVJWJETNTGEWSVYOQLJXEHOXNINLZSXAKKGAPBCNSKHZITLPHGIVPUHRYADVVG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.17002126691027675);
    msg.setSource(37209U);
    msg.setSourceEntity(170U);
    msg.setDestination(6303U);
    msg.setDestinationEntity(134U);
    msg.frequency = 17079U;
    msg.info.assign("WRCCSKONAGBBKXPLTDJMYISZUWFTVDHINQQM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.9318183927320083);
    msg.setSource(13394U);
    msg.setSourceEntity(48U);
    msg.setDestination(26214U);
    msg.setDestinationEntity(50U);
    msg.restriction = 29U;
    msg.reason.assign("BJGNLIVEHPFQLBKNZSZIJIWVCDRASRKCEHLCYXXKFKSITAPYAFKXXLVVXESUYWFCLJOUUYR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.258006361424558);
    msg.setSource(17069U);
    msg.setSourceEntity(166U);
    msg.setDestination(22690U);
    msg.setDestinationEntity(177U);
    msg.restriction = 201U;
    msg.reason.assign("IZZWBFYUDLUCAYNJKSOABPSFCGNHKZOBMWQLICZHGEFBDTVLQKSHGLVHCIGRJUENFNRZQPAWHXAAJRYSNQEYDNKMUEWSJXETVFIMYOMXUEUTKECFMSYM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.5402608707957507);
    msg.setSource(15286U);
    msg.setSourceEntity(164U);
    msg.setDestination(60493U);
    msg.setDestinationEntity(187U);
    msg.restriction = 119U;
    msg.reason.assign("HWEDHVSIMQWTLERRUJQIRULUNFQEPTFKNSWRMLQGVWFYPGFZVFFXRBTPAXZYBFSOBMUBDADCZGJAQJKVLZRCPSGCMEYOLOKEJCYYONWRHPIVLSOGDKVTDOXZIGZCPTEUYUZOEVITDXALVIPWSUTYCGNAMCXXHHIXRBZDEWVGSOQKLSTPJUXAJDJWHEDANNBCIHBYQFSMJIQNJXLISLGKFPZGYAPKCKHTBMAQXZCUKMENRDOAKUB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.29171155964554774);
    msg.setSource(5730U);
    msg.setSourceEntity(106U);
    msg.setDestination(17U);
    msg.setDestinationEntity(71U);
    msg.adcp = 14;
    msg.adcp_dur = 245028003U;
    msg.adcp_fr = 524008927U;
    msg.ctd = 0;
    msg.ctd_dur = 3526159507U;
    msg.ctd_fr = 1101254844U;
    msg.opt = 46;
    msg.opt_dur = 530559058U;
    msg.opt_fr = 415856572U;
    msg.tbl = -91;
    msg.tbl_dur = 3694871348U;
    msg.tbl_fr = 4220831543U;
    msg.eco = -73;
    msg.eco_dur = 641322815U;
    msg.eco_fr = 1539487298U;
    msg.par = 27;
    msg.par_dur = 2180772627U;
    msg.par_fr = 2202433401U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.48665633710746214);
    msg.setSource(54872U);
    msg.setSourceEntity(73U);
    msg.setDestination(38532U);
    msg.setDestinationEntity(46U);
    msg.adcp = -38;
    msg.adcp_dur = 3587396410U;
    msg.adcp_fr = 119370102U;
    msg.ctd = -78;
    msg.ctd_dur = 90000498U;
    msg.ctd_fr = 2458326168U;
    msg.opt = 100;
    msg.opt_dur = 1774899457U;
    msg.opt_fr = 1407671167U;
    msg.tbl = 23;
    msg.tbl_dur = 2205428925U;
    msg.tbl_fr = 427297030U;
    msg.eco = 77;
    msg.eco_dur = 3764068190U;
    msg.eco_fr = 2673384850U;
    msg.par = -85;
    msg.par_dur = 1933423299U;
    msg.par_fr = 1796082129U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.8370895174977231);
    msg.setSource(47666U);
    msg.setSourceEntity(87U);
    msg.setDestination(35022U);
    msg.setDestinationEntity(183U);
    msg.adcp = -90;
    msg.adcp_dur = 2479473757U;
    msg.adcp_fr = 2841636972U;
    msg.ctd = 9;
    msg.ctd_dur = 1649967216U;
    msg.ctd_fr = 3300980520U;
    msg.opt = 83;
    msg.opt_dur = 3997134597U;
    msg.opt_fr = 3427148104U;
    msg.tbl = 16;
    msg.tbl_dur = 576974069U;
    msg.tbl_fr = 670956453U;
    msg.eco = -127;
    msg.eco_dur = 717409304U;
    msg.eco_fr = 426856222U;
    msg.par = 67;
    msg.par_dur = 134520898U;
    msg.par_fr = 299756771U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.013494610420618725);
    msg.setSource(42382U);
    msg.setSourceEntity(175U);
    msg.setDestination(44414U);
    msg.setDestinationEntity(24U);
    msg.adcp = -89;
    msg.adcp_dur = 2293994551U;
    msg.adcp_fr = 486222441U;
    msg.ctd = -74;
    msg.ctd_dur = 2585253939U;
    msg.ctd_fr = 4198526385U;
    msg.opt = 79;
    msg.opt_dur = 2483971643U;
    msg.opt_fr = 1597109578U;
    msg.tbl = 23;
    msg.tbl_dur = 2526694899U;
    msg.tbl_fr = 2589348605U;
    msg.eco = -108;
    msg.eco_dur = 543731494U;
    msg.eco_fr = 38000524U;
    msg.par = 122;
    msg.par_dur = 1734308588U;
    msg.par_fr = 4030447772U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.7276353385660357);
    msg.setSource(47911U);
    msg.setSourceEntity(5U);
    msg.setDestination(61124U);
    msg.setDestinationEntity(118U);
    msg.adcp = -53;
    msg.adcp_dur = 3366058187U;
    msg.adcp_fr = 3446966503U;
    msg.ctd = 124;
    msg.ctd_dur = 2725514389U;
    msg.ctd_fr = 431755381U;
    msg.opt = 110;
    msg.opt_dur = 4201650063U;
    msg.opt_fr = 2466755711U;
    msg.tbl = 8;
    msg.tbl_dur = 3779494099U;
    msg.tbl_fr = 499684141U;
    msg.eco = 121;
    msg.eco_dur = 3108537727U;
    msg.eco_fr = 1820687980U;
    msg.par = 78;
    msg.par_dur = 3555354092U;
    msg.par_fr = 812282658U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.08400263637358818);
    msg.setSource(50451U);
    msg.setSourceEntity(197U);
    msg.setDestination(2153U);
    msg.setDestinationEntity(173U);
    msg.adcp = -84;
    msg.adcp_dur = 1951926582U;
    msg.adcp_fr = 997897752U;
    msg.ctd = 77;
    msg.ctd_dur = 673129081U;
    msg.ctd_fr = 2351893703U;
    msg.opt = 81;
    msg.opt_dur = 2535779284U;
    msg.opt_fr = 5071943U;
    msg.tbl = 51;
    msg.tbl_dur = 1813982451U;
    msg.tbl_fr = 976590020U;
    msg.eco = 55;
    msg.eco_dur = 3795076057U;
    msg.eco_fr = 210019944U;
    msg.par = 85;
    msg.par_dur = 3526269960U;
    msg.par_fr = 3673863130U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.7441370907587803);
    msg.setSource(1351U);
    msg.setSourceEntity(16U);
    msg.setDestination(7412U);
    msg.setDestinationEntity(86U);
    msg.value = 0.0454477947273535;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.6064385223178812);
    msg.setSource(879U);
    msg.setSourceEntity(25U);
    msg.setDestination(50953U);
    msg.setDestinationEntity(145U);
    msg.value = 0.7311689063322591;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.5843092922538351);
    msg.setSource(54715U);
    msg.setSourceEntity(237U);
    msg.setDestination(6690U);
    msg.setDestinationEntity(58U);
    msg.value = 0.8379466400416008;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.5267781216439608);
    msg.setSource(10533U);
    msg.setSourceEntity(219U);
    msg.setDestination(43291U);
    msg.setDestinationEntity(58U);
    msg.lat = 0.6793875433816419;
    msg.lon = 0.2619562336057464;
    msg.depth.assign("KZDIHRDAKCYWJJXULXAFRYIONSVTMEIREGXKXQZVECZMDHWNONHOCBVEJWLYZSVWSGFPPUTTBNMARCQSQNHUIYSCPYJWERHDQPUBIHEICKLGFNQIGWAEBHUEJZIIDMMOVFFXHYGCKTJ");
    msg.vel.assign("WLCHBYPCMSSMPVFNVDMYUNZBHXDQHROWPSMJJVSSXEVWBITTNJTSJZXZAK");
    msg.dir.assign("ZQCVZQFYRDHKSRXZDTXSTYVMVRICHMMMWUOXYWEYSEVIGAINSHBLUAFQYOGZGJZTYZQZDNEHBNJMVXEAWZEZSOGCJBQVDAIRNMFPAJDJOHBFBUVQNTWEHORLPMLOFCHNTEKWGYCPPAUTCRSXXBVTKFJSRYIAPAIMPLULGDNXMQJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.8573959171385309);
    msg.setSource(52290U);
    msg.setSourceEntity(214U);
    msg.setDestination(3463U);
    msg.setDestinationEntity(124U);
    msg.lat = 0.9263796566049234;
    msg.lon = 0.9558637780307586;
    msg.depth.assign("BPFNWNTPGYSYYATKPQAHUIFBXLYNBCGOTWHYOAIPDTMNOEFFZZOXZJGARQPWJCVSALHLBXZGXKRMODZISGCEUJKXMMEGLOVECLDJAMTBBJCSOQIDXQVVIRDRYFIECWIUUEGKDYPYQWPTDAJNJTXFCSUMHMFRXLXOHPSIEKUHWKUQRVHOZVHTLBOJTZQXAKEUKNNMRADMQLPHLL");
    msg.vel.assign("OHDJNQNVDYYDWPSARVWOQKPPJIUGHOBKDOIFKOXEFCSTKGJJJXTCHTTCQCGKPLPALRWQDVMAZINZPUUVBYRHLTQXIUUSFBWMTNQWMMUQESUWPIHCGMEYXNFQDKPJAIIBRRSGLOWLVNBLGQTFIJZNJZDNAOFSAKAHMGYUCMXZFTVRVGMWGUIYPHLNYACKFZMOBJZLOEYBSBUNWAGHELTBHFXTYMEECQVXCBCXSKREZSFRRDWIDYDH");
    msg.dir.assign("PVGVDYZNIRYUEHYZJDAFNPDMEAOUCRMJWGAZIUVDGKPYCTMOAWINZBNNXHIZJLJMDHEHTOUWVWBTKWSGXZZCCBRSFHGUEODRCAUFJHUBOHWNYMMLYQTIHBMBBPZTQLFYCLUWQTBEERGROIODEVCNVSYXE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.8702837270097709);
    msg.setSource(46283U);
    msg.setSourceEntity(155U);
    msg.setDestination(27648U);
    msg.setDestinationEntity(191U);
    msg.lat = 0.636939697564223;
    msg.lon = 0.8755800233554228;
    msg.depth.assign("DXTHZEIGFUZRIMBGXRAGJHRXXROUKYPPDQEXKTWFJGFZNQQZPUQKDKONRETRSNRBAVUINTXEVLOLMPSFAQWUTVMYOBMABOUHVXBKDJHWFMYQZLMYLFXQNSWRBCRGIYSWFLKIESVJOCNAIAIDJKRHAYDTGMWGXLCZJVLCFIPTTEEOCELUBMHYKDCXHNTOJCDYKBZMNQMLPQSZHDQGFVVTUW");
    msg.vel.assign("KEXDQPOZYEYKTQVNZYXERDEUVSLFBVHICWOKIFOBPYGTEWZAZNQJMCDSVJZWBUXKWOLJMXGJJQEKITBVSTCDPYUBNZDAAIRNFWQVMEZJXWAWRISBQCBPVM");
    msg.dir.assign("XWZXXHCNDCVFRFDMNPCAYDQBVBIYMOSHAAEAFTGAMSXWVOLTAPGNVQJOCJLPWDXXZHZZWGDGKKBMPQEJSQPJMTIRETCOPQBBEHYYAVJPSRHEHBPDMQITINKIWLODBGBKNSMGZHEKZXYTIYALORQUSIZDORAFSWPKZKXNNOEMLF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.19572163542866117);
    msg.setSource(43996U);
    msg.setSourceEntity(150U);
    msg.setDestination(33178U);
    msg.setDestinationEntity(79U);
    msg.source.assign("SNKHREAIBKUCFTQWOLUGSFDIKCUYBNWMDJVQTXKMTYSQGVJEXHMAEERAZOLSTDNMHYLTRPFILASRJNOADHDDVFHPOPJOAMHEKMBILWPZOFPXDXIRAPELZJKTEZNWZMQSUNPKEXQSHUVCBPGVOIJRVXBQCMSZWYQBPHGVYCYKROV");
    msg.lat = 0.19559537345934142;
    msg.lon = 0.8997680729071713;
    msg.sog = 0.978728488381816;
    msg.uc = 0.5691791726479447;
    msg.depth = 0.3417053118729384;
    msg.value = 0.9976056689257524;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.08192110148646936);
    msg.setSource(55938U);
    msg.setSourceEntity(157U);
    msg.setDestination(38018U);
    msg.setDestinationEntity(131U);
    msg.source.assign("LATWJLMFPDTFFISNXITYYAGTVNBMKKGQWBAECTCHGASLRTGOQMFJXRDDIJZSAOVHYSJZYTZHOGQJUUVQKRISBRCSWHIUSXBNYGFWZMZMPCOENGSFJ");
    msg.lat = 0.5635856007747162;
    msg.lon = 0.25769438486728935;
    msg.sog = 0.8861307930318101;
    msg.uc = 0.2561074564104716;
    msg.depth = 0.4493271614926896;
    msg.value = 0.38532339079793654;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.9546564881469038);
    msg.setSource(27474U);
    msg.setSourceEntity(162U);
    msg.setDestination(19300U);
    msg.setDestinationEntity(124U);
    msg.source.assign("MAQKERNRJHAXCCURVXBSKDOARJMIBLXZGLSYDTGPZUPWDNROWJDNRZOBFJNXFRQEQYPVCQUPKYLDYDYSDIWZGYXHLJSTVPRWFRAIQBZNZMEGRLIHAECJHAMDPTUVWQKTPBEHEYAIJGZFQASMXNXYHSHP");
    msg.lat = 0.5407398926850681;
    msg.lon = 0.5365657945116687;
    msg.sog = 0.298639832947578;
    msg.uc = 0.542877072012346;
    msg.depth = 0.938852744021282;
    msg.value = 0.7450771490558816;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.41231316496979076);
    msg.setSource(8633U);
    msg.setSourceEntity(100U);
    msg.setDestination(46743U);
    msg.setDestinationEntity(105U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.7852230226264069;
    tmp_msg_0.x = 0.8014525359509819;
    tmp_msg_0.y = 0.4251427620410535;
    tmp_msg_0.z = 0.3120334806422872;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.9688158475240156;
    tmp_msg_1.x = 0.03747327079032392;
    tmp_msg_1.y = 0.05908545744618876;
    tmp_msg_1.z = 0.8713301699306203;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.08962228366142388;
    tmp_msg_2.value = 0.2625597481901327;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.0035783680480045987);
    msg.setSource(29503U);
    msg.setSourceEntity(96U);
    msg.setDestination(29531U);
    msg.setDestinationEntity(81U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.8888059290756557;
    tmp_msg_0.x = 0.9611762293030762;
    tmp_msg_0.y = 0.0972088601060983;
    tmp_msg_0.z = 0.9839257094744177;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.6805887414031074;
    tmp_msg_1.x = 0.995978968233144;
    tmp_msg_1.y = 0.5403229073189413;
    tmp_msg_1.z = 0.05516191232157652;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.5646845758378141;
    tmp_msg_2.value = 0.3310499073377512;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.24967921665819992);
    msg.setSource(40390U);
    msg.setSourceEntity(201U);
    msg.setDestination(23752U);
    msg.setDestinationEntity(191U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.37503055683915476;
    tmp_msg_0.x = 0.9386123577793313;
    tmp_msg_0.y = 0.5721699730441705;
    tmp_msg_0.z = 0.8558520800999522;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.4678684596640892;
    tmp_msg_1.x = 0.5804257620214204;
    tmp_msg_1.y = 0.39777855987224153;
    tmp_msg_1.z = 0.7147949047572366;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.9461324865328159;
    tmp_msg_2.value = 0.16392144359887006;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.15217492286237722);
    msg.setSource(61072U);
    msg.setSourceEntity(96U);
    msg.setDestination(24147U);
    msg.setDestinationEntity(72U);
    msg.gdop = 0.13092364246181099;
    msg.pdop = 0.7252685417002597;
    msg.tdop = 0.4382770909088063;
    msg.vdop = 0.3112188912562146;
    msg.hdop = 0.3199047969940385;
    msg.ndop = 0.37242571809033387;
    msg.edop = 0.5349184746606402;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.6155827315474073);
    msg.setSource(26914U);
    msg.setSourceEntity(176U);
    msg.setDestination(28573U);
    msg.setDestinationEntity(27U);
    msg.gdop = 0.7241867023130334;
    msg.pdop = 0.9098196260204469;
    msg.tdop = 0.8088002573771237;
    msg.vdop = 0.9321782224808082;
    msg.hdop = 0.5831350542358238;
    msg.ndop = 0.8773404435057292;
    msg.edop = 0.24267400280378426;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.5176281779596856);
    msg.setSource(33961U);
    msg.setSourceEntity(232U);
    msg.setDestination(1329U);
    msg.setDestinationEntity(254U);
    msg.gdop = 0.7801818503736202;
    msg.pdop = 0.8271384400023378;
    msg.tdop = 0.691172847632493;
    msg.vdop = 0.3208809224881034;
    msg.hdop = 0.7247336041226046;
    msg.ndop = 0.8383971195461297;
    msg.edop = 0.8275138153000717;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.3461026109583081);
    msg.setSource(22878U);
    msg.setSourceEntity(77U);
    msg.setDestination(64849U);
    msg.setDestinationEntity(33U);
    msg.meanx = 0.9376654838749608;
    msg.meany = 0.7283918321693862;
    msg.meanz = 0.375980241647769;
    msg.dur = 3012365248U;
    msg.meanacc = 0.36326213024611;
    msg.obs = 2397935102U;
    msg.valid = 133U;
    msg.active = 143U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.4642082106800237);
    msg.setSource(1995U);
    msg.setSourceEntity(99U);
    msg.setDestination(38299U);
    msg.setDestinationEntity(146U);
    msg.meanx = 0.09005223464515388;
    msg.meany = 0.8870759542475812;
    msg.meanz = 0.4566302765513547;
    msg.dur = 112547219U;
    msg.meanacc = 0.2691926159582839;
    msg.obs = 3837074373U;
    msg.valid = 175U;
    msg.active = 144U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.2665513533212539);
    msg.setSource(909U);
    msg.setSourceEntity(32U);
    msg.setDestination(43914U);
    msg.setDestinationEntity(167U);
    msg.meanx = 0.035898909535862056;
    msg.meany = 0.055462762615883454;
    msg.meanz = 0.06269623995463203;
    msg.dur = 1032125558U;
    msg.meanacc = 0.12279300111728653;
    msg.obs = 1885036726U;
    msg.valid = 155U;
    msg.active = 106U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.4957231052101201);
    msg.setSource(10898U);
    msg.setSourceEntity(148U);
    msg.setDestination(60250U);
    msg.setDestinationEntity(32U);
    msg.gpsfixtype = 92U;
    msg.flags = 216U;
    msg.diffcorr = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.7227365977439164);
    msg.setSource(19307U);
    msg.setSourceEntity(164U);
    msg.setDestination(27464U);
    msg.setDestinationEntity(97U);
    msg.gpsfixtype = 60U;
    msg.flags = 86U;
    msg.diffcorr = 103U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.9150232729933568);
    msg.setSource(36144U);
    msg.setSourceEntity(93U);
    msg.setDestination(14543U);
    msg.setDestinationEntity(226U);
    msg.gpsfixtype = 247U;
    msg.flags = 97U;
    msg.diffcorr = 230U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.21838646565379327);
    msg.setSource(2196U);
    msg.setSourceEntity(225U);
    msg.setDestination(19110U);
    msg.setDestinationEntity(97U);
    msg.gnssid = 83U;
    msg.svid = 150U;
    msg.sigid = 46U;
    msg.freqid = 35U;
    msg.prres = 0.025936879919288502;
    msg.cno = 75U;
    msg.qualityind = 105U;
    msg.corrsource = 38U;
    msg.ionomodel = 16U;
    msg.health = 66U;
    msg.sigflags = 147U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.6222777259861451);
    msg.setSource(42507U);
    msg.setSourceEntity(190U);
    msg.setDestination(58028U);
    msg.setDestinationEntity(185U);
    msg.gnssid = 92U;
    msg.svid = 96U;
    msg.sigid = 139U;
    msg.freqid = 47U;
    msg.prres = 0.27720096080668155;
    msg.cno = 187U;
    msg.qualityind = 44U;
    msg.corrsource = 105U;
    msg.ionomodel = 178U;
    msg.health = 202U;
    msg.sigflags = 16U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.9456478015896285);
    msg.setSource(58665U);
    msg.setSourceEntity(197U);
    msg.setDestination(38257U);
    msg.setDestinationEntity(152U);
    msg.gnssid = 162U;
    msg.svid = 25U;
    msg.sigid = 205U;
    msg.freqid = 227U;
    msg.prres = 0.5270037995735932;
    msg.cno = 39U;
    msg.qualityind = 27U;
    msg.corrsource = 238U;
    msg.ionomodel = 137U;
    msg.health = 178U;
    msg.sigflags = 236U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.12043480515154525);
    msg.setSource(2878U);
    msg.setSourceEntity(38U);
    msg.setDestination(41861U);
    msg.setDestinationEntity(74U);
    msg.numsigs = 197U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 87U;
    tmp_msg_0.svid = 130U;
    tmp_msg_0.sigid = 238U;
    tmp_msg_0.freqid = 211U;
    tmp_msg_0.prres = 0.23439762614324977;
    tmp_msg_0.cno = 7U;
    tmp_msg_0.qualityind = 219U;
    tmp_msg_0.corrsource = 125U;
    tmp_msg_0.ionomodel = 22U;
    tmp_msg_0.health = 28U;
    tmp_msg_0.sigflags = 51U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.1974643794641554);
    msg.setSource(38249U);
    msg.setSourceEntity(81U);
    msg.setDestination(58403U);
    msg.setDestinationEntity(123U);
    msg.numsigs = 90U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.004635367445269378);
    msg.setSource(21696U);
    msg.setSourceEntity(117U);
    msg.setDestination(43681U);
    msg.setDestinationEntity(58U);
    msg.numsigs = 147U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.756984170934512);
    msg.setSource(30072U);
    msg.setSourceEntity(19U);
    msg.setDestination(46450U);
    msg.setDestinationEntity(221U);
    msg.gnssid = 96U;
    msg.svid = 230U;
    msg.elev = 0.9506077620332265;
    msg.azim = 0.33535265103852374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.8905160700767092);
    msg.setSource(18445U);
    msg.setSourceEntity(123U);
    msg.setDestination(42597U);
    msg.setDestinationEntity(49U);
    msg.gnssid = 55U;
    msg.svid = 130U;
    msg.elev = 0.5369296549341998;
    msg.azim = 0.8399187454090231;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.3153138707780906);
    msg.setSource(23554U);
    msg.setSourceEntity(135U);
    msg.setDestination(41923U);
    msg.setDestinationEntity(140U);
    msg.gnssid = 239U;
    msg.svid = 21U;
    msg.elev = 0.7522212959800488;
    msg.azim = 0.05148587152562201;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.7961629004425053);
    msg.setSource(22256U);
    msg.setSourceEntity(72U);
    msg.setDestination(161U);
    msg.setDestinationEntity(48U);
    msg.numsvs = 189U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 170U;
    tmp_msg_0.svid = 184U;
    tmp_msg_0.elev = 0.6984065214415325;
    tmp_msg_0.azim = 0.577423470655168;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.024235353649572966);
    msg.setSource(59029U);
    msg.setSourceEntity(212U);
    msg.setDestination(19927U);
    msg.setDestinationEntity(226U);
    msg.numsvs = 49U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 183U;
    tmp_msg_0.svid = 194U;
    tmp_msg_0.elev = 0.519306976143379;
    tmp_msg_0.azim = 0.7878480770426858;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.7666957455239171);
    msg.setSource(37753U);
    msg.setSourceEntity(206U);
    msg.setDestination(29702U);
    msg.setDestinationEntity(181U);
    msg.numsvs = 254U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 51U;
    tmp_msg_0.svid = 50U;
    tmp_msg_0.elev = 0.5084083641117717;
    tmp_msg_0.azim = 0.7969006680274736;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.733243744157262);
    msg.setSource(46593U);
    msg.setSourceEntity(73U);
    msg.setDestination(20094U);
    msg.setDestinationEntity(153U);
    msg.refstationid = 64608U;
    msg.itow = 3329882806U;
    msg.relposn = 0.9647540705008907;
    msg.relpose = 0.7250561590591684;
    msg.relposd = 0.9209192007768534;
    msg.relposlength = 0.5321255516787443;
    msg.relposheading = 0.6413803064344993;
    msg.accn = 0.5732180091384534;
    msg.acce = 0.7387222809113481;
    msg.accd = 0.26537581047277536;
    msg.acclength = 0.47315091922594743;
    msg.accheading = 0.39207371414241576;
    msg.gnssfixok = 2U;
    msg.diffsoln = 248U;
    msg.relposvalid = 179U;
    msg.ismoving = 196U;
    msg.refposmiss = 157U;
    msg.refobsmiss = 191U;
    msg.relposheadingvalid = 196U;
    msg.carrsoln = 51U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.21229803794974167);
    msg.setSource(2139U);
    msg.setSourceEntity(247U);
    msg.setDestination(39172U);
    msg.setDestinationEntity(51U);
    msg.refstationid = 15330U;
    msg.itow = 2513847980U;
    msg.relposn = 0.27952488506118345;
    msg.relpose = 0.5955265624044475;
    msg.relposd = 0.3161391573416803;
    msg.relposlength = 0.7099749536135099;
    msg.relposheading = 0.6154341360938407;
    msg.accn = 0.6844838400579369;
    msg.acce = 0.5170248278448158;
    msg.accd = 0.2898439234478002;
    msg.acclength = 0.06293726053953708;
    msg.accheading = 0.5173017931606693;
    msg.gnssfixok = 213U;
    msg.diffsoln = 179U;
    msg.relposvalid = 100U;
    msg.ismoving = 72U;
    msg.refposmiss = 123U;
    msg.refobsmiss = 171U;
    msg.relposheadingvalid = 200U;
    msg.carrsoln = 125U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.02596428081363067);
    msg.setSource(20823U);
    msg.setSourceEntity(66U);
    msg.setDestination(29586U);
    msg.setDestinationEntity(92U);
    msg.refstationid = 63359U;
    msg.itow = 2703183949U;
    msg.relposn = 0.6224073507630398;
    msg.relpose = 0.9597029021438258;
    msg.relposd = 0.4761009708566517;
    msg.relposlength = 0.3672199838842678;
    msg.relposheading = 0.12970420047897768;
    msg.accn = 0.9426243098357916;
    msg.acce = 0.9257625079465801;
    msg.accd = 0.2055922657997462;
    msg.acclength = 0.021904707891487463;
    msg.accheading = 0.19011689611190263;
    msg.gnssfixok = 218U;
    msg.diffsoln = 4U;
    msg.relposvalid = 33U;
    msg.ismoving = 80U;
    msg.refposmiss = 218U;
    msg.refobsmiss = 196U;
    msg.relposheadingvalid = 122U;
    msg.carrsoln = 118U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.8815357294822544);
    msg.setSource(63506U);
    msg.setSourceEntity(244U);
    msg.setDestination(5686U);
    msg.setDestinationEntity(129U);
    IMC::CollisionAvoidance tmp_msg_0;
    tmp_msg_0.mmsi.assign("GPECRWLAIYFFHDAKOMKTDEWJMPBOIEFLGBWHIDSYRSVZJXWJLQLQCBAZGKMNSYFLQVGNZPKCCYHWQDVHA");
    tmp_msg_0.lat = 0.5386660414537056;
    tmp_msg_0.lon = 0.7036793719022257;
    tmp_msg_0.x = 0.03113856306800178;
    tmp_msg_0.y = 0.4282973755128885;
    tmp_msg_0.speed = 0.244892068291373;
    tmp_msg_0.course = 0.4661682102220014;
    tmp_msg_0.dist = 0.23337328793910017;
    tmp_msg_0.length = 0.2528955760064422;
    tmp_msg_0.width = 0.4047747994674077;
    tmp_msg_0.o_vect = 0.40108380092156726;
    msg.obstacles.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.629558283691489);
    msg.setSource(39972U);
    msg.setSourceEntity(129U);
    msg.setDestination(9393U);
    msg.setDestinationEntity(126U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.08105713045736351);
    msg.setSource(59902U);
    msg.setSourceEntity(169U);
    msg.setDestination(32199U);
    msg.setDestinationEntity(143U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  return test.getReturnValue();
}
