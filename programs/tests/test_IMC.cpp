//***************************************************************************
// Copyright 2007-2023 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Ricardo Martins                                                  *
//***************************************************************************
// Automatically generated.                                                 *
//***************************************************************************
// IMC XML MD5: 9bcf4ad79d246ffa0ed6d19987c53590                            *
//***************************************************************************

// DUNE headers.
#include <DUNE/DUNE.hpp>

using DUNE_NAMESPACES;

#include "Test.hpp"

int
main(void)
{
  Test test("IMC Serialization/Deserialization");

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.8136225910450718);
    msg.setSource(2860U);
    msg.setSourceEntity(239U);
    msg.setDestination(36751U);
    msg.setDestinationEntity(206U);
    msg.state = 210U;
    msg.flags = 9U;
    msg.description.assign("RSPKKBMXJYJPCOZTZPXNUXWRDASDXTIYCKHYJWSFEZENCWNSLIRPGLFCJEFOABJNRGUEDOLTTMSMMUWRVOPNYCAFNBXETQXA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.03152745967309423);
    msg.setSource(14917U);
    msg.setSourceEntity(3U);
    msg.setDestination(17929U);
    msg.setDestinationEntity(203U);
    msg.state = 216U;
    msg.flags = 67U;
    msg.description.assign("NBIEDYMOWICIXYJLUMNSJCONHHBBPHTCCPZVLLUPSGKXSKVHDYULVNKAZPTQOCNWIGJEJGIFSSIEZOEXQZBAWKSIXDEMFDEHGXSGINDWMBRRLGWZCGURAHAAAUBLTJICDTHPXEJXQTVZDMUVATFCRTMHBEFWPBYPOTFYKRPABLOJRROXQMZTLQAPKMYYSNY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.0019107592520682948);
    msg.setSource(65074U);
    msg.setSourceEntity(98U);
    msg.setDestination(53433U);
    msg.setDestinationEntity(139U);
    msg.state = 244U;
    msg.flags = 205U;
    msg.description.assign("LEUVAOUBIOKOZMYTHYNHMPWCKJIXXWETEHGHXXQXRAFJTJRMPCOBOLALRSDWCHTUVJQLFBKCYNEQZOKRHEZXQMNGJYSDGBRTKDODEZXUAKVYTIZVCVIMOLHBHQAWSISNTMCAQDDYVQQIBYPKGRVTSXHRXRLKNKGVFH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.07466042846635212);
    msg.setSource(15577U);
    msg.setSourceEntity(108U);
    msg.setDestination(62354U);
    msg.setDestinationEntity(86U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.06736752038597238);
    msg.setSource(9349U);
    msg.setSourceEntity(118U);
    msg.setDestination(7063U);
    msg.setDestinationEntity(46U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.029238075196029945);
    msg.setSource(48777U);
    msg.setSourceEntity(32U);
    msg.setDestination(24817U);
    msg.setDestinationEntity(220U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.4874265103356763);
    msg.setSource(31110U);
    msg.setSourceEntity(210U);
    msg.setDestination(7234U);
    msg.setDestinationEntity(112U);
    msg.id = 81U;
    msg.label.assign("GWFTGFCIUYMGECFWBEULEQGLFKELWOABGKNWVJWVUGXPBXDKTSRHJWXJZBQAOSRNQVPQZTIDXYJRTSQBRZIHHNADRJLUVGA");
    msg.component.assign("XFDCBGKZPYKAIOARQTNKXNTMLYHNWEUCJYMBPZBDKFGENFCRTTSCMJEQVHOBJEXLOEJRKAWZFGMIOWJUREJPKRSNZAWBDCMCGBATSVQQWDHDAGODITHKGJPMYWHTVAFMWXBRLLKTOVXVGFPQLEXSVHBOWFYHSQZRZQJISDNZLVXLYCMQIAYABHUSLGTFRWOPLPCISPJUM");
    msg.act_time = 5506U;
    msg.deact_time = 31265U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.9854713372090824);
    msg.setSource(63679U);
    msg.setSourceEntity(165U);
    msg.setDestination(6460U);
    msg.setDestinationEntity(169U);
    msg.id = 141U;
    msg.label.assign("KLNEJFJXOPOCGEKFIQHJVUFSCIBDXUEYXPPZUPVDZNGFNSUTQJTOGQRQCYGSIWLVZWSZVQTDUHKGOZLBYJVOUGBVIUGDLRBOYPEMMSJZDDIVYGRKSHCAWTGNREFNPUAQDBQIRAAVLLFWDKHQBBVOTZOXJWDTSSLMEWXEKLHMVJFNCPQARKPNALARCJYBWXRFUZMXSHYPHHHMAOSAGFBJYDTKWACICRMMCKEYQNZ");
    msg.component.assign("GEDJGMJQMZILNVKTXUIOJPRSJSCVLMGEMHDWQLYSLSXDOAORTWEYOBCZPTSAPWLPRDSUVOBKBVWFHLBRKWVBGYUCRHXRQUCTWIJRDQCZWWLZJXPMETQLHOYSQBKIGNYKHFAHANDPJHGVZDIOUWKKUGXNFFCQQBFNAYZGIYQCILEZTNDDIWSMFECXTIVKVHMKJBSPCRUHACYJEJOUOBLGXTANUEUPHESYAFRQFZAZATPMXNYNMFZXX");
    msg.act_time = 19526U;
    msg.deact_time = 57896U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.34345097167391403);
    msg.setSource(43776U);
    msg.setSourceEntity(154U);
    msg.setDestination(44005U);
    msg.setDestinationEntity(92U);
    msg.id = 159U;
    msg.label.assign("QABAYIVZTOMIQBEYPJFXZITEVQQHXBHBUDGTQBOVMDIFFGEWXMKYPNJBDXLIVHLDHSZCUOKEHKHVOQYFZKBWPRATQSGLZJSCKADUNVGZXLOZFJQKFCJJWIODRRUFFCSKCQIANWRCYMSCSOYNCAGPN");
    msg.component.assign("UOLAZATDHDMCZQHFVBGIISRMGUIZDCWUEMRXLLLTMXIVOZUHXBMNUWVWBWRFYSORFCINCTQIEVONFASHBQMWWFRLXSPOYUHWTSWJYJCAPOJTEPFDTRJNZLCLXHTXZBIIXJKDNSDSQJNQEDFHGECEWSUZQZTUGXJHTIKNPQVYYOAJENYMKZOG");
    msg.act_time = 22599U;
    msg.deact_time = 23315U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.240340589528521);
    msg.setSource(63200U);
    msg.setSourceEntity(94U);
    msg.setDestination(35759U);
    msg.setDestinationEntity(0U);
    msg.id = 181U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.6671435849313917);
    msg.setSource(32528U);
    msg.setSourceEntity(114U);
    msg.setDestination(7547U);
    msg.setDestinationEntity(181U);
    msg.id = 22U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.05865213331953445);
    msg.setSource(43648U);
    msg.setSourceEntity(245U);
    msg.setDestination(24882U);
    msg.setDestinationEntity(215U);
    msg.id = 118U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.8064868078613402);
    msg.setSource(28024U);
    msg.setSourceEntity(170U);
    msg.setDestination(32613U);
    msg.setDestinationEntity(78U);
    msg.op = 121U;
    msg.list.assign("AGMFKKYLSHRCFBYOUQCMFELXJZELDHRHQOKEPIADBKRTUVCHPDZPONRASATSDIWDYVIGROPAINHSCGNNZWXMXQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.6715260662284911);
    msg.setSource(64423U);
    msg.setSourceEntity(249U);
    msg.setDestination(63006U);
    msg.setDestinationEntity(193U);
    msg.op = 116U;
    msg.list.assign("CEVTVYAPFTGVCVNBHTQYIFDMCKEPYQMXAJGDIZSWUNCPBMFZUOPELPOIZJDQSOYSDQPUVEITXKJFJJIGBJPEIUIBZHHYWTNKLWEJTDZDAYNDNLDESWSMQBLQKNJXSLRXPOBWKUOZLON");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.026973572180771788);
    msg.setSource(36925U);
    msg.setSourceEntity(184U);
    msg.setDestination(1163U);
    msg.setDestinationEntity(35U);
    msg.op = 51U;
    msg.list.assign("UBGEGWEPHOAMAKBBABCDOQMQHVLVFASPEWCMYDIBYFBJTRVWHLRMUPXNQPKROFTFXJQBLSQPUXAVS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.22383986057282257);
    msg.setSource(61488U);
    msg.setSourceEntity(188U);
    msg.setDestination(51469U);
    msg.setDestinationEntity(15U);
    msg.value = 71U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.19610407202079372);
    msg.setSource(39989U);
    msg.setSourceEntity(19U);
    msg.setDestination(10900U);
    msg.setDestinationEntity(179U);
    msg.value = 234U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.6082232661038393);
    msg.setSource(34293U);
    msg.setSourceEntity(229U);
    msg.setDestination(61540U);
    msg.setDestinationEntity(13U);
    msg.value = 110U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.6685796083614219);
    msg.setSource(48926U);
    msg.setSourceEntity(126U);
    msg.setDestination(61426U);
    msg.setDestinationEntity(18U);
    msg.consumer.assign("VMCAFHRZNEZCLWSRNWYESKWWMPUDAPXQEAWHJACKZSNQUXJSBDLNBMNUUASIRFVRMIGHFBDDTTFILSIWMWQTCGPITVXKCEQEVECMROSRRBEITXYHDMVANLBCVZYUZPJATUHDOILBKYZPWONPGHBTDYYCJOXKNFLDJWVVTURXYRIERYMCKDKNGFSOTGOQUTHPGJHFLZXOLSIQQHXQNPUOAMXZQIF");
    msg.message_id = 12802U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.25507190587158945);
    msg.setSource(53125U);
    msg.setSourceEntity(208U);
    msg.setDestination(55980U);
    msg.setDestinationEntity(245U);
    msg.consumer.assign("OIIYXGPTTHDAMELOAXYCUZASUASWXXLBIQQHQRKUTYCPGYHJDRLBKLRJHJFGBJOBRGVSUDGRAKUTWOUTBMFZZVBMIPZSMSOVFFMVZFABDLZNJLSXOVCPLBXDZNEQFQXAPCEVLKMREQGVYAKNFIWLGPMAPKORPKNEOFCCJWJJEDWVRKINUSHYDQTXUGDYEMPHIPHFCTCYTWSNSNEKTKQ");
    msg.message_id = 61256U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.41809183247293336);
    msg.setSource(32121U);
    msg.setSourceEntity(239U);
    msg.setDestination(27960U);
    msg.setDestinationEntity(150U);
    msg.consumer.assign("SMVEHYJRFCJTWWFESNUDGZABSRLQZHEUFIIQRNKDMJSTHUUWPLUMVBVOWPUKQFUDFYXWRIBYXDHCAZMZDIIYMJWLYVZBPQTGCGPQSROCCOZFQAARSSUQJNSVIKTHIGMAXZPKOXDRKGLZWLQOKANVVXKJMUDNFAGCLAKCTWNLTQBJOMPXLAXRFOYOQZHBENTGAIXINBCKEBEOTZTDGEW");
    msg.message_id = 63348U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.7935031074016696);
    msg.setSource(64076U);
    msg.setSourceEntity(253U);
    msg.setDestination(45892U);
    msg.setDestinationEntity(142U);
    msg.type = 92U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.46836523307957467);
    msg.setSource(59413U);
    msg.setSourceEntity(146U);
    msg.setDestination(23798U);
    msg.setDestinationEntity(47U);
    msg.type = 237U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.8695200428677788);
    msg.setSource(31109U);
    msg.setSourceEntity(164U);
    msg.setDestination(22622U);
    msg.setDestinationEntity(76U);
    msg.type = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.41926345035017876);
    msg.setSource(8802U);
    msg.setSourceEntity(120U);
    msg.setDestination(23123U);
    msg.setDestinationEntity(16U);
    msg.op = 210U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.6733773320667654);
    msg.setSource(52753U);
    msg.setSourceEntity(194U);
    msg.setDestination(57513U);
    msg.setDestinationEntity(91U);
    msg.op = 100U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.457295623885425);
    msg.setSource(53990U);
    msg.setSourceEntity(243U);
    msg.setDestination(30145U);
    msg.setDestinationEntity(254U);
    msg.op = 9U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.04276729854074879);
    msg.setSource(29894U);
    msg.setSourceEntity(74U);
    msg.setDestination(26462U);
    msg.setDestinationEntity(46U);
    msg.total_steps = 17U;
    msg.step_number = 242U;
    msg.step.assign("YGCNTOAVHYUEKLITHLWYYIIDHIQDKKOTNUCMXKBNJGFVZFXGXOEZGRTFUCUZEVBC");
    msg.flags = 91U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.9057542114595348);
    msg.setSource(42274U);
    msg.setSourceEntity(86U);
    msg.setDestination(47834U);
    msg.setDestinationEntity(174U);
    msg.total_steps = 144U;
    msg.step_number = 208U;
    msg.step.assign("AHRQQKHUWJLCHDNYNZUJGSIEFKXTLFUGOZBCIDLBXBEKZB");
    msg.flags = 171U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.3010221081920468);
    msg.setSource(36212U);
    msg.setSourceEntity(90U);
    msg.setDestination(47857U);
    msg.setDestinationEntity(178U);
    msg.total_steps = 34U;
    msg.step_number = 186U;
    msg.step.assign("SVUTKOBPPMBFASKWHTBWZLQXXKLAWAKQOAASDXVVRMYRNIJXFVUGLPBOBNMODRXMQXJKENPSDYUEDGWWQCNTSCTLFPGFNVURFGZLMAWJHPZZHCAMXMECUOITEKKEYRJYRNBTSYGIDRDSGMIQQEBIJZCZOHIOLXVSDDJWQJCOHJBTHEBCFVPGTUDEPSGIAOYSCGLTRLMIRZKUZWEDMHPT");
    msg.flags = 236U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.348474716972889);
    msg.setSource(45228U);
    msg.setSourceEntity(43U);
    msg.setDestination(34608U);
    msg.setDestinationEntity(20U);
    msg.state = 236U;
    msg.error.assign("POSEMQNGLJGDHGXPNIXSYWLQYESDFPOIXPTEIOQRGOKZAZTVWIUDLZDCNQRLLTRNXMNP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.5946481297181955);
    msg.setSource(35844U);
    msg.setSourceEntity(163U);
    msg.setDestination(33420U);
    msg.setDestinationEntity(252U);
    msg.state = 152U;
    msg.error.assign("OGCEKIWBEQWNTZLKQHSTAUYWFIFIARFWIJGZMTGURVTFLHJZFJZDSCABRNPSBOTVBICKRQTIHAZFEVYJQINAHRKOLDMBDNETOQMJWQXZEVJPMXLIUEXUGXYVNGDBYWVDKIZEXACVEAUXCZQPLULCRLROXHYOTKHPWBMLYGQYEACKVFNTMYSJAVXSPCCDBGQZOPBDNSDSAWHOYTOUSWJVGMQKPMNXFGMKU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.21955337605693104);
    msg.setSource(56088U);
    msg.setSourceEntity(153U);
    msg.setDestination(43007U);
    msg.setDestinationEntity(14U);
    msg.state = 62U;
    msg.error.assign("ZGIBGSNTWTNCMGRSZEAITTADZAPLROKDWEMKXNSFFQCMJGOULYWBCYBRJFEXVVYNQPPUHJCCVTWDOAGRZUXDKBQNXXGXMDRTXZLEWCY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.8499694099136103);
    msg.setSource(35130U);
    msg.setSourceEntity(86U);
    msg.setDestination(40126U);
    msg.setDestinationEntity(117U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.51808280147635);
    msg.setSource(29181U);
    msg.setSourceEntity(186U);
    msg.setDestination(26438U);
    msg.setDestinationEntity(20U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.07388661171061528);
    msg.setSource(10817U);
    msg.setSourceEntity(114U);
    msg.setDestination(15623U);
    msg.setDestinationEntity(144U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.2302289171179367);
    msg.setSource(57040U);
    msg.setSourceEntity(161U);
    msg.setDestination(10541U);
    msg.setDestinationEntity(95U);
    msg.op = 24U;
    msg.speed_min = 0.4277676908425766;
    msg.speed_max = 0.5321994118392649;
    msg.long_accel = 0.35698032102404076;
    msg.alt_max_msl = 0.2359320264917707;
    msg.dive_fraction_max = 0.815999992373627;
    msg.climb_fraction_max = 0.9890368391567321;
    msg.bank_max = 0.8288591563200007;
    msg.p_max = 0.8071256531491641;
    msg.pitch_min = 0.83850230861518;
    msg.pitch_max = 0.03712780043801267;
    msg.q_max = 0.9715694294947798;
    msg.g_min = 0.6637593824117111;
    msg.g_max = 0.4663326377407584;
    msg.g_lat_max = 0.325686341659711;
    msg.rpm_min = 0.15245987145338713;
    msg.rpm_max = 0.6932250804356189;
    msg.rpm_rate_max = 0.7489335179382828;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.4122043569628322);
    msg.setSource(58715U);
    msg.setSourceEntity(96U);
    msg.setDestination(48509U);
    msg.setDestinationEntity(225U);
    msg.op = 221U;
    msg.speed_min = 0.2567889014953807;
    msg.speed_max = 0.009290037732896939;
    msg.long_accel = 0.09807850388852868;
    msg.alt_max_msl = 0.36463570463914496;
    msg.dive_fraction_max = 0.5681915090274855;
    msg.climb_fraction_max = 0.0021408078875315706;
    msg.bank_max = 0.2434610799430036;
    msg.p_max = 0.6567423124144502;
    msg.pitch_min = 0.7525368368539634;
    msg.pitch_max = 0.4121086896917111;
    msg.q_max = 0.832912339145985;
    msg.g_min = 0.2721437797453401;
    msg.g_max = 0.7296078753923703;
    msg.g_lat_max = 0.1975862463267657;
    msg.rpm_min = 0.7392471549414897;
    msg.rpm_max = 0.8480665369703935;
    msg.rpm_rate_max = 0.6520692975702984;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.9230259144468635);
    msg.setSource(16311U);
    msg.setSourceEntity(16U);
    msg.setDestination(44604U);
    msg.setDestinationEntity(9U);
    msg.op = 131U;
    msg.speed_min = 0.397634888202803;
    msg.speed_max = 0.5282588203846467;
    msg.long_accel = 0.1590168201102572;
    msg.alt_max_msl = 0.7203116977964213;
    msg.dive_fraction_max = 0.42543673721603814;
    msg.climb_fraction_max = 0.08542144538451146;
    msg.bank_max = 0.8511314221913783;
    msg.p_max = 0.4562984590650824;
    msg.pitch_min = 0.43088542582743583;
    msg.pitch_max = 0.24442620817543947;
    msg.q_max = 0.6256518669852108;
    msg.g_min = 0.8364740559960734;
    msg.g_max = 0.2843947675676163;
    msg.g_lat_max = 0.25499731486862764;
    msg.rpm_min = 0.7943708701674215;
    msg.rpm_max = 0.33879058389626016;
    msg.rpm_rate_max = 0.7015406129521082;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.8651765101871501);
    msg.setSource(8559U);
    msg.setSourceEntity(51U);
    msg.setDestination(28195U);
    msg.setDestinationEntity(158U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.12879698418460694);
    msg.setSource(63352U);
    msg.setSourceEntity(232U);
    msg.setDestination(9838U);
    msg.setDestinationEntity(85U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.14575025073282943);
    msg.setSource(31269U);
    msg.setSourceEntity(61U);
    msg.setDestination(27725U);
    msg.setDestinationEntity(243U);
    IMC::GpsFix tmp_msg_0;
    tmp_msg_0.validity = 37651U;
    tmp_msg_0.type = 176U;
    tmp_msg_0.utc_year = 29019U;
    tmp_msg_0.utc_month = 122U;
    tmp_msg_0.utc_day = 45U;
    tmp_msg_0.utc_time = 0.3276766648927255;
    tmp_msg_0.lat = 0.22415565959256034;
    tmp_msg_0.lon = 0.3097607591578798;
    tmp_msg_0.height = 0.9580465718069561;
    tmp_msg_0.satellites = 252U;
    tmp_msg_0.cog = 0.35038990734763864;
    tmp_msg_0.sog = 0.5456342491089438;
    tmp_msg_0.hdop = 0.10994293422869228;
    tmp_msg_0.vdop = 0.7988377519934735;
    tmp_msg_0.hacc = 0.7509963333792332;
    tmp_msg_0.vacc = 0.4399584317250712;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.9505751750974814);
    msg.setSource(31327U);
    msg.setSourceEntity(39U);
    msg.setDestination(64227U);
    msg.setDestinationEntity(63U);
    msg.lat = 0.6581545059744975;
    msg.lon = 0.6868169747275994;
    msg.height = 0.5741819876602138;
    msg.x = 0.5544398966642624;
    msg.y = 0.8250009916415961;
    msg.z = 0.9874377708141028;
    msg.phi = 0.23580826912495467;
    msg.theta = 0.9881203203976123;
    msg.psi = 0.9494304021148137;
    msg.u = 0.737071104474231;
    msg.v = 0.2927506336774496;
    msg.w = 0.4176841825425398;
    msg.p = 0.05293998692951751;
    msg.q = 0.30732161591910245;
    msg.r = 0.20826492795952645;
    msg.svx = 0.4506141733275971;
    msg.svy = 0.727829068018622;
    msg.svz = 0.06323377582943845;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.20976114565659765);
    msg.setSource(13265U);
    msg.setSourceEntity(133U);
    msg.setDestination(8535U);
    msg.setDestinationEntity(40U);
    msg.lat = 0.24641116757398918;
    msg.lon = 0.17427431078258293;
    msg.height = 0.5009293039821421;
    msg.x = 0.05795762099063517;
    msg.y = 0.969846572631703;
    msg.z = 0.7127005043142224;
    msg.phi = 0.1693600771990489;
    msg.theta = 0.4182153521952584;
    msg.psi = 0.5615843320076173;
    msg.u = 0.028405090325341442;
    msg.v = 0.23883408916236204;
    msg.w = 0.0658405181211198;
    msg.p = 0.15097649612903452;
    msg.q = 0.7527517454516316;
    msg.r = 0.5090723579478138;
    msg.svx = 0.0395182042033736;
    msg.svy = 0.9501850183987829;
    msg.svz = 0.20196316960413496;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.7202722255529065);
    msg.setSource(35812U);
    msg.setSourceEntity(42U);
    msg.setDestination(12157U);
    msg.setDestinationEntity(61U);
    msg.lat = 0.6693540132816811;
    msg.lon = 0.21752615376191686;
    msg.height = 0.7004017522780348;
    msg.x = 0.023053021376412075;
    msg.y = 0.14667491254019838;
    msg.z = 0.7547842768690829;
    msg.phi = 0.1817189295057352;
    msg.theta = 0.9961282540310495;
    msg.psi = 0.35244695255844505;
    msg.u = 0.2860133555804535;
    msg.v = 0.5018692221118076;
    msg.w = 0.5675474080471818;
    msg.p = 0.04549361949349051;
    msg.q = 0.7922899447133852;
    msg.r = 0.26285184462846833;
    msg.svx = 0.17188494676105104;
    msg.svy = 0.05463373824449136;
    msg.svz = 0.4903614241077421;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.7601462367737817);
    msg.setSource(25231U);
    msg.setSourceEntity(106U);
    msg.setDestination(50215U);
    msg.setDestinationEntity(82U);
    msg.op = 208U;
    msg.entities.assign("JSKAGKDWSTSGQMOUCMJZFZVEQIUNVVBOHNLJPDLLRYTAUIGHQKJXIRRYYAEHVNKVQTGXBSXSARFRQHPJYGMBLUDBCJHDULPVAWGDOLXRMPFWCOWIWFTMFRBVGNEOJNUBLCXVUEHOQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.9964534473918782);
    msg.setSource(41036U);
    msg.setSourceEntity(47U);
    msg.setDestination(32343U);
    msg.setDestinationEntity(128U);
    msg.op = 250U;
    msg.entities.assign("BGIXSNOZGYTZSRLFEIJPDTUAHDGIOBUHEFEEIPFPZBPXAHSVEUQJDMDJWXHUPRRCIVQGIWYGCJALMFODNEJVJYSEECQLKMZEVNYQBWBSSUMHXWQWGWJHPLNCFARPXKAMLRFXOZVUOGKFTDTMLI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.5582233337991194);
    msg.setSource(19643U);
    msg.setSourceEntity(5U);
    msg.setDestination(40215U);
    msg.setDestinationEntity(0U);
    msg.op = 221U;
    msg.entities.assign("IGFKNDGAFMWHZUBRNTQKGBSOVZTWMAUHETWGAHZPYLKXELIKYENKBDOVAFDYRUSSPCPBXEAIKPVFKZWOFGIUMNHRMEBWLJQLTCJJLXYAWDHBLGLCQZCGRYDMTMKQRPQHQHRZMJYMDZBONPZHURANUO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.6108866729832773);
    msg.setSource(20836U);
    msg.setSourceEntity(55U);
    msg.setDestination(60320U);
    msg.setDestinationEntity(182U);
    msg.type = 166U;
    msg.speed = 59097U;
    const signed char tmp_msg_0[] = {-99, -4, 8, -70, -49, -71, 97, -75, -31, -99, 13, 72, -65, -91, -84, 3, -36, -128, -127, -108, -98, -54, 61, 80, 64, 119, 114, 40, -67, 122, 122, 28, 92, 69, -31, 25, -117, -13, 122, 8, -90, -40, -107, -38, 117, -60, 72, 54, 20, -93, -100, 36, -32, 1, 38, 55, -73, 97, -24, -62, -7, 1, -8, 17, 48, -116, 69, 2, -14, -102, 59, 81, -103, -79, 37, -64, -57, -50, 102, 6, 94, 82, -14, 95, -54, -94, -12, 122, 7, -92, 61, 109, 105, 48, -8, 120, 112};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.234999017871247);
    msg.setSource(65451U);
    msg.setSourceEntity(120U);
    msg.setDestination(52954U);
    msg.setDestinationEntity(80U);
    msg.type = 48U;
    msg.speed = 20124U;
    const signed char tmp_msg_0[] = {46, -42, -22, 30, 46, 107, 74, -31, -45, -6, -107, -22, 5, -15, -77, 4, 102, -18, -65, 102, -92, 15, 53, -114, -14, -81, 16, -89, 20, -31, -24, 104, -16, 62, -15, 8, -60, -54, 85, 75, -114, -91, -41, 15, -88, 119, -43, 121, -1, 7, -83, -10, 20, -89, -41, 74, -14, 89, 106, 26, 105, -2, 82, -70, 42, -3, -35, 113, 83, 67, 23, 102, 16, -9, -122, -85, -14, 57, 121, 104, -60, 56, 67, 47, -34, -110, 46, 10, -120, 21, 70, -38, 108, 26, 16, -122, 72, 115, 78, 39, 58, -124, -61, 109, -118, 15, -24, -124, 16, 79, -76, -119, 35, 81, -73, -92, -71, -34, 50, -96, 107, -101, -21, 124, -48, 53, 122, 20, -108, -111, 6, 66, 101, -2, -37, -110, 108, 28, 19, 93, -78, 108, -109, 100, 5, -84, 32, -8, -18, 19, -31, 13, -82, 66, -25, 13, 64, 19, -43, -14, -75, -58, 101, 84, 98, 31, -10, 30, -115, -16, 8, -84, -70, -62, -105, 22, -98, -17, 81, 35, -122, -91, -34, -12, 44, -79, -13, -89, -108, -32, -62, -113, -1, 7, -73, -101, 117, 113, -97, 117, 89, 119, 67, -52, -117, 32, -9, -49, 55, 124, -114, -21, 23, 95, -59, -25, -19, -47, -122, 17, 78, 111, 120, -115, 30, 64, -81, -84, -8, 59, 100, 13, 101, -18, -89, 79, 32, -5, -7, 19, 57, 10, -71, -8, 51, -92, 55, -31, 115, -111, -20, 6, -57};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.8065100339868402);
    msg.setSource(57786U);
    msg.setSourceEntity(206U);
    msg.setDestination(52167U);
    msg.setDestinationEntity(155U);
    msg.type = 125U;
    msg.speed = 29581U;
    const signed char tmp_msg_0[] = {2, 76, -33, 72, 93, -38, -49, 104, -7, -94, 121, 34, 4, 98, -36, -23, 110, 117, 34, 9, 13, 52, -96, 24, 86, -38, 22, -18, 23, 97, 12, 13, -101, 16, 82, -113, 42, -123, 80, 30, 71, 4, 51, -87, 68, -109, -78, 23, 88, 92, -75, 13, 75, -80, -106, -127, -80, -18, 2, -117, 10, 92, 26, 61, -58, -8, -107, 53, 54, 0, 125, -78, -102, -47, 82, -2, 17, -35, 90, -7, -102, 61, 102, -11, 53, 75, -47, -120, 8, -61, 118, 100, -37, 88, 70, 57, 31, 120, 53, -118, -77, -96, -107, 43, -118, 57, 10, 54, 26, 60, -99, -54, -56, 48, 115, 113, 75, -15, 69, -108, -48, -119, -81, -126, -39, -27, 97, -25, 58, -18, 71, 86, -16, -14, -82, -4, -126, -51, -6, -89, 102, -2, 13, 67, -106, 103, 21, -32, -99, -41, 29, -66, 64, -73, -32};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.9642360603868372);
    msg.setSource(53480U);
    msg.setSourceEntity(161U);
    msg.setDestination(15375U);
    msg.setDestinationEntity(136U);
    msg.op = 136U;
    msg.tas2acc_pgain = 0.019190263449871958;
    msg.bank2p_pgain = 0.7966470796386942;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.5382315596114325);
    msg.setSource(55858U);
    msg.setSourceEntity(205U);
    msg.setDestination(9061U);
    msg.setDestinationEntity(67U);
    msg.op = 137U;
    msg.tas2acc_pgain = 0.2760776316098338;
    msg.bank2p_pgain = 0.7706894896658093;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.483587209283203);
    msg.setSource(45730U);
    msg.setSourceEntity(71U);
    msg.setDestination(61922U);
    msg.setDestinationEntity(12U);
    msg.op = 156U;
    msg.tas2acc_pgain = 0.2759672371294497;
    msg.bank2p_pgain = 0.8142573435318492;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.5029371220547825);
    msg.setSource(12119U);
    msg.setSourceEntity(190U);
    msg.setDestination(42053U);
    msg.setDestinationEntity(89U);
    msg.available = 147752559U;
    msg.value = 227U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.8545942169840318);
    msg.setSource(50761U);
    msg.setSourceEntity(137U);
    msg.setDestination(45386U);
    msg.setDestinationEntity(251U);
    msg.available = 1457031083U;
    msg.value = 6U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.9147495856893322);
    msg.setSource(1782U);
    msg.setSourceEntity(251U);
    msg.setDestination(25738U);
    msg.setDestinationEntity(25U);
    msg.available = 3060683558U;
    msg.value = 69U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.5272440287634886);
    msg.setSource(63795U);
    msg.setSourceEntity(225U);
    msg.setDestination(20300U);
    msg.setDestinationEntity(40U);
    msg.op = 2U;
    msg.snapshot.assign("MOEAVQHRRGPDVJIMZRLLKTYRWHMLJYEWLXFCOYCUSEDDSYKMGRNGUVMPRXDSWKYVMVXQSQPEBVDNHSGNUIMGWTKJDSGZVDUCTGDXWUIONUNUOCFBXFOHQOWHARUKCKRQSZMPEGJOHZN");
    IMC::VehicleState tmp_msg_0;
    tmp_msg_0.op_mode = 11U;
    tmp_msg_0.error_count = 90U;
    tmp_msg_0.error_ents.assign("HJJVVORTIHEXVQABNDULGNNXRHQTIRYMULZWVNMCMESCJQPQJGPEZTXDFHRUEGSSURGPEMEZIMKJJZKTTONPGDDXUNXWOPDQWOPTYIVGGAGKCBEJCFRYATACNZTDGYPVCIFBFHSZOUHOMXQNBBFUBYLKIWOWUAVITMOFAUZWLGKQZYLHXCRQXLCNSQIXPFFOBK");
    tmp_msg_0.maneuver_type = 22298U;
    tmp_msg_0.maneuver_stime = 0.4217414839392889;
    tmp_msg_0.maneuver_eta = 36017U;
    tmp_msg_0.control_loops = 2379948770U;
    tmp_msg_0.flags = 29U;
    tmp_msg_0.last_error.assign("PLTRCTDLJKIWKGAQYISURWEKANDRRITMOTQQNEPNBHZABKPSXNHXXIXQFCDLISPJMKJYORHPLTAIVUZVVMVSJYMOOEUKZSVGVKVKRXBDRFDOZLCUPXFWS");
    tmp_msg_0.last_error_time = 0.6787922517152669;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.3008389434394524);
    msg.setSource(52890U);
    msg.setSourceEntity(112U);
    msg.setDestination(35208U);
    msg.setDestinationEntity(58U);
    msg.op = 131U;
    msg.snapshot.assign("VOLNYPDXQCZJSEFBDNRTKHQQPIGZMDVJBDCAQMAVQYMUICFBVLOFJZJDESWPIXNFORTBGOEKCYAJWYNQICERVKJPTVOHYRPNMNYOF");
    IMC::Target tmp_msg_0;
    tmp_msg_0.label.assign("EIFZTILVYXSVQWUYHAPKFXSIKBUMOTUUVBHNXSYEWIAQHWFLENGSRPTLJZPZAORSDKJVSFDRJDPZBVCMBPPOYJNLGFLDQZBEQNBPACJIRWJWKPWRPMGLVMETBSYPIAFXDVORHTLNAJDYODHASZAHUQNWKBWKGCHSOYDQYORCYZRIEEFWTCEEVUGGROHHMFBCM");
    tmp_msg_0.lat = 0.8743490504368309;
    tmp_msg_0.lon = 0.2292624321094353;
    tmp_msg_0.z = 0.8339759227095552;
    tmp_msg_0.z_units = 225U;
    tmp_msg_0.cog = 0.4591841220783571;
    tmp_msg_0.sog = 0.8201544774638079;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.6471314321225258);
    msg.setSource(54353U);
    msg.setSourceEntity(164U);
    msg.setDestination(43756U);
    msg.setDestinationEntity(126U);
    msg.op = 188U;
    msg.snapshot.assign("UAMBRARZTPRXVWXZACBWZJOODUKGWICIDIEJPDVQPQHXYBAFTSAPBQGBWWSWKLVTDPZNOGZNJTFCDMEKKCCXDEKRZRPDJHMSVMGFVXOLIISNBOHYPUXHHYXSLZMKSEAUEMJJDAQOFLHDRZPQRXOLOFZQIXLSMQIEGIRANUWNOSHFJLGGCCQUVFUYJTYTKQVGCKNNDNRQSCWIEILBMVYHTOULP");
    IMC::PulseDetectionControl tmp_msg_0;
    tmp_msg_0.op = 170U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.422632758571049);
    msg.setSource(21305U);
    msg.setSourceEntity(79U);
    msg.setDestination(12214U);
    msg.setDestinationEntity(170U);
    msg.op = 123U;
    msg.name.assign("QYNYLBDOCTHRFLEBZRFSMBKGWKOALECIADFVJKYBFJTSKPHMZIVEASVFLOIALFUVEGKNMOAHYWGOQUNIHNPNWZANPQXQKGXQBNVSFMMHEUIWXGPORFTJVBNZTCSICVWDJERHDIE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.40903555304179207);
    msg.setSource(9510U);
    msg.setSourceEntity(98U);
    msg.setDestination(42492U);
    msg.setDestinationEntity(43U);
    msg.op = 100U;
    msg.name.assign("WDQZDUNAJVBUTZQSKVENMWYOVKDAYVUMGJSSJASITZIMPVUFLQONCFDRIGBIFYDXOGKMGRDSYHNWCRAEDMJWTPJLOBFZJVBLMUNRECZVPPQAIYSTMHZUBLOAXKEWPCRXEXFHCGOLGQLHSKRCZFFNHNJTLHYZRSXAQKMKWQSNKTKYZQUKEITDOBXXGSCINLPPEAYEDQIUWGROYYOUBEAVPA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.2451220442562595);
    msg.setSource(4782U);
    msg.setSourceEntity(58U);
    msg.setDestination(39471U);
    msg.setDestinationEntity(64U);
    msg.op = 59U;
    msg.name.assign("ZGDAZZFDUXTNJLWLGLGINHQEBCVQEDYEZTYQTAVETSQEMKJXXNILMSWHAVCOUAUAGPOYKTBTTZPDMXYYHHSFGDUUMEXPSTVYKJCXZMLOENINLLABILMFDCDKYQIGBVSJDORYLSPPOIHWMWJGCWRRUCVAQRBQLHSYGVHKKBONAFRJPRTGFSNOKEJDDPZUXQKOWUWKQJFEIKZNRPPVINHFCGIZWJMBFRAWEBCIHCXXVUNVMOYSFHCFJX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.7340352003831567);
    msg.setSource(55658U);
    msg.setSourceEntity(249U);
    msg.setDestination(14027U);
    msg.setDestinationEntity(11U);
    msg.type = 227U;
    msg.htime = 0.18875705133663623;
    msg.context.assign("QGRUDDXCGLXRARJHJBUOLZPJEVSPWWZTCCQDGOYHNEUSLGWXIGQUCM");
    msg.text.assign("MHOHZNOZKTKJWUDDADYWYZFPOZTXHGQCKINVRKVWUIIGOJSYAFEMULLFODMCBWGSLWNSARHNCPNAREMDTUIZSIXSULPHENQDIDMXKCQBYQQVBVVNFUGZHCDYFSEPESNNZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.8985234663648649);
    msg.setSource(39116U);
    msg.setSourceEntity(10U);
    msg.setDestination(7929U);
    msg.setDestinationEntity(71U);
    msg.type = 179U;
    msg.htime = 0.7860149340438877;
    msg.context.assign("HYCTZEETPBLHNYQXARJPYTXJDIFBUBQEXATHRDFDLVIUTUTOEQZIGIZDACCSSFTRBIXAJKBPHRPHZRUTKBZWQNXWGJVJFCLVGFXLMYGLOPDYMNKAWNFYGKKRQZHAPOMNYZQEFGIWJSMCZNAXFUODVG");
    msg.text.assign("ELCVBDTRQAFIBHPALZAKMLXUVSBGUZIBKRNSDLTZMKLEKSMGVREBZDXWPYDJNVOOTHJTU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.32376664280609213);
    msg.setSource(19647U);
    msg.setSourceEntity(97U);
    msg.setDestination(46168U);
    msg.setDestinationEntity(51U);
    msg.type = 119U;
    msg.htime = 0.42589015808018105;
    msg.context.assign("HIVJQSJUBUMOSPGJLZYLZSWHZRCEBTWDDYLDHUYCNOGFQPVPPXIVUPDHCOHQTDLWMSSTIZTRFXPKWTNMVIRAUYQWGQFAKFBUBEGYYKVRFITTZZNDUXXKOVPDMWIAFUCIDWTMEMIRNOFXBJAAZLQCESSQJSXGAOKACLXVRNJBUTXCGKEJUQSLORXKNCNVJMVYBFRPMYNGE");
    msg.text.assign("JVVJZEYELIPCSRSVUHCSMDKIFTAHQYQRCDIKXMTQTYUCTUNTBHYLWXFJLOIGQNQDGLWIUBNMMCASJACZKBOYEJDXPCNZRPZZZWNDDYNPMRVHYOUKCWTJGFWXXIBVMKFIELRQVPZJZNKEXBKVGTPSSUOXHIEFLPORXP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.4181785126919476);
    msg.setSource(47004U);
    msg.setSourceEntity(67U);
    msg.setDestination(53337U);
    msg.setDestinationEntity(72U);
    msg.command = 73U;
    msg.htime = 0.8905787180820569;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 154U;
    tmp_msg_0.htime = 0.4199559069721811;
    tmp_msg_0.context.assign("ZVYEPAYMXJWEJGQLSWCQFTNGJEDZXCVPQGAXJEGWDAXDHKJRWJCLALZXDODPPNLIOBCEBXZTOIOUGJSGDUZUIVYVCUTBKEQRZQLHUXTYPJSKSCNVBWKNFEMSHDMOXBAQHDNWFJALYWFXHKILTNFZCRSNLMSYKTOZYBAQRRHCZKGSMXKIUQMMEWRQBAOBIESVPHFBIPKYGRPD");
    tmp_msg_0.text.assign("TURHQJFEMMMIVSOTATRIIFSKUBFBGGWUYNYAAALVOLGCXNR");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.9196698980164454);
    msg.setSource(56704U);
    msg.setSourceEntity(207U);
    msg.setDestination(31641U);
    msg.setDestinationEntity(1U);
    msg.command = 171U;
    msg.htime = 0.792744639528999;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.9854583960473525);
    msg.setSource(17257U);
    msg.setSourceEntity(221U);
    msg.setDestination(39956U);
    msg.setDestinationEntity(157U);
    msg.command = 141U;
    msg.htime = 0.06790705803135821;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.7299567651070655);
    msg.setSource(52338U);
    msg.setSourceEntity(197U);
    msg.setDestination(17018U);
    msg.setDestinationEntity(192U);
    msg.op = 163U;
    msg.file.assign("YGZGLRXBWCMVYCOFVFBSBDDHTQZJTKHTBHNHZZWBZYNIDGCVXUHNSEZUPZAXJPQSMSKLOHOZBQFAYNNXIBSLRVNMVTIAAHAOUYJXBNMBTNEQSLLLSARDGITJVGTECRWCWIHGXVUCRYOUQQQJDMEGUSCP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.9034786652906975);
    msg.setSource(987U);
    msg.setSourceEntity(226U);
    msg.setDestination(47014U);
    msg.setDestinationEntity(116U);
    msg.op = 135U;
    msg.file.assign("CXBOSDHYTIWVTPWDMXDPGHGRUELEUTVQDGAXYSKOEANMMCRAAABHSGNMDWZISHQDFQQZVKZNYHHEZEUUT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.20787216495891847);
    msg.setSource(21965U);
    msg.setSourceEntity(30U);
    msg.setDestination(6593U);
    msg.setDestinationEntity(26U);
    msg.op = 129U;
    msg.file.assign("FIMOVHRIQEAXZYOLFPLLFINSDGIHQZROTCVHPXDYSAHEWOPMTQZYARGVBVFXKQYTJGVWWBIUWHQHKCOBEADVZFOULMKITLPCGLQSWKEYYIHOZWGMZOGDWXUFLYLATVJCDEMBBAIESIUPRJSJQJHXLSBVBRHRGKQFNBUKLJERMCMHAVNSCNGGBZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.07908641277204576);
    msg.setSource(44073U);
    msg.setSourceEntity(236U);
    msg.setDestination(22289U);
    msg.setDestinationEntity(57U);
    msg.op = 230U;
    msg.clock = 0.7079758538402844;
    msg.tz = -113;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.2556713529855863);
    msg.setSource(16921U);
    msg.setSourceEntity(208U);
    msg.setDestination(33291U);
    msg.setDestinationEntity(152U);
    msg.op = 7U;
    msg.clock = 0.12931466089989274;
    msg.tz = 23;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.6697443029097476);
    msg.setSource(16574U);
    msg.setSourceEntity(83U);
    msg.setDestination(23483U);
    msg.setDestinationEntity(131U);
    msg.op = 182U;
    msg.clock = 0.6353106029424185;
    msg.tz = -26;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.8614919690156667);
    msg.setSource(13293U);
    msg.setSourceEntity(176U);
    msg.setDestination(20865U);
    msg.setDestinationEntity(33U);
    msg.conductivity = 0.8914882409696673;
    msg.temperature = 0.31958183435570764;
    msg.depth = 0.8476600391560921;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.869686127106276);
    msg.setSource(3717U);
    msg.setSourceEntity(202U);
    msg.setDestination(39762U);
    msg.setDestinationEntity(148U);
    msg.conductivity = 0.030346101007384885;
    msg.temperature = 0.2633801468140434;
    msg.depth = 0.9128138372012753;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.3441415014942557);
    msg.setSource(55337U);
    msg.setSourceEntity(50U);
    msg.setDestination(5750U);
    msg.setDestinationEntity(34U);
    msg.conductivity = 0.5863780874686066;
    msg.temperature = 0.5576437031662448;
    msg.depth = 0.5610284276223733;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.9160828383759777);
    msg.setSource(16549U);
    msg.setSourceEntity(38U);
    msg.setDestination(29809U);
    msg.setDestinationEntity(106U);
    msg.altitude = 0.043730160650720884;
    msg.roll = 18466U;
    msg.pitch = 7078U;
    msg.yaw = 26409U;
    msg.speed = -15060;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.9569861679769399);
    msg.setSource(51923U);
    msg.setSourceEntity(221U);
    msg.setDestination(7776U);
    msg.setDestinationEntity(105U);
    msg.altitude = 0.8547633967666142;
    msg.roll = 34127U;
    msg.pitch = 58908U;
    msg.yaw = 21941U;
    msg.speed = 20719;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.18002701596234172);
    msg.setSource(14888U);
    msg.setSourceEntity(41U);
    msg.setDestination(57633U);
    msg.setDestinationEntity(193U);
    msg.altitude = 0.8846810910283645;
    msg.roll = 53851U;
    msg.pitch = 50525U;
    msg.yaw = 6795U;
    msg.speed = 31618;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.8618501090802164);
    msg.setSource(44906U);
    msg.setSourceEntity(41U);
    msg.setDestination(29316U);
    msg.setDestinationEntity(155U);
    msg.altitude = 0.9914539167978276;
    msg.width = 0.8992659665493389;
    msg.length = 0.2796710014321335;
    msg.bearing = 0.5586122899228412;
    msg.pxl = -12685;
    msg.encoding = 56U;
    const signed char tmp_msg_0[] = {-80, 94, 4, 68, 68, -6, 85, 42, 110, -116, -5, 115, -128, 121, -127, 63, -67, -3, -12, -121, 21, -37, -14, -71, 93, -7, -122, -80, 49, 100, 20, -77, 17, 65, -90, -24, 114, 55, 2, 46, 58, -81, -100, -7, 7, -67, -60, -17, -70, 65, -124, -43, -102, -32, 6, -98, -91, 50, -66, 40, 103, 78, 115, 14, 68, 82, -87, -26, 23, -8, 26, -66, -15, 34, 105, 5, -62, 57, 18, 61, 49, -44, 14, 31, -3, 64, -92, 91, -1, -93, 82, 75, -98, -6, 120, -63, -59, -124, -101, -55, 46, 51, -39, -50, 71, 6, 93, -101, -98, 59, 44, 84, -18, -112, -101, 79, -17, -122, 115, -70, 112, 32, 119, 109, 51, 3, -50, -7, -98, 114, -69, 124, 4, 91, -42, 101, 36, 22, 106, -60, -101, 94, 74, 69, -116, -44, 47, -79, -14, -110, 79, -86, -114, -7, -88, 34, -14, -48, 100, -29, -120, 1, 4, -87, -73, 90, 1, -9, 59, -121, 55, -88};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.47063858144115556);
    msg.setSource(58393U);
    msg.setSourceEntity(99U);
    msg.setDestination(17120U);
    msg.setDestinationEntity(202U);
    msg.altitude = 0.9022970045194825;
    msg.width = 0.2095131869335155;
    msg.length = 0.33813354210638746;
    msg.bearing = 0.5709704460499554;
    msg.pxl = -1048;
    msg.encoding = 208U;
    const signed char tmp_msg_0[] = {20, -127, -35, 20, 71, -55, -58, -106, -87, 25, 0, 113, -59, 10, -110, 14, 76, -58, -10, 125, -75, 24, -92, 77, -73, -112, 87, -73, 113, -114, -3, -94, -24, -29, -54, 72, 98, 120, -102, 85, 20, -58, 2, 10, -100, 116, -56, -60, 116, -74, 42, -110, -4, 23, -54, 120, -19, -74, -95, -124, 73, -16, 20, 26, 76, -27, 38, -99, -63, 99, -25, -79, -114, -47, -33, 71, 42, -52, -20, -41, 68, 78, 50, -102, -21, -13, 95, -46, -59, 10, 33, 72, -74, -69, 12, -86, 13, 84, -6, -48, 111, -84, 60, -108, 72, -15, 126, 116, 124, 72, -112, 56, 79, 114, 121, -95, -12, -82, -95, -7, 124, -104, 71, 92, 117, -126, -40, 107, -101, 88, -116, -62, -93, 62, -24, -76, -21, 49, -82, -119, 93, -95, 75, -12, 56, -19, 102, 52, -52, -91, 53, -94, -77, 4, -101, -91, -108, 53, -78, 5, -36, 20, 8, -78, 88, -15, 100, 16, 98, -103, -111, -19, -17, 23, 102, 51, 7, 57, -114, 24, -85, 71, -17, 56, -51, 124, 86, 89, 97, -67, 89, 14, -4, -44, -68, 34, 2, -61, 33, -51, -124, 108, -72, 76, -41, -16, 90, 44, 63, 63, -124};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.5587876158089516);
    msg.setSource(11799U);
    msg.setSourceEntity(64U);
    msg.setDestination(2371U);
    msg.setDestinationEntity(216U);
    msg.altitude = 0.05546772041742032;
    msg.width = 0.3182170069489252;
    msg.length = 0.7396808528599266;
    msg.bearing = 0.4758865845947341;
    msg.pxl = -3435;
    msg.encoding = 183U;
    const signed char tmp_msg_0[] = {89, -77, -126, -88, -9, -64, 70, 27, 104, -49, 37, 117, -107, -6, 53, 48, 104, 61, -2, -68, -105, -82, -30, 59, -62, 77, -120, -57, 36, 4, 8, 1, -117, -22, -100, -91, 46, -35, -43, -36, 66, -65, 77, 35, 49, 44, -7, -98, -107, -78, -60, 83, 64, 58, 106, -4, -1, -43, -4, -104, 70, -119, 100, -119, -116, 32, -79, -89, -35, -116, 74, 109, -50, 107, 97, -49, 46, -48, 38, 44, -56, -104, 35, -56, 26, -82, 94, -19, -36, -101, -8, -87, -3, 4, 85, -5, 78, 86, 44, 50, -116, -54, 56, 87, -109, -127, -125, -24, 67, 116, -94, 83, -111, 27, -80, -48, -86, -10};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.006757255200829815);
    msg.setSource(19815U);
    msg.setSourceEntity(5U);
    msg.setDestination(57488U);
    msg.setDestinationEntity(23U);
    msg.text.assign("YZGLWFBIZORLNXGSZCPQOADMGXMCXCFVB");
    msg.type = 140U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.5911845447665277);
    msg.setSource(41107U);
    msg.setSourceEntity(241U);
    msg.setDestination(65368U);
    msg.setDestinationEntity(43U);
    msg.text.assign("BSGIBHAYPCKZGGXAAQFMQURXCCGBDLIGQMRRGEYZEOXVTQLENRVLWJJOEHATNKWFCUVUIBDBDPWKNOSPPMRBZRFKHFEJGEYLFBCHVCYYPAFMZIYPVHVALCXDYKTAUTCOTJXSDFXHGJNDWJJSPNZGZUNRSQIOWNWMUVSRLZIMWWIK");
    msg.type = 128U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.08874538473220273);
    msg.setSource(3926U);
    msg.setSourceEntity(26U);
    msg.setDestination(18710U);
    msg.setDestinationEntity(239U);
    msg.text.assign("WLPCSLKAAUZPOETDOXJHNIWJLDQCXHGOIPJUZSBGEGMYLSXXDHJCOAKVKABPEGSEBOTZKZRSQHMBKQGQYVMXMTNYVBWHTNHFUIUYUOWIOTDQHXXNY");
    msg.type = 105U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.669478604022091);
    msg.setSource(55594U);
    msg.setSourceEntity(81U);
    msg.setDestination(44242U);
    msg.setDestinationEntity(206U);
    msg.parameter = 99U;
    msg.numsamples = 116U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 17290U;
    tmp_msg_0.avg = 0.1995934013848356;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.8952875259177053;
    msg.lon = 0.2571592702968103;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.3383326173325899);
    msg.setSource(26728U);
    msg.setSourceEntity(216U);
    msg.setDestination(51196U);
    msg.setDestinationEntity(208U);
    msg.parameter = 86U;
    msg.numsamples = 2U;
    msg.lat = 0.999127162451707;
    msg.lon = 0.7485642240036976;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.29491164683254);
    msg.setSource(62900U);
    msg.setSourceEntity(175U);
    msg.setDestination(14658U);
    msg.setDestinationEntity(176U);
    msg.parameter = 30U;
    msg.numsamples = 243U;
    msg.lat = 0.07252156183173342;
    msg.lon = 0.7209108479302302;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.8599158884860969);
    msg.setSource(1117U);
    msg.setSourceEntity(123U);
    msg.setDestination(51526U);
    msg.setDestinationEntity(13U);
    msg.depth = 12987U;
    msg.avg = 0.15872039835912177;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.753186699919619);
    msg.setSource(15450U);
    msg.setSourceEntity(234U);
    msg.setDestination(64363U);
    msg.setDestinationEntity(207U);
    msg.depth = 40251U;
    msg.avg = 0.39663987454770455;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.9139418534615319);
    msg.setSource(35225U);
    msg.setSourceEntity(211U);
    msg.setDestination(45260U);
    msg.setDestinationEntity(0U);
    msg.depth = 45126U;
    msg.avg = 0.2264886292475755;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.6672886853114512);
    msg.setSource(15306U);
    msg.setSourceEntity(106U);
    msg.setDestination(38931U);
    msg.setDestinationEntity(170U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.7219845814347314);
    msg.setSource(54372U);
    msg.setSourceEntity(55U);
    msg.setDestination(6322U);
    msg.setDestinationEntity(107U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.33577741417664686);
    msg.setSource(33075U);
    msg.setSourceEntity(74U);
    msg.setDestination(8519U);
    msg.setDestinationEntity(48U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.1743520539957174);
    msg.setSource(36394U);
    msg.setSourceEntity(115U);
    msg.setDestination(11045U);
    msg.setDestinationEntity(167U);
    msg.sys_name.assign("YTQKVMBGAEWXRMYWUKUFBGINLBGJHBLJTCWHRPZJUNOPQQHZKPYTCXAWXSNPUA");
    msg.sys_type = 82U;
    msg.owner = 53983U;
    msg.lat = 0.48854800572868495;
    msg.lon = 0.17979005702576956;
    msg.height = 0.9975841714035487;
    msg.services.assign("UDOFWANJUXFZORMQGSNXCAPBHHTUAOJGQJPDWVXZSFHAMAZYUQYMBRQMPSTVAYIWECBSTQLVGJUUNAOWKUCUJCRXQLSLBPIBNETSJRONQWWCNCNCNWWIBRQYTRQPODDILBQUYJTBZDZKAHEZKARKAJEEXXMEGHITFTPDFFHLLZXGFGJKMVZKEYTSCWLIHGMMHFPKYFDBKEEZPOXTRKZVSDWX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.4864744865916105);
    msg.setSource(61940U);
    msg.setSourceEntity(129U);
    msg.setDestination(64857U);
    msg.setDestinationEntity(93U);
    msg.sys_name.assign("EYJOUIYQCBZEAETTZEBNVHQOJYRPTHNUIWHMIIXLJNRVEOTSSOACCBDQXCWIVEYHVPMSWQPELXJEPWSLOQIYBRXJGHSYMHAKAVIMNKCRTLRNHHDUUGOMAZSLYTTIVBDIKHFRTTGOGSLVQVMYULWFYENOQNFWNFGPWUANXCAKMDRWFDCVXUGECZDGULFXDOIWBRDBWXQKCZDJZFPGZAPQKXUMLNZKLUPSBR");
    msg.sys_type = 138U;
    msg.owner = 63723U;
    msg.lat = 0.9966664413964149;
    msg.lon = 0.3112371920910335;
    msg.height = 0.6349156910761616;
    msg.services.assign("CRHONQIZISRLJETJKAPPKDCSKXOFITEDUEMXKPYGBALXVPRHFVPVSRHSQWNCREKWJRICFVLCYRMZOAZTXEJUWJWENFYEZYMREMNACJXCBTNNHCFTZGDSIUXTZHPUAQBSHHOFMBDOLVZIDKUEFPOCMBNLTLJOAXLBSUYYGMUPGRHLTTAQWVODKCOXUSGMDGYTH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.08035440665276605);
    msg.setSource(21068U);
    msg.setSourceEntity(33U);
    msg.setDestination(3609U);
    msg.setDestinationEntity(187U);
    msg.sys_name.assign("QLUYNOZMQDRSNQHJMOIUOLUGYAGEOETGXQEJARUMAZDFJSYNGFEBXCOJJGPLKSXNRKUBEUBXHBVIQHBQKPULWWSPGKCMYOQPKUVXZWYAZSAIZFZAFWGPVDVSGNLIJLIGHARJBTDDYZYVUXCIBYQPEOLTXDPMSBKGMMTIPCXFQDOVDMZLTKB");
    msg.sys_type = 126U;
    msg.owner = 55926U;
    msg.lat = 0.19663486748001557;
    msg.lon = 0.7152695466310213;
    msg.height = 0.010164974283692674;
    msg.services.assign("NMQFOGMACSULBFLUZZNJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.9104887536261668);
    msg.setSource(49486U);
    msg.setSourceEntity(30U);
    msg.setDestination(24693U);
    msg.setDestinationEntity(152U);
    msg.service.assign("SRMBVMMNIZRKEQPPNPDQFZSNVYXIHRIUDQKJZSLBNIRSTXGECENZAZMMCIUWWFGQBPICFAYWHTMJDBKYLEOXDCRUTUSIBJITWHLVGFLUOMOELSTXGYXUTLFZSNVIBXDTJVOHFQKZFELXWQDANHCAYCGPXHAGWNJXUKYLLHJKQUPTHFZROKHTJVORGKNEDEYAZCWBDWYJJMFUBCIENPZWQMQJEODAKOXOGFORBDVAVYCVPACPSKRGTSULGPSBYH");
    msg.service_type = 99U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.8840438995757773);
    msg.setSource(4600U);
    msg.setSourceEntity(236U);
    msg.setDestination(6381U);
    msg.setDestinationEntity(10U);
    msg.service.assign("YZRDDCUDBNXCRJMPKAOJKBGLAEXSLYNOLW");
    msg.service_type = 108U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.8828254302491677);
    msg.setSource(32661U);
    msg.setSourceEntity(123U);
    msg.setDestination(14590U);
    msg.setDestinationEntity(182U);
    msg.service.assign("LNFPMNZNHHSUQZWQJPCMPBMZFUJFDHMGLKTDFOKFYJWRFSXVCLTPNVNTQWDSDUHOKABHNUAZEVKVEJZAFTBWASWRXCKQEOL");
    msg.service_type = 46U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.6465503354554647);
    msg.setSource(19730U);
    msg.setSourceEntity(160U);
    msg.setDestination(61615U);
    msg.setDestinationEntity(13U);
    msg.value = 0.19072080775091838;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.42113252482673647);
    msg.setSource(35656U);
    msg.setSourceEntity(236U);
    msg.setDestination(768U);
    msg.setDestinationEntity(146U);
    msg.value = 0.63065444559829;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.34059146427995934);
    msg.setSource(28939U);
    msg.setSourceEntity(11U);
    msg.setDestination(41106U);
    msg.setDestinationEntity(173U);
    msg.value = 0.642963386653585;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.5109910249171067);
    msg.setSource(54054U);
    msg.setSourceEntity(152U);
    msg.setDestination(35443U);
    msg.setDestinationEntity(105U);
    msg.value = 0.4882102972514877;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.9394086109710795);
    msg.setSource(15706U);
    msg.setSourceEntity(198U);
    msg.setDestination(52139U);
    msg.setDestinationEntity(94U);
    msg.value = 0.9100389211899923;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.5701517669237269);
    msg.setSource(5943U);
    msg.setSourceEntity(220U);
    msg.setDestination(54305U);
    msg.setDestinationEntity(49U);
    msg.value = 0.5198419090251976;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.47910193124859435);
    msg.setSource(9099U);
    msg.setSourceEntity(95U);
    msg.setDestination(17558U);
    msg.setDestinationEntity(53U);
    msg.value = 0.21477613239484394;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.6149466154545473);
    msg.setSource(22464U);
    msg.setSourceEntity(172U);
    msg.setDestination(60941U);
    msg.setDestinationEntity(91U);
    msg.value = 0.9082112865961512;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.2329806238294535);
    msg.setSource(29218U);
    msg.setSourceEntity(45U);
    msg.setDestination(1110U);
    msg.setDestinationEntity(233U);
    msg.value = 0.7372466443462931;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.8371380415278866);
    msg.setSource(1292U);
    msg.setSourceEntity(169U);
    msg.setDestination(1154U);
    msg.setDestinationEntity(54U);
    msg.number.assign("BEHGUCOIWKYYACNNWEXMGSLKKACDZLYCXJZEXESKPMRAVRLPARLBQVCEDYJTARNPTZIHLVRFGNTFXIDOTZVGBWOVXPSIJCIQABLOUCYQPAQDBKARCRWVGQSJTHSBWZHJFNWPBTEULNSXXNZUDBOVGORPEEFFQJUMIYHTOEOEIFFWTNHMARCZGGHXLVPQUIWJKSJMZGUHPLWMYJR");
    msg.timeout = 37689U;
    msg.contents.assign("HXLWUKANFKNZUQCTYHDRKPZREYJDGMIXIADHVHESNCMZUJKQMYFD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.7125252961478257);
    msg.setSource(54581U);
    msg.setSourceEntity(194U);
    msg.setDestination(36046U);
    msg.setDestinationEntity(115U);
    msg.number.assign("XVRZNCZKVNWRTLGREZHQVGYEODA");
    msg.timeout = 63628U;
    msg.contents.assign("XBYFCMUSYDXBHSXFKEROWU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.9382210162265645);
    msg.setSource(26576U);
    msg.setSourceEntity(155U);
    msg.setDestination(21092U);
    msg.setDestinationEntity(175U);
    msg.number.assign("FJTTYCHMLJAIWZACXGAVFDUXSWWGIJSBRBILUJODEVZMNMDOJMJPYPHSZRKWILZKVCTNBIDHHQLEVKABUXMHBETLRAUJRVHBKQYYPIHGKIWEQ");
    msg.timeout = 17348U;
    msg.contents.assign("BYSWYWFSXUYXPHXDKIMPNENGNOCIFMIJSORNZFLAGKNWAASEPLAKUZJLHMVTFCFSMUDTRNRUOMRPWBDBNOCWVZGCDVFFWMJQLVSIVDTKETPDNRIVCTHGIZHTURQWXXYZHFBBMVBYJFGUTUGMRHRDZASRAQSONKXAPLKOWIOKXNTCBCLOYGJGAAYBQQMJDQVUUVHLHGLQDEYKFWBLATOEQERIVBZPZOJCCPEDXQLPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.4404294615282873);
    msg.setSource(52073U);
    msg.setSourceEntity(130U);
    msg.setDestination(60599U);
    msg.setDestinationEntity(111U);
    msg.seq = 3272417151U;
    msg.destination.assign("OQRPDLINWKBCQWJXCQMAENFDTKJXUPUZOJLSBHGSDVOUBGVXPYDWFQHEFOLCXJXAXKTRCXLUMDVXUQGYUDSZOSHHVRFWGWRNZWJVIWUTLBPXMNMJWAMWEOCQZJSTNRRZHZNBFACNSJPVFEQMIDHZPHSGRCSKZLNGKRTYASIUPAPOXYDMYYAUTPVQENGBLITREKUFOMZKJTVTGILEQQDEBIMIMCABLKYGINBJC");
    msg.timeout = 3537U;
    const signed char tmp_msg_0[] = {-6, 90, 113, -27, -30, -102, 59, -18, 106, -90, -67, 100, -24, 124, -23, 41, -106, -9, -117, -28, -126};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.9703561591493802);
    msg.setSource(13603U);
    msg.setSourceEntity(238U);
    msg.setDestination(22647U);
    msg.setDestinationEntity(2U);
    msg.seq = 2709529016U;
    msg.destination.assign("EHVGVQMPGTVFMWLJXFIOFKFGOJUTPBSVFXMSQUEBLWLQRHUITNGDPXGSNQFOXHYJEXYYWPPPYKIJKERRSVYWLFPABRKWUGBMEMMKUBGVBGWZHQDSUNWHKIK");
    msg.timeout = 48083U;
    const signed char tmp_msg_0[] = {95, -64, 59, 88, 122, -34, 17, -96, 8, 57, 109, 90, 57, -36, 93, -92, -75, 34, -60, 12, -14, -92, 13, 23, -37, -73, -58};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.43453725650893915);
    msg.setSource(64648U);
    msg.setSourceEntity(185U);
    msg.setDestination(16326U);
    msg.setDestinationEntity(84U);
    msg.seq = 453718864U;
    msg.destination.assign("WRVLJAOXBFJDEDBZOXVBNRJBYQOTRUEGCXCFJCRRDLGRSGMEZVOIVPRRHQWJHEDGOWJAPQBOMTXHMGLAFTBQMMZWWJNDUAWZMEGSPTZUKHIKYXKHQPRFQMADPRGCFYDHAZDYCITOWVASAYJFIXHWHEBUSKPNKNGUONKXWQYZFZMLUN");
    msg.timeout = 29186U;
    const signed char tmp_msg_0[] = {44, -98, 92, 87, 102, -65, 10, 17, -36, -17, 98, 121, -23, -115, -32, 5, -62, -4, -50, -3, -43, 7, 28, 79, -61, 114, 39, 49, 7, 53, 73, 9, -64, -61, -75, -90, -11, -34, -96, -31, -124, 13, 69, 45, 51, -73, 26, 33, -80, 96, -121, 72, 4, -13, -32, -70, 124, 66, 83, -93, -83, 42, 71, -113, -42, 105, -98, 60, -101, 112, 51, 7, -89, -28, -71, 30, -109, 88, -97, 105, -26, 28, 110, -67, 111, -89, -125, -29, -47, -57, 35, -117, 2, 85, 105, 19, -113, -67, -81, 114, -50, -30, -22, 104, -56, -36, 105, -58, 47, -22, -13, -106, -87, 40, 41, 83, -63, 70, -48, -104, -34, 0, 3, 117, -8, -89, 60, -99, -61, -93, -86, 75, 73, -1, 42, -48, 105, -92, 109, 114, -21, -12, -30, -50, 14, 69, 104, -74, 54, -47, -26, 81, 125, -112, 54, -119, 121, -85, -108, -43, 76, -107, -59, 40, 13, -19, -116, -39, -124, 5, 117, 57, 64, 29, -57, 85, -39, -74, -100, -103, 28, 25, -42, -35, -100, 36, -37, -50, 25, 75, 49, 27, 29, -7, 57, 126, -74, 79, 100, 28, -70, -27, -23, 18, -16, -4, -121, -124, -24, 13, -11, -61, -4, -99, -87, -40, -120, -75, -26, 92, -51, 73, -90};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.6192062896523802);
    msg.setSource(51198U);
    msg.setSourceEntity(72U);
    msg.setDestination(15171U);
    msg.setDestinationEntity(148U);
    msg.source.assign("QQRZLIOUFSTLYUYASSDVTPLIREAQWFUXGOCASPQRPWWFDSXZNYUADSEBZEQSHJVRBPJMPOHCNFSURYGOZIWMUIXHJYZVTXEKWSVOKEBCFLVZGKVWBUKQDDX");
    const signed char tmp_msg_0[] = {7, 90, 51, 119, -80, 72, -127, -84, -52, 15, -101, -72, 70, -16, -41, 29, 117, -59, -72, 33, -68, -7, 96, -114, -114, 115, 123, 65, 31, -55, 102, -117, 17, -45, -72, -78, 125, 10, 27, -99, -64, -121, 27, 68, 2, 101, 81, 9, -33, -16, -9, -95, -94, -67, -32, 27, -23, 77, -20, -23, -57, 73, 28, 60, 41, 103, 94, 118, 111, -93, 8, -112, 105, 113, 31, -105, -42, -4, -97, -48, 26, -47, 33, -17, -63, 112, 23, -60, -9, 30, 83, -86, -115, -38, -39, -95, 14, -60, -59, -92, -55, 14, -8, -125, -23, 98, -84, 75, -3, 11, -99, 73, 80, 108, 100, 58, 8, -49, 85, -1, -108, 60, -61, -78, 6, 55, -72, -44, -107, -22, 118, 121, 92, -120, -102, 2, 13, 110, 96, 77, -99, -74, -38, -60, 101, 112, 80, 84, 119, 82, 16, 61, 93, -102, 35, -16, 118, 38, 27, 99, 9, 107, 102, -26, -19, -5, -40, -85, -95, -48, -60, -75, -106, -54, 94};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.7422590841509764);
    msg.setSource(21036U);
    msg.setSourceEntity(9U);
    msg.setDestination(20314U);
    msg.setDestinationEntity(140U);
    msg.source.assign("FHHZRQZFFVNJJGIMIVGDCPRFWWXJUODXVUASMKAKCMNTPPPFANOHGSUZZGYBHBLIBFAOXNMGYH");
    const signed char tmp_msg_0[] = {-24, 83, -43, 70, -121, 22, 91, 26, -35, 18, -27, 19, -57, -104, -26, 64, -87, 57, -75, -115, 40, -88, 62, -99, -16, -34, -20, 106, 124, 109, -80, -114, -31, -114, -52, 55, 124, -124, 97, 33, -113, -104, 90, -57, 3, 42, 35, 104, -59, -67, 48, -124, -4, 66, -10, 22, 92, 110, 78, -121, -66, 0, -26, 31, 101, -36, 10, -96, 40, 58, -15, 9, -122, -62, 5, 81, -4, -119, 80, 43, 27, -98, 52, 25, 75, -67, 110, 82, -20, -56, -8, 6, -11, -105, -123, 93, 91, -118, 20, 87, -120, -8, 92, 36, 109, 85, -111, -102, 101, -78, 115, -64, -121, 92, 18, -25, -92, -112, -104, 91, 84, 75, 16, 111, -68, -7, -25, -34, 84, 86, -111, -56, -25, 103, -49, -106, 96, 21, -52, 85, -1, 64, 91, 26, -23, 12, -18, 16, -104, -16, 4, 70, -29, -100, 95, -39, -78, 35, 18, -105, -125, 120, -43, -72, -99, -5, -97, -92, 86, -119, 101, -25, 41, 23, 69, 113, 87, 14, 126, 60, -18, 77, 61, -15, -15, 71, -33, -59, -17, -110, 72, -96, -113, 47, 16, -89, -73, -38, 92, -89, 116, -108, 112, 49, 87, -110, 61, -40, -66, 4, -107, -85, 1, 54, 107, 91, 47, 122, -18, -23, -38, -25, 0, -84, 12, -5, -13, 62, -37, -56, -95, 120, -55, -73, -54, 106, 81, -62, 89, -33, -107, -91, 62, -73, 72, -61, -6, 18, 97, 65, -24, -47, -57};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.15986642256390193);
    msg.setSource(10110U);
    msg.setSourceEntity(182U);
    msg.setDestination(18521U);
    msg.setDestinationEntity(37U);
    msg.source.assign("AFLHFHVSBKZEIOLCGXCQDUXOBQ");
    const signed char tmp_msg_0[] = {103, -74, -76, 70, -49, 52, -102, -11, -5, -64, -2, 46, -107, 8, 48, 42, -63, -15, -101, 76, -56, -109, 5, -10, -78, -108, -70, 12, -46, 106, -64, 119, 11, 105, -124, -108, 84, -26, 65, 109, 124, 73, -47, 1, 15, 36, 59, -55, -88, -115, -81, -80, -37, 105, 117, 20, 75, 123, 93, 110, -3, 118, -21, 26, 14, -34, -59, 36, -18, -59, 37, -47, -126, 99, -118, -80, 72, 78, 121, -79, 105, -11, -25, -42, 72, -60, 99, 23, 121, 86, -10, -19, 97, 91, -128, 65, -62, -88, 20, 58, -29, 110, -81, -16, 87, -75, 106, 102, 123, -103, -6, -43, 77, -19, 92, -121, 116, 116, -74, -67, 68, 7, -97, -21, -79, -25, 92, -14, -106, 54, -46, 57, -24, -66, 31, 44, 33, -36, 61, 34, -20, 10, -37, 80, 101, 59, -32, 89, -82, -95, -92, 99, -70, -76, 21, -105, -63, -80, 61, -67, 11, -45, -3, -41, 82, -60, 99, -113, 99, -90, 64, 11, 41, -24, 61, -1, 54, -20, -94, 81, -93, -8, -75, 117, 44, 13, -44, 107, -111, -63, -94, -55, -115, -111, 21, 112, -53, 67, 11, -93, -77, 109, 60, 53, 41, 125, -42, -108, 32, -82, 76, -100, 24, -33, -120, -21, -51, 85, 100, -75, 58, -127, -75, -63, -103, 80, 78, -87, -34, 40, 5, 60, -53, 79, 120, 82};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.5692925562126704);
    msg.setSource(26599U);
    msg.setSourceEntity(182U);
    msg.setDestination(30769U);
    msg.setDestinationEntity(106U);
    msg.seq = 1141040632U;
    msg.state = 250U;
    msg.error.assign("RGAICRBEZTXUZBHLVUFNVGXDVCRUTOFAKOFZYIKTBXXPHCAKMXPISFBQWJKGDVDIVQIZDTWFPSERJDKNJFLBXZIYTURATSGMFVUHSKMNELISOINZGXWYBNCYOXWJYIZARWIEDMPSLRBQNCMHLBOYLEYAXU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.4842724825398568);
    msg.setSource(55070U);
    msg.setSourceEntity(180U);
    msg.setDestination(52596U);
    msg.setDestinationEntity(228U);
    msg.seq = 2052515769U;
    msg.state = 167U;
    msg.error.assign("JZVHIFXSAPSQTPNHEHRKLNQGVZVCHDNREKVCTTANNXWMYFSEZCKJFWUBXRVIJESGRHHMTTUQLXKWOAPEHMFNUDARPFSKZYEJREGINLVDZWKRAAMQOHHJJCQLYLPXCPGNVJPT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.005448548241305473);
    msg.setSource(60469U);
    msg.setSourceEntity(68U);
    msg.setDestination(37895U);
    msg.setDestinationEntity(21U);
    msg.seq = 4045869993U;
    msg.state = 152U;
    msg.error.assign("SLZVXQBPPSTLSTMTFGTXIEYJYIQXKFZSIRTBRZNYOCBOXFFCDOEZCJERKFDPWABAWILYYJJISDCYVZVUAQKSDNYXKEIVHMDVLTOCPWJPGTMB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.6346026101668719);
    msg.setSource(11267U);
    msg.setSourceEntity(214U);
    msg.setDestination(6112U);
    msg.setDestinationEntity(237U);
    msg.origin.assign("HCOCPLAOXWICELONIPRAWKLPTSSJYMWQHJRIEYDKNOAMGCHQMFFYRNIHRTUFSNUUVGQBFJVESQAPUDVKBEZENLDCTMVGQNCPHFMKBLXMMCJBTHKTZXJIRHRRLRPDGZQSTUJBKGWMNSAVVJPFJFWACOKDXWQYWATNGZJIWWHBYLFYGEHDQKAXXVZHBQTXEYVGEFQMZUWXBIP");
    msg.text.assign("MAXILYOJQEVLLQCFEVWWPDUBTI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.2302530296808768);
    msg.setSource(55408U);
    msg.setSourceEntity(30U);
    msg.setDestination(33865U);
    msg.setDestinationEntity(126U);
    msg.origin.assign("DHDVSXAYIVMRPDNQENVIRSDTLYFZBFCHALVSSDBIPPOWLCZSMPAPMQQAPDMCZSZXYRTFVENIADIJECJLETQXKHZWUHLMZHLOHKMJYPQMXGBVIXOIZNUBQXJGOGHIQKRFTLBGRKVAXQUKKFSOFYOUKECERLFNTTSUBJHMUWHVQNCXVX");
    msg.text.assign("GZHJRWXOVOCDAKIECDEFUDDJVVUSPWWTFPZCZYLYSSXISWVHCGUETYRXREQRBXRPAZNNDMCTIVGCAQYZTYLLDHXLPIHOJYLUUAMAJZMONSTXKGLBNYQWWJZMRLPBTQDRXOTABYVZHFAFDIEIDFJWQOJHISXVAAGGQMFQZNXSKUHBEYKRCVEOSOYOIAZCHCJPBQO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.7706471117014181);
    msg.setSource(52446U);
    msg.setSourceEntity(181U);
    msg.setDestination(24714U);
    msg.setDestinationEntity(193U);
    msg.origin.assign("VVSNKIXQOSAYBMZV");
    msg.text.assign("FMDVAKYZOOHZKHZLFLEXHOGTCKGUMEFWXXARVADORJCYBMUUZUNQFPPJONWGBSXHIISZRMWEUMDJBZRCLKFIJNCUTLPVRWXSNDZSFNVAHBUVYGUJZMKXNVPNGRCXWASSWLKLWQQCRKABHCFNPLIIFTEMPEYEWLJUHEIZNDVTAHKLVCUHBPPGBSIQQFEEMITPTDCOANQDFXAD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.21735471709364862);
    msg.setSource(8530U);
    msg.setSourceEntity(135U);
    msg.setDestination(56093U);
    msg.setDestinationEntity(251U);
    msg.origin.assign("ZFCBEWRLNIOAVTMXBTADFWVQNYWPWBCXSKEAQQBWTMXULFMDZAPDUBPOIZWHWDURSMJAYVFAKHRUAICVYQZTVMGUDHJCXIKPWSEPKSJROPYSVHZLQQMNIOGKEQ");
    msg.htime = 0.22756962268923586;
    msg.lat = 0.5770811732110941;
    msg.lon = 0.47791691430996674;
    const signed char tmp_msg_0[] = {8, 59, -69, 65, -45, 18, -16, 118, 59, -75, -37, 29, -43, -5, -97, 31, 122, -3, -122, 9, 10, 42, 96, -38, -35, -120, -96, 58, 53, 7, -121, -30, -67, -55, 5, 31, 120, -66, -3, -56, 92, -33, 91, 107, -92, 60, 4, -92, 27, 9, 114, 20, -17, -98, 11, 57, -40, -55, -1, -30, -118, -10, 90, 56, 96, 114, 27, -54, 60, 71, -123, -107, -109, -109, 92, -2, 84, 97, 98, -126, -15, 13, -12, 80, 39, -71, 24, -2, -21, -79, 66, -51, 35, -3, -110, 121, -39, -12, -76, 90, 113, -30, 26, -54, -61, -76, 110, 114, -78, 99, -26, 30, -9, 84, -117, 116, -31, 45, 75, -112, -100, 83, -26, 1, -12, -34, 58, -8, -21, -43, -70, 84, 107, 44, 33, -26, 51, -75, 20, -119, -116, 22, 123, 38, 29, 71, 81, 94, 20, 109, 25, 17, 24, 79, -90, 1, 61, -83, 83, 90, 61, 76, -121, 113, 85, -118, 96, -109, -38, 111, -62, 29, -107, -55, 10, 108, -36, -112, -105, 50, -105, 26, 108, -48, 105, -108, -86, -29, -36, 60, -23, -52, -67, -116, 23, -118, 30, 64, 97, -55, 5, 102, 9, 1, 96, -105, -72, -107, -61, -64, 24, 41, 72, 26, -11, -65, 102, 117, 94, 108, -44, 109, 124, 94, 53, -95, -69, -5, 20, -53, -105, 73, 38, 99, -54, -110, 25, -40, 80, -45, -32, -55, 95, -23, 59, -108};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.6535122450618711);
    msg.setSource(35221U);
    msg.setSourceEntity(69U);
    msg.setDestination(51994U);
    msg.setDestinationEntity(53U);
    msg.origin.assign("QTPYXVFZIKJPKSXREMBRXKEBEIRQALBHZJUTEVKIMGAKBHNCDJSBDGGMGHXHJITBYXIAQQZEPSCSOYWZUJFYMCMTHINLQCUVTBDYZRVH");
    msg.htime = 0.22429661221551866;
    msg.lat = 0.6686254709114475;
    msg.lon = 0.14953013242529778;
    const signed char tmp_msg_0[] = {67, 106, 107, 18, 38, 106, -61, 76, 81, -26, 42, -48, -96, 80, -49, -7, -118, -93, 99, -92, 35, -102, -67, 27, -61, -20, 93, -101, 116, -58, -42, 31, 106, 103, -115, 112, -48, -11, -25, 37, 18, -112, 83, -7, 32, 105, 6, -8, -110, 48, -42, 108, 35, 115, -17, 101, -83, 120, 62, 113, 96, 68, 45, 110, -9, -40, -59, -91, -108, -111, 45, -73, 110, -12, 114, 94, -61, 72, 14, -1, 41, 3, -38, 26, 90, -12, 46, -102, -93, 117, -22, 47, -119, 78, 80, 79, 104, -60, 10, 29, -118, 25, 21, -18, 32, -120, -48, -25, -103};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.732969323830389);
    msg.setSource(16392U);
    msg.setSourceEntity(209U);
    msg.setDestination(24837U);
    msg.setDestinationEntity(157U);
    msg.origin.assign("WNGISHXYVWJWUOZMIITBEHBUVQJWMFOAVHYUJNDOSVZHJDKCMRZPYANSTRCWGVUNPHJFZIMTURIEVKKTILAVXAFAFD");
    msg.htime = 0.19839311192909137;
    msg.lat = 0.17471972166716432;
    msg.lon = 0.29896475983729964;
    const signed char tmp_msg_0[] = {-106, 3, -117, 51, -70, 71, -52, 120, -1, -6, -23, -12, 43, 110, 80, -64, -46, -38, 125, 111, 28, -124, -128, -74, 37, -119, 66, 61, -82, -58, -13, -49, 96, -36, 59, -10, 32, -12, 95, -44, -116, -24, -121, -123, 75, -64, 49, -40, -69, -26, 71, 74, 115, -94, -77, 19, -54, -37, -4, -117, 79, 18, 106, -101, -6, 50, -7, 10, -64, -110, -26, 61, -72, 101, 13, 25, 89, 101, -57, -93, -3, -109, -104, -92, -114, 126, 4, 20, 96, 80, -75, 47, -5, -76, -19, -108, -52, -83, -97, -45, -91, -2, -94, 89, -50, 8, -102, 31, 60, -36, -128, 36, -57, 75, 59, -42, 25, 50, -4, -14, 49, 14, -39, -15, 17, 17, -42, -6, 38, 119, -33, 15, 31, 112, 88, -128, 37, -122, 59, -63, -10, 114, -93, 10, 13, 83, 64, 48, -29, 71, -41, -122, 40, -15, 96, -113, -84, 80, -33, -30, 42, -72, 89, -74, 37, -63, 78, -52, 41, 122, -114, 81, -21, -97, 104, -7, -46, -24, -121, -18, 31, 35, 57, -18, -93, -63, -41, 48, -13, -104, -125, 112, -99};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.255634217813529);
    msg.setSource(33342U);
    msg.setSourceEntity(54U);
    msg.setDestination(17926U);
    msg.setDestinationEntity(58U);
    msg.req_id = 39267U;
    msg.ttl = 49261U;
    msg.destination.assign("GBIDABTQFXNDRMMCKRKTOUQOXQJIBKGACMWAGSYLHWLHWUTVFHPHWJNJSUCOBQFBVFINSSNBOLWGYVVIEHTNACPYLUDLHLFMUSXIG");
    const signed char tmp_msg_0[] = {19, -42, -40, 120, -6, 30, -52, -86, 98, 38, 61, -17, -102, 33, 118, -117, -4, 118, 45, -77, 70, 54, -92, -55, 14, -34, -97, -62, 108, -54, 6, -16, -93, 22, 20, -28, 29, -32, -91, 119, 104, 83, -53, -43, -118, -55, 10, -124, 120, -97, -59, 48, -84, -78, -116, 71, -7, -35, 92, 19, -7, -49, 108, 26, -112, -12, 79, 103, -107, 124, -28, -11, -64, -38, 118, -53, 43, -1, -34, -102, -62, -59, -120, -31, 67, -23, 80, 73, 15, 9, 10, -15, 66, 63, -45, 0, -24, -2, -34, -11, 27, -78, 20, 31, 13, 111, 54, -107, 108, 63, -103, 108, 110, 79, -70, -87, 67, 44, 122, 63, -34, -101, -59, 34, -50, 29, -102, -6, -9, -6, -86, -89, -119, 41, 84, -71, 114, -31, -11, 122, 26, 96, 104, -112, -57, -38, -103, -59, 5, 25, 104, -89, 102, -127, -127, 96, 8, 13, -67, -6, 2, 25, -109, 110, -20, -83, -104, -104, 93, 22, -3, -63, 41, 99, 79, -28, 96, -67, 6, 18, 4, -56, -32, -126, 49, -60, 100, 90, 28, 32, -88, 4, -73, 62, -18, 114, -111, 10, 39, 90, 1, 54, -126, 104, -92, 41, -32};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.8806175586247784);
    msg.setSource(34947U);
    msg.setSourceEntity(100U);
    msg.setDestination(43128U);
    msg.setDestinationEntity(48U);
    msg.req_id = 10690U;
    msg.ttl = 61503U;
    msg.destination.assign("YNSCPKGEOYMLIZWCTRCDUISGXEKYZVPKNEBKPDOHDNRCJIOFWITXFWWTYSAQOCXLUNTFBLFPNLCFHSETQRVXYZIHCMSPLNEMDKZQQIOKJHEXZSGARGVRWDMMUHVJOQEFFTWBHHGXRALRJADJOGLCNMVHOHDUDIXVJDZWAXANRZQRTFZIMKOMQWAPDKCMACSUGWUPVAQEPQQIBBFTUBYBGISNJEP");
    const signed char tmp_msg_0[] = {84, 10, 52, 18, 17, -69, -25, 1, -22, 92, -5, -127, -22, -104, -126, -61, 30, 65, -96, -33, 39, -122, -33, 66, 112, 41, 70, 23, 38, -1, 8, -122, 74, 83, -68, 3, 11, 47, -73, 113, -57, 76, 102, 36, 110, 109, 15, -27, -89, -23, 105, 93, -56, -96, 122, 34, 97, 1, -125, 47, -77, 11, -121, -77, -23, 14, -94, -71, -64, -60, 20, 46, 48, 35, -68, 40, 33, -11, 23, -9, 50, -28, -74, -113, -51, -55, 20, 100, -26, 7, 49, 39, -47, -1, 21, -58, 72, 63, -106, 85, -105, -70, 80, -102, -17, -25, 53, -29, -89, 120, -92, -72, -104, -45, 26, 79, -105, 24, -123, -10, -33, 92, 40, 36, 12, -55, -19, -117, -88, -54, -1, 119, 28, -2, -79, -112, -41, -124, -37, 47, 81, -92, 32, 106, 14, -95, 112, -93, -115, 98, 20, -111, 124, -53, 32, 46, 37, -19, 0, -96, -17, 83, -78, 77, -41, -118, -26, 97, 30, 10, 19, -76, -86, -72, 16, -7, -86, 1, 61, 61, 110, -94, -28, 19, 107, -3, 46, 3, 17, -68, -9, 81, -43, -26, -128, 104, 8, -84, -58, 14, 105, -80, -23, 75, 14, 26};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.6080753066535372);
    msg.setSource(2960U);
    msg.setSourceEntity(194U);
    msg.setDestination(42143U);
    msg.setDestinationEntity(6U);
    msg.req_id = 31166U;
    msg.ttl = 55204U;
    msg.destination.assign("SKLSAENCTLCNEUZQXOSZXBOANASQXVJJITEDFSVBHPZXRUUGGMAQKVLNZLFEINLGBNMQVEYKBYYWZCEMTGODONRDKMTZTASALDKHPCRGYSVPNYMRWAPHVOPBWEDXTONQMUFJWIAQIZGXTDWOECRHZFYMQGCFZJPSXGIJJFVJISFWDYKRAXJWCKRPDVMIUBFPGYQYKCJCHTKHCFRERULVLTUBWXBTNEYBXGWMHLJPQRHOHWSIHMA");
    const signed char tmp_msg_0[] = {-89, 98, 121, 30, -24, 40, -70, 81, 106, 115, 61, 25, 25, -98, -88, -56, 84, 37, -101, -58, -128, 79, 59, 116, -101, -45, 111, -118, 68, 45, 42, -121, -28, -87, 117, 19, -31};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.6756575922206107);
    msg.setSource(31134U);
    msg.setSourceEntity(38U);
    msg.setDestination(36667U);
    msg.setDestinationEntity(167U);
    msg.req_id = 56190U;
    msg.status = 65U;
    msg.text.assign("PWVSOTNUIMPNANYYODMDZYTDRRBEDLHKNHGRUQIQLOTFLPXGBCGPCSMXCIBPIVFJUNFJJDNCVEKZIZWNAETQOSKUSSEWYTOKRYMMTQUUIEKCLEPXYSBLJTRXNZKDIZN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.22077671544020394);
    msg.setSource(61066U);
    msg.setSourceEntity(146U);
    msg.setDestination(60186U);
    msg.setDestinationEntity(13U);
    msg.req_id = 31455U;
    msg.status = 49U;
    msg.text.assign("LOZKRVITZQFUNKHYMBCLEUOAVMNIXXNSXMTHUFQZEPUKOTGEHLJEEQIZLGQUAQQZZHDSBNRMSBNVEVWGJKRZFPTKXIDTJOBHPGCPFBNWFXHMVJCIVPJRRXZSEBVLFYHCWLRTCKYPUBV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.9281132054959583);
    msg.setSource(35780U);
    msg.setSourceEntity(207U);
    msg.setDestination(18095U);
    msg.setDestinationEntity(243U);
    msg.req_id = 47580U;
    msg.status = 76U;
    msg.text.assign("AFPAIMSWZLEYXSQEBJYCIDSLTRNNVTJNBKKUMLCSJJAUHCXGBZDTVUXGHAFZVJADLHARJDKEQJPLYPFWTCOXLEUJVAAGKSPLPOGBRVFGOFVCIXECUFRU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.34001394237294724);
    msg.setSource(53591U);
    msg.setSourceEntity(47U);
    msg.setDestination(31623U);
    msg.setDestinationEntity(115U);
    msg.group_name.assign("WRAXHJZBSVDTUIMNFHJLHCOFJQRGNNJCQRZPMXZBRXYALWDNVZPRF");
    msg.links = 96563884U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.13394250532988583);
    msg.setSource(12108U);
    msg.setSourceEntity(171U);
    msg.setDestination(40504U);
    msg.setDestinationEntity(113U);
    msg.group_name.assign("TOIMBTUGANVRSNZCJEWIGYAECUVHDPBZDQZNMGRCUPTMKLLGOARVBQLKOHRQLZJGXGPETCJWGIIUPQNTFJWJVDLBFLBTIMJRXHOBFSTLEJWDFJKEGYHOIKRQUOKYFR");
    msg.links = 2543916996U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.398635450587839);
    msg.setSource(48428U);
    msg.setSourceEntity(192U);
    msg.setDestination(11411U);
    msg.setDestinationEntity(108U);
    msg.group_name.assign("TXQZJOQJTHTGDZDEAJXLEMDMRKHBPGMMTAIBIMSTPQEYHHQRAE");
    msg.links = 530475013U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.09195841220278322);
    msg.setSource(49113U);
    msg.setSourceEntity(241U);
    msg.setDestination(57048U);
    msg.setDestinationEntity(92U);
    msg.groupname.assign("MIWZYVGHUPOCJXWECEAVFPTEERAHVPLBTUUAAHGHHQTCYNMGSFNYHGZAYLQHAGUGFLWJXUPZHPXVCNAYOTTRDSLXRWMGQZLZMHNJNUFEZUCQDWHKJFDJIKIZYXROMOWGVIJJFJXQIMKYSNCPGSVCNSCFTZQQPTGALKSQNEBUEVUAVKTLBDAIZEKYRJQBKRDWVIMVWCFLKXKBRSNBXERXOCYQUDLIMDWFKXFSDPSBSPOTJWBBONYB");
    msg.action = 57U;
    msg.grouplist.assign("RGOOVJOQLORDFGCHPCKRLXWGLONTWPHPTGAKVHNIZMHYRZXHBMGISWZANQDPFCHZXGCYAAPTTYWYTGWABYQDRQVYSJTCIEIOBRIEZSZBFVXUYQUQABSSGNMALEUULFUDVEPDSLNWHIHVZBDCKSACJQRYEFFDLQLKVEJPKSBYOKXCAQEIXMZUVNUXHKVTM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.6118306619258261);
    msg.setSource(666U);
    msg.setSourceEntity(156U);
    msg.setDestination(17696U);
    msg.setDestinationEntity(88U);
    msg.groupname.assign("EDXIPIJACGDXUMRRIYYYKAOCENUUHGZVQHTSTYCXHRTFPHMNEPDYMMXIRVUSBVJPKLDUOKVMWGWFSMLBIRQFWCESUCMBQVABATQJMTWQ");
    msg.action = 31U;
    msg.grouplist.assign("HTZHAXTIQPXXMMOZQJRCYUYBFDJMXPHDAFRBCCVEMDTCTHQOAYKQCRGELFMHFJSGSZGZIMHXLDNDWAJUQLKVKXIZDNZGRVOLSRYNFADOGYUOOCMWPLZJPUNWLKDQFAHUGVGNVIPORZLWBOIUXQWPVATBSCBKIRASWNYHJRYGUDEPFEFYEHUEMTXSTQUUMKSVVXJRKLMQVTNJEC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.6312132484252704);
    msg.setSource(44215U);
    msg.setSourceEntity(222U);
    msg.setDestination(60338U);
    msg.setDestinationEntity(51U);
    msg.groupname.assign("UIQFVVMPOGIPURMMTCEZRDWTNPIIODPLTWCDSJHMULFVLHYXSEQDRRYJLMTXYFGQPMJCEONLRAHPYUINYNWHQYADGOLRBZKZCDGILTMZO");
    msg.action = 191U;
    msg.grouplist.assign("DEHJXLLJIMVBLFPPQSDNGHETNBUZSRPKQYIUKZKKWCXWARCTHHRBHOQOQGXYVGQCDRKNPNDMTCSITEMUZLNIDPAFZAMWRWYROZIGJBKUCFDYBNJMLLHUPEMWXAVZVPTWMVBEQTZEAVDPZZMOOAGNQUUWYYJOAISJJUHCDQCSAHSAMJR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.6570877276114906);
    msg.setSource(50265U);
    msg.setSourceEntity(19U);
    msg.setDestination(13874U);
    msg.setDestinationEntity(144U);
    msg.value = 0.9574292130340117;
    msg.sys_src = 44333U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.5054253436623974);
    msg.setSource(55477U);
    msg.setSourceEntity(96U);
    msg.setDestination(21925U);
    msg.setDestinationEntity(46U);
    msg.value = 0.2344865324539187;
    msg.sys_src = 16672U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.10202620880766888);
    msg.setSource(46847U);
    msg.setSourceEntity(238U);
    msg.setDestination(32382U);
    msg.setDestinationEntity(63U);
    msg.value = 0.24608694376106643;
    msg.sys_src = 5092U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.9650222038561496);
    msg.setSource(46845U);
    msg.setSourceEntity(55U);
    msg.setDestination(51127U);
    msg.setDestinationEntity(88U);
    msg.value = 0.5105892910229014;
    msg.units = 30U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.5837951671312647);
    msg.setSource(11407U);
    msg.setSourceEntity(234U);
    msg.setDestination(50621U);
    msg.setDestinationEntity(145U);
    msg.value = 0.5736314114305125;
    msg.units = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.21418732117050931);
    msg.setSource(29265U);
    msg.setSourceEntity(167U);
    msg.setDestination(37882U);
    msg.setDestinationEntity(103U);
    msg.value = 0.9760887682350561;
    msg.units = 117U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.9057265422913181);
    msg.setSource(65463U);
    msg.setSourceEntity(63U);
    msg.setDestination(60720U);
    msg.setDestinationEntity(143U);
    msg.base_lat = 0.3496063635821762;
    msg.base_lon = 0.984357748945437;
    msg.base_time = 0.8997891819832391;
    IMC::RemoteCommand tmp_msg_0;
    tmp_msg_0.original_source = 65444U;
    tmp_msg_0.destination = 13282U;
    tmp_msg_0.timeout = 0.3182296889950045;
    IMC::FollowRefState tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.control_src = 47252U;
    tmp_tmp_msg_0_0.control_ent = 137U;
    IMC::Reference tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.flags = 26U;
    IMC::DesiredSpeed tmp_tmp_tmp_tmp_msg_0_0_0_0;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.value = 0.7428411907671331;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.speed_units = 82U;
    tmp_tmp_tmp_msg_0_0_0.speed.set(tmp_tmp_tmp_tmp_msg_0_0_0_0);
    IMC::DesiredZ tmp_tmp_tmp_tmp_msg_0_0_0_1;
    tmp_tmp_tmp_tmp_msg_0_0_0_1.value = 0.77529425771844;
    tmp_tmp_tmp_tmp_msg_0_0_0_1.z_units = 122U;
    tmp_tmp_tmp_msg_0_0_0.z.set(tmp_tmp_tmp_tmp_msg_0_0_0_1);
    tmp_tmp_tmp_msg_0_0_0.lat = 0.603652712913024;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.7535354330281939;
    tmp_tmp_tmp_msg_0_0_0.radius = 0.3751344405921163;
    tmp_tmp_msg_0_0.reference.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.state = 208U;
    tmp_tmp_msg_0_0.proximity = 215U;
    tmp_msg_0.cmd.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.23132954206864265);
    msg.setSource(28820U);
    msg.setSourceEntity(13U);
    msg.setDestination(11636U);
    msg.setDestinationEntity(166U);
    msg.base_lat = 0.5239753731599683;
    msg.base_lon = 0.4053133981560596;
    msg.base_time = 0.3172063946757021;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.6046801760622641);
    msg.setSource(1256U);
    msg.setSourceEntity(115U);
    msg.setDestination(62497U);
    msg.setDestinationEntity(40U);
    msg.base_lat = 0.017377042129054776;
    msg.base_lon = 0.6772210469938053;
    msg.base_time = 0.5072747586081827;
    IMC::RemoteCommand tmp_msg_0;
    tmp_msg_0.original_source = 59849U;
    tmp_msg_0.destination = 4549U;
    tmp_msg_0.timeout = 0.15025373125754127;
    IMC::NavigationData tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.bias_psi = 0.6289763666608233;
    tmp_tmp_msg_0_0.bias_r = 0.7331677669845699;
    tmp_tmp_msg_0_0.cog = 0.7388755112538266;
    tmp_tmp_msg_0_0.cyaw = 0.6082577249128307;
    tmp_tmp_msg_0_0.lbl_rej_level = 0.18830840578091435;
    tmp_tmp_msg_0_0.gps_rej_level = 0.32464469967861576;
    tmp_tmp_msg_0_0.custom_x = 0.7796385085272605;
    tmp_tmp_msg_0_0.custom_y = 0.6620669592953762;
    tmp_tmp_msg_0_0.custom_z = 0.26042451723540205;
    tmp_msg_0.cmd.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.9597446131526438);
    msg.setSource(40089U);
    msg.setSourceEntity(38U);
    msg.setDestination(50113U);
    msg.setDestinationEntity(128U);
    msg.base_lat = 0.8667490955207358;
    msg.base_lon = 0.6701358442131683;
    msg.base_time = 0.1923218501913756;
    const signed char tmp_msg_0[] = {-78, -82, -15, -52, -116, 45, 47, -73, -101, -112, 71, 91, 84, 42, -3, -72, 5, 65, 3, -41, 10, -6, 74, 71, -90, -114, -71, 87, -88, 55, -82, 122, 122, -4, -3, -32, -127, -105, -32, -39, -127, 119, 20, 97, -71, -90, 86, -84, 108, -93, -122, -38, -103, -120, -80, -41, 59, 55, 70, 104, -61, -79, 63, -32, 52, -51, -38, 113, -47, -73, 108, 40, 106, -108, 22, -75, -75, -52, -127, -110, 5, 43, -100, -26, -47, 28, 10, 42, -24, 90, -109, -25, -44, 32, 56, 87, -19, 76, -55, 15, -82, 83, 70, -49, -59, -25, -36, -96, -78, 57, 65, 17, -103, 94, -105, -82, -116, -103, 49, -70, 4, -43, 111, 13, -53, -114, 110, 65, 80, -29, 76, 97, 78, 59, -81, -1, -101, 55};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.7414966717733703);
    msg.setSource(52606U);
    msg.setSourceEntity(229U);
    msg.setDestination(39790U);
    msg.setDestinationEntity(253U);
    msg.base_lat = 0.6274227196713518;
    msg.base_lon = 0.970960987145027;
    msg.base_time = 0.3926751849077792;
    const signed char tmp_msg_0[] = {5, 74, 24, -22, 16, -125, -115, -120, 68, 11, -109, 50, 17, 107, -95, -95, -62, 57, 123, -25, -72, -79, 27, -49, 98, -108, -87, -85, 51, -14, 85, -73, 125, -115, 23, 96, -15, 20, 53, -20};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.0035971298984328604);
    msg.setSource(10849U);
    msg.setSourceEntity(192U);
    msg.setDestination(19858U);
    msg.setDestinationEntity(234U);
    msg.base_lat = 0.24553037418311197;
    msg.base_lon = 0.3166606460683423;
    msg.base_time = 0.2581463536647495;
    const signed char tmp_msg_0[] = {86, -7, -73, -44, 125, -76, 30, 69, -22, -114, -88, -78, 59, -49, 60, -77, 61, -97, 124, -95, -82, 21, 42, -65, -91, 44, -52, 53, -78, 67, -39, -29, -96, -118, -46, 6, 75, 35, 39, -88, 22, -127, 45, 112, -59, -30, -16, -13, -56, -17, -35, 9, 120, -92, 56, 39, -7, 34, 14, 78, 102, 120, -85, -6, -5, -87, 72, -52, 31, 58, -119, -5, -30, -16, 103, -18, -61, 30, 64, -11, -109, 54, -54, -38, 109, 29, -60, 86, 96, -99, 59, -105, -34, 110, -42, 74, 7, -61, 110, 42, 23, 17, -56, 66, 78, 9, -36, -98, -76, 124, 83, -71, 88, -122, 32, -67, -45, -22, -50, 51, -104, -19, 31, -71, 104, 34, 52, -17, -124, -81, -17, -96, 72, 84, -128, -60, -109, 53, 5, 66, 71, 37, -43, -120, -89, -9, -101, 71, 45, -50, 5, -71, -63, -121, 5, 20, -80, 114, -38, 29, -72, -76, 102, -95, 124, 74, 6, -22, 76, -42, 124, -4, -99, 26, 14, 14, 36, -32, 122, 85, -82, -75, 93, -32, -92, -115, 10, -24, 108, 120, -11, 29, 106, 104, -39, 12, -20, -95, 19, 66, 6, -3, 48, 71, 121, -36, -87, -62, -98, -23, 63, -53, -95, -71, 15, 110, -109, -57, 97};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.2984013883640546);
    msg.setSource(31936U);
    msg.setSourceEntity(18U);
    msg.setDestination(18887U);
    msg.setDestinationEntity(200U);
    msg.sys_id = 23089U;
    msg.priority = -114;
    msg.x = -24362;
    msg.y = -9362;
    msg.z = -13936;
    msg.t = 18887;
    IMC::GpioState tmp_msg_0;
    tmp_msg_0.name.assign("RKMZMMAIEBAWTVSEAXFMOYVFXQAVBHVHPULHWGMVXCSOEBJAANZVJRGKNEUKHSEXQTLIZWRDCIKKDTYDMCTSHUHINFMVZBJKQOVBKYFFNQMPPBYLPLUPBFEQJTPTRJWTKOUCEPPQIYAUXDKLHZWLYSUNVGFGJAOWEOZLDXGHSCNFZSDRBPNMSJQZRHCIDSTJGWEWOXTPQGQIVDDBGGCGOYBLRRYILIYOLUMQA");
    tmp_msg_0.value = 21U;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.5032958113991952);
    msg.setSource(33466U);
    msg.setSourceEntity(156U);
    msg.setDestination(36818U);
    msg.setDestinationEntity(64U);
    msg.sys_id = 1073U;
    msg.priority = 61;
    msg.x = -4036;
    msg.y = 6849;
    msg.z = 23445;
    msg.t = -32367;
    IMC::SetEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("OXGQUROYLRFSGRMFWJHKCCKNTGIBGLXJWJNCBCNCXZVBNPMSZJLDMZCVSDUNVFDUQTZWVOLQJEIXYGSEAAAORAESMEIKIWSPRWICHDFKWYAXITPZGGVKMQOAQUEXYDESUMXPJDYPDDKDFVTMOHFIQPRMZJYCQOHVUEKHATEBQQVRWNUCWPHLSPYIIUFNBSBXARZKJMHYUNEGYTBKJGKRTC");
    IMC::EntityParameter tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("BSGAEJRZFMMYLWTMFNTCPXJTAFIHMMNHVUQFNWKIYS");
    tmp_tmp_msg_0_0.value.assign("PIQCSUEGDBUDWXTLKADZIHKSKNMOBJELEVOQHVARXATVEXGFMCUTKMMBRLDZYXZXMFEBALQPXSUVWBMJDFY");
    tmp_msg_0.params.push_back(tmp_tmp_msg_0_0);
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.0880795915508853);
    msg.setSource(53286U);
    msg.setSourceEntity(188U);
    msg.setDestination(51276U);
    msg.setDestinationEntity(76U);
    msg.sys_id = 41163U;
    msg.priority = 24;
    msg.x = -22414;
    msg.y = -8264;
    msg.z = -29786;
    msg.t = 275;
    IMC::GpioStateGet tmp_msg_0;
    tmp_msg_0.name.assign("GNKVTPMGPUBPYSJDBPHHJHQBAXOWMHXJPYGLAIJFCINDLTWMXXJDUPSGIZSXQXFRWZESUBCKXIEXKRSCYFHONABZMRVNPYEMUHLFCURMIEMENUKT");
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.39641880432806453);
    msg.setSource(14267U);
    msg.setSourceEntity(216U);
    msg.setDestination(53864U);
    msg.setDestinationEntity(208U);
    msg.req_id = 23709U;
    msg.type = 25U;
    msg.max_size = 17490U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.7309776454484926;
    tmp_msg_0.base_lon = 0.16398988698999817;
    tmp_msg_0.base_time = 0.06995192733958178;
    IMC::RemoteCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.original_source = 22397U;
    tmp_tmp_msg_0_0.destination = 13256U;
    tmp_tmp_msg_0_0.timeout = 0.46001381440691047;
    IMC::QueryPowerChannelState tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_msg_0_0.cmd.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.39928704665160264);
    msg.setSource(3182U);
    msg.setSourceEntity(225U);
    msg.setDestination(21633U);
    msg.setDestinationEntity(32U);
    msg.req_id = 54226U;
    msg.type = 62U;
    msg.max_size = 13626U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.9889218006585323;
    tmp_msg_0.base_lon = 0.6398379546063806;
    tmp_msg_0.base_time = 0.31853400762300477;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.4079011427369056);
    msg.setSource(41563U);
    msg.setSourceEntity(230U);
    msg.setDestination(26224U);
    msg.setDestinationEntity(120U);
    msg.req_id = 5462U;
    msg.type = 49U;
    msg.max_size = 41884U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.9993175467905251;
    tmp_msg_0.base_lon = 0.14401672912013508;
    tmp_msg_0.base_time = 0.4383548434132991;
    IMC::RemoteCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.original_source = 7995U;
    tmp_tmp_msg_0_0.destination = 6165U;
    tmp_tmp_msg_0_0.timeout = 0.8193982970768262;
    IMC::CloseSession tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.sessid = 1272889940U;
    tmp_tmp_msg_0_0.cmd.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.47425140296004387);
    msg.setSource(29270U);
    msg.setSourceEntity(194U);
    msg.setDestination(18141U);
    msg.setDestinationEntity(138U);
    msg.original_source = 11891U;
    msg.destination = 62817U;
    msg.timeout = 0.41678690825053333;
    IMC::CloseSession tmp_msg_0;
    tmp_msg_0.sessid = 934194602U;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.399114056214803);
    msg.setSource(23241U);
    msg.setSourceEntity(250U);
    msg.setDestination(19257U);
    msg.setDestinationEntity(63U);
    msg.original_source = 59448U;
    msg.destination = 3311U;
    msg.timeout = 0.40276607398621844;
    IMC::SingleCurrentCell tmp_msg_0;
    tmp_msg_0.lat = 0.12690004324980053;
    tmp_msg_0.lon = 0.16682528388232865;
    tmp_msg_0.depth.assign("YKBRQIHZVLHHWZSHNJLZ");
    tmp_msg_0.vel.assign("UBRWEYCZUIMOLDQIVPRHJYWRSJGQJPTWBMNHOCDTMITISDRLKPXRDCWVKOFQOFBVSVGZXQMSTMXLUXVBJIEYZLGWTGINYDSHTMLQEVCO");
    tmp_msg_0.dir.assign("XOYDMVKNZYXADLGH");
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.3176706682318161);
    msg.setSource(12306U);
    msg.setSourceEntity(95U);
    msg.setDestination(12131U);
    msg.setDestinationEntity(142U);
    msg.original_source = 26777U;
    msg.destination = 45761U;
    msg.timeout = 0.4421248324849578;
    IMC::SoiCommand tmp_msg_0;
    tmp_msg_0.type = 191U;
    tmp_msg_0.command = 102U;
    tmp_msg_0.settings.assign("AKIGXQAFOUNWQZQHJXQTCAOKWBUBGMCEBMTITWNCRRKUYDHYZDOCBMCRZXWNKVYKEPRKPGBFBHSZFLRRL");
    IMC::SoiPlan tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.plan_id = 21775U;
    tmp_msg_0.plan.set(tmp_tmp_msg_0_0);
    tmp_msg_0.info.assign("NRUABDZOTVDCUFFGAJENOKNGMHSCQRWUOWKSQSWFBIOXPTMCXPGYOMRPQGXUMLMAOISVLUSVJFCVGTEPDUACYYKSNXEVIWXAIFPBHXMTABOWRYUYCRNLHMSQHVZOUK");
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.6381050214919856);
    msg.setSource(39544U);
    msg.setSourceEntity(189U);
    msg.setDestination(8221U);
    msg.setDestinationEntity(101U);
    msg.type = 175U;
    msg.comm_interface = 22818U;
    msg.model = 27911U;
    msg.list.assign("AGBZJITOFDYDNKCUBTWOUSVCBTFZLUJUZIADXJGSDEGJHDIOVXWMAESMFRCHBKYPGRTNOYWISQIFRCQYILHCLUPRAEAZSKPZFJYUBCMVVRTUMNFXDGBNMPPMOQRKQSDQKBMDKPZVLQOJACHCLBYTFBHHBEI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.40945087737175945);
    msg.setSource(18599U);
    msg.setSourceEntity(232U);
    msg.setDestination(29196U);
    msg.setDestinationEntity(5U);
    msg.type = 29U;
    msg.comm_interface = 30364U;
    msg.model = 57404U;
    msg.list.assign("LAKQROMMQBSKJPQBLQRZSTQLXMUYEICWPDQNNYTCKDZOTSNJWZAAPTVMKUVTYVVBUGWAOSIVFBVGOSYLNXMWGOPITSLRDPIGLEEXKFUHGBGJLMAEGMBWUHJISYQCJFFIDIZANEDCRPZSICZAGWPAZVKLLNHONYFVOEOOEUENKUWOUCRPXRNEIRMBBQVGBJRUIDHAYXREXWXJHSHHKYQDTHZXFWFXF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.9245010983614393);
    msg.setSource(45487U);
    msg.setSourceEntity(121U);
    msg.setDestination(18295U);
    msg.setDestinationEntity(100U);
    msg.type = 19U;
    msg.comm_interface = 10669U;
    msg.model = 2559U;
    msg.list.assign("GEBFLIGTRDSOBQYCJIDZCHCXCXBZOYCGSBBZEQRVGANYUAILGWPJKAIIABTCQONLBXAUNPWEJZTZQLODRRLZDKOOAXYPGNKYMYHGFEHJQNQIAMZDEWCQMWTJOJUEXRBACVZQYVTIHDBFTXUVTNMWFGMORPUE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.577106479279377);
    msg.setSource(12651U);
    msg.setSourceEntity(208U);
    msg.setDestination(10331U);
    msg.setDestinationEntity(85U);
    msg.type = 232U;
    msg.req_id = 1753091103U;
    msg.ttl = 41189U;
    msg.code = 48U;
    msg.destination.assign("WGCVDXKFFCUNRGBSZWXHEDDFQHGSEINJWRQBVRKEOKGZAICXUAWOUWFISEYSJNVMBLIPRPCKAINXTJYSCLXACOYMAELPMLKOPTNUHTPTQBIPMOUQCGBNBSHDYHQA");
    msg.source.assign("UMBOTTLRPGAOJVBBICYDYALVSNPEIGUYQMNYLPZZRBVGUUJWECYSOBYBJZGRPNW");
    msg.acknowledge = 4U;
    msg.status = 145U;
    const signed char tmp_msg_0[] = {-35, -124, -52, 119, -14, 20, -117, -97, 69, 82, 16, 4, 97, 68, 30, -86, -78, 73, 89, -23, -31, -24, -40, 118, 49, 29, -53, -59, -107, -119, 60, -123, 110, -86, -21, 93, 98, -110, -8, 71, -13, 60, 91, 105, 120, -71, -48, 66, -42, 104, -106, -20};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.6487279128063718);
    msg.setSource(1573U);
    msg.setSourceEntity(214U);
    msg.setDestination(56561U);
    msg.setDestinationEntity(128U);
    msg.type = 159U;
    msg.req_id = 3879061860U;
    msg.ttl = 12166U;
    msg.code = 138U;
    msg.destination.assign("NRDZASRXCCOYBSPSKBGLOFRRYGUTFTWKCDXJPXHFXANEHABPZEVFNIITIGELUCGYQBTAJOYHNSVAHHKUSZMBURWQHMJMUGFYMWSMNAMLFTGFKJMLKVKHYZUXBVH");
    msg.source.assign("ATYRVNHYZFXJBIL");
    msg.acknowledge = 56U;
    msg.status = 196U;
    const signed char tmp_msg_0[] = {114, 15, 96, 67, 28, -10, 118, -39, 70, 71, 92, -73, 65, -42, 43, 37, -87, -93, -67, 82, 91, -121, -80, 84, -128, 69, -44, 98, 7, -29, 62, 49, 115, -26, 73, 75, -3, 46, 62, -8, 29, -28, -67, 35, 35, 27, 38, -116, -65, 25, 108, 78, 59, -79, -82, -78, -46, -59, -74, 125, -23, -36, -40, -115, -17, 42, -8, 47, -76, -34, -30, -32, -25, -86, 78, 0, -72, 11, 88, -79, 93, 106, 107, -104, -96, -16, 62, -7, 79, 99, -104, 11, -39, 124, 91, 92, -113, 121, 65, -54, 106, 16, 12, 123, -118, -39, -28, 21, -83, 49, 25, 66, -108, -62, -61, 76, -74, -5, -122, 91};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.4577780563541296);
    msg.setSource(6732U);
    msg.setSourceEntity(136U);
    msg.setDestination(6599U);
    msg.setDestinationEntity(206U);
    msg.type = 111U;
    msg.req_id = 4034722313U;
    msg.ttl = 58990U;
    msg.code = 195U;
    msg.destination.assign("ODEKPAJCCGCBYWXIQPWMLAEADTSWUVHMOYZUYDCPLH");
    msg.source.assign("JLAHVEPZSTBKWPFLNOUGDNENIROROCWXVRUSOIBFVBSXTCMRCIUOWGFIJFWYLNQOAKKUYXTFDOHYBYPJBGWNZEKGVVCSMAPUINUCQVQRMGSQSPXMIZXSMGHVATFJYZDQJCYTCWQKBTHEDTWMZZPLVNUEMTHBQUAAQWPOCODTYJRRPKHIJOLFHAYERJLSGWZBWHGNIDASVAY");
    msg.acknowledge = 123U;
    msg.status = 223U;
    const signed char tmp_msg_0[] = {119, 47, 70, -47, -4, 64, -114, 122, 47, -53, 73, 110, 87, 49, -58, -105, 13, -95, -3, -124, -19, 39, -68, -94, -19, 16, -54, 68, -60, -126, 88, 35, -128, -94, -5, 47, 15, 122, -117, -91, 107, 124, -81, 121, 29, 91, -101, 74, 37, 31, 73, -59, 68, -33, 56, -108, -54, -57, 58, 91, 93, 41, 57, 46, -7, 10, -14, 23, 34, -15, 107, -42, 73, -74, -75, -117, -28, -83, -3, 18, -77, 81, -67, -22, -12, 44, -56, 112, 69, 67, 91, -106, -53, -15, 42, 78, -102, -107, -10, -5, 115, -71, 93, 76, -58, -36, -9, 53, -115, -125, 59, 41, 42, -102, 53, -122, -128, -127, 73, 53, -74, -55, -108, 50, -68, -76, 42, -121, -97, -96, -46, -41, -106, -114, -88, -74, -32, 46, -97, 99, -74, -59, -82, -115, 106, 104, -41, 8, 54, 98, -69, 77, -112, -41, 63, 84, 95, -74, 33, -52, -68, 57, -36, 118, 44, 119, -5, -90, -37, -48, -14, -27, 60, -26, 78, 77, 1, 42, 53, -22, -123, -48, -43, 30, -90, 99, -24, -96, -64, -76, 24, -105, -94, -87, 95, 120, 59};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.7707010127819288);
    msg.setSource(64162U);
    msg.setSourceEntity(54U);
    msg.setDestination(54644U);
    msg.setDestinationEntity(210U);
    msg.id = 214U;
    msg.range = 0.08697003348861154;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.9449566417092898);
    msg.setSource(4610U);
    msg.setSourceEntity(79U);
    msg.setDestination(45143U);
    msg.setDestinationEntity(90U);
    msg.id = 178U;
    msg.range = 0.8198024509741595;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.9640862496690898);
    msg.setSource(45108U);
    msg.setSourceEntity(76U);
    msg.setDestination(17230U);
    msg.setDestinationEntity(241U);
    msg.id = 75U;
    msg.range = 0.3507143222196416;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.8650529997212649);
    msg.setSource(12841U);
    msg.setSourceEntity(149U);
    msg.setDestination(60398U);
    msg.setDestinationEntity(213U);
    msg.beacon.assign("IUBUAMQBHQHUSITJLKVLDSNIHTNNZVUYVWJCQWKOOBEKRKVSGCDEQCBKVJTZOSWZAEXLKNRJKMVNELBPQDPIXMRUWOUMDTTJGTGSYGLOLIAYYPHPKHLRDRFVXJMEADQHDOLZPXEVPPAJXMYBFF");
    msg.lat = 0.9195592259028094;
    msg.lon = 0.5629755950292433;
    msg.depth = 0.5416249658365105;
    msg.query_channel = 158U;
    msg.reply_channel = 96U;
    msg.transponder_delay = 159U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.6830299790991486);
    msg.setSource(61181U);
    msg.setSourceEntity(54U);
    msg.setDestination(44846U);
    msg.setDestinationEntity(12U);
    msg.beacon.assign("DJGUBIDCWIACKTQXLFWECIVOGURFMJPUXLYESSDGGTTTFHBURWZVVACKSITHQYKKBXYUBPMGWGBCOMDLYBVJURKTPAKDYCNLVAEUKFVHZPOXJSMOFRAWODDCPHXROTVUQERYQXZFPRDSYLSIKFBIZZULMMWXHJOJOZINANICLBZSZWLWGRXOPJFDHVVTNWKPNENHAMQXHCLDJRNMKYHVQSBNZQZE");
    msg.lat = 0.9795444689909883;
    msg.lon = 0.6260517064950575;
    msg.depth = 0.7041500812779353;
    msg.query_channel = 253U;
    msg.reply_channel = 60U;
    msg.transponder_delay = 182U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.3678792405454191);
    msg.setSource(36151U);
    msg.setSourceEntity(56U);
    msg.setDestination(30253U);
    msg.setDestinationEntity(239U);
    msg.beacon.assign("ZTVIDLQEQXJBWRGIRXYHYGCFFVRCKSXHGZBGMUDBHRTNGDZOAQGQGHUXIZMECNOGPNPMPSKORHFMKNTV");
    msg.lat = 0.8074448045577699;
    msg.lon = 0.35726784136157996;
    msg.depth = 0.5835017854095443;
    msg.query_channel = 186U;
    msg.reply_channel = 129U;
    msg.transponder_delay = 172U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.5535034915960303);
    msg.setSource(54246U);
    msg.setSourceEntity(91U);
    msg.setDestination(58053U);
    msg.setDestinationEntity(100U);
    msg.op = 140U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("RHKXOKHJTDYPPHZRQTYGYERVAJIVPUAZCS");
    tmp_msg_0.lat = 0.6253346765432342;
    tmp_msg_0.lon = 0.23316149957742383;
    tmp_msg_0.depth = 0.34952793361185874;
    tmp_msg_0.query_channel = 145U;
    tmp_msg_0.reply_channel = 100U;
    tmp_msg_0.transponder_delay = 142U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.3122655318915879);
    msg.setSource(31594U);
    msg.setSourceEntity(191U);
    msg.setDestination(17198U);
    msg.setDestinationEntity(31U);
    msg.op = 228U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("BHPYHCTVTSGUELSCFNDXXISDUUGBBWRABHGYVQDNFDNXLCHJRXXZZIWTGEXCFORJKGDHAGCPGXJVJAKKEAQUDGJEVMIIWNFYGLTOYOBTKRNXYRRYPTQKVZWBZCUWIDJHOWSWVSPZLKJLIYIFIPXQVWVPQZMVZQTPENWFNAMXQJHEAQSBQADLWTVPIDZUYEF");
    tmp_msg_0.lat = 0.7374296251179282;
    tmp_msg_0.lon = 0.30769087487379954;
    tmp_msg_0.depth = 0.14595221456919605;
    tmp_msg_0.query_channel = 238U;
    tmp_msg_0.reply_channel = 20U;
    tmp_msg_0.transponder_delay = 199U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.9668940857515618);
    msg.setSource(62178U);
    msg.setSourceEntity(35U);
    msg.setDestination(54627U);
    msg.setDestinationEntity(116U);
    msg.op = 191U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.6721611835672405);
    msg.setSource(60227U);
    msg.setSourceEntity(163U);
    msg.setDestination(48927U);
    msg.setDestinationEntity(108U);
    IMC::CpuUsage tmp_msg_0;
    tmp_msg_0.value = 196U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.7122960123615376);
    msg.setSource(12349U);
    msg.setSourceEntity(77U);
    msg.setDestination(38544U);
    msg.setDestinationEntity(45U);
    IMC::CompressedImage tmp_msg_0;
    tmp_msg_0.frameid = 143U;
    const signed char tmp_tmp_msg_0_0[] = {90, -31, -47, 118, -12, 10, 24, 22, -71, 45, -106, -2, 54, -99, 1, 64, 53, 48, -35, -67, 117, 51, -96, 56, -42, 66, -16, 77, -9, 122, -109, -8, 104, 19, -30, 86, -117, 35, -121, -24, -45, 1, 103, 81, -125, 70, 9, -105, 33, 72, -1, -76, -85, 17, 39, -106, 93, 39, 28, 69, 13, 87, 124, 110, 24, -99, -5, 81, -117, -60, -77, -50, 67, -98, 18, 49, 62, 34, 51, 106, 14, -122, 82, 94, -15, 82, 49, -6, -103, -107, 95, 33, 13, -128, 56, -7, -76, 16, 24, -53, 59, 10, 116, 43, 6, 39, 121, -47, -65, 43, -52, 71, 86, 45, 66, 25, 97, 46, 74, -109, 111, -125, -85, 120, 82, 96, -42, 88, -55, -95, 97, -42, -43, 101, -99, 42, 118, 84, 126, 33, -94, -79, 24, -104, 81, 102, 125, 2, -81, -114, -88, -108, -40, -127, 120, -19, 21, -6, -107, 62, -110, 61, -117, -62, -82, 61, 117, 6, -108, 2, -65, -118, -60, -40, 107, 101, -24, -48, 24, -58, -17, -116, -71, -74, -83, 104, -123, 28, 23, -86, 105, -37, 113, -54, 26, 47, -66, 14, -49, -14, -15, 81, 121, 107, -98, -54, 62, 32, 126, 34, 8, 9, -44, 48, 63, 13, 2, 58, 31, 6};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.4175242171020568);
    msg.setSource(57163U);
    msg.setSourceEntity(152U);
    msg.setDestination(1568U);
    msg.setDestinationEntity(120U);
    IMC::VSWR tmp_msg_0;
    tmp_msg_0.value = 0.40651904815541784;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.04838363345305763);
    msg.setSource(20769U);
    msg.setSourceEntity(155U);
    msg.setDestination(39794U);
    msg.setDestinationEntity(141U);
    msg.lat = 0.5441506647222444;
    msg.lon = 0.5901725349140406;
    msg.depth = 0.6225217837726871;
    msg.sentence.assign("WEQAZNWWFLDBKMTEZCYQMXMBXIUFWYRORULLNHDDMFNOGDYYAXBGWREGSTKPWCLIUKZYDBJVWYJXDOVCLSIXJMGOKXHFCHCJAQGWIECNPKIBVAHIDQDPHXSXHLUVFNRCQITQUOZPHMANMOSFLFTVELYGSNVRZJLGQHTUEZRDI");
    msg.txtime = 0.7322738644678262;
    msg.modem_type.assign("XUBJPCTDGWHEWYZSOEKPMRGNMVETGCKLXUTANTJGGYLVXSZCIEPHEOQIOCNELDJHBCCZSDYFMSBLPIBFWLOQQUIYEREOFRBTVMYSCRIKTHTWZRLIFHSRVUFZMJQCRXYKVAJJAZXQPIMKPUKSAQYNDOFMEESIWXPBYVFVHABBVTXDUNKQZRARFAFXAORUJZUFQGSPCYNOHBVDOALHNQZLDSDWJHKNNMAXLVGNZKPTMJGQOMU");
    msg.sys_src.assign("YQDPINLHLGTUKOBIRJSKYCDRYZXWVXPDVWICMDBSYISSSAPBUTPKKFVHMLWUFUWWVIWEZYQXWVWVCZDHSURTZDYEAKLOEZRNTTXREPOHUXWLSYNONLOIMVJMONKJZEVCEHANAAYMAMPUFJXOOEAXOXQJOLKBHADGENRTSQQCRQNPGZNTTYTFXAPUVJRGCBCBFGQJTHLULHQRAZBCIPKJREJMB");
    msg.seq = 35829U;
    msg.sys_dst.assign("DHTGFAZJGJWKOQMDVFHQNWNKNGXKTPOLWXIJVJTNIMFJUCRPQMRLRTSBCOVHGDWFEEBSYDCQGJPUCPAGBLHDERNISSKQZNKEITBWZ");
    msg.flags = 199U;
    const signed char tmp_msg_0[] = {-45, 15, -58, 36, -120, -46, 3, 43, -88, -19, -85, -99, -47, -112, 112, -66, -13, -25, 70, 107, -35, 61, -108, 78, 97, -81, -31, 68, 36};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.03308763245317825);
    msg.setSource(38412U);
    msg.setSourceEntity(199U);
    msg.setDestination(56457U);
    msg.setDestinationEntity(21U);
    msg.lat = 0.028302191054533465;
    msg.lon = 0.46619042400661337;
    msg.depth = 0.24522059545898234;
    msg.sentence.assign("NOBDYBOSJSJSDXAFKORVAXPAGEEALYNRNUEM");
    msg.txtime = 0.7675245857406813;
    msg.modem_type.assign("FWYANVCEZELYUBSPPUAVJOASYVDHEHHNIJJOMZQAGVULQXAGIBWVMMCKVCBDTDRSLNRIRFWHECDOZCLHQRBPATJMBCQKLGIEJKXTHISKJDDDPTLBZBOBQGLIPHFFGNDMMY");
    msg.sys_src.assign("DEVGUXEALWTYAYFFUQNWDVUMQRXDMMRBRYPQGLZGKBZAIPDJOPQQSSSPYSDBJVOZBENVKCZGXJHRCLHOXVOSXLFTFIJULEWNALIFAQHYNBXMXISCBBWYOTOKTRCMWUWMOGULYKPWVNTESGCHTFYXDROULXPDVIFVRVPZKCNRNLOPHQFMIHMZNGQCZCGAJSAYFQPBMETUXJMKYIUGKNDEDBDSKHSKTGEEQZIVWCKHJWIRAJWJEZLIA");
    msg.seq = 41010U;
    msg.sys_dst.assign("QWUYSGCVNXVJUTWKSPELPISNHQFGVJBXOYNXCRYZ");
    msg.flags = 120U;
    const signed char tmp_msg_0[] = {-46, 8, 102, 18, 11, -126, -88, -121, 6, -72, -103, 50, 43, 48, 73, -76, 53, -105, -14, 21, -21, -90, -68, 45, -64, -84, 104, -81, 3, -72, 31, 28, -99, 66, 105, -117, -23, 123, -77, 49, 26, -58, -97, 87, 79, -99, -35, -25, 121, -34, 7, 112, -113, -102, 10, 89, 123, -1, -63, 79, 59, -122, -126, -65, 126, -24, -5, -68, 0, 25, 90, -26, -27, -71, 79, -40, -128, -108, 1, 93, -10, -106, 31, 118, -89, -46, 124, 68, -91, 6, 71, -64, -87, 123, -123, -92, 0, 51, -45, -2, -90, 45, -47, 16, 78, 74, 81, -97, 14, 43, -37, 39, 124, -72, 7, 102, 84, -79, 81, 89, 56, -73, 33, 22, -101, 13, 78, 41, -27, -62, -19, -13, -25, 102, 64, -75, 60, 57, 35, -61, -84, -30, -78, 64, -32, 35, -44, 48, -82, -77, -35, 27, -76, 0, -75, 71, -19, 60, -28, -35, 102, 10, 111, 108, 38, -124, -66, 95, 97, 5, -73, -52, -96, -104, 1, -97, -65, 3, 126, -27, 50, -47, 111, 47, -99, -64, -63, -92, -83, 89, -5, 26, -93, -66, 10, 103, -19, -116, -11, 40, 18, 73, 2, -20, -1, -82, -41, -29, 115, -56, 47, -31, -99, 117, 101, -62, -14, 89, 95, -5, -66, 2, 25, 41, -94, -9, 103, 82};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.618201485207881);
    msg.setSource(44908U);
    msg.setSourceEntity(66U);
    msg.setDestination(57582U);
    msg.setDestinationEntity(7U);
    msg.lat = 0.006763691388545157;
    msg.lon = 0.3239831021262537;
    msg.depth = 0.737887906703276;
    msg.sentence.assign("PUXCUJWTOUJIVAMKGGNHIZFNUKHCZMRLLXSINQUYECRUZOWWYEAPGYDEREMVCMNPSNZLOMBZTVBNCDHIITSUEWBHPZIIMIJGKREBCKZNXYYBNGSDLCYDAXAHXFEFJHGOFGFNJWIOYCLOBVCQLPPBAOTAQWPRQXKQAAALGKYZXBMHUDUQFRFWUXEHFBCPLEDKLPSQMXTYGSPFVDXJMDSKTWQJWJJRDL");
    msg.txtime = 0.8084422236350135;
    msg.modem_type.assign("GYWUXJAKANXDGVUWPMONUHOAVAEIRYCLFXPKIFNPBXUFO");
    msg.sys_src.assign("UMWRXZTCAXXHIAAXJLAZXPEJEPBRHLLHJHGVCFFHGFQGLTZDEXQYUUG");
    msg.seq = 30315U;
    msg.sys_dst.assign("UNOWPTSFWZRBFVFZHYTRSXIYHJZMLUELXRKFUABPBDCYLAKFHLNFNPQ");
    msg.flags = 235U;
    const signed char tmp_msg_0[] = {108, -69, 100, 21, -19, -15, 5, -51, -50, 66, -70, 14, -118, 63, -105, -54, 107, -87, -65, 119, -81, -47, 97, -59, -64, 82, 66, 28, 49, 50, 30, -53, -87, 96, -21, -79, 75, 6, 12, 29, 126, 78, -23, 123, 93, -67, -43, 105, 32, -74, 37, -119, 87, 22, 88, -106, -19, -69, -46, -62, 125, 38, -85, -19, -127, -11, -2, 104, -102, 24, -126, 92, 47, -7, -91, -77, 3, 125, -85, -22, -39, -9, 21, 98, -22, -15, 88, -30, -83, 74, -116, 50, -22, 125, -73, -21};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.5922768051797753);
    msg.setSource(13658U);
    msg.setSourceEntity(76U);
    msg.setDestination(24766U);
    msg.setDestinationEntity(243U);
    msg.op = 239U;
    msg.system.assign("SGWURIBFPICVJUDGYEUJUACPQXQRRBAMFZYNVWXCCQTR");
    msg.range = 0.8624786795221819;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 36223U;
    tmp_msg_0.off_x = 0.7453845549016073;
    tmp_msg_0.off_y = 0.36240301220559;
    tmp_msg_0.off_z = 0.17005320283531622;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.30851734167790235);
    msg.setSource(53808U);
    msg.setSourceEntity(254U);
    msg.setDestination(9479U);
    msg.setDestinationEntity(152U);
    msg.op = 250U;
    msg.system.assign("HGMNEULIKVRYTFALVESPOBWSIFKZFECWZYQYSTAXCODBBFUEDTLJGMRBKXLOMKZUMRXKUGUKMYWASTKTRDNIJBFM");
    msg.range = 0.05731773319168876;
    IMC::FormationState tmp_msg_0;
    tmp_msg_0.type = 60U;
    tmp_msg_0.op = 45U;
    tmp_msg_0.possimerr = 0.058497830886371616;
    tmp_msg_0.converg = 0.15438950302573706;
    tmp_msg_0.turbulence = 0.8168854156468873;
    tmp_msg_0.possimmon = 47U;
    tmp_msg_0.commmon = 153U;
    tmp_msg_0.convergmon = 157U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.25129348176951705);
    msg.setSource(50727U);
    msg.setSourceEntity(48U);
    msg.setDestination(644U);
    msg.setDestinationEntity(144U);
    msg.op = 58U;
    msg.system.assign("NEIYCXICXSWNWKPFQLNYOQPA");
    msg.range = 0.7795074689449942;
    IMC::RemoteCommand tmp_msg_0;
    tmp_msg_0.original_source = 11693U;
    tmp_msg_0.destination = 5723U;
    tmp_msg_0.timeout = 0.15119740591696618;
    IMC::FollowSystem tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.system = 12725U;
    tmp_tmp_msg_0_0.duration = 25604U;
    tmp_tmp_msg_0_0.speed = 0.7643819447799823;
    tmp_tmp_msg_0_0.speed_units = 21U;
    tmp_tmp_msg_0_0.x = 0.6424586284285687;
    tmp_tmp_msg_0_0.y = 0.5746848934834009;
    tmp_tmp_msg_0_0.z = 0.8431797597179934;
    tmp_tmp_msg_0_0.z_units = 122U;
    tmp_msg_0.cmd.set(tmp_tmp_msg_0_0);
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.5218031719581937);
    msg.setSource(43728U);
    msg.setSourceEntity(160U);
    msg.setDestination(49540U);
    msg.setDestinationEntity(79U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.26621510253751113);
    msg.setSource(11570U);
    msg.setSourceEntity(246U);
    msg.setDestination(50578U);
    msg.setDestinationEntity(203U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.7003601599977598);
    msg.setSource(6126U);
    msg.setSourceEntity(242U);
    msg.setDestination(2315U);
    msg.setDestinationEntity(129U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.8758846832248668);
    msg.setSource(57125U);
    msg.setSourceEntity(201U);
    msg.setDestination(43610U);
    msg.setDestinationEntity(114U);
    msg.list.assign("TFJVUDNGLABPSKVECICVQAMMIVTKXEMGQRBSMUOCIOSKUEFQRQJEVDLKEUCDIANOPTLWEEUHYSOXCTBCBGLKJYXTFKIRVPDIOQZFRQLKWHWEDJGAQLHNCFBLRKYNDNUZMFCOLZHIDPMYRDYTSWFGBWWPFJGZPSPJSAWNNARYJLAGKYWUVUNYP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.6694391926684671);
    msg.setSource(65189U);
    msg.setSourceEntity(218U);
    msg.setDestination(19126U);
    msg.setDestinationEntity(155U);
    msg.list.assign("KHTDVHWIDJVDMWFMSXIPTLZTYKIHBKUKOUFHCEZXJPOJDZCYCZYKCGARFECZLRQPTLYCSESSPUVLCWHQRVBLGYBPERBKPRGAGFBMZKCPNBGQINWANXLIQKIXSZWQOFYMDCHJQMJXEJTJBYEFJAOEVHZRPNBFVNQUKSDJLEMWOOSWRGSTYRTOHRISPOVANFVAUWOXID");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.3208090713716827);
    msg.setSource(40548U);
    msg.setSourceEntity(144U);
    msg.setDestination(41282U);
    msg.setDestinationEntity(50U);
    msg.list.assign("BOOFKQTOLCBXXTTBURTPCJONNSCDYSXKVCYUMGRHCTHDMAXQNESAT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.7948153100291262);
    msg.setSource(1350U);
    msg.setSourceEntity(97U);
    msg.setDestination(59741U);
    msg.setDestinationEntity(112U);
    msg.peer.assign("ZXAAPTMNJOCZLQFIQK");
    msg.rssi = 0.10428328653340013;
    msg.integrity = 32202U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.9263901015063919);
    msg.setSource(4425U);
    msg.setSourceEntity(155U);
    msg.setDestination(40070U);
    msg.setDestinationEntity(76U);
    msg.peer.assign("WODCVCMXLEHBADWLXRHCZQPWACYZPPNESAQKVSABDGLKRNBXYPEFTUDWMGPPSMRJOPDDUZWJSSNCTUCUYAQILQKFFBLNAJVTWDMOTPSHYQZIQCGBJNTSQEKMZWOIVMZEYOTXBUWIUIZBVKXAAQRRJXLRFLUNGVOCMRFMJPKNZQTINWKGSAFLEYCHOFKUGIHIBKHYBYHOYOWQCHALOLRYDVXXXUFKIDRVSFGMGNZXEVEJTFHZJJEVIGMSRGB");
    msg.rssi = 0.17843872364572744;
    msg.integrity = 32343U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.8122252855036451);
    msg.setSource(22155U);
    msg.setSourceEntity(83U);
    msg.setDestination(205U);
    msg.setDestinationEntity(53U);
    msg.peer.assign("AKRSLVZUTLRQQGPLBNDWCTZKMNTJYAXSTBIOOBHTLODFGUFUYPCMNEGCIFBOZRYSEIKNEUIEXXAFSOWGPDV");
    msg.rssi = 0.8905154699674215;
    msg.integrity = 49879U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.2543721261272561);
    msg.setSource(58856U);
    msg.setSourceEntity(60U);
    msg.setDestination(64846U);
    msg.setDestinationEntity(124U);
    msg.req_id = 14346U;
    msg.destination.assign("ZKYDFQIBZRZTYBECNOWXNGCXTDBYCYPIEMHAXNCBRCIRFPMZJGRZEJMRPYFPFTSUYTBMWXGYNQSRFDLFUKUKVUJGIZDGWVHEUOKSUGRBVNDOUILNCSNQOVDXKTGZUJZXHWBAILVIHVUOEZMGHPAQUXEYWMZMJDWLLJSLLSOK");
    msg.timeout = 0.6044710054076435;
    msg.range = 0.2386821537783843;
    msg.type = 65U;
    IMC::Brake tmp_msg_0;
    tmp_msg_0.op = 163U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.9907910222169122);
    msg.setSource(56020U);
    msg.setSourceEntity(166U);
    msg.setDestination(20162U);
    msg.setDestinationEntity(156U);
    msg.req_id = 28167U;
    msg.destination.assign("LMFXKNBUNNTEAYXQDALZQFVSCKYFBPDRXAPKZHQTHNDSEXFCAKAVKJOAMSWTVPHMEPOGYGAZCRWECHRMIMUFGEINIVZYUSFQSCXOKQVDHLVPZBQTBCDXSWOJURJWMNBUTCBQAQMCYDUWWTKGP");
    msg.timeout = 0.4217058764365259;
    msg.range = 0.40202275759536654;
    msg.type = 116U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("SWXHDAWGIJDPLBSOPCFKHGCWZJFVWSUGEOJKHACFTWMLPOVMRJFHFMIYTLESNYCLZLZGRTAMIWMBXYCDRTTATEVVUWOUVATRLOQKAYIRURCCI");
    tmp_msg_0.lat = 0.8119384708346851;
    tmp_msg_0.lon = 0.8716142347521649;
    tmp_msg_0.depth = 0.7191509011916073;
    tmp_msg_0.query_channel = 90U;
    tmp_msg_0.reply_channel = 159U;
    tmp_msg_0.transponder_delay = 185U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.9928384402348706);
    msg.setSource(18620U);
    msg.setSourceEntity(224U);
    msg.setDestination(51045U);
    msg.setDestinationEntity(182U);
    msg.req_id = 7814U;
    msg.destination.assign("CFAFBNKMDJOOTKGDYPTCYHWRUVWMENSXQMXQAYESCLWELBJCNOBKZZI");
    msg.timeout = 0.38554554952302633;
    msg.range = 0.3184656421711687;
    msg.type = 185U;
    IMC::AcousticStatus tmp_msg_0;
    tmp_msg_0.req_id = 7676U;
    tmp_msg_0.type = 34U;
    tmp_msg_0.status = 27U;
    tmp_msg_0.info.assign("YNBTSDYLYEBAKVRZZXDNAGJSOIZJQHWOHCHTVDSICNOIUEFTJCTWZLMTPXUWTQLJZRQQXUWUCBBNVISNFALUQPVCCKPZEMRHCNVKDPDVFIMGKAMQEMWVIHJWHEPIDOHWEYKOWTZXBEPYTQAZ");
    tmp_msg_0.range = 0.9461244414025582;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.36193975624301145);
    msg.setSource(35194U);
    msg.setSourceEntity(16U);
    msg.setDestination(33560U);
    msg.setDestinationEntity(167U);
    msg.req_id = 41282U;
    msg.type = 94U;
    msg.status = 31U;
    msg.info.assign("NWITELHKVCQVHQHCCLBOYJBSTGMEDBAXGZUDEOOHJRPSQXDZOQDNYFSJDJSVFGPUKNTBUELNFUQNORXMNRLCCIYTKRZQZZZEWI");
    msg.range = 0.4352797124313216;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.22030097278106564);
    msg.setSource(43005U);
    msg.setSourceEntity(145U);
    msg.setDestination(29848U);
    msg.setDestinationEntity(203U);
    msg.req_id = 2119U;
    msg.type = 233U;
    msg.status = 72U;
    msg.info.assign("MUDGMWYPDLFDMHSOWFHSDVXZRFOCIVXBJHBJW");
    msg.range = 0.29271237526862737;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.9715808379774986);
    msg.setSource(7487U);
    msg.setSourceEntity(224U);
    msg.setDestination(33985U);
    msg.setDestinationEntity(143U);
    msg.req_id = 21910U;
    msg.type = 182U;
    msg.status = 33U;
    msg.info.assign("QJSETCEXRHBLFTWLUVAPDJQDWWYRAQHIZFEOMFGLHXJACXAVPDHLMYROZGSEGKBFAOQSRMOFKOMYWMIOUWJDAXIBMBSWTOSMKTYIRSYAPQCRTIWUKGCNKGUUBZCXFUVKJNHCBLBVSCIWXKQESAQBKFDJQIUWEK");
    msg.range = 0.07081379597534576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.9404807066094599);
    msg.setSource(15387U);
    msg.setSourceEntity(131U);
    msg.setDestination(19262U);
    msg.setDestinationEntity(160U);
    msg.system.assign("CZIFQYISMAOWDSBRRSKCYATSBRTTGAAEQNNGUABZVJDPOEOEZVZZYWGQJMUPCDTUZOJTVJHGLAPKFWUXYCNDBIVDEOGQUPELCVCGAHOWNVHBEMJBNFFQLMUMYHJRHNYGOIXZRJRIALSJLOOTUXPUHVMKB");
    msg.op = 153U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.728410322888322);
    msg.setSource(672U);
    msg.setSourceEntity(133U);
    msg.setDestination(29981U);
    msg.setDestinationEntity(51U);
    msg.system.assign("SFMNUBOHACBCVCMXIWBCFB");
    msg.op = 188U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.3502703100164809);
    msg.setSource(2548U);
    msg.setSourceEntity(124U);
    msg.setDestination(30270U);
    msg.setDestinationEntity(251U);
    msg.system.assign("GPJFKGXHABNUPHHUORZYCJEIPFKHBACMGEQNUOKCUJGPREDPHPCOXTJYDSJSMXSZNWWGMWORHUHBHIRNWGRBDBGLSMZSTVUYOXV");
    msg.op = 228U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.10994281404526429);
    msg.setSource(38869U);
    msg.setSourceEntity(140U);
    msg.setDestination(36178U);
    msg.setDestinationEntity(254U);
    msg.value = -27197;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.5094926097382757);
    msg.setSource(29181U);
    msg.setSourceEntity(126U);
    msg.setDestination(33074U);
    msg.setDestinationEntity(50U);
    msg.value = -9391;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.7541579165836011);
    msg.setSource(58949U);
    msg.setSourceEntity(106U);
    msg.setDestination(38328U);
    msg.setDestinationEntity(63U);
    msg.value = -28086;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.9511120700775403);
    msg.setSource(33389U);
    msg.setSourceEntity(122U);
    msg.setDestination(5058U);
    msg.setDestinationEntity(174U);
    msg.value = 0.34953298530253285;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.5004058382843036);
    msg.setSource(61752U);
    msg.setSourceEntity(66U);
    msg.setDestination(41548U);
    msg.setDestinationEntity(68U);
    msg.value = 0.13488851104397737;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.9498820223755013);
    msg.setSource(14384U);
    msg.setSourceEntity(87U);
    msg.setDestination(49601U);
    msg.setDestinationEntity(103U);
    msg.value = 0.9277755534041306;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.18925804119527045);
    msg.setSource(39433U);
    msg.setSourceEntity(216U);
    msg.setDestination(8091U);
    msg.setDestinationEntity(34U);
    msg.value = 0.6548345596637631;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.9581674411462324);
    msg.setSource(61945U);
    msg.setSourceEntity(14U);
    msg.setDestination(47908U);
    msg.setDestinationEntity(237U);
    msg.value = 0.5618875753928934;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.5975664197633249);
    msg.setSource(37981U);
    msg.setSourceEntity(9U);
    msg.setDestination(18919U);
    msg.setDestinationEntity(227U);
    msg.value = 0.31906795671386345;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.561120656136717);
    msg.setSource(36781U);
    msg.setSourceEntity(66U);
    msg.setDestination(51080U);
    msg.setDestinationEntity(1U);
    msg.validity = 49064U;
    msg.type = 159U;
    msg.utc_year = 20521U;
    msg.utc_month = 104U;
    msg.utc_day = 52U;
    msg.utc_time = 0.8481209036012293;
    msg.lat = 0.5232299278761375;
    msg.lon = 0.8507479132596809;
    msg.height = 0.7357931918285389;
    msg.satellites = 239U;
    msg.cog = 0.9998831858713969;
    msg.sog = 0.5440375202487886;
    msg.hdop = 0.3007660225659402;
    msg.vdop = 0.36818686878286067;
    msg.hacc = 0.17715899334420326;
    msg.vacc = 0.7701563463898683;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.22317990378829644);
    msg.setSource(53660U);
    msg.setSourceEntity(133U);
    msg.setDestination(23906U);
    msg.setDestinationEntity(252U);
    msg.validity = 6106U;
    msg.type = 27U;
    msg.utc_year = 60748U;
    msg.utc_month = 218U;
    msg.utc_day = 24U;
    msg.utc_time = 0.04083840489730983;
    msg.lat = 0.7195736357728928;
    msg.lon = 0.6466281415500567;
    msg.height = 0.7293218044820449;
    msg.satellites = 145U;
    msg.cog = 0.34278319332511353;
    msg.sog = 0.8540103677118237;
    msg.hdop = 0.013527416402808856;
    msg.vdop = 0.9455329278873588;
    msg.hacc = 0.24819259427339468;
    msg.vacc = 0.4446984554932214;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.13870685504960822);
    msg.setSource(21653U);
    msg.setSourceEntity(69U);
    msg.setDestination(32268U);
    msg.setDestinationEntity(38U);
    msg.validity = 57204U;
    msg.type = 111U;
    msg.utc_year = 34505U;
    msg.utc_month = 146U;
    msg.utc_day = 3U;
    msg.utc_time = 0.39508038610033414;
    msg.lat = 0.015983681106248704;
    msg.lon = 0.5401355585094256;
    msg.height = 0.8292490470799835;
    msg.satellites = 58U;
    msg.cog = 0.9584462352122345;
    msg.sog = 0.3267422841640679;
    msg.hdop = 0.34838926950817994;
    msg.vdop = 0.2738419461062369;
    msg.hacc = 0.47912905138641737;
    msg.vacc = 0.15676141915389596;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.001406036549905454);
    msg.setSource(16820U);
    msg.setSourceEntity(210U);
    msg.setDestination(57067U);
    msg.setDestinationEntity(124U);
    msg.time = 0.9154642960783854;
    msg.phi = 0.6764256839180547;
    msg.theta = 0.1414727268261129;
    msg.psi = 0.22099587155025924;
    msg.psi_magnetic = 0.9287997796993429;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.9083384735809499);
    msg.setSource(37567U);
    msg.setSourceEntity(106U);
    msg.setDestination(40437U);
    msg.setDestinationEntity(12U);
    msg.time = 0.21291352040398104;
    msg.phi = 0.08224323048951254;
    msg.theta = 0.6982427757480734;
    msg.psi = 0.3280434063101715;
    msg.psi_magnetic = 0.4532335860871012;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.18707341441845404);
    msg.setSource(2183U);
    msg.setSourceEntity(72U);
    msg.setDestination(44979U);
    msg.setDestinationEntity(57U);
    msg.time = 0.6713872318066378;
    msg.phi = 0.8638791341501963;
    msg.theta = 0.584005408506456;
    msg.psi = 0.5781019219717629;
    msg.psi_magnetic = 0.22500886418973154;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.3471276592091477);
    msg.setSource(16400U);
    msg.setSourceEntity(251U);
    msg.setDestination(24256U);
    msg.setDestinationEntity(161U);
    msg.time = 0.27451900932450646;
    msg.x = 0.4353130266238815;
    msg.y = 0.7452575489035688;
    msg.z = 0.8809218976236777;
    msg.timestep = 0.9159496618119389;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.09379480024994102);
    msg.setSource(28346U);
    msg.setSourceEntity(237U);
    msg.setDestination(45360U);
    msg.setDestinationEntity(249U);
    msg.time = 0.7248805640648918;
    msg.x = 0.713343449483808;
    msg.y = 0.2455163225319692;
    msg.z = 0.788572352779866;
    msg.timestep = 0.9874733705976692;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.8176501058341571);
    msg.setSource(27202U);
    msg.setSourceEntity(142U);
    msg.setDestination(54339U);
    msg.setDestinationEntity(169U);
    msg.time = 0.5018173223472666;
    msg.x = 0.5221472800602649;
    msg.y = 0.18100523809581703;
    msg.z = 0.6032588112437133;
    msg.timestep = 0.10491271266294366;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.8486005636522526);
    msg.setSource(11324U);
    msg.setSourceEntity(31U);
    msg.setDestination(38151U);
    msg.setDestinationEntity(1U);
    msg.time = 0.3727879861106308;
    msg.x = 0.3730103282426227;
    msg.y = 0.16339874411303845;
    msg.z = 0.5303312271045494;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.09530331999852015);
    msg.setSource(47322U);
    msg.setSourceEntity(57U);
    msg.setDestination(4241U);
    msg.setDestinationEntity(116U);
    msg.time = 0.9841823363060943;
    msg.x = 0.4409163766076405;
    msg.y = 0.8977128719847998;
    msg.z = 0.4455118711751691;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.6222744264580476);
    msg.setSource(26615U);
    msg.setSourceEntity(247U);
    msg.setDestination(30007U);
    msg.setDestinationEntity(42U);
    msg.time = 0.7432454491917126;
    msg.x = 0.6801779477969084;
    msg.y = 0.8097375448380266;
    msg.z = 0.9351270399009635;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.3094200493092949);
    msg.setSource(46126U);
    msg.setSourceEntity(141U);
    msg.setDestination(26577U);
    msg.setDestinationEntity(74U);
    msg.time = 0.39293170486784523;
    msg.x = 0.19888009529416972;
    msg.y = 0.651210936238711;
    msg.z = 0.9263330982913714;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.6221456853353885);
    msg.setSource(32176U);
    msg.setSourceEntity(75U);
    msg.setDestination(17373U);
    msg.setDestinationEntity(251U);
    msg.time = 0.8633649794018898;
    msg.x = 0.9169456757097757;
    msg.y = 0.9219416410679574;
    msg.z = 0.7081501711388308;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.10523106265514093);
    msg.setSource(37226U);
    msg.setSourceEntity(216U);
    msg.setDestination(52119U);
    msg.setDestinationEntity(9U);
    msg.time = 0.5043556041243253;
    msg.x = 0.014569820437402403;
    msg.y = 0.9653591228811471;
    msg.z = 0.8094678535579795;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.5459657092125473);
    msg.setSource(39897U);
    msg.setSourceEntity(228U);
    msg.setDestination(20516U);
    msg.setDestinationEntity(207U);
    msg.time = 0.983186690074073;
    msg.x = 0.5436044315860538;
    msg.y = 0.9111590428930648;
    msg.z = 0.6204111632462515;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.017344988948003848);
    msg.setSource(40636U);
    msg.setSourceEntity(207U);
    msg.setDestination(17353U);
    msg.setDestinationEntity(136U);
    msg.time = 0.13142346248845604;
    msg.x = 0.8688644790917459;
    msg.y = 0.17714930248037652;
    msg.z = 0.03506780519492558;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.06524728285381232);
    msg.setSource(14442U);
    msg.setSourceEntity(122U);
    msg.setDestination(61305U);
    msg.setDestinationEntity(28U);
    msg.time = 0.36023355252557865;
    msg.x = 0.1251359327365017;
    msg.y = 0.48159179473918967;
    msg.z = 0.8832566934234728;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.03144342672083167);
    msg.setSource(63795U);
    msg.setSourceEntity(148U);
    msg.setDestination(25352U);
    msg.setDestinationEntity(174U);
    msg.validity = 184U;
    msg.x = 0.42789473978634174;
    msg.y = 0.10978303413347767;
    msg.z = 0.07753916487816748;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.4880413836221995);
    msg.setSource(43973U);
    msg.setSourceEntity(232U);
    msg.setDestination(34728U);
    msg.setDestinationEntity(95U);
    msg.validity = 22U;
    msg.x = 0.4287389338090204;
    msg.y = 0.685238627325333;
    msg.z = 0.8245446314234606;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.4074562494012721);
    msg.setSource(7118U);
    msg.setSourceEntity(31U);
    msg.setDestination(52364U);
    msg.setDestinationEntity(210U);
    msg.validity = 86U;
    msg.x = 0.71803295571072;
    msg.y = 0.4330909826285503;
    msg.z = 0.9109576537127769;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.6222548472170907);
    msg.setSource(47223U);
    msg.setSourceEntity(63U);
    msg.setDestination(12145U);
    msg.setDestinationEntity(207U);
    msg.validity = 209U;
    msg.x = 0.0054064193646971015;
    msg.y = 0.5495580529193773;
    msg.z = 0.9358507411940691;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.6190349092408897);
    msg.setSource(40146U);
    msg.setSourceEntity(57U);
    msg.setDestination(13636U);
    msg.setDestinationEntity(32U);
    msg.validity = 64U;
    msg.x = 0.7402013679213362;
    msg.y = 0.016706391431771772;
    msg.z = 0.9192326392630142;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.29044270615746537);
    msg.setSource(39302U);
    msg.setSourceEntity(53U);
    msg.setDestination(21888U);
    msg.setDestinationEntity(71U);
    msg.validity = 18U;
    msg.x = 0.7799266268046358;
    msg.y = 0.3100732550721128;
    msg.z = 0.583449056059103;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.324767103063734);
    msg.setSource(6352U);
    msg.setSourceEntity(77U);
    msg.setDestination(36193U);
    msg.setDestinationEntity(213U);
    msg.time = 0.1426710084592273;
    msg.x = 0.7805485291170936;
    msg.y = 0.47140821685292467;
    msg.z = 0.30688494707676583;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.1907856401416732);
    msg.setSource(56979U);
    msg.setSourceEntity(254U);
    msg.setDestination(43308U);
    msg.setDestinationEntity(253U);
    msg.time = 0.6792417833681416;
    msg.x = 0.3710756185221351;
    msg.y = 0.7600606525562968;
    msg.z = 0.29744051517348824;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.48404539923831036);
    msg.setSource(44600U);
    msg.setSourceEntity(250U);
    msg.setDestination(63252U);
    msg.setDestinationEntity(186U);
    msg.time = 0.8197772734865363;
    msg.x = 0.10151385305884708;
    msg.y = 0.2974111868395223;
    msg.z = 0.045466757937137725;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.8265944693048438);
    msg.setSource(50880U);
    msg.setSourceEntity(51U);
    msg.setDestination(46170U);
    msg.setDestinationEntity(48U);
    msg.validity = 17U;
    msg.value = 0.7621686942031425;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.40390072293399326);
    msg.setSource(28522U);
    msg.setSourceEntity(62U);
    msg.setDestination(47230U);
    msg.setDestinationEntity(58U);
    msg.validity = 197U;
    msg.value = 0.9102176741159088;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.20527975746219285);
    msg.setSource(4313U);
    msg.setSourceEntity(191U);
    msg.setDestination(9521U);
    msg.setDestinationEntity(1U);
    msg.validity = 89U;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.16596493277652802;
    tmp_msg_0.beam_height = 0.8691229582974929;
    msg.beam_config.push_back(tmp_msg_0);
    msg.value = 0.42590422943177275;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.9941676796652936);
    msg.setSource(13116U);
    msg.setSourceEntity(251U);
    msg.setDestination(49315U);
    msg.setDestinationEntity(194U);
    msg.time = 0.06182408757589175;
    msg.value = 0.2312068803692242;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.7262625752489711);
    msg.setSource(26367U);
    msg.setSourceEntity(108U);
    msg.setDestination(1775U);
    msg.setDestinationEntity(40U);
    msg.time = 0.236654914724019;
    msg.value = 0.7187140582812969;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.025086832815097493);
    msg.setSource(58717U);
    msg.setSourceEntity(215U);
    msg.setDestination(27731U);
    msg.setDestinationEntity(210U);
    msg.time = 0.7351464496854121;
    msg.value = 0.03503357364343829;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.9473256547924261);
    msg.setSource(17699U);
    msg.setSourceEntity(220U);
    msg.setDestination(11989U);
    msg.setDestinationEntity(2U);
    msg.value = 0.9460013333509506;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.8995955491278697);
    msg.setSource(63715U);
    msg.setSourceEntity(174U);
    msg.setDestination(48642U);
    msg.setDestinationEntity(23U);
    msg.value = 0.2523935845463251;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.16907987778610334);
    msg.setSource(35663U);
    msg.setSourceEntity(196U);
    msg.setDestination(33334U);
    msg.setDestinationEntity(177U);
    msg.value = 0.3481440589983198;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.7180825623890831);
    msg.setSource(35412U);
    msg.setSourceEntity(135U);
    msg.setDestination(8516U);
    msg.setDestinationEntity(12U);
    msg.value = 0.40679528729936154;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.7623217209597222);
    msg.setSource(65171U);
    msg.setSourceEntity(179U);
    msg.setDestination(22661U);
    msg.setDestinationEntity(207U);
    msg.value = 0.4650332792575006;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.18073202426650747);
    msg.setSource(42820U);
    msg.setSourceEntity(145U);
    msg.setDestination(21031U);
    msg.setDestinationEntity(215U);
    msg.value = 0.44481413398268654;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.2631817465029629);
    msg.setSource(63678U);
    msg.setSourceEntity(247U);
    msg.setDestination(50508U);
    msg.setDestinationEntity(129U);
    msg.value = 0.564538635645629;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.2639068184683172);
    msg.setSource(56700U);
    msg.setSourceEntity(96U);
    msg.setDestination(15364U);
    msg.setDestinationEntity(30U);
    msg.value = 0.8790729491769957;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.7517524757612895);
    msg.setSource(62913U);
    msg.setSourceEntity(129U);
    msg.setDestination(30601U);
    msg.setDestinationEntity(183U);
    msg.value = 0.6877255424195496;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.41225203128568666);
    msg.setSource(59198U);
    msg.setSourceEntity(113U);
    msg.setDestination(14852U);
    msg.setDestinationEntity(202U);
    msg.value = 0.7807888696002053;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.9777287181028547);
    msg.setSource(5121U);
    msg.setSourceEntity(133U);
    msg.setDestination(33435U);
    msg.setDestinationEntity(177U);
    msg.value = 0.7652674587147432;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.8547789802675493);
    msg.setSource(58938U);
    msg.setSourceEntity(13U);
    msg.setDestination(24186U);
    msg.setDestinationEntity(215U);
    msg.value = 0.29714705596433544;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.8086698622336518);
    msg.setSource(8660U);
    msg.setSourceEntity(50U);
    msg.setDestination(21887U);
    msg.setDestinationEntity(128U);
    msg.value = 0.17216328650721913;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.09215795116655778);
    msg.setSource(57661U);
    msg.setSourceEntity(211U);
    msg.setDestination(27017U);
    msg.setDestinationEntity(16U);
    msg.value = 0.1109939644135367;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.8512115007755766);
    msg.setSource(13592U);
    msg.setSourceEntity(201U);
    msg.setDestination(14284U);
    msg.setDestinationEntity(120U);
    msg.value = 0.41868874364091624;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.2605514712403282);
    msg.setSource(55046U);
    msg.setSourceEntity(192U);
    msg.setDestination(43513U);
    msg.setDestinationEntity(122U);
    msg.value = 0.6761793485337196;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.7229728960622743);
    msg.setSource(40159U);
    msg.setSourceEntity(190U);
    msg.setDestination(7072U);
    msg.setDestinationEntity(118U);
    msg.value = 0.8676518102631682;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.5152756209448598);
    msg.setSource(25452U);
    msg.setSourceEntity(231U);
    msg.setDestination(40575U);
    msg.setDestinationEntity(134U);
    msg.value = 0.3911698323699523;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.878150641594732);
    msg.setSource(38015U);
    msg.setSourceEntity(65U);
    msg.setDestination(7615U);
    msg.setDestinationEntity(188U);
    msg.value = 0.5800465823701171;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.03466159902855326);
    msg.setSource(40850U);
    msg.setSourceEntity(110U);
    msg.setDestination(55479U);
    msg.setDestinationEntity(4U);
    msg.value = 0.4974061340650766;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.532177851502824);
    msg.setSource(23179U);
    msg.setSourceEntity(95U);
    msg.setDestination(35955U);
    msg.setDestinationEntity(110U);
    msg.value = 0.6179978122407238;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.9017048594297794);
    msg.setSource(13442U);
    msg.setSourceEntity(80U);
    msg.setDestination(18774U);
    msg.setDestinationEntity(101U);
    msg.direction = 0.7428883851563312;
    msg.speed = 0.1867055576561366;
    msg.turbulence = 0.3835762024567648;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.7766561760684773);
    msg.setSource(57570U);
    msg.setSourceEntity(123U);
    msg.setDestination(40443U);
    msg.setDestinationEntity(97U);
    msg.direction = 0.8979321239661686;
    msg.speed = 0.24433493601682355;
    msg.turbulence = 0.1214333353579179;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.007908103585891446);
    msg.setSource(301U);
    msg.setSourceEntity(241U);
    msg.setDestination(15605U);
    msg.setDestinationEntity(249U);
    msg.direction = 0.6566253852498312;
    msg.speed = 0.4777693817530595;
    msg.turbulence = 0.7205280700403628;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.4999931352288659);
    msg.setSource(38233U);
    msg.setSourceEntity(5U);
    msg.setDestination(29136U);
    msg.setDestinationEntity(15U);
    msg.value = 0.7444205413072117;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.9822746217304248);
    msg.setSource(41433U);
    msg.setSourceEntity(50U);
    msg.setDestination(12242U);
    msg.setDestinationEntity(188U);
    msg.value = 0.9440219787292135;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.6601721859883634);
    msg.setSource(34235U);
    msg.setSourceEntity(181U);
    msg.setDestination(11237U);
    msg.setDestinationEntity(160U);
    msg.value = 0.7041513735377187;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.6911540937757589);
    msg.setSource(58386U);
    msg.setSourceEntity(230U);
    msg.setDestination(43581U);
    msg.setDestinationEntity(236U);
    msg.value.assign("HRHJYVFVMSWYPKDFDOCQBRFMZVTLVFGBGZFOHGYCPQCIZRONZBYRVDARIZKAWSCMFMGCBCLCYCIHLVAWUTZSIHEAXJQDPXZYIPMDVTNMUXQSFUNOHNUOTGUEKBK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.6672786261568984);
    msg.setSource(51168U);
    msg.setSourceEntity(160U);
    msg.setDestination(59853U);
    msg.setDestinationEntity(226U);
    msg.value.assign("OPXPECDOTGPXCKEWA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.20620082020452957);
    msg.setSource(36244U);
    msg.setSourceEntity(110U);
    msg.setDestination(30242U);
    msg.setDestinationEntity(163U);
    msg.value.assign("YXRKNHGOFTPUBZJNKBHCJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.04035320250277319);
    msg.setSource(54747U);
    msg.setSourceEntity(21U);
    msg.setDestination(45819U);
    msg.setDestinationEntity(231U);
    const signed char tmp_msg_0[] = {-98, -78, 4, 97, 81, 114, 24, -125, -34, -43, -75, -37, 103, 90, -70, -87, -30, -125, 61, -25, -112, -86, -126, -104, -99, 64, 44, -101, -120, 35, 41, 94, -82, 11, 56, 38, -82, 54, 117, -71, 27, -52, -97, -53, 14, -20, -106, -24, -100, 109, -29, -123, -35, 51, -77, 104, -75, -39, 109, -81, 6, 39, -102, 112, 18, -107, -127, 36, 2, -101, -91, -51, 104, -50, -49, 45, 107, 68, 69, -8, -73, -79, 32, -63, -23, -114, 26, -52, 50, 113, 97, -7, 72, -6, 42, 13, -105, 65, -27, 95, -103, -62, 38, -76, 34, 70, -60, 68, -97, -66, 41, 47, 125, -44, -113, -108, 52, -22, -98, 53, 2, 21, -101, 86, -108, 71, -31, -13, -41, 72, 35, -54, 51, 16, -30, -64, -29, -97, -48, -35, -68, 77, 27, 122, 115, -5, 115, -117, 121, 77, 71, -104, 122, 64, 63, -41, 43, -41, -23};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.9819419151608453);
    msg.setSource(54991U);
    msg.setSourceEntity(228U);
    msg.setDestination(54682U);
    msg.setDestinationEntity(123U);
    const signed char tmp_msg_0[] = {-51, -9, 96, -56, -7, -25, -67, -77, 70, 121, -111, 99, -4, -15, 72, 7, 44, -101, 93, -98, 83, -3, 117, -122, 83, -99, -58, -101, 103, -106, -51, -6, -7, 22};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.8761032526938854);
    msg.setSource(63232U);
    msg.setSourceEntity(62U);
    msg.setDestination(62415U);
    msg.setDestinationEntity(27U);
    const signed char tmp_msg_0[] = {-96, -126, 102, -3, 57, -56, -70, -94, 105, 70, -58, -63, 1, -56, 84, 125, -85, -72, -30, -126, -10, 24, -26, 59, -53, -22, -30, 63, -83, -13, -90, -120, -49, -62, -83, -108, 83, 85, -70, 125, 121, 77, 119, -15, 53, 61, -9, -45, -106, 33, 45, 26, -100, 64, -34, -41, 31, -53, 6, -32, 118, -34, 57, -55, -67, -84, 24, -69, 52, 57, 69, -46, -46, 43, 25, 83, -102, -6, -119, 19, -84, -76, -68, -72, 22, 97, -65, -82, -88, -96, -49, 61, -33, 109, -27, -13, -102, -28, -2, 49, 42, 25, 74, -13, 51, 11, -53, -35, -62, 59, -103, 80, 14, 8, -23, -57, -115, -12, -100, 25, -20, 58, 96, -103, 70, 68, 16, -77, -71, -50, 20, 118, 53, 77, 97, -118, -103, 31, 37, 83, -11, -114, -128, 108, -94, 99, 94, -42, -107, -113, 99, -116, -10, -27, 9, 10, 63, -109, -118, -47, -112, 80, 110, 76, -109, 53, -76, 90, 81, 3, -108, -101, 33, -81, 65, -2, -28, -66, 8, 26, -113, -67, -12, -24, -31, -35, 67, 21, -6, 2, -22, -68, 88, -63, 121, -29, -86, -111, -82, -7, -90, -94, 105, -115, -80, -30, 75, -49, 22, 16, 112, 19, 31, 32, -96, 45, -9, 102, -118};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.7957291008183061);
    msg.setSource(53947U);
    msg.setSourceEntity(74U);
    msg.setDestination(2264U);
    msg.setDestinationEntity(127U);
    msg.value = 0.8972790760615824;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.39358566383201865);
    msg.setSource(31961U);
    msg.setSourceEntity(193U);
    msg.setDestination(38574U);
    msg.setDestinationEntity(120U);
    msg.value = 0.3114345319960119;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.4330311556542471);
    msg.setSource(62955U);
    msg.setSourceEntity(198U);
    msg.setDestination(54515U);
    msg.setDestinationEntity(63U);
    msg.value = 0.06318433039944416;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.6708798067861838);
    msg.setSource(58492U);
    msg.setSourceEntity(110U);
    msg.setDestination(12946U);
    msg.setDestinationEntity(61U);
    msg.type = 143U;
    msg.frequency = 387608860U;
    msg.min_range = 4804U;
    msg.max_range = 46165U;
    msg.bits_per_point = 14U;
    msg.scale_factor = 0.041146143887701214;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.8123139986378622;
    tmp_msg_0.beam_height = 0.12338222599828674;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {68, -94, -45, 112, 1, 117, 77, 99, 35, -42, 38, 126, 38, 45, -74, -57, 102, 1, 108, -123, -51, 108, -40, -49, 2, -66, 15, 13, -55, -43, -18, 33, 64, 106, -51, 26, -4, 40, 123, -20, -44, -117, -27, -54, -66, 30, 41, 68, 24, 90, 63, -108, -3, -107, 2, -109, 126, 105, -68, 71, -109, 5, 117, -56, -48, 56, -12, -25, -100, -98, 111, 54, -71, 19, -89, 79, 45, 93, -33, -94, -12, -58, 23, 120, -65, 105, 93, -52, 82, 110, -93, -27, 71, -119, -15, 109, 107, 96, -20, -111, 66, 113, -103, 19, 51, 112, -75, 76, -52, -87, 60, -90, -106, 92, -1, 5, -4, 66, -23, -48, -65, 99, -19, -117, 71, -113, 4, -96, 39, 5, 90, 118, 108, -52, -125, -123, -126, 29, 31, 16, -47, 99, -124, 99, 44, 116, 88, 26, 0, 86, -36, -91, -36, -35, -54, 54, 85, -72, -63, -27, 102, -99, 102, -69, -76, -64, -74, -16, 56, 61, -28, -22, -79, -68, -60, 85, 82, 112, 2, -128, -34, 24, 54, -77, -45, -12, 83, -28, 69, -108, 117, 19, -14, -70};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.04764708158437203);
    msg.setSource(18036U);
    msg.setSourceEntity(190U);
    msg.setDestination(2507U);
    msg.setDestinationEntity(137U);
    msg.type = 137U;
    msg.frequency = 3631971820U;
    msg.min_range = 38000U;
    msg.max_range = 27567U;
    msg.bits_per_point = 246U;
    msg.scale_factor = 0.6368277632097222;
    const signed char tmp_msg_0[] = {-128, -68, 110, -56, 31, 42, 54, -95, -66, -7, -10, -63, 75, -50, 74, -32, -53, -31, -73, 109, 66, 89, 1, -72, -33, 66, -27, -8, -103, -115, 43, 122, 126, -9, -95, 11, -44, -4, 39, 12, -71, 85, 83, 100, 125, -113, -128, 103, 5, 51, 13, 45, -109, -17, -125, 33, 106, -114, -105, -106, 123, 10, 122, 1, 31, -7, 41, 63, -32, 31, 8, 33, -83, 107, -62, -18, 84, 31, 124, -79, 68, -89, 63, -18, -84, 105};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.5091286339572044);
    msg.setSource(4356U);
    msg.setSourceEntity(205U);
    msg.setDestination(18533U);
    msg.setDestinationEntity(236U);
    msg.type = 66U;
    msg.frequency = 1643317917U;
    msg.min_range = 37195U;
    msg.max_range = 46293U;
    msg.bits_per_point = 101U;
    msg.scale_factor = 0.48034548342560923;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.7439899882722678;
    tmp_msg_0.beam_height = 0.3807374499758619;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {-108, 96, -1, -51, -91, -26, 105, 102, -6, 96, -51, 64, -128, 51, 35, 22, 5, 45, 11, 77, 48, -105, -24, -110, -124, -94, -26, -83, -70, 19, -48, -117, -33, -116, -98, -74, 3, -124, 48, 64, 98, 85, 71, -59, 123, 74, -112, 54, -103, 60, -54, -113, -125, -118, 10, -105, 68, 112, 85, 31, 50, 54, -107, 44, 85, 101, -60, -117, -105, -62, -128, -62, 8, -91, -62, 0, -48, -42, -99, 96, -65, 31, 37, 12, -102, -104, 72, 38, 101, 126, 40, -22, 120, -56, -36, 2, 115, -13, 66, -14, -39, 35, 67, 30, 68, 52, 95, 99, -98, 79, 0, -91, 62, -40, 90, 35, 126, -105, 53, 111, -97, -16, -43, -128, -103, -41, -103, 14, -61, 4, 5, 71, -33, 9, 25, 114, 100, -9, 77, 30, -92, 115, 73, 6, 54, 110, -78, -106, -4, -112, -106, -119, 41, -84, 57, 38, 109, 19, 121, -88, -11, -51, -43, 117, -102, -4, -57, 95, -101, 93, 70, -107, 23, -55, -87, -46, 105, -16, -18, 40, -13, -90, -59, -88, -106, 120, -4, 45, 25, 68, -57, 50, -57, 75, 70, -94, 109, -102, -46, 108, 89, -92, -49, -125, 46, 23, -31, -118, -70, -97, 22, 61, -81, 95, -111, -114, -100, 57, 82, -125, 82, 25, 82, -115, 14, -109, 46, -50, -128};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.6442539521463619);
    msg.setSource(5792U);
    msg.setSourceEntity(58U);
    msg.setDestination(26034U);
    msg.setDestinationEntity(245U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.11816099301506189);
    msg.setSource(19419U);
    msg.setSourceEntity(79U);
    msg.setDestination(20955U);
    msg.setDestinationEntity(148U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.8395682174326143);
    msg.setSource(19390U);
    msg.setSourceEntity(83U);
    msg.setDestination(51692U);
    msg.setDestinationEntity(54U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.7082647814067213);
    msg.setSource(60496U);
    msg.setSourceEntity(175U);
    msg.setDestination(23729U);
    msg.setDestinationEntity(204U);
    msg.op = 227U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.5414979766655226);
    msg.setSource(46040U);
    msg.setSourceEntity(28U);
    msg.setDestination(37931U);
    msg.setDestinationEntity(62U);
    msg.op = 142U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.9405435390679598);
    msg.setSource(5700U);
    msg.setSourceEntity(2U);
    msg.setDestination(11008U);
    msg.setDestinationEntity(47U);
    msg.op = 108U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.8908068655437944);
    msg.setSource(57819U);
    msg.setSourceEntity(214U);
    msg.setDestination(46173U);
    msg.setDestinationEntity(169U);
    msg.value = 0.6380106948973061;
    msg.confidence = 0.4000349262747931;
    msg.opmodes.assign("CQVFVSBCLDPDICMVXATOJJNTOZNSQNGKOPOWUUXYSFZSLLZAYWMAKSHUVUTNXOBVYGMEGGGJPYHWXAHOCOJKTAXYFKIUFESKKFCNTJJRMZDPKVPPTMQWAQBDZLWQYIIBQXHLEETRUAUGBIUVFEWGKWFELAZDBTEIEJRZDPIMQSHRNNXNPQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.005583321168372901);
    msg.setSource(49243U);
    msg.setSourceEntity(163U);
    msg.setDestination(4380U);
    msg.setDestinationEntity(235U);
    msg.value = 0.8386583871168776;
    msg.confidence = 0.6627407243903823;
    msg.opmodes.assign("VEOSMMMXFQOFTIKJGRIWOXMUOCDJDEQHHIUKRTQQFFTFJRLPOIYWYMEPXUNZVCGZGRAUOPUDXZSRHIUZTBZRMUXHDYXYKCMEBKGYDDSEUBHZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.7370144929725477);
    msg.setSource(22683U);
    msg.setSourceEntity(235U);
    msg.setDestination(13620U);
    msg.setDestinationEntity(233U);
    msg.value = 0.26759505998004085;
    msg.confidence = 0.8781208932054855;
    msg.opmodes.assign("UKCZNUGSACKQSFFFMWNYGJPBVJBAMTXWSHSKVRQQIIJDDLUCPRDYGRXHRINRJLUMEYWCXTJKJOCOROFAPZTMIKBVBIPIKDNRTBUXOGLLEMSIELGMTGQJKMIXDXBDAQYOZFZZYDLYAFUVFMZJZHVAXENQOGJEGTDSSEHMZNYSINAXOPGPYTPGBQCZOSOQTDVFWCQUFNBTTUHLWBAYUFHCXPNLAHNCEYUXSHHPHRVWKAEWRBVR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.5614963224037993);
    msg.setSource(61768U);
    msg.setSourceEntity(217U);
    msg.setDestination(10888U);
    msg.setDestinationEntity(54U);
    msg.itow = 3736409907U;
    msg.lat = 0.2636623024782325;
    msg.lon = 0.20846565825552732;
    msg.height_ell = 0.05975671293055285;
    msg.height_sea = 0.5250713255609725;
    msg.hacc = 0.31326037807352614;
    msg.vacc = 0.43575201414220976;
    msg.vel_n = 0.3442585975446899;
    msg.vel_e = 0.019972494463567192;
    msg.vel_d = 0.631669458191059;
    msg.speed = 0.6486342760680032;
    msg.gspeed = 0.30697451563246314;
    msg.heading = 0.6438145332186044;
    msg.sacc = 0.34728849537668705;
    msg.cacc = 0.9078128753695995;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.8040598574272261);
    msg.setSource(12002U);
    msg.setSourceEntity(48U);
    msg.setDestination(50248U);
    msg.setDestinationEntity(86U);
    msg.itow = 3372852590U;
    msg.lat = 0.5507144863507588;
    msg.lon = 0.4114722030159321;
    msg.height_ell = 0.9952592312138954;
    msg.height_sea = 0.6303617229005605;
    msg.hacc = 0.2684834233266655;
    msg.vacc = 0.9380503601576102;
    msg.vel_n = 0.26959586821919546;
    msg.vel_e = 0.5594235858128676;
    msg.vel_d = 0.4792587833683435;
    msg.speed = 0.4450438251718697;
    msg.gspeed = 0.23118160559386502;
    msg.heading = 0.5520484183820695;
    msg.sacc = 0.13860913850437895;
    msg.cacc = 0.6681858368291422;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.8845750646142355);
    msg.setSource(2610U);
    msg.setSourceEntity(225U);
    msg.setDestination(46016U);
    msg.setDestinationEntity(62U);
    msg.itow = 1147304990U;
    msg.lat = 0.3747666361326981;
    msg.lon = 0.10560249249840248;
    msg.height_ell = 0.852765138904699;
    msg.height_sea = 0.18555016641865663;
    msg.hacc = 0.8753405929365801;
    msg.vacc = 0.7569911135809788;
    msg.vel_n = 0.9275862445103672;
    msg.vel_e = 0.2076907524485775;
    msg.vel_d = 0.15124369465204113;
    msg.speed = 0.06791878877331636;
    msg.gspeed = 0.5672507778139676;
    msg.heading = 0.5132416721408134;
    msg.sacc = 0.7838613048034174;
    msg.cacc = 0.05857814437288733;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.6442286380470839);
    msg.setSource(50225U);
    msg.setSourceEntity(156U);
    msg.setDestination(11114U);
    msg.setDestinationEntity(228U);
    msg.id = 28U;
    msg.value = 0.8396430593030817;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.5933951095697747);
    msg.setSource(37011U);
    msg.setSourceEntity(52U);
    msg.setDestination(12061U);
    msg.setDestinationEntity(77U);
    msg.id = 132U;
    msg.value = 0.9570864837048841;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.9606548680452319);
    msg.setSource(32278U);
    msg.setSourceEntity(167U);
    msg.setDestination(59276U);
    msg.setDestinationEntity(70U);
    msg.id = 157U;
    msg.value = 0.5277748483660645;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.2478831921614495);
    msg.setSource(1133U);
    msg.setSourceEntity(24U);
    msg.setDestination(3368U);
    msg.setDestinationEntity(182U);
    msg.x = 0.13248878158308453;
    msg.y = 0.9117058225704534;
    msg.z = 0.4269967694545912;
    msg.phi = 0.1705035424610657;
    msg.theta = 0.5106480589228383;
    msg.psi = 0.7465025394874274;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.8073049142113007);
    msg.setSource(62638U);
    msg.setSourceEntity(153U);
    msg.setDestination(31262U);
    msg.setDestinationEntity(82U);
    msg.x = 0.4771725454719633;
    msg.y = 0.02504582794222765;
    msg.z = 0.266368717385698;
    msg.phi = 0.6140962366354683;
    msg.theta = 0.9087093089597814;
    msg.psi = 0.8579762534608524;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.45118671764333473);
    msg.setSource(34727U);
    msg.setSourceEntity(106U);
    msg.setDestination(8021U);
    msg.setDestinationEntity(131U);
    msg.x = 0.11775384710204317;
    msg.y = 0.4556047917295306;
    msg.z = 0.6648019241015557;
    msg.phi = 0.27522031319007456;
    msg.theta = 0.6172483258053748;
    msg.psi = 0.015878323006125572;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.15950907460744712);
    msg.setSource(49745U);
    msg.setSourceEntity(84U);
    msg.setDestination(51284U);
    msg.setDestinationEntity(157U);
    msg.beam_width = 0.2697096842990788;
    msg.beam_height = 0.9115702928003008;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.40027207961103817);
    msg.setSource(17633U);
    msg.setSourceEntity(237U);
    msg.setDestination(22775U);
    msg.setDestinationEntity(126U);
    msg.beam_width = 0.05709276405525143;
    msg.beam_height = 0.8032840881066264;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.7377556290120291);
    msg.setSource(59890U);
    msg.setSourceEntity(101U);
    msg.setDestination(52386U);
    msg.setDestinationEntity(254U);
    msg.beam_width = 0.6064375259042796;
    msg.beam_height = 0.29429010344844586;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.7224868839690521);
    msg.setSource(31944U);
    msg.setSourceEntity(238U);
    msg.setDestination(51928U);
    msg.setDestinationEntity(198U);
    msg.sane = 9U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.008766094849895878);
    msg.setSource(45191U);
    msg.setSourceEntity(90U);
    msg.setDestination(29051U);
    msg.setDestinationEntity(132U);
    msg.sane = 33U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.5504919746168013);
    msg.setSource(39826U);
    msg.setSourceEntity(163U);
    msg.setDestination(4823U);
    msg.setDestinationEntity(137U);
    msg.sane = 216U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.36120523092303436);
    msg.setSource(13668U);
    msg.setSourceEntity(129U);
    msg.setDestination(59981U);
    msg.setDestinationEntity(61U);
    msg.value = 0.5925743592859932;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.5310037876582149);
    msg.setSource(44770U);
    msg.setSourceEntity(22U);
    msg.setDestination(14305U);
    msg.setDestinationEntity(132U);
    msg.value = 0.6471377316828828;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.6334997159618849);
    msg.setSource(58933U);
    msg.setSourceEntity(58U);
    msg.setDestination(21304U);
    msg.setDestinationEntity(8U);
    msg.value = 0.4172597152918116;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.44563158838963557);
    msg.setSource(3183U);
    msg.setSourceEntity(215U);
    msg.setDestination(29944U);
    msg.setDestinationEntity(97U);
    msg.value = 0.07931277537631432;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.5901476845742911);
    msg.setSource(32830U);
    msg.setSourceEntity(8U);
    msg.setDestination(38676U);
    msg.setDestinationEntity(102U);
    msg.value = 0.12038348224327622;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.46552693416397684);
    msg.setSource(34518U);
    msg.setSourceEntity(195U);
    msg.setDestination(7198U);
    msg.setDestinationEntity(109U);
    msg.value = 0.1760520825274431;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.6176618927013376);
    msg.setSource(44947U);
    msg.setSourceEntity(66U);
    msg.setDestination(19972U);
    msg.setDestinationEntity(252U);
    msg.value = 0.6918494581468665;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.6060715656664735);
    msg.setSource(65194U);
    msg.setSourceEntity(169U);
    msg.setDestination(56656U);
    msg.setDestinationEntity(238U);
    msg.value = 0.19768575945813083;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.18514274437953482);
    msg.setSource(8888U);
    msg.setSourceEntity(212U);
    msg.setDestination(63736U);
    msg.setDestinationEntity(11U);
    msg.value = 0.4650947386277692;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.43212681940939235);
    msg.setSource(44989U);
    msg.setSourceEntity(9U);
    msg.setDestination(4867U);
    msg.setDestinationEntity(96U);
    msg.value = 0.41941661255395923;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.6462544182699099);
    msg.setSource(18100U);
    msg.setSourceEntity(186U);
    msg.setDestination(43547U);
    msg.setDestinationEntity(80U);
    msg.value = 0.17267182432596662;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.5188622148574027);
    msg.setSource(23762U);
    msg.setSourceEntity(252U);
    msg.setDestination(24885U);
    msg.setDestinationEntity(240U);
    msg.value = 0.320974153653506;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.3034894413323792);
    msg.setSource(9835U);
    msg.setSourceEntity(37U);
    msg.setDestination(14588U);
    msg.setDestinationEntity(12U);
    msg.value = 0.12699199111488801;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.8074422635130868);
    msg.setSource(20172U);
    msg.setSourceEntity(118U);
    msg.setDestination(37568U);
    msg.setDestinationEntity(251U);
    msg.value = 0.9652567318103681;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.9167397435649175);
    msg.setSource(10752U);
    msg.setSourceEntity(121U);
    msg.setDestination(36213U);
    msg.setDestinationEntity(119U);
    msg.value = 0.6207505933013088;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.045445956089068984);
    msg.setSource(16368U);
    msg.setSourceEntity(18U);
    msg.setDestination(41823U);
    msg.setDestinationEntity(237U);
    msg.value = 0.8361509783117799;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.6017774832904569);
    msg.setSource(51240U);
    msg.setSourceEntity(62U);
    msg.setDestination(20854U);
    msg.setDestinationEntity(28U);
    msg.value = 0.3653742028002167;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.771496964714293);
    msg.setSource(15729U);
    msg.setSourceEntity(90U);
    msg.setDestination(3845U);
    msg.setDestinationEntity(134U);
    msg.value = 0.9622699995025981;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.280132724428688);
    msg.setSource(64849U);
    msg.setSourceEntity(221U);
    msg.setDestination(3487U);
    msg.setDestinationEntity(86U);
    msg.value = 0.8813988397221112;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.5469171731837096);
    msg.setSource(34435U);
    msg.setSourceEntity(41U);
    msg.setDestination(5463U);
    msg.setDestinationEntity(122U);
    msg.value = 0.4515636267956893;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.46663768598567446);
    msg.setSource(55028U);
    msg.setSourceEntity(151U);
    msg.setDestination(57798U);
    msg.setDestinationEntity(52U);
    msg.value = 0.9471234605469101;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.40888207736685245);
    msg.setSource(13851U);
    msg.setSourceEntity(51U);
    msg.setDestination(16014U);
    msg.setDestinationEntity(217U);
    msg.value = 0.7286182444505823;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.39928746540915794);
    msg.setSource(7789U);
    msg.setSourceEntity(254U);
    msg.setDestination(19586U);
    msg.setDestinationEntity(98U);
    msg.value = 0.9057598263825051;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.27087575503776884);
    msg.setSource(64932U);
    msg.setSourceEntity(94U);
    msg.setDestination(21352U);
    msg.setDestinationEntity(188U);
    msg.value = 0.1982903827492507;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.755459572769598);
    msg.setSource(24266U);
    msg.setSourceEntity(202U);
    msg.setDestination(8386U);
    msg.setDestinationEntity(206U);
    msg.validity = 5926U;
    msg.type = 31U;
    msg.tow = 1007326023U;
    msg.base_lat = 0.14172542991276071;
    msg.base_lon = 0.30948878316294604;
    msg.base_height = 0.15121948360097848;
    msg.n = 0.9316282745895793;
    msg.e = 0.3621627585987257;
    msg.d = 0.12389458845350299;
    msg.v_n = 0.9772236734306037;
    msg.v_e = 0.23624945582890522;
    msg.v_d = 0.9828795059112507;
    msg.satellites = 143U;
    msg.iar_hyp = 19548U;
    msg.iar_ratio = 0.5061776656947068;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.6241407144687844);
    msg.setSource(22046U);
    msg.setSourceEntity(61U);
    msg.setDestination(17578U);
    msg.setDestinationEntity(235U);
    msg.validity = 43339U;
    msg.type = 107U;
    msg.tow = 783871429U;
    msg.base_lat = 0.7679274722523095;
    msg.base_lon = 0.25089305239633874;
    msg.base_height = 0.9186120714492403;
    msg.n = 0.19025476332219848;
    msg.e = 0.21696223126011394;
    msg.d = 0.7895762624075602;
    msg.v_n = 0.4221812923034092;
    msg.v_e = 0.0005731273105240575;
    msg.v_d = 0.28394632781532503;
    msg.satellites = 143U;
    msg.iar_hyp = 11761U;
    msg.iar_ratio = 0.17982983764567007;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.19064409609225386);
    msg.setSource(13256U);
    msg.setSourceEntity(123U);
    msg.setDestination(7550U);
    msg.setDestinationEntity(228U);
    msg.validity = 20618U;
    msg.type = 158U;
    msg.tow = 2303912384U;
    msg.base_lat = 0.7240254845958866;
    msg.base_lon = 0.29083953730483325;
    msg.base_height = 0.95617376446332;
    msg.n = 0.46558514848908217;
    msg.e = 0.8889207174428604;
    msg.d = 0.24833741422443567;
    msg.v_n = 0.33251714310209013;
    msg.v_e = 0.9869493047430852;
    msg.v_d = 0.8036481304457178;
    msg.satellites = 230U;
    msg.iar_hyp = 24554U;
    msg.iar_ratio = 0.5156756374118672;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.7782811656627233);
    msg.setSource(58531U);
    msg.setSourceEntity(76U);
    msg.setDestination(7499U);
    msg.setDestinationEntity(217U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.4769995237395065;
    tmp_msg_0.lon = 0.31470326737942234;
    tmp_msg_0.height = 0.8226049337657072;
    tmp_msg_0.x = 0.12328213666251386;
    tmp_msg_0.y = 0.632542506745032;
    tmp_msg_0.z = 0.6094808454228833;
    tmp_msg_0.phi = 0.13710177899915998;
    tmp_msg_0.theta = 0.07038532717716517;
    tmp_msg_0.psi = 0.08229624016140935;
    tmp_msg_0.u = 0.5345920215131188;
    tmp_msg_0.v = 0.2384618118923475;
    tmp_msg_0.w = 0.2551580629088944;
    tmp_msg_0.vx = 0.6084352554405837;
    tmp_msg_0.vy = 0.31236014194074335;
    tmp_msg_0.vz = 0.8101030976894786;
    tmp_msg_0.p = 0.23020232783361694;
    tmp_msg_0.q = 0.06325090357227259;
    tmp_msg_0.r = 0.052779467842381744;
    tmp_msg_0.depth = 0.09002914503874049;
    tmp_msg_0.alt = 0.789959325358457;
    msg.state.set(tmp_msg_0);
    msg.type = 202U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.5494884446818744);
    msg.setSource(41009U);
    msg.setSourceEntity(73U);
    msg.setDestination(21988U);
    msg.setDestinationEntity(40U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.28105459649958553;
    tmp_msg_0.lon = 0.616484668542451;
    tmp_msg_0.height = 0.22335886902632518;
    tmp_msg_0.x = 0.3361856905114028;
    tmp_msg_0.y = 0.4453084383389939;
    tmp_msg_0.z = 0.5255772254517637;
    tmp_msg_0.phi = 0.7550840112618183;
    tmp_msg_0.theta = 0.43045155108356603;
    tmp_msg_0.psi = 0.6319184121468253;
    tmp_msg_0.u = 0.5863539484379314;
    tmp_msg_0.v = 0.7624153865391265;
    tmp_msg_0.w = 0.3212324691564684;
    tmp_msg_0.vx = 0.8694128705079834;
    tmp_msg_0.vy = 0.34356768506292945;
    tmp_msg_0.vz = 0.07635462179753083;
    tmp_msg_0.p = 0.9078789486733543;
    tmp_msg_0.q = 0.19524273548608284;
    tmp_msg_0.r = 0.9643367352251503;
    tmp_msg_0.depth = 0.44331051974114055;
    tmp_msg_0.alt = 0.6893097604573336;
    msg.state.set(tmp_msg_0);
    msg.type = 67U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.4226586434411853);
    msg.setSource(27137U);
    msg.setSourceEntity(120U);
    msg.setDestination(53965U);
    msg.setDestinationEntity(169U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.22860164879155687;
    tmp_msg_0.lon = 0.716594614076869;
    tmp_msg_0.height = 0.8964577727042086;
    tmp_msg_0.x = 0.8635049180919591;
    tmp_msg_0.y = 0.9865177671958869;
    tmp_msg_0.z = 0.18767746852256728;
    tmp_msg_0.phi = 0.6109755112584176;
    tmp_msg_0.theta = 0.9969773106767089;
    tmp_msg_0.psi = 0.7559026363851499;
    tmp_msg_0.u = 0.6494669505129582;
    tmp_msg_0.v = 0.8280129181981833;
    tmp_msg_0.w = 0.8861632078785158;
    tmp_msg_0.vx = 0.2953834680459858;
    tmp_msg_0.vy = 0.07542971357144312;
    tmp_msg_0.vz = 0.18205349562366513;
    tmp_msg_0.p = 0.621828804125984;
    tmp_msg_0.q = 0.3691035324805819;
    tmp_msg_0.r = 0.45411210068829577;
    tmp_msg_0.depth = 0.1362340384663957;
    tmp_msg_0.alt = 0.4830169761766947;
    msg.state.set(tmp_msg_0);
    msg.type = 73U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.06456623310548215);
    msg.setSource(1471U);
    msg.setSourceEntity(22U);
    msg.setDestination(59951U);
    msg.setDestinationEntity(86U);
    msg.value = 0.778295699994962;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.3908703007304669);
    msg.setSource(48830U);
    msg.setSourceEntity(57U);
    msg.setDestination(22805U);
    msg.setDestinationEntity(8U);
    msg.value = 0.1235304535137427;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.004453854161555748);
    msg.setSource(48057U);
    msg.setSourceEntity(135U);
    msg.setDestination(57615U);
    msg.setDestinationEntity(113U);
    msg.value = 0.496842878692655;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.5498767819536718);
    msg.setSource(61982U);
    msg.setSourceEntity(163U);
    msg.setDestination(33286U);
    msg.setDestinationEntity(123U);
    msg.value = 0.07499054460135435;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.7238408400707002);
    msg.setSource(45172U);
    msg.setSourceEntity(9U);
    msg.setDestination(6965U);
    msg.setDestinationEntity(221U);
    msg.value = 0.9029823171611827;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.8370456974471149);
    msg.setSource(24119U);
    msg.setSourceEntity(213U);
    msg.setDestination(20122U);
    msg.setDestinationEntity(0U);
    msg.value = 0.17439882722735522;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.05935533782938007);
    msg.setSource(53747U);
    msg.setSourceEntity(47U);
    msg.setDestination(58219U);
    msg.setDestinationEntity(77U);
    msg.value = 0.10782617907873693;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.48694541481004827);
    msg.setSource(31970U);
    msg.setSourceEntity(202U);
    msg.setDestination(14183U);
    msg.setDestinationEntity(50U);
    msg.value = 0.3879450692558858;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.054547975873749155);
    msg.setSource(50765U);
    msg.setSourceEntity(126U);
    msg.setDestination(53464U);
    msg.setDestinationEntity(45U);
    msg.value = 0.39166746115140605;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.1580609623424245);
    msg.setSource(14747U);
    msg.setSourceEntity(198U);
    msg.setDestination(31557U);
    msg.setDestinationEntity(229U);
    msg.value = 0.38560968794122186;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.6798273074604663);
    msg.setSource(7700U);
    msg.setSourceEntity(51U);
    msg.setDestination(6691U);
    msg.setDestinationEntity(229U);
    msg.value = 0.17896842744081143;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.12015098224797582);
    msg.setSource(15171U);
    msg.setSourceEntity(157U);
    msg.setDestination(62377U);
    msg.setDestinationEntity(160U);
    msg.value = 0.2698086122829163;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.6328798068070695);
    msg.setSource(33716U);
    msg.setSourceEntity(179U);
    msg.setDestination(33622U);
    msg.setDestinationEntity(190U);
    msg.value = 0.3569063122495453;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.27670170813528283);
    msg.setSource(24312U);
    msg.setSourceEntity(117U);
    msg.setDestination(63272U);
    msg.setDestinationEntity(190U);
    msg.value = 0.035347816812559496;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.6772489267528817);
    msg.setSource(52694U);
    msg.setSourceEntity(74U);
    msg.setDestination(5676U);
    msg.setDestinationEntity(144U);
    msg.value = 0.638293776346717;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.9161238145230572);
    msg.setSource(57487U);
    msg.setSourceEntity(152U);
    msg.setDestination(42515U);
    msg.setDestinationEntity(31U);
    msg.id = 124U;
    msg.zoom = 100U;
    msg.action = 25U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.8843536525419105);
    msg.setSource(41881U);
    msg.setSourceEntity(124U);
    msg.setDestination(20056U);
    msg.setDestinationEntity(214U);
    msg.id = 219U;
    msg.zoom = 81U;
    msg.action = 97U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.7504235226749302);
    msg.setSource(54008U);
    msg.setSourceEntity(195U);
    msg.setDestination(11438U);
    msg.setDestinationEntity(82U);
    msg.id = 19U;
    msg.zoom = 235U;
    msg.action = 181U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.058980538282949135);
    msg.setSource(37037U);
    msg.setSourceEntity(47U);
    msg.setDestination(53267U);
    msg.setDestinationEntity(50U);
    msg.id = 161U;
    msg.value = 0.21163809900676522;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.8121366959194525);
    msg.setSource(36753U);
    msg.setSourceEntity(252U);
    msg.setDestination(14902U);
    msg.setDestinationEntity(174U);
    msg.id = 185U;
    msg.value = 0.20439958408207637;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.13294405896778116);
    msg.setSource(2886U);
    msg.setSourceEntity(98U);
    msg.setDestination(47754U);
    msg.setDestinationEntity(163U);
    msg.id = 253U;
    msg.value = 0.6820777912614728;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.7881123002711042);
    msg.setSource(42920U);
    msg.setSourceEntity(68U);
    msg.setDestination(30285U);
    msg.setDestinationEntity(119U);
    msg.id = 128U;
    msg.value = 0.5889397702375014;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.8731369006933941);
    msg.setSource(56997U);
    msg.setSourceEntity(166U);
    msg.setDestination(26712U);
    msg.setDestinationEntity(189U);
    msg.id = 218U;
    msg.value = 0.0037175986047636167;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.25925475004745746);
    msg.setSource(32004U);
    msg.setSourceEntity(224U);
    msg.setDestination(7676U);
    msg.setDestinationEntity(50U);
    msg.id = 22U;
    msg.value = 0.8685470934911952;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.08518743023757114);
    msg.setSource(36353U);
    msg.setSourceEntity(63U);
    msg.setDestination(527U);
    msg.setDestinationEntity(218U);
    msg.id = 13U;
    msg.angle = 0.8631553995316772;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.2968877122517347);
    msg.setSource(5672U);
    msg.setSourceEntity(95U);
    msg.setDestination(31721U);
    msg.setDestinationEntity(205U);
    msg.id = 117U;
    msg.angle = 0.18622257513576113;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.6182725737183977);
    msg.setSource(57736U);
    msg.setSourceEntity(169U);
    msg.setDestination(16173U);
    msg.setDestinationEntity(4U);
    msg.id = 28U;
    msg.angle = 0.9641214677941916;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.40917915666550675);
    msg.setSource(48384U);
    msg.setSourceEntity(148U);
    msg.setDestination(51832U);
    msg.setDestinationEntity(108U);
    msg.op = 190U;
    msg.actions.assign("VNAUVCCKQAFECPJJPVTUFBFETKFPUQGCGNLIYFEQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.06926110052985035);
    msg.setSource(6711U);
    msg.setSourceEntity(175U);
    msg.setDestination(7665U);
    msg.setDestinationEntity(119U);
    msg.op = 24U;
    msg.actions.assign("IMMNTHATTUDYWDRQVXPTGJVCGWFNIJJOQBISFLJEVSVJLTPZWPGIEKMNUKSLFSRKRHQURVMHGQOXMCJDECOHE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.758741233995463);
    msg.setSource(50604U);
    msg.setSourceEntity(51U);
    msg.setDestination(11218U);
    msg.setDestinationEntity(76U);
    msg.op = 110U;
    msg.actions.assign("OEZPZEHRVBZRABUBRVK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.4764735081358651);
    msg.setSource(7468U);
    msg.setSourceEntity(217U);
    msg.setDestination(33411U);
    msg.setDestinationEntity(165U);
    msg.actions.assign("EMDPVAXQTHOMNXBTEQRPACNSDUEOGKTGFASQXEBTYIRSAPLHFOQRFSRXYXJQZZPIUBREMNHYCTMBTSWVIHANPDOAJBEKSHLHBMCRVXZQDUPDZBOGGCKQMCTVJYVDLGVBPYWFXLRAUYIIOTJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.48771882944423506);
    msg.setSource(64742U);
    msg.setSourceEntity(40U);
    msg.setDestination(22368U);
    msg.setDestinationEntity(78U);
    msg.actions.assign("WCRAZLOAPO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.03284694443580349);
    msg.setSource(51229U);
    msg.setSourceEntity(181U);
    msg.setDestination(43991U);
    msg.setDestinationEntity(39U);
    msg.actions.assign("ZCSTHULIDJMAJYWWKIVZDXJFYEEAMRBFHWSHQAQECCEEUJRWILDXKLEKXXPSTEKVYLDFPXSLVFNFXNIHPVJPPFIHOQTRSUMTLDOYNZY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.41070533524532793);
    msg.setSource(13635U);
    msg.setSourceEntity(214U);
    msg.setDestination(15395U);
    msg.setDestinationEntity(254U);
    msg.button = 174U;
    msg.value = 204U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.8807138426384928);
    msg.setSource(21479U);
    msg.setSourceEntity(68U);
    msg.setDestination(59770U);
    msg.setDestinationEntity(84U);
    msg.button = 33U;
    msg.value = 166U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.6454140987672456);
    msg.setSource(23168U);
    msg.setSourceEntity(70U);
    msg.setDestination(8121U);
    msg.setDestinationEntity(237U);
    msg.button = 192U;
    msg.value = 77U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.446050055449449);
    msg.setSource(51825U);
    msg.setSourceEntity(107U);
    msg.setDestination(34694U);
    msg.setDestinationEntity(156U);
    msg.op = 120U;
    msg.text.assign("VIGXCILTMHAUDHZBEYMFOEJEQTTMIPWXDIBWNJMBOLBZOEAQQSWVSOOHJXDEXMPFSGRAQDYXLBEHZDJVRRFQRQUOCYZIPNDNFPUUSRVRBOGXKPHRC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.05552189616759118);
    msg.setSource(15989U);
    msg.setSourceEntity(113U);
    msg.setDestination(64333U);
    msg.setDestinationEntity(124U);
    msg.op = 25U;
    msg.text.assign("UKSEPJNZXHMIJVLZHGEBYNARSYHSYCJBDMOFWIMHLXPIVXREPNZATEDADBTPQV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.8951977268020574);
    msg.setSource(46469U);
    msg.setSourceEntity(200U);
    msg.setDestination(3279U);
    msg.setDestinationEntity(57U);
    msg.op = 80U;
    msg.text.assign("SSTYZADAJORQOBKSYWIDCVGNCFNFKHPMUFAEZRAGPXJNHGUNJEKVQAOXTMLEJVDMUOXDBOUELXZAGBDSTUTJFWOFQYXTPBUSCVPZAOSHDQGNJQXVBZVIFYIIVRUGQPBWYTRHIEPWCFRGFJJTHIRKLULBPXBLAHGHNSIKIBWWHMLOKFCQSQVRBDWMKVYMRYLWEEGUSVXOKIHTPCENNMRXWZCQDGZEKQRYMFYJJNZL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.19354352990444545);
    msg.setSource(58382U);
    msg.setSourceEntity(107U);
    msg.setDestination(53253U);
    msg.setDestinationEntity(190U);
    msg.op = 28U;
    msg.time_remain = 0.36367559970095453;
    msg.sched_time = 0.8128318464036517;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.22534759228787715);
    msg.setSource(37963U);
    msg.setSourceEntity(159U);
    msg.setDestination(64819U);
    msg.setDestinationEntity(29U);
    msg.op = 77U;
    msg.time_remain = 0.9506017266263067;
    msg.sched_time = 0.8273398613997868;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.8217510951690272);
    msg.setSource(42177U);
    msg.setSourceEntity(130U);
    msg.setDestination(26310U);
    msg.setDestinationEntity(9U);
    msg.op = 211U;
    msg.time_remain = 0.9243837192147433;
    msg.sched_time = 0.48589040226168845;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.7266497091473282);
    msg.setSource(42800U);
    msg.setSourceEntity(103U);
    msg.setDestination(39649U);
    msg.setDestinationEntity(79U);
    msg.name.assign("HMXZSVQYHKXZEIPJCWMDGKTYSTXSCWHKDLZSZSFIYQQGAGWZOYRYINCKLJLOZRPDVZDT");
    msg.op = 181U;
    msg.sched_time = 0.9561446095797357;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.3740989056699351);
    msg.setSource(8495U);
    msg.setSourceEntity(80U);
    msg.setDestination(6289U);
    msg.setDestinationEntity(199U);
    msg.name.assign("DPGQFRXOUYGFDIPKJJZYPMNSIORCHMQTPYTWDSXZIKZYEBHWAW");
    msg.op = 168U;
    msg.sched_time = 0.47268324047649746;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.5733775327064854);
    msg.setSource(44680U);
    msg.setSourceEntity(12U);
    msg.setDestination(53891U);
    msg.setDestinationEntity(169U);
    msg.name.assign("WRDMBIESDCBRJKWGRGQXHBTFTMDJRFHFDAFKQTKXKIHZOZLVEWJWKVUVIMMCMIGNQIUSFQVLXZVECZJVPASYGHKJIDQYQWCJYHOHSANBXHQHJXKGCGYRHKUDRSLQFECWCGFVDTWZBNBJRATIATCENGHNUMACVKNUEUPEYYUVMSJFBBSNVXPZCOUBLXEIM");
    msg.op = 205U;
    msg.sched_time = 0.22425634868629984;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.12948707927023828);
    msg.setSource(9298U);
    msg.setSourceEntity(196U);
    msg.setDestination(59464U);
    msg.setDestinationEntity(152U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.5064929214451587);
    msg.setSource(4019U);
    msg.setSourceEntity(96U);
    msg.setDestination(31457U);
    msg.setDestinationEntity(185U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.8822170010670788);
    msg.setSource(31143U);
    msg.setSourceEntity(83U);
    msg.setDestination(20976U);
    msg.setDestinationEntity(5U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.7109287829602738);
    msg.setSource(48537U);
    msg.setSourceEntity(185U);
    msg.setDestination(53976U);
    msg.setDestinationEntity(187U);
    msg.name.assign("GKDUJWBVAVZDWOBXKEJPUSAKQTFRRZHORBQCWPJFICURHKWMDPNZKCCNYOICMSZDAZBOHXWLVFTBOXLOPMZHUDTKVNQLSGCURSUNVYNLXMADDEHMJHNUGAAKVMBOSCTFPKVYCAPZLNQEQHCOTEBNWOJESMGEVNBGUZTLYGFWLDQBHSY");
    msg.state = 112U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.8280081466644668);
    msg.setSource(51273U);
    msg.setSourceEntity(70U);
    msg.setDestination(4200U);
    msg.setDestinationEntity(236U);
    msg.name.assign("KOXWMMGKIUHMLVPWGTUTLFOSQTRGVQTBGQXHLJILJDPUSILQAVQSNFJICPKJXBWRJQSLNDNUXJPOACFNFJEUHLXJVDKPBQFCEMEIJURVNYBTHVBAAURZTUCIVFDWDIDRBQQNS");
    msg.state = 11U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.37408069371360764);
    msg.setSource(51765U);
    msg.setSourceEntity(81U);
    msg.setDestination(6642U);
    msg.setDestinationEntity(226U);
    msg.name.assign("JPMOIJLDNWLXBTPKFXCUVVLOWGGKBYXMAAGYJIIYDMPHDQZWYYVPRDNXXOEWZCNEHNQFWAMVQFNROCFLWKFDYGQQQIOTFUASDPFASKZWITMSKMDFAKBCSSTVBKCREBOGHTEOJFZRAHYXURVINUAOUKDTOYNSZGNEPOZBGZVJJTE");
    msg.state = 123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.6604195063866962);
    msg.setSource(37092U);
    msg.setSourceEntity(163U);
    msg.setDestination(62818U);
    msg.setDestinationEntity(106U);
    msg.name.assign("ZMAUBHUKCNEXYROFDPOTSBXSLCAULPNPHDJKHUGXU");
    msg.value = 114U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.4918645400813162);
    msg.setSource(58708U);
    msg.setSourceEntity(69U);
    msg.setDestination(20766U);
    msg.setDestinationEntity(126U);
    msg.name.assign("DVOEQVCCNCIKKETGVXIXUAPPMNSRSPRQIMJLRISUVYBLYYXOUONXTTHCNMGNZBAOFDVYZSDQMFWVIOZILMKLMKKRIDCHHXFWNJGAQSZIXAGENRLRTSGTJUYBAPPPPKFCSCVSUTZFWWFAOWHGKAEZMSERUGEHUIZUQBWMHNEEJLBAEH");
    msg.value = 153U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.6157616835342893);
    msg.setSource(44568U);
    msg.setSourceEntity(103U);
    msg.setDestination(54437U);
    msg.setDestinationEntity(107U);
    msg.name.assign("MVDTASGXBMXRERSJAYCTQHIZZMUYLPBLKWXNMFAHHDPDYBEKTJFTNLTBIPQHHQJNVIVTQHQGUOJPHF");
    msg.value = 189U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.9862042101856363);
    msg.setSource(62470U);
    msg.setSourceEntity(90U);
    msg.setDestination(17146U);
    msg.setDestinationEntity(85U);
    msg.name.assign("WPDTFHPMGXYMGIGPBQAFQBTFGEULRQWYPWCUJLRAXRMNOTHSKRIZRCM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.04408306379586335);
    msg.setSource(15629U);
    msg.setSourceEntity(136U);
    msg.setDestination(19772U);
    msg.setDestinationEntity(12U);
    msg.name.assign("XEGDVMUILVWASTRQXGGHRSZETEBNWKPQMKVADTCYOGHMXJBHQSZFNJSQTPXSRMARTEN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.49131753495071584);
    msg.setSource(24687U);
    msg.setSourceEntity(68U);
    msg.setDestination(23775U);
    msg.setDestinationEntity(7U);
    msg.name.assign("KWBZGVQGJPKEDJVGVHBFCDNCXPZYGKUITGRUIYJSHQTITWREREMGEUQQBOACTKSOYASOFL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.28365563949984374);
    msg.setSource(50561U);
    msg.setSourceEntity(191U);
    msg.setDestination(30901U);
    msg.setDestinationEntity(152U);
    msg.name.assign("DGBMQFCHIQTJOWNUNYGTIAYPDFTEKHFFSDPGLCZQOQXCRUFLZMJXWUTNJFRWLLQPCEIWSJAJMEZYEYWMZVDPZJQARXJOYPIBQCAUQGIOKCXPGRAOIGEONBXTOCDGHHIMXT");
    msg.value = 179U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.5359124834025086);
    msg.setSource(61659U);
    msg.setSourceEntity(241U);
    msg.setDestination(5858U);
    msg.setDestinationEntity(185U);
    msg.name.assign("LJAHUVNXZRSFPUKEOFBAFEKPCMVITTQBKQSVDDDGFRENEBBGMUKJALRWFYAXUGCDHZKDYWZTGAMRUUZWTCLKTHPJNOUPIZISXBRGLUYCYMIFAPMWOJKBIDAOIPDCGKHTNMXXNRZNNPQFYLNVRYTXIASUQOVFEJQABSYVCSENBBZFQYLDQLGGEP");
    msg.value = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.32467938573782085);
    msg.setSource(14618U);
    msg.setSourceEntity(74U);
    msg.setDestination(55646U);
    msg.setDestinationEntity(104U);
    msg.name.assign("EBNJVSAGKTJLQRIJXFUYXKWVFMGVPQOUWBHIHAVNMTVXRYTCZFZXLYSXOACPBVVYLXDKGDGOTTSPKSOHAZDJLTXFCQVIUOPOOXPCBSTVQIFBCDCFGQAAGYLHARMHRIZMHEKQJDUQBPJMNONDLFKWGIBFUPK");
    msg.value = 151U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.6863027231432759);
    msg.setSource(5805U);
    msg.setSourceEntity(107U);
    msg.setDestination(18509U);
    msg.setDestinationEntity(121U);
    msg.id = 70U;
    msg.period = 1772904682U;
    msg.duty_cycle = 4292201748U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.7695501822011258);
    msg.setSource(40897U);
    msg.setSourceEntity(77U);
    msg.setDestination(38031U);
    msg.setDestinationEntity(118U);
    msg.id = 160U;
    msg.period = 17590272U;
    msg.duty_cycle = 3239420838U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.25755473800165407);
    msg.setSource(39294U);
    msg.setSourceEntity(114U);
    msg.setDestination(52283U);
    msg.setDestinationEntity(190U);
    msg.id = 52U;
    msg.period = 3856762945U;
    msg.duty_cycle = 1883461914U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.7845539013930952);
    msg.setSource(44686U);
    msg.setSourceEntity(173U);
    msg.setDestination(2752U);
    msg.setDestinationEntity(101U);
    msg.id = 147U;
    msg.period = 1156012435U;
    msg.duty_cycle = 532100369U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.8174454166446231);
    msg.setSource(43513U);
    msg.setSourceEntity(154U);
    msg.setDestination(13160U);
    msg.setDestinationEntity(171U);
    msg.id = 179U;
    msg.period = 1678995167U;
    msg.duty_cycle = 2792461339U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.36573563036704104);
    msg.setSource(4181U);
    msg.setSourceEntity(139U);
    msg.setDestination(20334U);
    msg.setDestinationEntity(27U);
    msg.id = 20U;
    msg.period = 1782668007U;
    msg.duty_cycle = 2958572011U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.9273365939958775);
    msg.setSource(54993U);
    msg.setSourceEntity(67U);
    msg.setDestination(4273U);
    msg.setDestinationEntity(245U);
    msg.lat = 0.45034524687424415;
    msg.lon = 0.2815498337331953;
    msg.height = 0.14232094585200228;
    msg.x = 0.4855422206933977;
    msg.y = 0.6917380260272433;
    msg.z = 0.4778421046635575;
    msg.phi = 0.7913557872895899;
    msg.theta = 0.9132191345106729;
    msg.psi = 0.9450489414228189;
    msg.u = 0.32730910654085554;
    msg.v = 0.8676542390525179;
    msg.w = 0.20242441399210243;
    msg.vx = 0.3584305581548063;
    msg.vy = 0.6627811504745575;
    msg.vz = 0.2741955722210546;
    msg.p = 0.3905020992957884;
    msg.q = 0.9307746554256269;
    msg.r = 0.6838428978951662;
    msg.depth = 0.8677574053159574;
    msg.alt = 0.2995563145241763;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.06679650823519234);
    msg.setSource(34548U);
    msg.setSourceEntity(176U);
    msg.setDestination(10702U);
    msg.setDestinationEntity(165U);
    msg.lat = 0.7761530554627022;
    msg.lon = 0.09629961512242247;
    msg.height = 0.7064629368275208;
    msg.x = 0.5510413776542566;
    msg.y = 0.9840541618959154;
    msg.z = 0.8865396099674492;
    msg.phi = 0.09864945145698678;
    msg.theta = 0.9238020259554489;
    msg.psi = 0.5899245836626765;
    msg.u = 0.6891468332930827;
    msg.v = 0.09014237581915574;
    msg.w = 0.5445562518668605;
    msg.vx = 0.7863541215778113;
    msg.vy = 0.044301691167429214;
    msg.vz = 0.4533275965228314;
    msg.p = 0.4053659748279522;
    msg.q = 0.6720037067206143;
    msg.r = 0.1594355642936658;
    msg.depth = 0.7028335334873779;
    msg.alt = 0.6707359618925838;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.21738387020800753);
    msg.setSource(35767U);
    msg.setSourceEntity(200U);
    msg.setDestination(22258U);
    msg.setDestinationEntity(217U);
    msg.lat = 0.8064564749582869;
    msg.lon = 0.6041330929440661;
    msg.height = 0.12051587320628832;
    msg.x = 0.28220724231651406;
    msg.y = 0.9488757939518749;
    msg.z = 0.8586507679389921;
    msg.phi = 0.5907331411770244;
    msg.theta = 0.9622921321400347;
    msg.psi = 0.1806696074426528;
    msg.u = 0.10907475174254133;
    msg.v = 0.8147254572808723;
    msg.w = 0.2889273424458063;
    msg.vx = 0.07954313215847297;
    msg.vy = 0.8098812232879558;
    msg.vz = 0.04161378138759886;
    msg.p = 0.8232429256499415;
    msg.q = 0.6746071097144634;
    msg.r = 0.8000978084998541;
    msg.depth = 0.5252849247078843;
    msg.alt = 0.5232711956555577;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.9323186719755127);
    msg.setSource(33218U);
    msg.setSourceEntity(137U);
    msg.setDestination(26813U);
    msg.setDestinationEntity(108U);
    msg.x = 0.4038778168888535;
    msg.y = 0.27768231262655396;
    msg.z = 0.10503419357454546;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.7921080109660333);
    msg.setSource(36336U);
    msg.setSourceEntity(77U);
    msg.setDestination(533U);
    msg.setDestinationEntity(145U);
    msg.x = 0.8538187052573216;
    msg.y = 0.8675109117967192;
    msg.z = 0.7856456524716964;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.37531706487194616);
    msg.setSource(49571U);
    msg.setSourceEntity(211U);
    msg.setDestination(65206U);
    msg.setDestinationEntity(125U);
    msg.x = 0.632300905267851;
    msg.y = 0.26629264973845357;
    msg.z = 0.7306169071927996;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.9861119123364126);
    msg.setSource(34865U);
    msg.setSourceEntity(154U);
    msg.setDestination(12753U);
    msg.setDestinationEntity(21U);
    msg.value = 0.4380296242528867;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.9275726327413937);
    msg.setSource(15109U);
    msg.setSourceEntity(69U);
    msg.setDestination(62506U);
    msg.setDestinationEntity(81U);
    msg.value = 0.8059346497718939;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.5522336953778603);
    msg.setSource(14779U);
    msg.setSourceEntity(203U);
    msg.setDestination(25792U);
    msg.setDestinationEntity(222U);
    msg.value = 0.980596516394944;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.595904807704837);
    msg.setSource(29016U);
    msg.setSourceEntity(111U);
    msg.setDestination(915U);
    msg.setDestinationEntity(29U);
    msg.value = 0.693701508699203;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.6498206811814499);
    msg.setSource(53330U);
    msg.setSourceEntity(6U);
    msg.setDestination(28550U);
    msg.setDestinationEntity(48U);
    msg.value = 0.7980458110560675;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.3674690187146119);
    msg.setSource(5104U);
    msg.setSourceEntity(155U);
    msg.setDestination(31147U);
    msg.setDestinationEntity(12U);
    msg.value = 0.3156317549893666;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.6459098005585836);
    msg.setSource(31668U);
    msg.setSourceEntity(63U);
    msg.setDestination(38578U);
    msg.setDestinationEntity(158U);
    msg.x = 0.7264707044186898;
    msg.y = 0.20829493034084823;
    msg.z = 0.9636326992982228;
    msg.phi = 0.9495723324335222;
    msg.theta = 0.8186165331047996;
    msg.psi = 0.31226861390261174;
    msg.p = 0.6821818473959989;
    msg.q = 0.12151338343608009;
    msg.r = 0.8412431520871139;
    msg.u = 0.7222273873774726;
    msg.v = 0.10163990529639699;
    msg.w = 0.8356230342240726;
    msg.bias_psi = 0.21458023104797508;
    msg.bias_r = 0.06939729700127606;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.7668193793803134);
    msg.setSource(60860U);
    msg.setSourceEntity(81U);
    msg.setDestination(34998U);
    msg.setDestinationEntity(112U);
    msg.x = 0.7202395520709788;
    msg.y = 0.07528426701203605;
    msg.z = 0.8774351838626355;
    msg.phi = 0.3784918912979942;
    msg.theta = 0.5677047846426295;
    msg.psi = 0.29044438831230723;
    msg.p = 0.013496828515921044;
    msg.q = 0.9511647194887535;
    msg.r = 0.0769476502869435;
    msg.u = 0.9432547894555364;
    msg.v = 0.5342151595863832;
    msg.w = 0.32686070709922044;
    msg.bias_psi = 0.19874121107289466;
    msg.bias_r = 0.17108368439705035;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.9175806610279421);
    msg.setSource(61901U);
    msg.setSourceEntity(103U);
    msg.setDestination(59979U);
    msg.setDestinationEntity(156U);
    msg.x = 0.14724368093641715;
    msg.y = 0.5849123022248001;
    msg.z = 0.4278047934915312;
    msg.phi = 0.424736986229708;
    msg.theta = 0.4752079426285952;
    msg.psi = 0.6847135860592647;
    msg.p = 0.7470976396179595;
    msg.q = 0.33660611823964104;
    msg.r = 0.37156151965871276;
    msg.u = 0.3495168601910903;
    msg.v = 0.5181039861882911;
    msg.w = 0.6552754512744287;
    msg.bias_psi = 0.08149978508559486;
    msg.bias_r = 0.6520402113713919;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.5046018185310046);
    msg.setSource(13037U);
    msg.setSourceEntity(70U);
    msg.setDestination(14971U);
    msg.setDestinationEntity(206U);
    msg.bias_psi = 0.1908875522159066;
    msg.bias_r = 0.4622565725258212;
    msg.cog = 0.12053057292884506;
    msg.cyaw = 0.1389054875239334;
    msg.lbl_rej_level = 0.3048962039838762;
    msg.gps_rej_level = 0.07644040533150709;
    msg.custom_x = 0.4957033532835097;
    msg.custom_y = 0.06332172982991313;
    msg.custom_z = 0.16315775699640178;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.3697042101355684);
    msg.setSource(65243U);
    msg.setSourceEntity(144U);
    msg.setDestination(64629U);
    msg.setDestinationEntity(10U);
    msg.bias_psi = 0.7534636319305548;
    msg.bias_r = 0.5397675618041267;
    msg.cog = 0.7736411733270633;
    msg.cyaw = 0.49381319882376806;
    msg.lbl_rej_level = 0.8959634997577549;
    msg.gps_rej_level = 0.3689787763107353;
    msg.custom_x = 0.16727869111802263;
    msg.custom_y = 0.5449467954981082;
    msg.custom_z = 0.7838556848221903;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.7739352422011122);
    msg.setSource(3644U);
    msg.setSourceEntity(235U);
    msg.setDestination(20418U);
    msg.setDestinationEntity(77U);
    msg.bias_psi = 0.3504486115394193;
    msg.bias_r = 0.9128393474379624;
    msg.cog = 0.5844838319303459;
    msg.cyaw = 0.1975296276486339;
    msg.lbl_rej_level = 0.3575510193689404;
    msg.gps_rej_level = 0.36671859542306817;
    msg.custom_x = 0.4317586477010825;
    msg.custom_y = 0.8133799178737927;
    msg.custom_z = 0.12803120676189594;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.9603908926943246);
    msg.setSource(1414U);
    msg.setSourceEntity(145U);
    msg.setDestination(55765U);
    msg.setDestinationEntity(49U);
    msg.utc_time = 0.5205432841880006;
    msg.reason = 133U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.9275485672212186);
    msg.setSource(50802U);
    msg.setSourceEntity(155U);
    msg.setDestination(41347U);
    msg.setDestinationEntity(231U);
    msg.utc_time = 0.6508503176179381;
    msg.reason = 163U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.6051678692727649);
    msg.setSource(31147U);
    msg.setSourceEntity(234U);
    msg.setDestination(19935U);
    msg.setDestinationEntity(203U);
    msg.utc_time = 0.8924743648494639;
    msg.reason = 39U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.41417718252323643);
    msg.setSource(64551U);
    msg.setSourceEntity(132U);
    msg.setDestination(19737U);
    msg.setDestinationEntity(120U);
    msg.id = 232U;
    msg.range = 0.42452624615795886;
    msg.acceptance = 158U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.32979823138532793);
    msg.setSource(11725U);
    msg.setSourceEntity(6U);
    msg.setDestination(9693U);
    msg.setDestinationEntity(109U);
    msg.id = 39U;
    msg.range = 0.20928023789219374;
    msg.acceptance = 129U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.2911107653871756);
    msg.setSource(64543U);
    msg.setSourceEntity(124U);
    msg.setDestination(64891U);
    msg.setDestinationEntity(235U);
    msg.id = 118U;
    msg.range = 0.1985315890569227;
    msg.acceptance = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.10443752528191708);
    msg.setSource(40650U);
    msg.setSourceEntity(138U);
    msg.setDestination(653U);
    msg.setDestinationEntity(155U);
    msg.type = 159U;
    msg.reason = 164U;
    msg.value = 0.6020745726873905;
    msg.timestep = 0.40378027820388096;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.4861633249409316);
    msg.setSource(31042U);
    msg.setSourceEntity(80U);
    msg.setDestination(59368U);
    msg.setDestinationEntity(83U);
    msg.type = 167U;
    msg.reason = 141U;
    msg.value = 0.3063172369385796;
    msg.timestep = 0.03860024571981857;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.5253327221319017);
    msg.setSource(31714U);
    msg.setSourceEntity(132U);
    msg.setDestination(60807U);
    msg.setDestinationEntity(119U);
    msg.type = 194U;
    msg.reason = 97U;
    msg.value = 0.6687752062132214;
    msg.timestep = 0.3456213322175543;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.5498359005928686);
    msg.setSource(22223U);
    msg.setSourceEntity(254U);
    msg.setDestination(57411U);
    msg.setDestinationEntity(208U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("QQGBSJXTMGUXEAZPDEJFAKCSWBEKKO");
    tmp_msg_0.lat = 0.14133882151885524;
    tmp_msg_0.lon = 0.37873151965041363;
    tmp_msg_0.depth = 0.20012335222347677;
    tmp_msg_0.query_channel = 168U;
    tmp_msg_0.reply_channel = 238U;
    tmp_msg_0.transponder_delay = 125U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.02925262471558443;
    msg.y = 0.616147895132717;
    msg.var_x = 0.36171061596326226;
    msg.var_y = 0.8928692646864694;
    msg.distance = 0.295434765487545;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.4495286338651888);
    msg.setSource(23447U);
    msg.setSourceEntity(174U);
    msg.setDestination(64623U);
    msg.setDestinationEntity(153U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("DPKMMFTBZAAWFPOGSJSYAXARJYNXRRKAQGJNBSCEPAOEPLJBYDWQNHVQNFKTOKUFHOVDHCYTVIWELVFTCJHDMAWJZXQAVPTHLNIPTKNMGUIXFQZWFDLTHQNICBLCDEAIXZIJOMLSVEZHICVRGXGUXYAZKWPQ");
    tmp_msg_0.lat = 0.5520759464717587;
    tmp_msg_0.lon = 0.4354737905232977;
    tmp_msg_0.depth = 0.27759175049964446;
    tmp_msg_0.query_channel = 245U;
    tmp_msg_0.reply_channel = 64U;
    tmp_msg_0.transponder_delay = 233U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.013857000861501989;
    msg.y = 0.8776443403706521;
    msg.var_x = 0.5312154877817332;
    msg.var_y = 0.9600128259010062;
    msg.distance = 0.28217404847379535;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.5089521857531503);
    msg.setSource(61833U);
    msg.setSourceEntity(160U);
    msg.setDestination(2235U);
    msg.setDestinationEntity(86U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("YZMUZLFNZFCYFAYTWQIDLSJNDCDVERPYXOKRFRJQBTVMHYKDEAOEJEMTXUUFHVMUJBJISOEUTPXNWSGMEWOTNLIBAXEEIGTJYPWEKWLDSIGRPZZIBGRTCZVLOVRLHNOACAFRTADDOYQIMYMGBSAZVNLGZKYZXPHCCSQCQZTWDABOKJNXKQKASRXFSPXMXSIPMHGJKHSCWLBEKVUWUHQNMVPLIJFLKRWCBQRBTHHPVIDFVUFUXACHOQDBGGYQNG");
    tmp_msg_0.lat = 0.3330494291365099;
    tmp_msg_0.lon = 0.7519472136212779;
    tmp_msg_0.depth = 0.1468495746802918;
    tmp_msg_0.query_channel = 232U;
    tmp_msg_0.reply_channel = 213U;
    tmp_msg_0.transponder_delay = 92U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.7106971949461913;
    msg.y = 0.923166456138757;
    msg.var_x = 0.08064385830083476;
    msg.var_y = 0.8862470760046284;
    msg.distance = 0.4322744163111041;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.25013342193404775);
    msg.setSource(37643U);
    msg.setSourceEntity(117U);
    msg.setDestination(2939U);
    msg.setDestinationEntity(68U);
    msg.state = 161U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.16919915257809026);
    msg.setSource(48850U);
    msg.setSourceEntity(99U);
    msg.setDestination(55058U);
    msg.setDestinationEntity(20U);
    msg.state = 46U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.8695566011925396);
    msg.setSource(25047U);
    msg.setSourceEntity(165U);
    msg.setDestination(30743U);
    msg.setDestinationEntity(109U);
    msg.state = 22U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.9244409206686206);
    msg.setSource(26902U);
    msg.setSourceEntity(143U);
    msg.setDestination(39776U);
    msg.setDestinationEntity(204U);
    msg.x = 0.5819788997198994;
    msg.y = 0.2786845778299729;
    msg.z = 0.312225868802124;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.11895781379350445);
    msg.setSource(6911U);
    msg.setSourceEntity(47U);
    msg.setDestination(32371U);
    msg.setDestinationEntity(246U);
    msg.x = 0.9686474807819171;
    msg.y = 0.9488960024955007;
    msg.z = 0.877367855409161;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.5584096203942255);
    msg.setSource(62841U);
    msg.setSourceEntity(173U);
    msg.setDestination(47008U);
    msg.setDestinationEntity(197U);
    msg.x = 0.6997424668744388;
    msg.y = 0.38366958842412935;
    msg.z = 0.17877325815180023;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.8186260384597366);
    msg.setSource(4777U);
    msg.setSourceEntity(35U);
    msg.setDestination(60150U);
    msg.setDestinationEntity(241U);
    msg.va = 0.11392420402739556;
    msg.aoa = 0.02422764087901419;
    msg.ssa = 0.8763941595700078;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.30319488330701183);
    msg.setSource(17003U);
    msg.setSourceEntity(171U);
    msg.setDestination(62623U);
    msg.setDestinationEntity(250U);
    msg.va = 0.9766369315213689;
    msg.aoa = 0.8065013250083491;
    msg.ssa = 0.5529503294763494;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.09780072303542064);
    msg.setSource(55188U);
    msg.setSourceEntity(10U);
    msg.setDestination(33864U);
    msg.setDestinationEntity(191U);
    msg.va = 0.7313454613725312;
    msg.aoa = 0.9611939205926616;
    msg.ssa = 0.4526987740606483;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.5113265905801663);
    msg.setSource(10346U);
    msg.setSourceEntity(145U);
    msg.setDestination(16301U);
    msg.setDestinationEntity(123U);
    msg.value = 0.9557556913504793;
    msg.off = 0.8223929959641519;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.823484858319629);
    msg.setSource(35582U);
    msg.setSourceEntity(8U);
    msg.setDestination(52116U);
    msg.setDestinationEntity(120U);
    msg.value = 0.5934393399983823;
    msg.off = 0.5264903265942069;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.5069627664012137);
    msg.setSource(35241U);
    msg.setSourceEntity(32U);
    msg.setDestination(46687U);
    msg.setDestinationEntity(172U);
    msg.value = 0.9024342499580711;
    msg.off = 0.7622518923090348;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.5449359122820823);
    msg.setSource(15828U);
    msg.setSourceEntity(230U);
    msg.setDestination(43821U);
    msg.setDestinationEntity(98U);
    msg.value = 0.1951295033901631;
    msg.z_units = 145U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.7165797296791556);
    msg.setSource(60053U);
    msg.setSourceEntity(122U);
    msg.setDestination(33477U);
    msg.setDestinationEntity(133U);
    msg.value = 0.30432134818230605;
    msg.z_units = 99U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.5959051435565947);
    msg.setSource(4560U);
    msg.setSourceEntity(133U);
    msg.setDestination(43862U);
    msg.setDestinationEntity(197U);
    msg.value = 0.08120080750330061;
    msg.z_units = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.10247319035756353);
    msg.setSource(63544U);
    msg.setSourceEntity(129U);
    msg.setDestination(2717U);
    msg.setDestinationEntity(132U);
    msg.value = 0.2916084650084083;
    msg.speed_units = 154U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.18519154429194207);
    msg.setSource(45655U);
    msg.setSourceEntity(51U);
    msg.setDestination(27650U);
    msg.setDestinationEntity(184U);
    msg.value = 0.9384356224437481;
    msg.speed_units = 191U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.8355879151529271);
    msg.setSource(17046U);
    msg.setSourceEntity(1U);
    msg.setDestination(65303U);
    msg.setDestinationEntity(145U);
    msg.value = 0.06096314172055739;
    msg.speed_units = 47U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.07224989842985685);
    msg.setSource(2366U);
    msg.setSourceEntity(239U);
    msg.setDestination(53057U);
    msg.setDestinationEntity(34U);
    msg.value = 0.709220873741394;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.3130114747110928);
    msg.setSource(58183U);
    msg.setSourceEntity(230U);
    msg.setDestination(35034U);
    msg.setDestinationEntity(51U);
    msg.value = 0.36979068771287127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.16252067609860243);
    msg.setSource(31698U);
    msg.setSourceEntity(194U);
    msg.setDestination(9010U);
    msg.setDestinationEntity(1U);
    msg.value = 0.6799165845719117;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.5507113964541788);
    msg.setSource(39783U);
    msg.setSourceEntity(241U);
    msg.setDestination(51141U);
    msg.setDestinationEntity(71U);
    msg.value = 0.6951436578413235;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.7663981543146514);
    msg.setSource(40223U);
    msg.setSourceEntity(7U);
    msg.setDestination(14638U);
    msg.setDestinationEntity(250U);
    msg.value = 0.8536316011496571;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.4855762254858952);
    msg.setSource(8329U);
    msg.setSourceEntity(188U);
    msg.setDestination(50256U);
    msg.setDestinationEntity(51U);
    msg.value = 0.46266717905734656;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.026140194792782068);
    msg.setSource(17664U);
    msg.setSourceEntity(198U);
    msg.setDestination(30081U);
    msg.setDestinationEntity(245U);
    msg.value = 0.9889942802089412;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.39743281089015503);
    msg.setSource(7847U);
    msg.setSourceEntity(249U);
    msg.setDestination(49747U);
    msg.setDestinationEntity(136U);
    msg.value = 0.3666692007657467;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.035342387750904036);
    msg.setSource(48174U);
    msg.setSourceEntity(83U);
    msg.setDestination(32059U);
    msg.setDestinationEntity(78U);
    msg.value = 0.2134177573867353;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.023631411907915845);
    msg.setSource(22471U);
    msg.setSourceEntity(165U);
    msg.setDestination(27691U);
    msg.setDestinationEntity(43U);
    msg.path_ref = 3103569023U;
    msg.start_lat = 0.3482234503321383;
    msg.start_lon = 0.833045410747145;
    msg.start_z = 0.7773557161938758;
    msg.start_z_units = 54U;
    msg.end_lat = 0.922292489794636;
    msg.end_lon = 0.7406562690943548;
    msg.end_z = 0.5845223964318178;
    msg.end_z_units = 31U;
    msg.speed = 0.0002520409312973815;
    msg.speed_units = 186U;
    msg.lradius = 0.4686240197026825;
    msg.flags = 94U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.05175536155633165);
    msg.setSource(28030U);
    msg.setSourceEntity(61U);
    msg.setDestination(19120U);
    msg.setDestinationEntity(138U);
    msg.path_ref = 2092662852U;
    msg.start_lat = 0.12090772599566124;
    msg.start_lon = 0.34400005653386156;
    msg.start_z = 0.009960224720250488;
    msg.start_z_units = 155U;
    msg.end_lat = 0.13628468829285767;
    msg.end_lon = 0.15248217744112358;
    msg.end_z = 0.5521707116653385;
    msg.end_z_units = 216U;
    msg.speed = 0.07694576464426617;
    msg.speed_units = 180U;
    msg.lradius = 0.3609959961108523;
    msg.flags = 22U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.40047263970823943);
    msg.setSource(51698U);
    msg.setSourceEntity(145U);
    msg.setDestination(12973U);
    msg.setDestinationEntity(120U);
    msg.path_ref = 2847574444U;
    msg.start_lat = 0.5771112467095346;
    msg.start_lon = 0.4231182782746007;
    msg.start_z = 0.4806797873028824;
    msg.start_z_units = 171U;
    msg.end_lat = 0.9318413032752988;
    msg.end_lon = 0.12215715794296378;
    msg.end_z = 0.33498196104016;
    msg.end_z_units = 199U;
    msg.speed = 0.4186672757012726;
    msg.speed_units = 158U;
    msg.lradius = 0.41246819924270606;
    msg.flags = 222U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.11084004687729665);
    msg.setSource(57125U);
    msg.setSourceEntity(76U);
    msg.setDestination(35378U);
    msg.setDestinationEntity(127U);
    msg.x = 0.7244473462208841;
    msg.y = 0.17722818119671324;
    msg.z = 0.4840547475531518;
    msg.k = 0.5429406887465105;
    msg.m = 0.2109365777292379;
    msg.n = 0.2885947890465834;
    msg.flags = 156U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.6255972368705937);
    msg.setSource(18115U);
    msg.setSourceEntity(8U);
    msg.setDestination(44992U);
    msg.setDestinationEntity(6U);
    msg.x = 0.20689361961950126;
    msg.y = 0.7565253238893724;
    msg.z = 0.40213431917831943;
    msg.k = 0.5813126427213371;
    msg.m = 0.9811995825534803;
    msg.n = 0.5860187910507463;
    msg.flags = 5U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.44238062956618984);
    msg.setSource(35390U);
    msg.setSourceEntity(4U);
    msg.setDestination(52164U);
    msg.setDestinationEntity(101U);
    msg.x = 0.9762237164472134;
    msg.y = 0.5138028943465279;
    msg.z = 0.993080160892627;
    msg.k = 0.19871820211164393;
    msg.m = 0.6048914298421111;
    msg.n = 0.9103439295113539;
    msg.flags = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.2120841900503354);
    msg.setSource(41131U);
    msg.setSourceEntity(57U);
    msg.setDestination(24878U);
    msg.setDestinationEntity(126U);
    msg.value = 0.23768587016682696;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.6414469658375529);
    msg.setSource(64574U);
    msg.setSourceEntity(249U);
    msg.setDestination(12013U);
    msg.setDestinationEntity(156U);
    msg.value = 0.6906160454066081;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.7567274287742294);
    msg.setSource(33600U);
    msg.setSourceEntity(228U);
    msg.setDestination(57028U);
    msg.setDestinationEntity(125U);
    msg.value = 0.07415923411202685;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.5133437878196703);
    msg.setSource(7844U);
    msg.setSourceEntity(28U);
    msg.setDestination(12952U);
    msg.setDestinationEntity(236U);
    msg.u = 0.4666222186061829;
    msg.v = 0.2324225521430564;
    msg.w = 0.6001342193300456;
    msg.p = 0.20105404869966126;
    msg.q = 0.5662759586726438;
    msg.r = 0.4024242575480955;
    msg.flags = 244U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.17130071770141408);
    msg.setSource(8810U);
    msg.setSourceEntity(37U);
    msg.setDestination(4047U);
    msg.setDestinationEntity(154U);
    msg.u = 0.4245125905625595;
    msg.v = 0.3324712630025566;
    msg.w = 0.6123831425197063;
    msg.p = 0.30683540923030683;
    msg.q = 0.09719422576280268;
    msg.r = 0.8904030227740085;
    msg.flags = 10U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.2897454432085246);
    msg.setSource(65040U);
    msg.setSourceEntity(114U);
    msg.setDestination(65309U);
    msg.setDestinationEntity(196U);
    msg.u = 0.5281383950628561;
    msg.v = 0.03209594501059221;
    msg.w = 0.07996739315659329;
    msg.p = 0.3731282556666897;
    msg.q = 0.09424133388651645;
    msg.r = 0.6856626745428781;
    msg.flags = 210U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.7320949355153049);
    msg.setSource(58759U);
    msg.setSourceEntity(127U);
    msg.setDestination(39657U);
    msg.setDestinationEntity(88U);
    msg.path_ref = 3970982141U;
    msg.start_lat = 0.25914786805455514;
    msg.start_lon = 0.803901395180322;
    msg.start_z = 0.7327296835089332;
    msg.start_z_units = 89U;
    msg.end_lat = 0.9342778933021247;
    msg.end_lon = 0.39264295288790574;
    msg.end_z = 0.5198972268974184;
    msg.end_z_units = 90U;
    msg.lradius = 0.928407873712988;
    msg.flags = 82U;
    msg.x = 0.7789383899685463;
    msg.y = 0.36220838801788846;
    msg.z = 0.5459735973063901;
    msg.vx = 0.7495841199380899;
    msg.vy = 0.09218829535312556;
    msg.vz = 0.004066913062902633;
    msg.course_error = 0.663629473602707;
    msg.eta = 16509U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.4537005201382369);
    msg.setSource(58614U);
    msg.setSourceEntity(89U);
    msg.setDestination(49498U);
    msg.setDestinationEntity(38U);
    msg.path_ref = 2569157213U;
    msg.start_lat = 0.9653961278664941;
    msg.start_lon = 0.3446362877451047;
    msg.start_z = 0.03941077457334319;
    msg.start_z_units = 2U;
    msg.end_lat = 0.03716831098881401;
    msg.end_lon = 0.8887870303685679;
    msg.end_z = 0.32833461128468455;
    msg.end_z_units = 67U;
    msg.lradius = 0.20355054066988054;
    msg.flags = 127U;
    msg.x = 0.2153419606466147;
    msg.y = 0.9919621830439845;
    msg.z = 0.725135620594993;
    msg.vx = 0.3364255848555703;
    msg.vy = 0.3883719234022893;
    msg.vz = 0.1074083199591972;
    msg.course_error = 0.5663904544327806;
    msg.eta = 17210U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.3681758717800422);
    msg.setSource(35267U);
    msg.setSourceEntity(67U);
    msg.setDestination(36769U);
    msg.setDestinationEntity(242U);
    msg.path_ref = 1847473536U;
    msg.start_lat = 0.684707704881074;
    msg.start_lon = 0.9097987840757711;
    msg.start_z = 0.662047619330311;
    msg.start_z_units = 69U;
    msg.end_lat = 0.7295616318646889;
    msg.end_lon = 0.8128292974175166;
    msg.end_z = 0.7545537082560257;
    msg.end_z_units = 27U;
    msg.lradius = 0.8831893878373768;
    msg.flags = 136U;
    msg.x = 0.1009162570704466;
    msg.y = 0.24738779274925704;
    msg.z = 0.3536412918772246;
    msg.vx = 0.30241061990052176;
    msg.vy = 0.08425427923524009;
    msg.vz = 0.2691813377707222;
    msg.course_error = 0.6198893391201554;
    msg.eta = 9132U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8338952098389213);
    msg.setSource(18853U);
    msg.setSourceEntity(124U);
    msg.setDestination(29711U);
    msg.setDestinationEntity(208U);
    msg.k = 0.4301262256158698;
    msg.m = 0.26028984818732515;
    msg.n = 0.4949924475311228;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8395440600819291);
    msg.setSource(7039U);
    msg.setSourceEntity(160U);
    msg.setDestination(64358U);
    msg.setDestinationEntity(195U);
    msg.k = 0.892346925886956;
    msg.m = 0.49310673619142154;
    msg.n = 0.5375934049220447;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.6225459695421862);
    msg.setSource(31270U);
    msg.setSourceEntity(209U);
    msg.setDestination(36332U);
    msg.setDestinationEntity(209U);
    msg.k = 0.270785657734987;
    msg.m = 0.4879332068327268;
    msg.n = 0.430614931474785;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.9156778205324739);
    msg.setSource(15505U);
    msg.setSourceEntity(193U);
    msg.setDestination(27936U);
    msg.setDestinationEntity(174U);
    msg.p = 0.7084084387586222;
    msg.i = 0.061518915098829785;
    msg.d = 0.12267520442294144;
    msg.a = 0.18117608505938576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.7442054402928675);
    msg.setSource(62261U);
    msg.setSourceEntity(51U);
    msg.setDestination(28524U);
    msg.setDestinationEntity(106U);
    msg.p = 0.8862156151848734;
    msg.i = 0.9202835505535084;
    msg.d = 0.7996503057745401;
    msg.a = 0.2842873894593668;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.23452511389337305);
    msg.setSource(60377U);
    msg.setSourceEntity(163U);
    msg.setDestination(55216U);
    msg.setDestinationEntity(203U);
    msg.p = 0.16470279915847585;
    msg.i = 0.02899843420354753;
    msg.d = 0.5735818946398273;
    msg.a = 0.32566411488484903;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.6810740778037321);
    msg.setSource(50239U);
    msg.setSourceEntity(123U);
    msg.setDestination(28785U);
    msg.setDestinationEntity(155U);
    msg.op = 198U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.8221650554464814);
    msg.setSource(27743U);
    msg.setSourceEntity(169U);
    msg.setDestination(52751U);
    msg.setDestinationEntity(148U);
    msg.op = 212U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.21775702130493113);
    msg.setSource(21561U);
    msg.setSourceEntity(52U);
    msg.setDestination(5954U);
    msg.setDestinationEntity(187U);
    msg.op = 56U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.19371469354526472);
    msg.setSource(41032U);
    msg.setSourceEntity(132U);
    msg.setDestination(45843U);
    msg.setDestinationEntity(21U);
    msg.x = 0.8936859844861782;
    msg.y = 0.6829061776096116;
    msg.z = 0.1934350853620378;
    msg.vx = 0.860342574128249;
    msg.vy = 0.6049666016430292;
    msg.vz = 0.1475545803300452;
    msg.ax = 0.6937763758397257;
    msg.ay = 0.5926266826493426;
    msg.az = 0.14484112130444116;
    msg.flags = 14230U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.9767804191663254);
    msg.setSource(10705U);
    msg.setSourceEntity(25U);
    msg.setDestination(2082U);
    msg.setDestinationEntity(253U);
    msg.x = 0.36302144722309415;
    msg.y = 0.18800915395821183;
    msg.z = 0.9119515818056535;
    msg.vx = 0.8806702225704759;
    msg.vy = 0.9459714723284945;
    msg.vz = 0.7450239802569886;
    msg.ax = 0.6309120683058325;
    msg.ay = 0.032701203756761665;
    msg.az = 0.7217016124356607;
    msg.flags = 17515U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.11557675622699126);
    msg.setSource(59375U);
    msg.setSourceEntity(234U);
    msg.setDestination(14401U);
    msg.setDestinationEntity(172U);
    msg.x = 0.12801875862767775;
    msg.y = 0.9390829382039579;
    msg.z = 0.7760924223788007;
    msg.vx = 0.8480468572645106;
    msg.vy = 0.32604810161941233;
    msg.vz = 0.39183448515779506;
    msg.ax = 0.6673248727482405;
    msg.ay = 0.9508950652696809;
    msg.az = 0.9775548221842681;
    msg.flags = 13120U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.7448287945071029);
    msg.setSource(16405U);
    msg.setSourceEntity(205U);
    msg.setDestination(8015U);
    msg.setDestinationEntity(243U);
    msg.value = 0.828445409950017;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.36010312183438653);
    msg.setSource(5431U);
    msg.setSourceEntity(131U);
    msg.setDestination(318U);
    msg.setDestinationEntity(195U);
    msg.value = 0.6656633799751787;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.11999449746149682);
    msg.setSource(37151U);
    msg.setSourceEntity(52U);
    msg.setDestination(29509U);
    msg.setDestinationEntity(61U);
    msg.value = 0.6190737800203981;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.2864548098157548);
    msg.setSource(29419U);
    msg.setSourceEntity(25U);
    msg.setDestination(44704U);
    msg.setDestinationEntity(111U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 255012115U;
    tmp_msg_0.start_lat = 0.7436592939247153;
    tmp_msg_0.start_lon = 0.4987102135438082;
    tmp_msg_0.start_z = 0.805298947958272;
    tmp_msg_0.start_z_units = 116U;
    tmp_msg_0.end_lat = 0.02748448264444081;
    tmp_msg_0.end_lon = 0.07866965970969608;
    tmp_msg_0.end_z = 0.5803888882808453;
    tmp_msg_0.end_z_units = 229U;
    tmp_msg_0.speed = 0.5160059235525912;
    tmp_msg_0.speed_units = 72U;
    tmp_msg_0.lradius = 0.6520974585490417;
    tmp_msg_0.flags = 88U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.3534787904512178);
    msg.setSource(199U);
    msg.setSourceEntity(236U);
    msg.setDestination(28659U);
    msg.setDestinationEntity(124U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 4136645594U;
    tmp_msg_0.start_lat = 0.38156643893463627;
    tmp_msg_0.start_lon = 0.9413488204604308;
    tmp_msg_0.start_z = 0.8325732577452174;
    tmp_msg_0.start_z_units = 113U;
    tmp_msg_0.end_lat = 0.7190103207567721;
    tmp_msg_0.end_lon = 0.6500273207860705;
    tmp_msg_0.end_z = 0.6799552009401805;
    tmp_msg_0.end_z_units = 121U;
    tmp_msg_0.speed = 0.6008638910731211;
    tmp_msg_0.speed_units = 208U;
    tmp_msg_0.lradius = 0.6986584080416325;
    tmp_msg_0.flags = 22U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.9701927574527845);
    msg.setSource(41467U);
    msg.setSourceEntity(236U);
    msg.setDestination(48567U);
    msg.setDestinationEntity(253U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2875417368U;
    tmp_msg_0.start_lat = 0.33050433180958216;
    tmp_msg_0.start_lon = 0.48863052395275697;
    tmp_msg_0.start_z = 0.6673081688571261;
    tmp_msg_0.start_z_units = 213U;
    tmp_msg_0.end_lat = 0.34640340961327487;
    tmp_msg_0.end_lon = 0.9933857082863669;
    tmp_msg_0.end_z = 0.4133825350748562;
    tmp_msg_0.end_z_units = 33U;
    tmp_msg_0.speed = 0.7390215372688473;
    tmp_msg_0.speed_units = 155U;
    tmp_msg_0.lradius = 0.7158078164272464;
    tmp_msg_0.flags = 19U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.3986539782539291);
    msg.setSource(48535U);
    msg.setSourceEntity(90U);
    msg.setDestination(46806U);
    msg.setDestinationEntity(128U);
    msg.timeout = 14954U;
    msg.lat = 0.9144862747754234;
    msg.lon = 0.6701353282493181;
    msg.z = 0.3944121194567244;
    msg.z_units = 12U;
    msg.speed = 0.8511237602557935;
    msg.speed_units = 251U;
    msg.roll = 0.5666449409193826;
    msg.pitch = 0.6499204643609171;
    msg.yaw = 0.22163235763387834;
    msg.custom.assign("HFFUFBPNAMCBWCYAZNW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.40108812573135066);
    msg.setSource(24706U);
    msg.setSourceEntity(133U);
    msg.setDestination(53354U);
    msg.setDestinationEntity(94U);
    msg.timeout = 59814U;
    msg.lat = 0.19709009482639772;
    msg.lon = 0.5128376712470164;
    msg.z = 0.758144017922767;
    msg.z_units = 65U;
    msg.speed = 0.4469121553570844;
    msg.speed_units = 233U;
    msg.roll = 0.5265928661788167;
    msg.pitch = 0.8311942822600038;
    msg.yaw = 0.32412967614593;
    msg.custom.assign("NZLJQJRMQSCGNKPIXHGRZOLXVAVSVQCINWOETFAOGOMJTGHKQWWUKKXMEZLWMFYXBNEAMIPSYQGUVAAHPWVDDJONRXPVOHBLXZUUGFZAIPMQAMUSRCBXLEQBYRNGPDNPEHMEZJUYGWLHFYBRNCISJGMUPTLDFMVXEWXUVWZKKTOOBDKLVVREJCFBOATJEEKCQQSOIYCRBFYSSDIXYFZDCHBF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.06705785015172283);
    msg.setSource(47792U);
    msg.setSourceEntity(153U);
    msg.setDestination(32959U);
    msg.setDestinationEntity(127U);
    msg.timeout = 46494U;
    msg.lat = 0.19479794599489264;
    msg.lon = 0.573618510588821;
    msg.z = 0.43316242570607344;
    msg.z_units = 86U;
    msg.speed = 0.30142382386041056;
    msg.speed_units = 253U;
    msg.roll = 0.19104114993235077;
    msg.pitch = 0.6127595322925012;
    msg.yaw = 0.8188132332495807;
    msg.custom.assign("TFHQLUMQGHIYWCBHECKRGCIAYRDQXQRAYWBORSLAZNDDVZQUGMXGFWMDBUPZSRTPOKCSJNFVSHTSCUJKAYPCSOGUVDBPIABDORLFOZECPBNNRKUWHLPCEEWYLZQRHZSNNQXLVNVFXTMGWVJWBLIMAPYKOUOJRWPIO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.847309502836474);
    msg.setSource(41044U);
    msg.setSourceEntity(95U);
    msg.setDestination(39057U);
    msg.setDestinationEntity(142U);
    msg.timeout = 30361U;
    msg.lat = 0.6346403497751919;
    msg.lon = 0.9879639835991556;
    msg.z = 0.0016984259979223593;
    msg.z_units = 198U;
    msg.speed = 0.15193894587182133;
    msg.speed_units = 13U;
    msg.duration = 48857U;
    msg.radius = 0.9994009144062529;
    msg.flags = 221U;
    msg.custom.assign("RZMPLATEAQZRKMPRMFMBLGTNHJZDFAPWAQDTSUYEVSGGYUXYGJOYFBVOJMQOKUAQMGCJSSUPKTRXDRFVCETQWKHREWBGZKEWSYNV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.8356569178950158);
    msg.setSource(46847U);
    msg.setSourceEntity(141U);
    msg.setDestination(17495U);
    msg.setDestinationEntity(180U);
    msg.timeout = 44256U;
    msg.lat = 0.01324016360888336;
    msg.lon = 0.5326259389867436;
    msg.z = 0.4851140701883013;
    msg.z_units = 32U;
    msg.speed = 0.3390883042605506;
    msg.speed_units = 174U;
    msg.duration = 21580U;
    msg.radius = 0.09261616561825281;
    msg.flags = 240U;
    msg.custom.assign("RNHWXIZEHWKONSTKBVHJSRCHQDWMEOUHNAOGMGGDPZMTYRYIEQIYWUZVFUNGYWNZOXFSFDCPRETMMPLJJMGYHBKZZXTFMRTCSGZOZBTKLIPDUXNSDKSBQMIBDIJPRCACWWEOVUKRHFLGBXXKQAKXOBQSJUURRGQUZNACSCQVTUAADYJIVPJWYPILLKAMKTNAYAJQFMLFOSDEGQQWHGCD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.6348063997476148);
    msg.setSource(63419U);
    msg.setSourceEntity(131U);
    msg.setDestination(13114U);
    msg.setDestinationEntity(250U);
    msg.timeout = 54971U;
    msg.lat = 0.6949118389598964;
    msg.lon = 0.19899422011694845;
    msg.z = 0.650301696248546;
    msg.z_units = 0U;
    msg.speed = 0.44281069705389153;
    msg.speed_units = 97U;
    msg.duration = 18618U;
    msg.radius = 0.015021195206799898;
    msg.flags = 172U;
    msg.custom.assign("GZYVOUDBHBWSELECMTVVDSYNIRKRTXOITFZMDOQBAGKMYPYUEZPBKVYZDQHHXOTDESLJOPVYEDGNYSZPVINNPTWLIOXSXBNMWKX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.05596321699337736);
    msg.setSource(13017U);
    msg.setSourceEntity(165U);
    msg.setDestination(25143U);
    msg.setDestinationEntity(176U);
    msg.custom.assign("SZILGKYIRSXNPSKLAYAPSVAJUGICHCMROMHTULCVMSZAGQHUGXUQHXDDOQFJKAEYABLUDNOOZZIDBETKBNGKCXZQETEDVGBRGQVGIAJLXBFTYDQMEZZGOWICCRBOXRPNHGLTUVN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.7240741601099726);
    msg.setSource(49156U);
    msg.setSourceEntity(64U);
    msg.setDestination(7866U);
    msg.setDestinationEntity(76U);
    msg.custom.assign("YITSCMNANWIXVVDAJQJLHOBUPYCDDZQBKLQDQOSUCNXLWNGXXRZNUEVMHHQMOAYECGQWLXMSVAUTJFZMFTAQDKOETOCYHRBNJZLJFWMLBZOPBHZRAXFQKLAUARDXLRCUFSTFGBQHUGXMFLVKOTSDZONSEIYSIYKIEJPBKAWXERFRGLVISYUGZMRFSHRENIPUUKCWDPNYTOITBKBJKVEXPSPZWHWVJZWGIHGVCPEMQODPMRKFHITDJJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.7869922066328369);
    msg.setSource(5291U);
    msg.setSourceEntity(143U);
    msg.setDestination(22998U);
    msg.setDestinationEntity(208U);
    msg.custom.assign("JMFJPYALZAQQONRNFIVHOESOFWORUPEVVDNYEWJLAUKWIOXROSBCBZHZNIHTITXBSRZJEUSXLDWPMBQUZSMRMVITJEFUQCRDKKIGERQYKQIBJVPLFRCTMUSKEDJUNQKWWBMPIZS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.32976376044450895);
    msg.setSource(58569U);
    msg.setSourceEntity(217U);
    msg.setDestination(36951U);
    msg.setDestinationEntity(58U);
    msg.timeout = 35766U;
    msg.lat = 0.891626876640741;
    msg.lon = 0.9895910023851942;
    msg.z = 0.4387425620971188;
    msg.z_units = 166U;
    msg.duration = 30876U;
    msg.speed = 0.6531006317036328;
    msg.speed_units = 176U;
    msg.type = 189U;
    msg.radius = 0.11335114871987095;
    msg.length = 0.4379089471873281;
    msg.bearing = 0.24888930120066166;
    msg.direction = 146U;
    msg.custom.assign("YBFFSKJMJKCRIBPQRMNELHYCISHUVRHGDJLIHPCLGXYCATXRXGUYEQPEEKRNSPOJKXNDPZXSYQCHY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.7662253745466081);
    msg.setSource(34509U);
    msg.setSourceEntity(239U);
    msg.setDestination(5793U);
    msg.setDestinationEntity(91U);
    msg.timeout = 64427U;
    msg.lat = 0.7786567697729238;
    msg.lon = 0.8395529613551224;
    msg.z = 0.3538295164241948;
    msg.z_units = 2U;
    msg.duration = 43502U;
    msg.speed = 0.8727328856322052;
    msg.speed_units = 247U;
    msg.type = 91U;
    msg.radius = 0.7665899792401988;
    msg.length = 0.9542343361826743;
    msg.bearing = 0.8309291469440023;
    msg.direction = 137U;
    msg.custom.assign("HEDUBMLOJYMTIQOGUVZCKZRGIHZWTHIMRXSFRVJQWRCINKEBFWKVTDUEJDCMWLHAXEEVXNAPUAYCLXRYKOVGGQEBYBAZCCUQSENJIVANPSGMMTDQDDICHQITRLMCUVCZLBAWGEXOJOUNJNQMTWWOZDOXJHNDFFIBKYSKGPPPBNYATLBTXRLEXFYKPFLCSRJAHFPXQTUMRUVEUPVFYFJRNPKISKTAQWYGDIWKLZZBHN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.9172729923065865);
    msg.setSource(60220U);
    msg.setSourceEntity(14U);
    msg.setDestination(63324U);
    msg.setDestinationEntity(116U);
    msg.timeout = 36751U;
    msg.lat = 0.7269166469179821;
    msg.lon = 0.351277251095616;
    msg.z = 0.078231289267093;
    msg.z_units = 206U;
    msg.duration = 42842U;
    msg.speed = 0.9838940011404106;
    msg.speed_units = 118U;
    msg.type = 153U;
    msg.radius = 0.11614899614399965;
    msg.length = 0.6412063258784962;
    msg.bearing = 0.6607892119871229;
    msg.direction = 187U;
    msg.custom.assign("AMFCNGYJLHUXUZXJXSUALBNTFAPZVTWVRPOQJYI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.02636497446418473);
    msg.setSource(26560U);
    msg.setSourceEntity(195U);
    msg.setDestination(12162U);
    msg.setDestinationEntity(124U);
    msg.duration = 14946U;
    msg.custom.assign("WYWFXEQAYHXZTYWPETRMGYBFXKWGARLYNXKWVFTBQKNA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.29176881838907875);
    msg.setSource(44184U);
    msg.setSourceEntity(76U);
    msg.setDestination(41432U);
    msg.setDestinationEntity(140U);
    msg.duration = 12091U;
    msg.custom.assign("LVKKIPLJUMALUBXFETJVRTHMLOIVGSXIYWEKGWUJZXKEMWPFCSPVOMDSHHTDWPOOUANMRCXEVZBLJFAXCGRYVSQBHKCXWUROSNMGBEZQWRPHKRDUJQJWZCQKZGBSSDBQNYNVHJSXABKZXILORRKMPXGCEUYVDJYETHIQSIMZTNQGAWIDODAAILEZNYTNVIHDXTBWAGNARJBTEVC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.6809554066720824);
    msg.setSource(38143U);
    msg.setSourceEntity(12U);
    msg.setDestination(55386U);
    msg.setDestinationEntity(121U);
    msg.duration = 1860U;
    msg.custom.assign("MRVESSVVFQATDCNZLGEPMZJULNGTUBVLPBNFSDARJISQCTPFJJJLJWNPOGTXBSUCUIRYKKIKYUJISQPNWPKMIOZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.9804896117357242);
    msg.setSource(5923U);
    msg.setSourceEntity(157U);
    msg.setDestination(58034U);
    msg.setDestinationEntity(95U);
    IMC::DesiredRoll tmp_msg_0;
    tmp_msg_0.value = 0.1653935348324178;
    msg.control.set(tmp_msg_0);
    msg.duration = 21567U;
    msg.custom.assign("SQAXEWMBRJEFSVPHRYEMOCZAZPKQGPYDMNQTLUONJFMFTNXINYWYUKVVLONFSRKSAGOZXNGJPBVDYLYABCHPKKZDLEUEPQRTQGQNCVPSAOZCGSJXCOSBJWHMHHJNIUIMDDMVIRSWWBSYMUHR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.4639629151543657);
    msg.setSource(25625U);
    msg.setSourceEntity(22U);
    msg.setDestination(38888U);
    msg.setDestinationEntity(162U);
    IMC::DesiredHeading tmp_msg_0;
    tmp_msg_0.value = 0.46756016751265916;
    tmp_msg_0.off = 0.486547571889017;
    msg.control.set(tmp_msg_0);
    msg.duration = 65256U;
    msg.custom.assign("SCVJEGNOGIDWGVZDMMXHLBWZFYCIEOUJHCLADRQCPLXWMGDUHGLGLYCAEZYUEJVAQHPKDXHWKMWASAZQUETSODSOTZSKMUVETNKTJYTIBBAYTWYRPXFKCBEVPJXVABFUTCZGIRIZLVMHKD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.9717228512123038);
    msg.setSource(48383U);
    msg.setSourceEntity(117U);
    msg.setDestination(12979U);
    msg.setDestinationEntity(206U);
    IMC::DesiredPitch tmp_msg_0;
    tmp_msg_0.value = 0.6655644285520926;
    msg.control.set(tmp_msg_0);
    msg.duration = 4126U;
    msg.custom.assign("KNVJIOBAZVCKZECLGCYEVUUIDCOIPUHWKHSRXUASKTZDPVUTJQMUYXUQGNMTVSJIMIMAAKVENECWNOHAPOBXOSHRVSMATETPYGXJJQFSNFYTJUPBESBNOFOPWLICGALRKJRKTWYDYQMKIULNQLVMWIQFJXXTJYRAGDTKZDBRISRBBBFLLHEIHZAQGSNPGU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.3664652042808727);
    msg.setSource(55883U);
    msg.setSourceEntity(240U);
    msg.setDestination(7987U);
    msg.setDestinationEntity(199U);
    msg.timeout = 19943U;
    msg.lat = 0.7259157653822409;
    msg.lon = 0.3323616447394122;
    msg.z = 0.2006410047950704;
    msg.z_units = 30U;
    msg.speed = 0.5480678166460459;
    msg.speed_units = 226U;
    msg.bearing = 0.41923254612820726;
    msg.cross_angle = 0.1773121553828252;
    msg.width = 0.8763997532442495;
    msg.length = 0.01209470556191039;
    msg.hstep = 0.4696563438410436;
    msg.coff = 24U;
    msg.alternation = 9U;
    msg.flags = 102U;
    msg.custom.assign("JAADMHXAEBFGMFBURKEONOECZXFYZXCVWVJVRFULWWKSGILMCGIHDOAHTZQXDFBHSGJRCTISQFDSDVOZYKORVPSMIIBVKKXNQQHPQBXIRDRJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.7490130681192667);
    msg.setSource(20476U);
    msg.setSourceEntity(95U);
    msg.setDestination(13957U);
    msg.setDestinationEntity(126U);
    msg.timeout = 26138U;
    msg.lat = 0.2419694539091488;
    msg.lon = 0.20902031794031029;
    msg.z = 0.9122484536151976;
    msg.z_units = 47U;
    msg.speed = 0.8481934959272489;
    msg.speed_units = 196U;
    msg.bearing = 0.7667908816174693;
    msg.cross_angle = 0.7467960566705802;
    msg.width = 0.004516069888236829;
    msg.length = 0.828252941649801;
    msg.hstep = 0.8429569157422343;
    msg.coff = 91U;
    msg.alternation = 254U;
    msg.flags = 105U;
    msg.custom.assign("WBDLPZSYDLEXMUDLAFWVJSGOPBVKXLJICTDOGSMVYVZZKTUPOIHCIYVZMQPUQNAVGNFHSSJNKJYMPSIVLN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.389279732385285);
    msg.setSource(55494U);
    msg.setSourceEntity(98U);
    msg.setDestination(10622U);
    msg.setDestinationEntity(68U);
    msg.timeout = 59446U;
    msg.lat = 0.8480583883324152;
    msg.lon = 0.5045458752723048;
    msg.z = 0.40395461668611565;
    msg.z_units = 166U;
    msg.speed = 0.33626824006204104;
    msg.speed_units = 199U;
    msg.bearing = 0.8412675314075649;
    msg.cross_angle = 0.4885492709655015;
    msg.width = 0.8642058295382232;
    msg.length = 0.6571047744478856;
    msg.hstep = 0.6017764869354414;
    msg.coff = 58U;
    msg.alternation = 189U;
    msg.flags = 171U;
    msg.custom.assign("YJCFESRJGRUDQJEBTEZXSAEFGTRLQWMXVURDFLNTOITPKCFFTNVVGIVMMJEWPGPCAKCZDGGMXSZQKHMRYHFZNLIXOERSAMIKHLUEPRSMZBWCATIRRLJPHQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.912992817035035);
    msg.setSource(13587U);
    msg.setSourceEntity(152U);
    msg.setDestination(42287U);
    msg.setDestinationEntity(125U);
    msg.timeout = 9615U;
    msg.lat = 0.5019604596138425;
    msg.lon = 0.9028231977989355;
    msg.z = 0.4891344457312423;
    msg.z_units = 36U;
    msg.speed = 0.3186766616687594;
    msg.speed_units = 122U;
    msg.custom.assign("UNNGTXPXSGKCKKPXWLUAALHVNDEELMYZMZMJHBKYBOD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.924152283330927);
    msg.setSource(21899U);
    msg.setSourceEntity(103U);
    msg.setDestination(64725U);
    msg.setDestinationEntity(154U);
    msg.timeout = 57694U;
    msg.lat = 0.9247100383323432;
    msg.lon = 0.7706677126563469;
    msg.z = 0.08579232348970067;
    msg.z_units = 65U;
    msg.speed = 0.5989055359495324;
    msg.speed_units = 250U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.9101490005728194;
    tmp_msg_0.y = 0.3155507169534385;
    tmp_msg_0.z = 0.39605724747643833;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("GSWAGEATZEPFZFXJBEMOXJYETQXDZDOEZPMYQHXOLAROOEWVNHDNFDPSMRBTQXYWMOCLNTLWUHVAKNJRLCGRFBAFTQESUZMLRAVHZMYHHUSXPBIBDIKPKV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.4334183510232562);
    msg.setSource(49598U);
    msg.setSourceEntity(148U);
    msg.setDestination(40955U);
    msg.setDestinationEntity(113U);
    msg.timeout = 17180U;
    msg.lat = 0.30336664460280893;
    msg.lon = 0.4401660769104301;
    msg.z = 0.5279684581671432;
    msg.z_units = 65U;
    msg.speed = 0.6566877353664906;
    msg.speed_units = 193U;
    msg.custom.assign("FCNDFPEMYCIHALYNSSNZMFLQTTDEKFLGSCJMVVPQDSFOEZMGWMUTQBIEHKOYGHHLRSXAJOAQJXMZFBRUYWRWQTRJUSCBOKMNKOIKWYFCASFXTYAINLTWWYDUDHQXZKJVKFAJEWSIWGEFNEMCVYEHZAM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.5529832456697489);
    msg.setSource(4359U);
    msg.setSourceEntity(157U);
    msg.setDestination(16520U);
    msg.setDestinationEntity(236U);
    msg.x = 0.008387708141324501;
    msg.y = 0.24501934219546362;
    msg.z = 0.998772582047997;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.5570733328272605);
    msg.setSource(62790U);
    msg.setSourceEntity(77U);
    msg.setDestination(50251U);
    msg.setDestinationEntity(14U);
    msg.x = 0.9438483210842642;
    msg.y = 0.18561407974201216;
    msg.z = 0.724243719524306;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.9850709311259609);
    msg.setSource(19548U);
    msg.setSourceEntity(208U);
    msg.setDestination(32259U);
    msg.setDestinationEntity(39U);
    msg.x = 0.9232811539639757;
    msg.y = 0.9468090543056926;
    msg.z = 0.2358254243309693;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.8499675778355503);
    msg.setSource(29899U);
    msg.setSourceEntity(174U);
    msg.setDestination(37679U);
    msg.setDestinationEntity(118U);
    msg.timeout = 47507U;
    msg.lat = 0.7248297814029108;
    msg.lon = 0.3721374745144077;
    msg.z = 0.34205429616746064;
    msg.z_units = 139U;
    msg.amplitude = 0.020991678615949638;
    msg.pitch = 0.1055799563901475;
    msg.speed = 0.29161699590574874;
    msg.speed_units = 116U;
    msg.custom.assign("WCUVDLBPCLPMLQVM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.6479566486566082);
    msg.setSource(38942U);
    msg.setSourceEntity(128U);
    msg.setDestination(22648U);
    msg.setDestinationEntity(72U);
    msg.timeout = 41271U;
    msg.lat = 0.6795485384834041;
    msg.lon = 0.8613798932134578;
    msg.z = 0.42741186944446574;
    msg.z_units = 196U;
    msg.amplitude = 0.1678098761239094;
    msg.pitch = 0.24552058401640453;
    msg.speed = 0.42492052000505454;
    msg.speed_units = 10U;
    msg.custom.assign("EOJLCTWEAFZEDOTJLPHRGZAEBLYUATRMPGKXZBJQPBDEWGFXAWSIOTAYJFMITUCJYXWKGQLLIYSOENMBBWFUYSRMKNAEVRMPFRLHGGTNDWBCLUSZTSPGCNXVJIQESKOPHWUQKOXHOKICZHPFZJXTVADDTVDZSCNYTFSBXUOVSKZHXRMMXMBIFWZCLQDYEAUNARKNGDGXVAMNPJYKISROPWHVRVHOMQJHFEVCVYCQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.700073940926422);
    msg.setSource(6627U);
    msg.setSourceEntity(22U);
    msg.setDestination(32615U);
    msg.setDestinationEntity(20U);
    msg.timeout = 24558U;
    msg.lat = 0.22135269929925994;
    msg.lon = 0.21109027482980103;
    msg.z = 0.53250106408908;
    msg.z_units = 77U;
    msg.amplitude = 0.7983644367015654;
    msg.pitch = 0.34813064573177643;
    msg.speed = 0.4433023958617728;
    msg.speed_units = 110U;
    msg.custom.assign("BGDRUKLZBNPWCVZHIUIJACKKCBFHDESSABKLJQLXLXMBOIHUXFBWBZJHMNPVLJVTYHWOAIQIDGYHFTCREDWGQYCOEDEFVPYUPJVFSUEYGTRTUOWRINEHKPXSSOYWCWEKTGWZJWMCZISSPRJXKDFOHMSAMJGNMDKUBCYAZLQIEPYLZTZTPDNURFAZS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.08646618784232374);
    msg.setSource(10998U);
    msg.setSourceEntity(61U);
    msg.setDestination(46184U);
    msg.setDestinationEntity(92U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.4530379899922561);
    msg.setSource(52088U);
    msg.setSourceEntity(224U);
    msg.setDestination(52397U);
    msg.setDestinationEntity(1U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.8666443416731788);
    msg.setSource(868U);
    msg.setSourceEntity(129U);
    msg.setDestination(61715U);
    msg.setDestinationEntity(173U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.38050300400655);
    msg.setSource(60980U);
    msg.setSourceEntity(12U);
    msg.setDestination(48418U);
    msg.setDestinationEntity(166U);
    msg.lat = 0.13259584401319957;
    msg.lon = 0.6626443171083184;
    msg.z = 0.8516039322228187;
    msg.z_units = 206U;
    msg.radius = 0.6890018149361204;
    msg.duration = 60085U;
    msg.speed = 0.35239448330782963;
    msg.speed_units = 235U;
    msg.custom.assign("WAGUNXYOGCRVWFPJYNFKUCTWRNOKESDNDHCCVEVJNAPGIAZPTTBHRIFZQEMGFLTF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.8773897275127323);
    msg.setSource(26554U);
    msg.setSourceEntity(77U);
    msg.setDestination(46465U);
    msg.setDestinationEntity(161U);
    msg.lat = 0.6864508184165601;
    msg.lon = 0.8882773574393106;
    msg.z = 0.1826282265583875;
    msg.z_units = 148U;
    msg.radius = 0.010417652969450963;
    msg.duration = 58805U;
    msg.speed = 0.6539932323264684;
    msg.speed_units = 30U;
    msg.custom.assign("YKARFVPPMANVICGTNGJZCKCVGUXUOIINSZOOCMHSROROURATDUFQLWPXECGONMSDEOHJPMHPRXKJXJQVPDESBBCHHQYQGRFCQTVZCLKAQUSVJXESHUVUCWNBRWTQFJEZZRTYFKKBPQOBWFUHDSBIWMJLBWIUIXDIMYFCKXKEHWEGGNDNRKYNUXIYLFAWAAPWGTLNDLMZYQSWZLJVAFMTLRPAVBOANYGPLZBDI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.9463880497746404);
    msg.setSource(37986U);
    msg.setSourceEntity(132U);
    msg.setDestination(57940U);
    msg.setDestinationEntity(85U);
    msg.lat = 0.6682886422412297;
    msg.lon = 0.4676030752099457;
    msg.z = 0.12853590488253996;
    msg.z_units = 172U;
    msg.radius = 0.6998815827947112;
    msg.duration = 51235U;
    msg.speed = 0.7529447881192307;
    msg.speed_units = 39U;
    msg.custom.assign("PRMSHGIYZMCQAWIVWODHIWVJEGDHKCLWLVKXXYLEPYNJZPMNDXOBFGCVGTNISHISMLQGNZLYSPHEWETQMFSKNQRVMSNJCQAARIBQAFMUAPPCOOWRIJF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.4349952326210077);
    msg.setSource(16950U);
    msg.setSourceEntity(92U);
    msg.setDestination(56808U);
    msg.setDestinationEntity(100U);
    msg.timeout = 22025U;
    msg.flags = 222U;
    msg.lat = 0.902869615328062;
    msg.lon = 0.6355787758406855;
    msg.start_z = 0.30420829363790103;
    msg.start_z_units = 223U;
    msg.end_z = 0.40899488330107825;
    msg.end_z_units = 227U;
    msg.radius = 0.21678275882801257;
    msg.speed = 0.49775008393034437;
    msg.speed_units = 243U;
    msg.custom.assign("NALJHLDNURYBDERTGOGCTSNYSYPPCIUCCEOMWXPUKWCHTRWGCVTEOXY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.5712933915339656);
    msg.setSource(10298U);
    msg.setSourceEntity(254U);
    msg.setDestination(29759U);
    msg.setDestinationEntity(130U);
    msg.timeout = 22892U;
    msg.flags = 30U;
    msg.lat = 0.2819982512278213;
    msg.lon = 0.5166286900421659;
    msg.start_z = 0.03507269438146288;
    msg.start_z_units = 116U;
    msg.end_z = 0.6809468480492757;
    msg.end_z_units = 7U;
    msg.radius = 0.200050041557715;
    msg.speed = 0.7559109374945111;
    msg.speed_units = 124U;
    msg.custom.assign("DIPMCMHPIEVXDIPWSYOBJUCGDCZWQNGBCUPLRFWJHGBDMDNKKJKWHKWBSWNFVUABEZVSIENWMLOTURQCXJOQEPOGQKCGKIWCXLJARAPOQAABSCOXTQUUOHZHWDJVXNXMMEGVVNHIYNNRLTXCT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.7299094797438068);
    msg.setSource(58833U);
    msg.setSourceEntity(242U);
    msg.setDestination(43763U);
    msg.setDestinationEntity(8U);
    msg.timeout = 55569U;
    msg.flags = 171U;
    msg.lat = 0.9613806982469237;
    msg.lon = 0.6560910295837782;
    msg.start_z = 0.7162355433273465;
    msg.start_z_units = 240U;
    msg.end_z = 0.9202731329134104;
    msg.end_z_units = 13U;
    msg.radius = 0.8045851999331948;
    msg.speed = 0.33992568130317824;
    msg.speed_units = 195U;
    msg.custom.assign("UXMTCXKJYWCVFWJDTENPDRFKARULQPVSTLZOOCUYNNZXVRIQJEMYRLCWUAVSXNRZPOHXNAGJFAOCDCFKLGYUIHJKITNHQGWRP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.493452543955889);
    msg.setSource(13549U);
    msg.setSourceEntity(55U);
    msg.setDestination(4467U);
    msg.setDestinationEntity(197U);
    msg.timeout = 7866U;
    msg.lat = 0.1281249624116736;
    msg.lon = 0.8093405571644207;
    msg.z = 0.8779209788746886;
    msg.z_units = 13U;
    msg.speed = 0.1590540574558449;
    msg.speed_units = 113U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.5762680676463586;
    tmp_msg_0.y = 0.1089144409943752;
    tmp_msg_0.z = 0.6396384041964549;
    tmp_msg_0.t = 0.2711215846853654;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("ZFGDGMNJQKDXUCDEGQUTDRWPBCQTNRZPPSGYCZSWUBDOPMPFXNZJSOEGROAIIJAFOIGAOMFUVKCKJBFKRNTIEETVMSAXDCRXMPLUASNZCELUUKCVHHQJVUGHUTQQONZLTBCSSHEERYWBLIVWZYTSTWR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.14356831904243395);
    msg.setSource(51500U);
    msg.setSourceEntity(58U);
    msg.setDestination(15292U);
    msg.setDestinationEntity(40U);
    msg.timeout = 54950U;
    msg.lat = 0.2596595309172264;
    msg.lon = 0.5225535261043278;
    msg.z = 1.3478915787623613e-05;
    msg.z_units = 104U;
    msg.speed = 0.4070536380566604;
    msg.speed_units = 190U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.06386485631550132;
    tmp_msg_0.y = 0.7858999001384313;
    tmp_msg_0.z = 0.8769994509361483;
    tmp_msg_0.t = 0.6760977436249695;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("SZEIZUUWRMNFUSGAJOMPEKHUNRIHPLVWZDWBYZJWPKXHFURULYUMWJMIFEIVYVEXFQPOVFTZCCCBDEPSUHYTPKKKCHEBRSJADYSJNMFXWZJZSRRRLDQHMWZWASYMNKKOLIXRZHCWBGWSABLTQEBMLDPAGLTOM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.6571335364572943);
    msg.setSource(62294U);
    msg.setSourceEntity(193U);
    msg.setDestination(45723U);
    msg.setDestinationEntity(138U);
    msg.timeout = 64829U;
    msg.lat = 0.41814020957688913;
    msg.lon = 0.15294219965332756;
    msg.z = 0.13572205529539527;
    msg.z_units = 21U;
    msg.speed = 0.06425322531761102;
    msg.speed_units = 198U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.9012466703292389;
    tmp_msg_0.y = 0.6853339099556602;
    tmp_msg_0.z = 0.0699098765924625;
    tmp_msg_0.t = 0.217677394933935;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("EFABCTOCQAVLAUDQBDWOGOIOPSFEGDRXTQRFGYSDSPZUIHNZBMEKNRKLGHGJZPVEJXCEYMJCMXCYJMVJXHIUZWQVKFEPXNJLZTPJUKABTQPWTLRZMWKMUSITMNLQZPKWCYOBHDEEGUEPZXLBKXKZGIYZHGS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.1680450538263285);
    msg.setSource(59192U);
    msg.setSourceEntity(187U);
    msg.setDestination(2207U);
    msg.setDestinationEntity(210U);
    msg.x = 0.5012398192147447;
    msg.y = 0.04319372328542648;
    msg.z = 6.199364080572423e-05;
    msg.t = 0.7353302283971672;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.5029284387724071);
    msg.setSource(13789U);
    msg.setSourceEntity(91U);
    msg.setDestination(65402U);
    msg.setDestinationEntity(119U);
    msg.x = 0.7029580198332013;
    msg.y = 0.4602183471536422;
    msg.z = 0.2623857325913911;
    msg.t = 0.812238722574039;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.026222389672422075);
    msg.setSource(44190U);
    msg.setSourceEntity(19U);
    msg.setDestination(9399U);
    msg.setDestinationEntity(229U);
    msg.x = 0.11842292957531053;
    msg.y = 0.029884061621054836;
    msg.z = 0.04885112517622625;
    msg.t = 0.24526476653293172;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.0807848422375338);
    msg.setSource(3087U);
    msg.setSourceEntity(163U);
    msg.setDestination(4921U);
    msg.setDestinationEntity(253U);
    msg.timeout = 14188U;
    msg.name.assign("ETHRGYVRGJMIBNUBMAFCZLAIUSZNPWEIFZAMWHCLRNVXTZOCXFWYLTHEEZPBKYBFZIGKHOUONZGKKQTAIXVYAPJDMWOXA");
    msg.custom.assign("NBFHJVZEEEWLBJFOHPCLWZLMQTBJTRCBCSRTITDPPDYRARUGRRMBLUTVVKVBOFJFKZWZWDHZSREFQCJQOBNHXKQWWQICMFSEGPAPIMLDJPEXYXYTHSMSFWSATGNWSUXGLUMGVDMTZVPXBANNURYHJOCVLLYSNUAYTMGXXOIAVAXOYVPYFHCLZGHDWQZAAWOJRSE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.01695797457958892);
    msg.setSource(16003U);
    msg.setSourceEntity(16U);
    msg.setDestination(61219U);
    msg.setDestinationEntity(137U);
    msg.timeout = 11644U;
    msg.name.assign("OZXMEGOSLPXZVEOPOEJDMYXIUMUPWDFAUGNRYIFPYYURODNRXARUMXVQOFTUCBHTBEYZNHWEZHVKWDLNSXGQDGJIWCAXEPZQJJSCCPTLJPUORMMKDFBQBWWFSGPNGFUEGTQRLTHWLATKRQBDOJTIANRQSHQXLCSVIIFLRHBTBKMKAADNBHMSISYGTCBWKGWFYXJVAQMCZEONULCVWIYKVIYJHVVDGBLCFZDTNECJZEHSRZYOMKLIX");
    msg.custom.assign("GLYAVTBOYDPLJBWIECDNLVIFCAQABDBXUUBVGJTHSHSJPSXFQPEYMQPTURENONCWUMSETFMRFFDDZIYZPQRWWCEXCQMATZROASQUBCUJMOEVGIFJKHLEILLZSEBFVMNIODYCOPVSXWGNCIHAQJPKLGRCVUWCTWXQMTJZGVXLEYIGHNIONTOFXLSQSMYXQNPEZMXWWJNRBGMFKHDUBTZDGYOPWJRHHGFYUZUKBP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.16596810489667047);
    msg.setSource(26115U);
    msg.setSourceEntity(162U);
    msg.setDestination(49151U);
    msg.setDestinationEntity(87U);
    msg.timeout = 3812U;
    msg.name.assign("PDNWCFNGZBMATHAZQNRBOVTCCWRXAMWHAGQSRKTGPIVYSFOFSHQEVJFKKBYSDBUGPPJNPVNSEXSHZFIZETHRVUHCPBONEJFJDZXZWUXLDQIXCHUHEXGOULDVMIQYVTJWQZAVLOYKPKRXKJMOPDCTGBTLZGC");
    msg.custom.assign("ESBSYDNXPRWAWLOOJJXSUZNLFWQPCJXPNFSTEIHL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.49402130580488424);
    msg.setSource(21798U);
    msg.setSourceEntity(246U);
    msg.setDestination(8493U);
    msg.setDestinationEntity(244U);
    msg.lat = 0.5726850952835935;
    msg.lon = 0.33033708243400894;
    msg.z = 0.7506897043048629;
    msg.z_units = 206U;
    msg.speed = 0.04010109889862323;
    msg.speed_units = 140U;
    msg.start_time = 0.8457114306073018;
    msg.custom.assign("ZELAPOFTIKOXPCCJANJHXNRZUDGRFZBILZLPLWRDNQKAYHROGCEXWBJEJBDUVRHOUGBNITRVYTNEGJXMVBQBLSUOXTJIOSGXCQAKTGESMPFOZWMZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.1720054741425413);
    msg.setSource(7266U);
    msg.setSourceEntity(213U);
    msg.setDestination(38287U);
    msg.setDestinationEntity(184U);
    msg.lat = 0.6575152447204196;
    msg.lon = 0.5041025247371528;
    msg.z = 0.7807130176598406;
    msg.z_units = 131U;
    msg.speed = 0.3232236729395639;
    msg.speed_units = 84U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.9684085753537988;
    tmp_msg_0.y = 0.4027783514331291;
    tmp_msg_0.z = 0.6986625048137336;
    tmp_msg_0.t = 0.6102465473449902;
    msg.points.push_back(tmp_msg_0);
    msg.start_time = 0.7338522393154142;
    msg.custom.assign("XCUXXMKPDXERSWKDWMFLXGPYPREBSCXSBRDLYEPLJYL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.24657309197987787);
    msg.setSource(36572U);
    msg.setSourceEntity(42U);
    msg.setDestination(8881U);
    msg.setDestinationEntity(160U);
    msg.lat = 0.7072815895971534;
    msg.lon = 0.5176975778753061;
    msg.z = 0.20985165368797198;
    msg.z_units = 228U;
    msg.speed = 0.40544985328741867;
    msg.speed_units = 171U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 25223U;
    tmp_msg_0.off_x = 0.43090789651664696;
    tmp_msg_0.off_y = 0.8561210076650457;
    tmp_msg_0.off_z = 0.9710546549181847;
    msg.participants.push_back(tmp_msg_0);
    msg.start_time = 0.2637725371383295;
    msg.custom.assign("LQXYMLFBMBPJGPMAGYSEUFHSQJNOXDEWJJCISVNVTAHPLXSWPOKIMZXFTDYMBKT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.3326504253734862);
    msg.setSource(56821U);
    msg.setSourceEntity(93U);
    msg.setDestination(30669U);
    msg.setDestinationEntity(149U);
    msg.vid = 34404U;
    msg.off_x = 0.7801149252983944;
    msg.off_y = 0.05012623380404757;
    msg.off_z = 0.1971882648014116;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.4779834775413728);
    msg.setSource(51285U);
    msg.setSourceEntity(178U);
    msg.setDestination(35031U);
    msg.setDestinationEntity(83U);
    msg.vid = 13660U;
    msg.off_x = 0.8226395005648364;
    msg.off_y = 0.05498130853095995;
    msg.off_z = 0.16800816708788902;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.6424775499457253);
    msg.setSource(49545U);
    msg.setSourceEntity(126U);
    msg.setDestination(29856U);
    msg.setDestinationEntity(47U);
    msg.vid = 20254U;
    msg.off_x = 0.047145239145034434;
    msg.off_y = 0.1340116067274374;
    msg.off_z = 0.7712490231080703;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.7656967552350263);
    msg.setSource(14698U);
    msg.setSourceEntity(190U);
    msg.setDestination(42455U);
    msg.setDestinationEntity(19U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.4991048992431335);
    msg.setSource(27157U);
    msg.setSourceEntity(57U);
    msg.setDestination(33618U);
    msg.setDestinationEntity(70U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.45592484893403273);
    msg.setSource(65098U);
    msg.setSourceEntity(192U);
    msg.setDestination(50217U);
    msg.setDestinationEntity(110U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.3832783552498257);
    msg.setSource(21418U);
    msg.setSourceEntity(98U);
    msg.setDestination(28818U);
    msg.setDestinationEntity(57U);
    msg.mid = 29702U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.5147204221844988);
    msg.setSource(27171U);
    msg.setSourceEntity(165U);
    msg.setDestination(31719U);
    msg.setDestinationEntity(95U);
    msg.mid = 65437U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.4918074409635923);
    msg.setSource(47699U);
    msg.setSourceEntity(119U);
    msg.setDestination(11245U);
    msg.setDestinationEntity(236U);
    msg.mid = 44686U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.7569134397224947);
    msg.setSource(63542U);
    msg.setSourceEntity(32U);
    msg.setDestination(35364U);
    msg.setDestinationEntity(78U);
    msg.state = 28U;
    msg.eta = 1023U;
    msg.info.assign("YUZAMWBYKMAPEILDIOHITRTQRQNSVNDIHVJNCEXGJCJKLEZJWBBFBFDGSHWMZCKTZDGMOUVZQTEWEXSJLMHIONFJTOVSBYQPYKHBLKLFNWUFQVZBIPFRNAKQRVVYPRPACOYTXSYAXOALJRRGPXLWNBXXLKDYWSIWPDALXVOGAGKPUHHQQUDJZOYCUZBUQAZNONSEPDIECTVJMUMWEHRILXUW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.5491415660621195);
    msg.setSource(2795U);
    msg.setSourceEntity(80U);
    msg.setDestination(13729U);
    msg.setDestinationEntity(204U);
    msg.state = 117U;
    msg.eta = 34679U;
    msg.info.assign("GBZAPZICDC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.039095991583312895);
    msg.setSource(28662U);
    msg.setSourceEntity(52U);
    msg.setDestination(46459U);
    msg.setDestinationEntity(46U);
    msg.state = 222U;
    msg.eta = 23115U;
    msg.info.assign("HAIPWUUGSMEPJOHQVXKTLYXYIHQQAHHODRFYLXLROCDXGNCFABZBCJVRQQNEXESSUNJITOCLZBKWMJMUUFZUGWGIYZRKNSSBIWKKOIDVWFUAYNWNIADMWRVDORAXNRMDIBVLZXSJTEVJDSRQYGMKLLZMANSTQPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.12789764922298896);
    msg.setSource(33170U);
    msg.setSourceEntity(159U);
    msg.setDestination(30281U);
    msg.setDestinationEntity(141U);
    msg.system = 1306U;
    msg.duration = 2762U;
    msg.speed = 0.3030846499056674;
    msg.speed_units = 30U;
    msg.x = 0.6718879633925102;
    msg.y = 0.21128945763942808;
    msg.z = 0.9412256358022543;
    msg.z_units = 254U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.1392549949779981);
    msg.setSource(12438U);
    msg.setSourceEntity(26U);
    msg.setDestination(1082U);
    msg.setDestinationEntity(222U);
    msg.system = 18212U;
    msg.duration = 60001U;
    msg.speed = 0.4090707700026972;
    msg.speed_units = 148U;
    msg.x = 0.7004011570240702;
    msg.y = 0.739380963383197;
    msg.z = 0.5238631575469852;
    msg.z_units = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.7194539844909935);
    msg.setSource(61585U);
    msg.setSourceEntity(206U);
    msg.setDestination(63915U);
    msg.setDestinationEntity(30U);
    msg.system = 12287U;
    msg.duration = 53893U;
    msg.speed = 0.7083148791613584;
    msg.speed_units = 72U;
    msg.x = 0.20304972616514494;
    msg.y = 0.6412906381550337;
    msg.z = 0.6150607511112901;
    msg.z_units = 211U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.8358415721238566);
    msg.setSource(25316U);
    msg.setSourceEntity(80U);
    msg.setDestination(33459U);
    msg.setDestinationEntity(102U);
    msg.lat = 0.6475795820788304;
    msg.lon = 0.7054052973829581;
    msg.speed = 0.4539521334563974;
    msg.speed_units = 5U;
    msg.duration = 11918U;
    msg.sys_a = 49814U;
    msg.sys_b = 46991U;
    msg.move_threshold = 0.8019004496839683;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.20750774464106891);
    msg.setSource(59901U);
    msg.setSourceEntity(216U);
    msg.setDestination(30993U);
    msg.setDestinationEntity(6U);
    msg.lat = 0.625845920663722;
    msg.lon = 0.5010863691611419;
    msg.speed = 0.6290416944914248;
    msg.speed_units = 108U;
    msg.duration = 43455U;
    msg.sys_a = 24419U;
    msg.sys_b = 53926U;
    msg.move_threshold = 0.7743726998496746;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.3364818504809399);
    msg.setSource(8216U);
    msg.setSourceEntity(110U);
    msg.setDestination(24532U);
    msg.setDestinationEntity(148U);
    msg.lat = 0.3714016056996231;
    msg.lon = 0.33519570021591927;
    msg.speed = 0.22094499680979507;
    msg.speed_units = 153U;
    msg.duration = 3167U;
    msg.sys_a = 19713U;
    msg.sys_b = 20049U;
    msg.move_threshold = 0.43424204315069537;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.32912544107636477);
    msg.setSource(4300U);
    msg.setSourceEntity(253U);
    msg.setDestination(16840U);
    msg.setDestinationEntity(211U);
    msg.lat = 0.029648965628610635;
    msg.lon = 0.21376082725723056;
    msg.z = 0.947102676902979;
    msg.z_units = 242U;
    msg.speed = 0.8020904043293439;
    msg.speed_units = 48U;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.23430252936489682;
    tmp_msg_0.lon = 0.8013034483480287;
    msg.polygon.push_back(tmp_msg_0);
    msg.custom.assign("PWMBHGBAUMXIONWRBBNQLPPSUKVQDWFEIYNGRKPBRLERSHVDTXXGBYHKCLQZHJMUFQMCOPFBSNAYOTVYHPYNAFSJEJSWGAJBLNMMTESLXPEIWDJQVTHHDKTKUDYVZLFAYRDEZVTEAQWDCGXCXGQUCWSFPNCGVHJYCHOLXZOITOQIMAKVFOCAPB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.18533422577213188);
    msg.setSource(8789U);
    msg.setSourceEntity(234U);
    msg.setDestination(1301U);
    msg.setDestinationEntity(16U);
    msg.lat = 0.5686155288109397;
    msg.lon = 0.3730346588828791;
    msg.z = 0.650405886390693;
    msg.z_units = 24U;
    msg.speed = 0.5138742289199356;
    msg.speed_units = 237U;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.954221448769538;
    tmp_msg_0.lon = 0.702181984480176;
    msg.polygon.push_back(tmp_msg_0);
    msg.custom.assign("POUCVABMLSADXPHJULLWZRIJEBZODJFGHJFMIDETHBUFCDTHFXPWBNYWQIRWLLGZZCOOESCTMQKQQOBOYMQAMDKPQGVYWSBYUXAMB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.921005843824045);
    msg.setSource(59172U);
    msg.setSourceEntity(89U);
    msg.setDestination(39323U);
    msg.setDestinationEntity(236U);
    msg.lat = 0.17060880509468856;
    msg.lon = 0.866547496664797;
    msg.z = 0.8595556876662974;
    msg.z_units = 191U;
    msg.speed = 0.43373452501725707;
    msg.speed_units = 115U;
    msg.custom.assign("LJRSHWIXWFVHFHRITFGPCJYZCACBBQCJMDSKPQYPKDXPUFQLMIOPSZQZDZURIGQKFNJBMNHWELJEMFPMNYQIXOUWTIOFEODEUAOSXHXWKNPNKLTOPRYIIVVBVYLJTTSZXEFVHADYBVSRLRAMOCGPDKQWOCUOMBNAEJMLNHCQANWACVGVTLBBSIIZLDUKZXSNKAXEWRMYZULRCAGQHGJCFWEKTGUSY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.5207487649289925);
    msg.setSource(6023U);
    msg.setSourceEntity(24U);
    msg.setDestination(2503U);
    msg.setDestinationEntity(99U);
    msg.lat = 0.1353981623793138;
    msg.lon = 0.06203241050174557;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.4431284140487548);
    msg.setSource(41018U);
    msg.setSourceEntity(160U);
    msg.setDestination(45143U);
    msg.setDestinationEntity(56U);
    msg.lat = 0.7853882576053193;
    msg.lon = 0.7141597306065338;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.5797948171299961);
    msg.setSource(58375U);
    msg.setSourceEntity(35U);
    msg.setDestination(1111U);
    msg.setDestinationEntity(184U);
    msg.lat = 0.38654738538068756;
    msg.lon = 0.9275845860813863;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.7382397388857784);
    msg.setSource(59163U);
    msg.setSourceEntity(90U);
    msg.setDestination(30741U);
    msg.setDestinationEntity(155U);
    msg.timeout = 23962U;
    msg.lat = 0.6872517896247992;
    msg.lon = 0.7907669209510918;
    msg.z = 0.9705123504271082;
    msg.z_units = 65U;
    msg.pitch = 0.7608553190976972;
    msg.amplitude = 0.07037372029658084;
    msg.duration = 35450U;
    msg.speed = 0.6840260175450604;
    msg.speed_units = 251U;
    msg.radius = 0.5222329560342966;
    msg.direction = 113U;
    msg.custom.assign("GIXDYUZQKTNDHHGMRXFBOMDKRBSWHJPSGBEUIJSMVUVXPOOOPVIHWRJLXFTJHNQLMCEIOGKYCOKCMJWYCIZFYRPQAHEYTCDLCMGQEYPATUASXWUJZPHLRDAAYVVNUSGJAFANPQWBRKKTCOZABWSUFXOZIPAEWFQMI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.04375756756725979);
    msg.setSource(45183U);
    msg.setSourceEntity(24U);
    msg.setDestination(29451U);
    msg.setDestinationEntity(74U);
    msg.timeout = 49728U;
    msg.lat = 0.0007281698147966198;
    msg.lon = 0.1420365238083916;
    msg.z = 0.03612880009178698;
    msg.z_units = 104U;
    msg.pitch = 0.07579208525633552;
    msg.amplitude = 0.6707430460689003;
    msg.duration = 36773U;
    msg.speed = 0.5748379099704123;
    msg.speed_units = 17U;
    msg.radius = 0.04569895104605837;
    msg.direction = 62U;
    msg.custom.assign("GYWNKNHNAFTZXFRSJEERUAFRWPENKVOBDYNTHWDQVGAGQSXEWQOCLYIXQAIGKRFQLIRCATQDYDHJAEKWYXPDTUPBTMKHGGTPIPWLOJFGSDCWHMHYHRGDFCUIPONODIVXNPFLUNCZCZBAJUYLXCNLPJVBVMROUQJFAZEIMZQW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.7363879165589303);
    msg.setSource(58447U);
    msg.setSourceEntity(110U);
    msg.setDestination(56746U);
    msg.setDestinationEntity(49U);
    msg.timeout = 55508U;
    msg.lat = 0.4734430122075596;
    msg.lon = 0.41833189904738877;
    msg.z = 0.23678183623932025;
    msg.z_units = 50U;
    msg.pitch = 0.20124805546000912;
    msg.amplitude = 0.4912374372045415;
    msg.duration = 36783U;
    msg.speed = 0.06761948236617332;
    msg.speed_units = 226U;
    msg.radius = 0.40852704501083026;
    msg.direction = 201U;
    msg.custom.assign("VBDRQCSAIDFDKYMBAETOVUVPXTPRWKZGPQMKRNXDCYBGWBJRNACE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.995392721674405);
    msg.setSource(11464U);
    msg.setSourceEntity(63U);
    msg.setDestination(38356U);
    msg.setDestinationEntity(76U);
    msg.formation_name.assign("KKGMEGODHAXQRWMHURAFGDSAWGQFXWDIFVQ");
    msg.reference_frame = 132U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 47067U;
    tmp_msg_0.off_x = 0.5431355491928459;
    tmp_msg_0.off_y = 0.8057747762122773;
    tmp_msg_0.off_z = 0.8374253876302757;
    msg.participants.push_back(tmp_msg_0);
    msg.custom.assign("CPIYUSTCALLGJWCFSFZPMYDAXYAAVFNBYCJMOJVHWTDXYNRZDRADPAHT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.6375601638972301);
    msg.setSource(19752U);
    msg.setSourceEntity(77U);
    msg.setDestination(27019U);
    msg.setDestinationEntity(55U);
    msg.formation_name.assign("RKVDCIOJWDUYOZFSYPCNRQPXVTJBUKNHSMUDFEJMAHXYUSXMHXKMAPEBUZRMVVQLBIRC");
    msg.reference_frame = 129U;
    msg.custom.assign("VOZGVYFULTSFONMKZRVSXAAWORPJPTUKLECNONOGHSRGABNETPLZHEXJVCGCIVTGKUWBQQBDDMQTKTYAKGVQDLCYKRDRITIM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.035114102930850266);
    msg.setSource(26547U);
    msg.setSourceEntity(15U);
    msg.setDestination(29708U);
    msg.setDestinationEntity(82U);
    msg.formation_name.assign("SKUFSMLGHGMCUBY");
    msg.reference_frame = 13U;
    msg.custom.assign("HRCIOSIHVZWKOLWNLTUS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.597613975404264);
    msg.setSource(43964U);
    msg.setSourceEntity(238U);
    msg.setDestination(15304U);
    msg.setDestinationEntity(89U);
    msg.group_name.assign("CJIHDWOTDTTNGDHUXNISTFRXPDJEOLNTJYQHHSZXRUFKYVHUIOZFMFNEVBASWEFTNZHCAFMFLBRIZDPIEYGDLBMZBKCYAEQTAFDLYOUPNRCTAXWGKSUCPWFBNRDCVIGOYOCQXFJGLPZMGHSXICLHIRGWBDVAKPMKSLKMLVSSWWINQYCWNNEUJOQZXUVLJKYRCKIGMTQOVRDAPUEPEOAWOKXVPQXQGQZWBBSJYMMYHUSLAEXPAGBRZMVTJZKB");
    msg.formation_name.assign("VZXODRREGMKZSBRONFTCYYDUPWSZSNHQLTIMIKVPXJXMEYHZPHKPHLFRVUOECPLUBRCMGEZZIBSQUMSW");
    msg.plan_id.assign("IQRTRGDMGGYRSUKCNGJOBPRSXUWYMGPHVWBKOHRCLBSQVATXQCCRCKAEUDWBHTIRWNFIDBETTQTOEZXJRJLJYBZAMIPHQKWFXQVNBNTZCAHYSICZIMHMQKDVDLUYNJJTZEFGXHKMCUZZZIONWZVTLDNUYFEXEKVAIPOGWDEMAPZHPDTVWEUSXVFGPKAFLGYSXFSBOLBAXDWPCVM");
    msg.description.assign("FRZWWKHRFMTCMEKVQKOIAAXOOVWRNSEXBZAZIUSQRDIYAOLOCKNP");
    msg.leader_speed = 0.2930756489088492;
    msg.leader_bank_lim = 0.37620299110844746;
    msg.pos_sim_err_lim = 0.8130213062684244;
    msg.pos_sim_err_wrn = 0.852616561396901;
    msg.pos_sim_err_timeout = 38088U;
    msg.converg_max = 0.3348901933201618;
    msg.converg_timeout = 64385U;
    msg.comms_timeout = 59979U;
    msg.turb_lim = 0.03621679111888221;
    msg.custom.assign("QTCYSRKYNZDVIQCAOXGKEADZIRYYOGPZEI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.06161391376183589);
    msg.setSource(41685U);
    msg.setSourceEntity(201U);
    msg.setDestination(60705U);
    msg.setDestinationEntity(154U);
    msg.group_name.assign("STEJXGOEJYSLVJILMUVVNXOUJDAMKQSUSGFIZYGCOGHTFDRAPGYNFCFEFRXOWBMZHTNQKFQYROCBHPALSKNASRSBDETPHRLWLJYHHDIQOIHMEYDBMNLXBGVLPTCDEYCNZRAPQLUQEKDWGZZQBLIJTUYOXMZNDCHDCABWRZWTNZTJAKQGIVEIPWGKOQVELNFIUMXXPTSVVIU");
    msg.formation_name.assign("CZVPCWQKQVYPZCFFIWIAKCJRNQXPUDTKVHFQLVMROIKTUDIWEDXRVHSSBLUGBTYGXRUIOZHOVBYHIBIFPSAASKETAXUGBWGRYBBDOAPISNLDAEOFTYJCIJJGNTTHLQHQMHTMJWXVJSEYSXICZHRPDJLKRYJUZLBGMEOZMOGXCGQX");
    msg.plan_id.assign("BDWTFKHHODMDDOADSEIJQIYBABHCWUSNJMJNVZBYZJGOBLNWPSCIKZH");
    msg.description.assign("HWCUBTOFVJGNTHHJVAGPGXCJIYBRTFQGXRKWRDAMJUBUEKDJNOZQVBRHZIYAAENYFGKBURXZPZQOQNSTHVPWZNSOAOBLAOCMHWUSEQTZAODDIWMLPYQTBJPBKLMEMPXHDSQYUDSKLLQWZSXVSWNIGKVAUVXYSUYDMGJGCCUKMEMVPCVZICTOGAFJXDEURMTIBIEHFCLJLTJRENSXHFWCYOXZRILWNTHGYLFSOFAIKRBKMXQID");
    msg.leader_speed = 0.3077194174592467;
    msg.leader_bank_lim = 0.4776378309147552;
    msg.pos_sim_err_lim = 0.09402959632539742;
    msg.pos_sim_err_wrn = 0.9999218718057883;
    msg.pos_sim_err_timeout = 48933U;
    msg.converg_max = 0.6728495344251524;
    msg.converg_timeout = 6996U;
    msg.comms_timeout = 13593U;
    msg.turb_lim = 0.7868655567610354;
    msg.custom.assign("BIMNWXAZTQUHZOOURDJAMFRLSOKUBEZWZDFSVYNPWWVAHDGLGXBWPOWWQCMNZVIZULBKQOPQYVJXBSBNMNRXLKCSXLFBNPJYTXRNSLD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.9514220857052444);
    msg.setSource(11216U);
    msg.setSourceEntity(242U);
    msg.setDestination(57016U);
    msg.setDestinationEntity(181U);
    msg.group_name.assign("YOEHARDLXEIZPYRVJYKLHOMOQGKR");
    msg.formation_name.assign("HJLWFQFNYPMGLVGLHVIZDHGTQNGDRRMJEVTUCITXLCPMIXAWGULVUPKFZZKESHSEPIBFRSYVDXRWOOLTIAFISWCBNYQYTHAEJOMXJALMFHXOOIXZYXIJPSDDOATQETKGJVHTQHBSQUABEDRAUGEYAUNNXYUMSBVGCNVYXQTGKVQNABPMZYUMNMQSZHGKLJWCFTCCDLZAKIKUOMDFZ");
    msg.plan_id.assign("SUFHMUUKXVDWCGFPZLJNKFBWSTCYLORJUOIJDQBMVHSKGHTRFWCJJQJVCYQENBGEXRDMEXATKBDKFPOSLHXBDIQCOITIZUVAZBKPNAGSCVQXVSIFIDGKRKPLQRLTVQEHAUQAWWINOOAJPFOYLBZUIKASEZTKEROMGTQYEDMBGACRMUCYTZEUPNFMWJSYIYFZNJVIHLRXLEBPRMHG");
    msg.description.assign("PZBJHFAJRJOMQWUPOMXHHNYDTEPWNOPWDKABYNOVSBWAEBRDEYLCERDXZCGHBOBOTRHVVSICECQIGKCDLZUPSTOIBZHWZTMFIEPOVTLCOEHGLKPLSCKXJTGLUSTAQMFBUCXSWWGJAQJLNQZEVMFDXHYHDNNVQGJCDMLDRKSPVIWAYYQUFFWAM");
    msg.leader_speed = 0.9987182386858217;
    msg.leader_bank_lim = 0.7361230153802412;
    msg.pos_sim_err_lim = 0.8377221128051349;
    msg.pos_sim_err_wrn = 0.004614078157521351;
    msg.pos_sim_err_timeout = 47446U;
    msg.converg_max = 0.8507700381091547;
    msg.converg_timeout = 48160U;
    msg.comms_timeout = 23363U;
    msg.turb_lim = 0.3866335808582041;
    msg.custom.assign("OPBBKLZAUTCFMROQRYPRASNKGCQCFIQPOKOVLZECNRDHSTQUMZXZOYWZPLOVDVEBOXJJXZDYNVQNGOQGTXIHULGVJVQOPCFXIIKGYNAZJDYCILMLUNYXKTLJCLFLAMREUFKJUJTKDSXHRZHUHYWIEMNMWDPDBQEMSCXMNNDJJBLKIOHAWTAWYRMWITXWFGMVGKYW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.5388486960468097);
    msg.setSource(25756U);
    msg.setSourceEntity(14U);
    msg.setDestination(29816U);
    msg.setDestinationEntity(195U);
    msg.control_src = 5295U;
    msg.control_ent = 105U;
    msg.timeout = 0.25671428432710097;
    msg.loiter_radius = 0.10073963164393751;
    msg.altitude_interval = 0.9975972526384914;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.8988919633814068);
    msg.setSource(26854U);
    msg.setSourceEntity(14U);
    msg.setDestination(62844U);
    msg.setDestinationEntity(187U);
    msg.control_src = 62732U;
    msg.control_ent = 138U;
    msg.timeout = 0.8458694938874853;
    msg.loiter_radius = 0.5102009074439334;
    msg.altitude_interval = 0.623361711426756;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.5198152398933903);
    msg.setSource(11824U);
    msg.setSourceEntity(139U);
    msg.setDestination(46798U);
    msg.setDestinationEntity(111U);
    msg.control_src = 64397U;
    msg.control_ent = 133U;
    msg.timeout = 0.15399975052627934;
    msg.loiter_radius = 0.7346427920608923;
    msg.altitude_interval = 0.8120267614043022;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.4817405594368577);
    msg.setSource(22045U);
    msg.setSourceEntity(183U);
    msg.setDestination(22963U);
    msg.setDestinationEntity(41U);
    msg.flags = 21U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.5296937207360484;
    tmp_msg_0.speed_units = 104U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.73941747703701;
    tmp_msg_1.z_units = 248U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.276620044981176;
    msg.lon = 0.9152029795783955;
    msg.radius = 0.180033718054743;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.2021728983072677);
    msg.setSource(32727U);
    msg.setSourceEntity(230U);
    msg.setDestination(37306U);
    msg.setDestinationEntity(164U);
    msg.flags = 160U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.22484876017016397;
    tmp_msg_0.speed_units = 225U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.35352344921188306;
    tmp_msg_1.z_units = 37U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.09906915160330731;
    msg.lon = 0.5807613668625443;
    msg.radius = 0.38281981298198975;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.37162722622772215);
    msg.setSource(65350U);
    msg.setSourceEntity(96U);
    msg.setDestination(13285U);
    msg.setDestinationEntity(204U);
    msg.flags = 82U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.685660486639844;
    tmp_msg_0.speed_units = 106U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.09184977259947436;
    tmp_msg_1.z_units = 101U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.10725347070979374;
    msg.lon = 0.47356773926077067;
    msg.radius = 0.6356560766810986;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.1948174543925858);
    msg.setSource(43875U);
    msg.setSourceEntity(56U);
    msg.setDestination(41018U);
    msg.setDestinationEntity(212U);
    msg.control_src = 64930U;
    msg.control_ent = 171U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 223U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.1916981041538458;
    tmp_tmp_msg_0_0.speed_units = 79U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.640677020404053;
    tmp_tmp_msg_0_1.z_units = 12U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.9260818727107425;
    tmp_msg_0.lon = 0.5624719516433864;
    tmp_msg_0.radius = 0.7428548440317316;
    msg.reference.set(tmp_msg_0);
    msg.state = 110U;
    msg.proximity = 75U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.9801665033703746);
    msg.setSource(2459U);
    msg.setSourceEntity(117U);
    msg.setDestination(2700U);
    msg.setDestinationEntity(114U);
    msg.control_src = 31258U;
    msg.control_ent = 198U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 61U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.22463628760335586;
    tmp_tmp_msg_0_0.speed_units = 198U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.9912519719426115;
    tmp_tmp_msg_0_1.z_units = 5U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.08740676292295835;
    tmp_msg_0.lon = 0.3391830982355529;
    tmp_msg_0.radius = 0.33137639837636323;
    msg.reference.set(tmp_msg_0);
    msg.state = 157U;
    msg.proximity = 83U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.4888138576646818);
    msg.setSource(53969U);
    msg.setSourceEntity(87U);
    msg.setDestination(47227U);
    msg.setDestinationEntity(14U);
    msg.control_src = 5483U;
    msg.control_ent = 50U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 93U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.5619661291504834;
    tmp_tmp_msg_0_0.speed_units = 81U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.8298438982230452;
    tmp_tmp_msg_0_1.z_units = 101U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.7757360130732784;
    tmp_msg_0.lon = 0.3830954273780056;
    tmp_msg_0.radius = 0.17308593449076892;
    msg.reference.set(tmp_msg_0);
    msg.state = 93U;
    msg.proximity = 89U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.09842278893391454);
    msg.setSource(65033U);
    msg.setSourceEntity(144U);
    msg.setDestination(18137U);
    msg.setDestinationEntity(233U);
    msg.ax_cmd = 0.17578528282466188;
    msg.ay_cmd = 0.014025530011117393;
    msg.az_cmd = 0.3617039074613623;
    msg.ax_des = 0.9658899665873671;
    msg.ay_des = 0.9748899012061293;
    msg.az_des = 0.5089892935680218;
    msg.virt_err_x = 0.3442804626380238;
    msg.virt_err_y = 0.9361238840751638;
    msg.virt_err_z = 0.5174578276483784;
    msg.surf_fdbk_x = 0.7170929728109882;
    msg.surf_fdbk_y = 0.2904901060197117;
    msg.surf_fdbk_z = 0.06211443426122931;
    msg.surf_unkn_x = 0.6468763261043361;
    msg.surf_unkn_y = 0.7483664794574021;
    msg.surf_unkn_z = 0.9528203527090091;
    msg.ss_x = 0.9974235548216539;
    msg.ss_y = 0.13639788535558706;
    msg.ss_z = 0.8871377303795365;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("FXEHKEBOXPYZFTEWVVWQNDYLRUPWIMFWNAYNDIPLGUJOOBHLHNIWZRLCRGQTNJLNHEZBQCCFBHKVFUBSFEOIQMRSLYQJTRGCTLKHOCWXSW");
    tmp_msg_0.dist = 0.03258923627593313;
    tmp_msg_0.err = 0.9573216280377023;
    tmp_msg_0.ctrl_imp = 0.4804813275842945;
    tmp_msg_0.rel_dir_x = 0.5643390414165903;
    tmp_msg_0.rel_dir_y = 0.5300879894664916;
    tmp_msg_0.rel_dir_z = 0.12457994048786636;
    tmp_msg_0.err_x = 0.2946501336389904;
    tmp_msg_0.err_y = 0.29385925033326776;
    tmp_msg_0.err_z = 0.2966730327441208;
    tmp_msg_0.rf_err_x = 0.6105139254558378;
    tmp_msg_0.rf_err_y = 0.6152871829663482;
    tmp_msg_0.rf_err_z = 0.18267366579303224;
    tmp_msg_0.rf_err_vx = 0.5564938791782645;
    tmp_msg_0.rf_err_vy = 0.8180618985899828;
    tmp_msg_0.rf_err_vz = 0.644383424848614;
    tmp_msg_0.ss_x = 0.7668449729090998;
    tmp_msg_0.ss_y = 0.3460632714130323;
    tmp_msg_0.ss_z = 0.9815314611691727;
    tmp_msg_0.virt_err_x = 0.667036856122497;
    tmp_msg_0.virt_err_y = 0.5697069080070271;
    tmp_msg_0.virt_err_z = 0.6795100610650546;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.8442523672039016);
    msg.setSource(54347U);
    msg.setSourceEntity(153U);
    msg.setDestination(40976U);
    msg.setDestinationEntity(101U);
    msg.ax_cmd = 0.6086233625241972;
    msg.ay_cmd = 0.6299561530647693;
    msg.az_cmd = 0.5737389598481933;
    msg.ax_des = 0.3541950419518396;
    msg.ay_des = 0.8769841789274292;
    msg.az_des = 0.908820315554931;
    msg.virt_err_x = 0.3585514426200572;
    msg.virt_err_y = 0.6744203488828157;
    msg.virt_err_z = 0.32133184573308393;
    msg.surf_fdbk_x = 0.9018335325986913;
    msg.surf_fdbk_y = 0.29119961769060254;
    msg.surf_fdbk_z = 0.12484275008425205;
    msg.surf_unkn_x = 0.05062712440115946;
    msg.surf_unkn_y = 0.46925430911873134;
    msg.surf_unkn_z = 0.5303363696002561;
    msg.ss_x = 0.04897103778151535;
    msg.ss_y = 0.9957259736922643;
    msg.ss_z = 0.5259131643320759;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.7154400080706992);
    msg.setSource(38778U);
    msg.setSourceEntity(40U);
    msg.setDestination(6981U);
    msg.setDestinationEntity(208U);
    msg.ax_cmd = 0.5353894347722042;
    msg.ay_cmd = 0.5563672437355828;
    msg.az_cmd = 0.9715325495174639;
    msg.ax_des = 0.45887877634501617;
    msg.ay_des = 0.8291166674702926;
    msg.az_des = 0.9788641535377026;
    msg.virt_err_x = 0.9309936410358077;
    msg.virt_err_y = 0.0321830681604226;
    msg.virt_err_z = 0.036044074702274886;
    msg.surf_fdbk_x = 0.9527787658398504;
    msg.surf_fdbk_y = 0.20679032959825527;
    msg.surf_fdbk_z = 0.49552329887660496;
    msg.surf_unkn_x = 0.3664201292524445;
    msg.surf_unkn_y = 0.11354698660869622;
    msg.surf_unkn_z = 0.8976793763119228;
    msg.ss_x = 0.01411803313146709;
    msg.ss_y = 0.8003964180998607;
    msg.ss_z = 0.9979573487197081;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.5580022660871816);
    msg.setSource(19592U);
    msg.setSourceEntity(235U);
    msg.setDestination(63559U);
    msg.setDestinationEntity(149U);
    msg.s_id.assign("TRPUZBVWCYSUJMRJPEBCDBCRUYLRWQRFGXLJHGYCMIRVSANKPEWHUSLBTAAEXEIKNWBOBHWIDUMTVUOTRNQWKKWNNQOQIWYLOGYDPKOUFIXZGLYIZNTYDRQSFVKMVCHFPESFVETTZSDNOGOFSCDIUOAHVISTYYCAAMHILK");
    msg.dist = 0.8258503790969665;
    msg.err = 0.39933174845762165;
    msg.ctrl_imp = 0.12021228090798353;
    msg.rel_dir_x = 0.9876947614229618;
    msg.rel_dir_y = 0.7636776909315134;
    msg.rel_dir_z = 0.6330105832349854;
    msg.err_x = 0.3373508818755435;
    msg.err_y = 0.8151805091967244;
    msg.err_z = 0.16936472461667773;
    msg.rf_err_x = 0.18185817704739093;
    msg.rf_err_y = 0.2611624179779757;
    msg.rf_err_z = 0.06711190577053228;
    msg.rf_err_vx = 0.5314865538393764;
    msg.rf_err_vy = 0.980656016437174;
    msg.rf_err_vz = 0.031931387904186925;
    msg.ss_x = 0.42966763046253686;
    msg.ss_y = 0.5631122325343824;
    msg.ss_z = 0.8757965810846757;
    msg.virt_err_x = 0.4045211805895319;
    msg.virt_err_y = 0.34155306924371753;
    msg.virt_err_z = 0.09788011222458326;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.8986257899288373);
    msg.setSource(12792U);
    msg.setSourceEntity(174U);
    msg.setDestination(60931U);
    msg.setDestinationEntity(95U);
    msg.s_id.assign("KPIWSCIGMKNXRFJBDAWLYHZAHVPK");
    msg.dist = 0.08982986396565806;
    msg.err = 0.4718685274519867;
    msg.ctrl_imp = 0.022837740468564904;
    msg.rel_dir_x = 0.661133150445307;
    msg.rel_dir_y = 0.3747818476480641;
    msg.rel_dir_z = 0.28181837531017084;
    msg.err_x = 0.0612962925745788;
    msg.err_y = 0.20677625120970566;
    msg.err_z = 0.7467176613992261;
    msg.rf_err_x = 0.8854271917776617;
    msg.rf_err_y = 0.8566012400014987;
    msg.rf_err_z = 0.8133875631523788;
    msg.rf_err_vx = 0.14948660602143138;
    msg.rf_err_vy = 0.5122571449785509;
    msg.rf_err_vz = 0.9525993834970239;
    msg.ss_x = 0.5617544940786048;
    msg.ss_y = 0.03650533153625146;
    msg.ss_z = 0.018927466884582245;
    msg.virt_err_x = 0.43100770942457267;
    msg.virt_err_y = 0.5526090710743403;
    msg.virt_err_z = 0.22754560787781097;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.617626348714524);
    msg.setSource(2100U);
    msg.setSourceEntity(32U);
    msg.setDestination(49900U);
    msg.setDestinationEntity(240U);
    msg.s_id.assign("GLOIDMEFHUBEDAJNWSBAOVSAPTHXBIGSXEQTCVRMCIYUWVYPKUFQMAIMRDFUITVTZFNLTTJKFCHJLPKVJGLCFMPBZNRYDRGSXODSBDDQXUUAHUJNALKPYSWYGBIZLONVZQXAWDJEMCSAWOOPCTOM");
    msg.dist = 0.8429573914981306;
    msg.err = 0.7952218033924938;
    msg.ctrl_imp = 0.7106545588513755;
    msg.rel_dir_x = 0.3151197387635347;
    msg.rel_dir_y = 0.9930251435025321;
    msg.rel_dir_z = 0.5010760203836016;
    msg.err_x = 0.5597302188618548;
    msg.err_y = 0.6626342583164824;
    msg.err_z = 0.586544152759201;
    msg.rf_err_x = 0.29236511540673593;
    msg.rf_err_y = 0.2296081849715167;
    msg.rf_err_z = 0.7388526103268636;
    msg.rf_err_vx = 0.892626498157323;
    msg.rf_err_vy = 0.46709513151296833;
    msg.rf_err_vz = 0.7646907818326971;
    msg.ss_x = 0.22698845974171578;
    msg.ss_y = 0.4964993630625616;
    msg.ss_z = 0.003566990539302317;
    msg.virt_err_x = 0.8645726594035054;
    msg.virt_err_y = 0.743963071401453;
    msg.virt_err_z = 0.9932572989085814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.8464156544380672);
    msg.setSource(59946U);
    msg.setSourceEntity(150U);
    msg.setDestination(41308U);
    msg.setDestinationEntity(24U);
    msg.timeout = 23373U;
    msg.rpm = 0.09831195755242705;
    msg.direction = 48U;
    msg.custom.assign("DNINDYQESADROIWCGLBWMYOBFCNQZGEUPZFPFVHNNSSJQVGFFNDSQMXODJMYNIKM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.2841122748005134);
    msg.setSource(734U);
    msg.setSourceEntity(124U);
    msg.setDestination(8488U);
    msg.setDestinationEntity(173U);
    msg.timeout = 15430U;
    msg.rpm = 0.8030292990485425;
    msg.direction = 97U;
    msg.custom.assign("SZVUWTLABWQASIJBQDUBOVNRICKJRMCMRFOLCSKNUDQMZVQERUONAEGWDFNDSEVLMYZLOTVYNOTSKHTYTEOFWIBWAHXCGSNBZXZJKHZFPBGXDPXBPAAFCR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.6698401434321951);
    msg.setSource(26681U);
    msg.setSourceEntity(97U);
    msg.setDestination(44589U);
    msg.setDestinationEntity(74U);
    msg.timeout = 29042U;
    msg.rpm = 0.6463286339900314;
    msg.direction = 211U;
    msg.custom.assign("PGPGDARHSACZLSVWBEGCKOKQOHWMLNLWXZERTUTLEAQKRRUNGGLJWGNBPVDUHGQYDPBMCJNOKNIUTHQPLDCYMPTV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.2009440004437304);
    msg.setSource(44918U);
    msg.setSourceEntity(109U);
    msg.setDestination(47507U);
    msg.setDestinationEntity(72U);
    msg.formation_name.assign("ZARFNDFLZXHLUJEIALFPGKMMHBONBQYLJYVDYOIQKAUETRRLZAUPJYIHXAEUNPKBXETOFYTPO");
    msg.type = 209U;
    msg.op = 123U;
    msg.group_name.assign("NIQSBTFSLYDBMRTPGSWACKBOVKQOPFJOGZEG");
    msg.plan_id.assign("UYMIYQKZUCHJSGPKXALRIBJTAETZMZMXVORHXTPWAYMBPLNNILCWYMBMYQ");
    msg.description.assign("ZMGBFYROCRNTLRGYLQTGRUWTFWJTPEUJCSBOKNIIBIQPFDAZGWYKRRTTWSGQASDOVMVXEVKVYUTZLYIUSHHUIFAZXBMCIACJVYPENVHMIOPCHHSEXAXZQZHLUBOAWZFGYMKKGOEDZFQANCRWQLOCYUISNRNDHMFTXJELMRUDOBLSAJNLEBC");
    msg.reference_frame = 222U;
    msg.leader_bank_lim = 0.6767554611402168;
    msg.leader_speed_min = 0.9113571298423462;
    msg.leader_speed_max = 0.28757274811589506;
    msg.leader_alt_min = 0.2004489364324611;
    msg.leader_alt_max = 0.7327360916769716;
    msg.pos_sim_err_lim = 0.02655417003843019;
    msg.pos_sim_err_wrn = 0.1553943974262445;
    msg.pos_sim_err_timeout = 33886U;
    msg.converg_max = 0.4338722552798262;
    msg.converg_timeout = 29695U;
    msg.comms_timeout = 16668U;
    msg.turb_lim = 0.6300853501764426;
    msg.custom.assign("PPGCCZHDEQLVYNKYWTSBLUEMSECTHNRTOUKJVKMFNQVZFPSWDISWOHFWUYIWBZICQSLMCRHXLIQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.8068357271812276);
    msg.setSource(45131U);
    msg.setSourceEntity(35U);
    msg.setDestination(48643U);
    msg.setDestinationEntity(72U);
    msg.formation_name.assign("AZELTAZRJTMJHKPROLSIXISS");
    msg.type = 225U;
    msg.op = 211U;
    msg.group_name.assign("BEBJAAYDFRGDKWZUVNLJYZHQWUYTWDQOUFLRACMLILZHDFZGERPRVJIIATABOJRZMSABOPTFBRWBZAPHBMIKBNTEXPCHGXRLPLGSRISUIYSVFVVTEXHJYQEIZWOQUHWLQNCMCKKTYDRXONCYHGQLKBHGXWINVPMAEFOILKNQXKJKYBNVJIQTEXCHOPCMSDJGDUSCSPDWZPTUWUOFZVGTHCAQXNZDCVQSKNOFGNJAOFUGDYSMLPERTYX");
    msg.plan_id.assign("AAHBCZGCULGVQXKDNZUYITHRDOPJSKHABMDQOEHLNWHUKRHKGZYXGPNZDIWCPBCOJYZJNDSZAONMESXWZNVURHWBTRGAEFAOTPLNLFNOTVFQFSYVXHX");
    msg.description.assign("NJXLFMETBSZLCWGJXMZIPWBZWDQIXJZEGISRWHCAYITGZLZLUNFHFYUUDSWALSEFCNIIVHNEPKHAXORNFRTWQFDYLGIPMFJOQWKYWVNMBZKMLZPTIYLARXSJYKPCPWDPCGGDJEYRRSUCDBCJ");
    msg.reference_frame = 54U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 54001U;
    tmp_msg_0.off_x = 0.791466635172209;
    tmp_msg_0.off_y = 0.899258569259962;
    tmp_msg_0.off_z = 0.6149621941479056;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.6305062855806216;
    msg.leader_speed_min = 0.042621626478277164;
    msg.leader_speed_max = 0.8940114426930942;
    msg.leader_alt_min = 0.13227694132545365;
    msg.leader_alt_max = 0.07219149916663614;
    msg.pos_sim_err_lim = 0.6212502900208368;
    msg.pos_sim_err_wrn = 0.7465304186058469;
    msg.pos_sim_err_timeout = 16104U;
    msg.converg_max = 0.9904415940065837;
    msg.converg_timeout = 20014U;
    msg.comms_timeout = 12327U;
    msg.turb_lim = 0.2796407806301504;
    msg.custom.assign("BOGLECQQJGBYEZGHRIBLGAWSMOLVJKIQSFCNXBEZZXSGNUYHKGUFUQOJTVQYTDWVXMFXFMLDRHOBLXXIWLABT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.4628028449119167);
    msg.setSource(8509U);
    msg.setSourceEntity(95U);
    msg.setDestination(6644U);
    msg.setDestinationEntity(124U);
    msg.formation_name.assign("CRVMMJNUPZWPGUHEFBOCZJFTQBMTJJFPHSFBSATWWYQYZKUIKVYSSQDKBHRVHAQCYEKUAGVBHCISVPYKTSZISAA");
    msg.type = 148U;
    msg.op = 126U;
    msg.group_name.assign("TFKHNMOHONKTKBMLBXFPWGEVQZAXREFRSNHREYGOHGAFPMLNNCTWUGYJLJXZOEZGINIJAZXHHR");
    msg.plan_id.assign("FHGWMFSEMMSUVQPJHXRIUWJLTLDNMBAGAUEDHLAZRZJNFCGARBERGKPIIQDWIIZFYQUONABTPUUFGEMZYHTDFBIOXONITFSCJYRWNKMWQGHRBRVVPCWIYYP");
    msg.description.assign("EJSIFEOQBDGIWHCXHMLPPSYLZAFRWKJWEYZADSZYXTDJOWNURFALFRTGQPVPNMZEGTVMLYQLPTDPXAYBPBUUZEKHDKGNNXWJRTPMQCNULOLSUHZELTEGNCCIIZDXVSWGSCFFWZYYVKVCDNJPCMJYUSAMTOKCCQUXLFWFNWGKEMSKNBQUOZIEQHGKVYTB");
    msg.reference_frame = 145U;
    msg.leader_bank_lim = 0.3069524587789335;
    msg.leader_speed_min = 0.8752311620083363;
    msg.leader_speed_max = 0.4155064983842873;
    msg.leader_alt_min = 0.9045157590854563;
    msg.leader_alt_max = 0.09764773964980178;
    msg.pos_sim_err_lim = 0.6027274677338681;
    msg.pos_sim_err_wrn = 0.3150212498584448;
    msg.pos_sim_err_timeout = 19131U;
    msg.converg_max = 0.08760181812204626;
    msg.converg_timeout = 50134U;
    msg.comms_timeout = 45160U;
    msg.turb_lim = 0.16065322927641867;
    msg.custom.assign("HYUJETZLSMJKCWZFDBAXRAVTJVNGFVTYDVHOGZLAKKRXQFBFXCXNCISKZNWINMOSLUQWSCGWUGSBKBGJJBWWJPQUFEPIKDLJURXSSKIPRZDMOQSUBEWBDAXCREBYDNPI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.4213272959038582);
    msg.setSource(9654U);
    msg.setSourceEntity(71U);
    msg.setDestination(18204U);
    msg.setDestinationEntity(5U);
    msg.timeout = 16904U;
    msg.lat = 0.0722982088804981;
    msg.lon = 0.5247675528879978;
    msg.z = 0.2591875478228811;
    msg.z_units = 18U;
    msg.speed = 0.6025969625768702;
    msg.speed_units = 30U;
    msg.custom.assign("DPEUNKABDSEUKLSISPPZPQIXNKHNWQINSBXBJAFQXXCDAOZGTOZMJMRVIJHQXKANWRWADUYLFHQYNVFPVTDEUCIRGRVGSJLJNPCKDD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.49083966925765377);
    msg.setSource(9877U);
    msg.setSourceEntity(49U);
    msg.setDestination(44996U);
    msg.setDestinationEntity(34U);
    msg.timeout = 9961U;
    msg.lat = 0.009744298668720841;
    msg.lon = 0.17965549745928733;
    msg.z = 0.7661660234911494;
    msg.z_units = 44U;
    msg.speed = 0.8070612542631622;
    msg.speed_units = 33U;
    msg.custom.assign("EGIXGLTMBJSQXTXFCZKMVNWXYICZIHWNAYEHOPRZPBUVISUOXHLKENYOZAFVKOJUYX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.9326632706852512);
    msg.setSource(53043U);
    msg.setSourceEntity(212U);
    msg.setDestination(61712U);
    msg.setDestinationEntity(3U);
    msg.timeout = 45372U;
    msg.lat = 0.9410309136777648;
    msg.lon = 0.8563664844651103;
    msg.z = 0.38362367342939585;
    msg.z_units = 32U;
    msg.speed = 0.5203677374085405;
    msg.speed_units = 220U;
    msg.custom.assign("AHTBTNSCMEHPXDTHZUFFYPCEBLHLUWLTVJRSFOORSDROFDWVVBAQSHXXSFUNZBWQLZYGLOBIJGRIFUMZGDQNBCMESTGAYRECKZMXVVPUJNXBHMTMKIZRNXWPEYXKVAIDGMZFKPELOPCUSTRCYDVQQWIEFGXGEOYVWCUPZRSJWXNRJWGRKOWIDACBIAHLNMNLSXCDPJJMBDHQYKCSYVJIKQBIZTUNATGEHKEKJFYLUPOZVQDINQPAJTAFGQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.45302531979327443);
    msg.setSource(21869U);
    msg.setSourceEntity(222U);
    msg.setDestination(1663U);
    msg.setDestinationEntity(159U);
    msg.timeout = 56801U;
    msg.lat = 0.28319203400956583;
    msg.lon = 0.31038224635118383;
    msg.z = 0.3445059198023762;
    msg.z_units = 32U;
    msg.speed = 0.0295864512475007;
    msg.speed_units = 83U;
    msg.custom.assign("ZWEIOQRGPRVIXKSLRQFCQFHYUZUGTHXOIHOLMDTAHLDLJMYNYMZNPABEQZWQKKOYIQBLHNJZSFDSEGIAQKYBUPHYTKGEENPOBBWILTCAURMCXYOVPCSRMRPCSFNWTVIKXDQMWWWZUBPDYTMUEUGNDJVSAFQNZTDAKLYBEOVKJXGPMVGXSELLGZXUTFSGRCDWIWHVJOOHSYCNWCPDVINLM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.6335435927930501);
    msg.setSource(31673U);
    msg.setSourceEntity(254U);
    msg.setDestination(59118U);
    msg.setDestinationEntity(31U);
    msg.timeout = 11779U;
    msg.lat = 0.4852760578156641;
    msg.lon = 0.7539808208224373;
    msg.z = 0.747109392012936;
    msg.z_units = 210U;
    msg.speed = 0.4530926615405235;
    msg.speed_units = 47U;
    msg.custom.assign("VZXPDKDCZFYFHUIDKVTIJORWYJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.2675770511827581);
    msg.setSource(35283U);
    msg.setSourceEntity(10U);
    msg.setDestination(45698U);
    msg.setDestinationEntity(39U);
    msg.timeout = 2750U;
    msg.lat = 0.4534097665632979;
    msg.lon = 0.3906491446186633;
    msg.z = 0.5287474319422584;
    msg.z_units = 122U;
    msg.speed = 0.6430172486976246;
    msg.speed_units = 220U;
    msg.custom.assign("UJVSCNWWSTKNXCRKVBLPBEVEOV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.8987941582112716);
    msg.setSource(56079U);
    msg.setSourceEntity(115U);
    msg.setDestination(5019U);
    msg.setDestinationEntity(68U);
    msg.arrival_time = 0.5305246744666737;
    msg.lat = 0.3324016462627516;
    msg.lon = 0.4718784439095225;
    msg.z = 0.3657465146210146;
    msg.z_units = 21U;
    msg.travel_z = 0.11450663948791195;
    msg.travel_z_units = 36U;
    msg.delayed = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.4461565162345569);
    msg.setSource(43914U);
    msg.setSourceEntity(99U);
    msg.setDestination(46720U);
    msg.setDestinationEntity(59U);
    msg.arrival_time = 0.8467485822111729;
    msg.lat = 0.47558508731124416;
    msg.lon = 0.7038357990558765;
    msg.z = 0.06711256454121961;
    msg.z_units = 189U;
    msg.travel_z = 0.8523839351794597;
    msg.travel_z_units = 157U;
    msg.delayed = 144U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.4116025173046888);
    msg.setSource(31283U);
    msg.setSourceEntity(222U);
    msg.setDestination(7032U);
    msg.setDestinationEntity(151U);
    msg.arrival_time = 0.7215862215775173;
    msg.lat = 0.5762789209729482;
    msg.lon = 0.9188156713183944;
    msg.z = 0.5377604934923607;
    msg.z_units = 124U;
    msg.travel_z = 0.26054711838360145;
    msg.travel_z_units = 94U;
    msg.delayed = 163U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.12860855354367784);
    msg.setSource(15085U);
    msg.setSourceEntity(108U);
    msg.setDestination(13340U);
    msg.setDestinationEntity(234U);
    msg.lat = 0.44297850347186385;
    msg.lon = 0.6365979289437252;
    msg.z = 0.008085899385109285;
    msg.z_units = 59U;
    msg.speed = 0.47785218467732393;
    msg.speed_units = 89U;
    msg.bearing = 0.149720069150723;
    msg.cross_angle = 0.20512581028547072;
    msg.width = 0.6017314102804772;
    msg.length = 0.6321198128945692;
    msg.coff = 96U;
    msg.angaperture = 0.5397239446545301;
    msg.range = 39641U;
    msg.overlap = 71U;
    msg.flags = 140U;
    msg.custom.assign("VKUYRZCBUETHFWESABCLOVLMYANMYZTXHPGOBWVJPTL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.6003718867715412);
    msg.setSource(11298U);
    msg.setSourceEntity(167U);
    msg.setDestination(22406U);
    msg.setDestinationEntity(68U);
    msg.lat = 0.9972585173826568;
    msg.lon = 0.39163891248842453;
    msg.z = 0.6485904404191948;
    msg.z_units = 251U;
    msg.speed = 0.7292080886587322;
    msg.speed_units = 184U;
    msg.bearing = 0.36867495506807046;
    msg.cross_angle = 0.8724163403023386;
    msg.width = 0.4850142675504022;
    msg.length = 0.08715177629936188;
    msg.coff = 106U;
    msg.angaperture = 0.1545666775537904;
    msg.range = 38272U;
    msg.overlap = 184U;
    msg.flags = 59U;
    msg.custom.assign("OKMBUTXGMKONCJM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.6464302982865487);
    msg.setSource(61304U);
    msg.setSourceEntity(111U);
    msg.setDestination(4432U);
    msg.setDestinationEntity(240U);
    msg.lat = 0.27805652519934887;
    msg.lon = 0.3018701866819654;
    msg.z = 0.4786323573408201;
    msg.z_units = 94U;
    msg.speed = 0.5494394223861625;
    msg.speed_units = 21U;
    msg.bearing = 0.5641372339519767;
    msg.cross_angle = 0.09593425812433587;
    msg.width = 0.11981458018072066;
    msg.length = 0.08531865945894379;
    msg.coff = 204U;
    msg.angaperture = 0.22897803007433482;
    msg.range = 12489U;
    msg.overlap = 6U;
    msg.flags = 210U;
    msg.custom.assign("WDCKLSNTLBEPBPEAKHLDXLZNYMNACGORZPNHDJWVHJTIJGCEWKWJWNVMRSQBDOQQRFZAPOIFQEHKHXNFOMJAEYVZNVVYKDZHOQOHIJM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.8077824421934621);
    msg.setSource(33083U);
    msg.setSourceEntity(144U);
    msg.setDestination(7054U);
    msg.setDestinationEntity(244U);
    msg.timeout = 59979U;
    msg.lat = 0.3721228109628484;
    msg.lon = 0.9500652505601438;
    msg.z = 0.796663216312358;
    msg.z_units = 41U;
    msg.speed = 0.9001309653554802;
    msg.speed_units = 204U;
    msg.syringe0 = 23U;
    msg.syringe1 = 251U;
    msg.syringe2 = 211U;
    msg.custom.assign("FUZVRXPEIXFPPQGGPNOANDGQRQAAHNSIUJKBKIOKSSIZLZGTQPVBAYCADONNPOMYFCBHWSRMXALDPMRWSS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.20679108524618817);
    msg.setSource(8335U);
    msg.setSourceEntity(77U);
    msg.setDestination(48681U);
    msg.setDestinationEntity(165U);
    msg.timeout = 52288U;
    msg.lat = 0.3607072616845375;
    msg.lon = 0.7060528409146494;
    msg.z = 0.9601723006392032;
    msg.z_units = 130U;
    msg.speed = 0.17059441369197037;
    msg.speed_units = 68U;
    msg.syringe0 = 71U;
    msg.syringe1 = 98U;
    msg.syringe2 = 162U;
    msg.custom.assign("KXXNMPQAVTOGPDSRTGESNADTROUMSGLKZQXOBRFRQBJVWNZJCSMEALTJWAIBNWPZBVPEETYCHUNPKEHHSYTIVBFCZOGTZZKBQMPMFDMZZNYPYJDJSNPXVGFMHAQRAJRKMHUXSUWLJAYFYJJXVDEIIULQQVXOKXPFIUWEDAJDQOLZGRHWBDGMWOYCFWLTIYUN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.3289668215106284);
    msg.setSource(12246U);
    msg.setSourceEntity(132U);
    msg.setDestination(12660U);
    msg.setDestinationEntity(221U);
    msg.timeout = 59231U;
    msg.lat = 0.5699688861096756;
    msg.lon = 0.7019326260980335;
    msg.z = 0.836335995312984;
    msg.z_units = 53U;
    msg.speed = 0.6161820877550408;
    msg.speed_units = 61U;
    msg.syringe0 = 207U;
    msg.syringe1 = 23U;
    msg.syringe2 = 12U;
    msg.custom.assign("XWBIMMDCEQBEGGWTMCUKBUQRFSEKQZVNLULJWRPSGLGBFHNNKYPF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.9770100669431476);
    msg.setSource(52941U);
    msg.setSourceEntity(50U);
    msg.setDestination(53909U);
    msg.setDestinationEntity(42U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.35535511474935344);
    msg.setSource(18640U);
    msg.setSourceEntity(238U);
    msg.setDestination(40129U);
    msg.setDestinationEntity(8U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.7967713534537929);
    msg.setSource(35764U);
    msg.setSourceEntity(24U);
    msg.setDestination(45861U);
    msg.setDestinationEntity(38U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.5371088763734313);
    msg.setSource(45889U);
    msg.setSourceEntity(90U);
    msg.setDestination(24781U);
    msg.setDestinationEntity(199U);
    msg.lat = 0.9495634691828365;
    msg.lon = 0.6526680085713892;
    msg.z = 0.32006580934074347;
    msg.z_units = 135U;
    msg.speed = 0.9684711805795576;
    msg.speed_units = 226U;
    msg.takeoff_pitch = 0.10210391860871915;
    msg.custom.assign("AFWAZSCJYBCSKXYYRIMQHLCFCOLLXTHOWXTAUEHWLSIFWKRPIRTXFUMFSTQQVXPUZPWJPRKQKDLZYNOUAECMIINQBVKZMGEGXUBNVNCFESQANHSSBSJUFTIXNNYYHCICRKRCUOTNVZRAD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.6560967304811892);
    msg.setSource(37324U);
    msg.setSourceEntity(189U);
    msg.setDestination(30993U);
    msg.setDestinationEntity(12U);
    msg.lat = 0.48222814285538007;
    msg.lon = 0.7914066095780715;
    msg.z = 0.0026485276848038364;
    msg.z_units = 161U;
    msg.speed = 0.6868404415900625;
    msg.speed_units = 68U;
    msg.takeoff_pitch = 0.9120223142251854;
    msg.custom.assign("KLLJVRRPZFVOGDDCMCANZJIIMKURDGFZCEQBVMUWJVLAUYDICEMKASKGFWYPCJQVJNATXWQZCRSESDRDTRHVYPZNGJXBPOBCGYGQHSMPECPBDSXTLIUYTXHEGLHNDUISROAFMTXBNNWBZUQVSVFTQOISHHCO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.24531055554029046);
    msg.setSource(19885U);
    msg.setSourceEntity(47U);
    msg.setDestination(53583U);
    msg.setDestinationEntity(142U);
    msg.lat = 0.544926445655981;
    msg.lon = 0.18739057861616581;
    msg.z = 0.5244422248951637;
    msg.z_units = 100U;
    msg.speed = 0.7337722067276331;
    msg.speed_units = 20U;
    msg.takeoff_pitch = 0.29165750038485694;
    msg.custom.assign("ZFKDKLAVTTFSGPRWMIIGXILZKNLSTJHDBNDIBMLPVDDDELEKCCJOHGGQUQXNLPGUYJDXBOOGKHZUKPWAHBNEYTTYCEXXAGMUQWMJSLBIVCJVZNMRDSWSIUSAHAROFANUINRWJYXASPCZEUBMYMBIQMZBYVQAPPXWFHWYGGFRVWFRNDQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.12234282212291836);
    msg.setSource(26530U);
    msg.setSourceEntity(150U);
    msg.setDestination(39894U);
    msg.setDestinationEntity(84U);
    msg.lat = 0.9341363711334902;
    msg.lon = 0.20726814066604304;
    msg.z = 0.0972955496692598;
    msg.z_units = 233U;
    msg.speed = 0.42928527372501635;
    msg.speed_units = 36U;
    msg.abort_z = 0.5113750287350214;
    msg.bearing = 0.21946218769431092;
    msg.glide_slope = 43U;
    msg.glide_slope_alt = 0.44306505244727534;
    msg.custom.assign("RONABTTBXKJC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.4641192830538139);
    msg.setSource(60002U);
    msg.setSourceEntity(166U);
    msg.setDestination(7383U);
    msg.setDestinationEntity(70U);
    msg.lat = 0.9125918534740313;
    msg.lon = 0.48444638027102516;
    msg.z = 0.9832754843799423;
    msg.z_units = 156U;
    msg.speed = 0.009396984070957681;
    msg.speed_units = 213U;
    msg.abort_z = 0.6390155055834492;
    msg.bearing = 0.763019463530443;
    msg.glide_slope = 243U;
    msg.glide_slope_alt = 0.8401900093659347;
    msg.custom.assign("TYSSYPDMQMVOJWZQRWJUZBUNHNBHJDEAYIKYQPTIABULUXMFKBOLADHZJLXIOMBLSLKEXQAAYRMRRMKDHTGVCFFVXZSINOEKDBTZGMZQNGSZRJJFKLDLTCBWVUVGINXGXNUZDEWPHQGKCCEEHMF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.9564669361717381);
    msg.setSource(36416U);
    msg.setSourceEntity(68U);
    msg.setDestination(25917U);
    msg.setDestinationEntity(128U);
    msg.lat = 0.4400013020877873;
    msg.lon = 0.6173543964602753;
    msg.z = 0.9424484137111804;
    msg.z_units = 104U;
    msg.speed = 0.1483460445746133;
    msg.speed_units = 49U;
    msg.abort_z = 0.45060768327699996;
    msg.bearing = 0.08362695613308913;
    msg.glide_slope = 10U;
    msg.glide_slope_alt = 0.16129418648334426;
    msg.custom.assign("UFTXOHFFBQXMAUHPOPIEXXKRMQXKVPKEOLRHWDBQMSHWIVYCANQBGELQSQVBTLZIFLJIOKNSQJXGOCZPARAQCSBZPZKZSIAVXXMTTARDYXPUDWGULQGGCRNEVPTXMKGFVTZWWHMO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.7512447483459003);
    msg.setSource(45146U);
    msg.setSourceEntity(170U);
    msg.setDestination(1787U);
    msg.setDestinationEntity(218U);
    msg.lat = 0.08837238540758696;
    msg.lon = 0.705481254094073;
    msg.speed = 0.6488237738467232;
    msg.speed_units = 0U;
    msg.limits = 52U;
    msg.max_depth = 0.5651641793533998;
    msg.min_alt = 0.9996255428639661;
    msg.time_limit = 0.8557640410960056;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.4344091601333788;
    tmp_msg_0.lon = 0.0798621152914627;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("YBNILWPPVOEFBBTFHAESJUZQCREUKOEIELWRNDUYIFHQOOAALZGZZJSJSBTOGYAXQFILWKSMLAMVGFTVVATYKLGUJRMNSWKHJHUYKYSAENKHRFOEKTUQYDOMQRCBCTVMZTU");
    msg.custom.assign("AOJTAWMJLWUQZSFQMURAKH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.5459814441083419);
    msg.setSource(25107U);
    msg.setSourceEntity(34U);
    msg.setDestination(46577U);
    msg.setDestinationEntity(14U);
    msg.lat = 0.24964089825460578;
    msg.lon = 0.41676447625217083;
    msg.speed = 0.8167079512373212;
    msg.speed_units = 138U;
    msg.limits = 127U;
    msg.max_depth = 0.8115268262239361;
    msg.min_alt = 0.018344598747144114;
    msg.time_limit = 0.2607940951995945;
    msg.controller.assign("IHWVGIMIQRJFNZNHARSKZUVHDDIYFEQXTGJQBCTGCXODECVYHEHEDFXPYQWLYYFDDOBOCYRNKHWQDLMZBCTULCABBMKUUPRSES");
    msg.custom.assign("XFNGDQRFSLZKMKTCVAWCRCGVJIPINATRGEFYUBLSPO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.7127194865487533);
    msg.setSource(52593U);
    msg.setSourceEntity(243U);
    msg.setDestination(53798U);
    msg.setDestinationEntity(66U);
    msg.lat = 0.9426129845421066;
    msg.lon = 0.07552652996676867;
    msg.speed = 0.52345036787494;
    msg.speed_units = 129U;
    msg.limits = 158U;
    msg.max_depth = 0.3728633141712514;
    msg.min_alt = 0.982800923862811;
    msg.time_limit = 0.9317363474290368;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.2095768644638254;
    tmp_msg_0.lon = 0.6284734683380974;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("MVYGBHCETSVTCTFJHXIBHKDIRCUREZZUKYCUUPNDPWIFDZOAPWELSONUGDTPVKOWVNKPEHWCJJPTZPXBQQSRGCNXJXNXXTDVYJOUODNRRDUHFKYYFINCMQQGVLQFEIORWGYSLPSHSFMHFLWYIORJJKADMXYLSKDNBLMZSSCWTJIMZVIAGHMGTYJZCBBQQEOVERXWKCVKYIXVMAWP");
    msg.custom.assign("BKBELGMIHCTLWQFZACQWAPGRJAYFBKARIVHVGCNEBGFMMHPDSXRYQBOFXKTKXVVIYQSHFKBSUNEGBEANTVJTLFVAVACZDZRSRNKCUVNUUBNTZYLCUIETRQKMRCRPFJDMDZOJTNOKTHLWPWEJPTPFMSYSEOMYDDGDSXGCUDJKUUQLIDJELSYEYUZEQHOOVPLOHJWJDXOGZWRLWCXAYOY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.04124184768527228);
    msg.setSource(55503U);
    msg.setSourceEntity(0U);
    msg.setDestination(51078U);
    msg.setDestinationEntity(120U);
    msg.target.assign("UPYTZVSSGCHYRJEIDKGDLUOQBCOVFHCJJYZZIQFCPKKXGNTDTEDABRRLJS");
    msg.max_speed = 0.1773172288521595;
    msg.speed_units = 41U;
    msg.lat = 0.6967957126322815;
    msg.lon = 0.16987500010124168;
    msg.z = 0.24137690389127964;
    msg.z_units = 114U;
    msg.custom.assign("IAFEMTMDOXTSULXPDVZXONLZHMYNJBSVQHEQSLFFLUAWLXVLQXQNYXAAINFGUYCECDGKNIBXSRREDBWR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.32197188065502713);
    msg.setSource(52789U);
    msg.setSourceEntity(125U);
    msg.setDestination(61013U);
    msg.setDestinationEntity(210U);
    msg.target.assign("KRENMYUKVSJBOEZBBGHMZWIHUQNYGIBHNYTWVFSAVYKBUBXCNMFRQJROPWVLNGRADLJXEGTIVTMGEIXZAAL");
    msg.max_speed = 0.5300120207633124;
    msg.speed_units = 221U;
    msg.lat = 0.8176368793154217;
    msg.lon = 0.633119724092301;
    msg.z = 0.4577463532713614;
    msg.z_units = 32U;
    msg.custom.assign("IARFDVFDXJJYBSITLNQJHOWRVQJJHECOGMGTPGHHFKMZYQSHKTDAANWSGJYLRLYADORGEODYQNEDUXOBLMPQTDKXALYCKLPMWQZRUSOCSIQEZZOSTDQWCZSTSPYRAHTVMFRBSWPEXGBVMUAQEMJFUMCUNWRPQAXDKKCYMXLRIINTXPVFIPNBIOCGZHKBMHENBDJIXPXSCEYTZAWNBUWWUEHGZFXNUCVKIFPUAVJLLKTOBEVJYZBR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.04180215519828823);
    msg.setSource(33714U);
    msg.setSourceEntity(16U);
    msg.setDestination(60082U);
    msg.setDestinationEntity(15U);
    msg.target.assign("XXIWTYQKKLPPBZLGVMIRTFBAESSWCOZKJMHINMEIUFKPKDOXEVDBYYGBCQYSFPDQWTJLUEVCPYXNMGLRJKWZEOMDHTZRSICYBGHVUFFFCNCNTKSLLDIKARMDQVWWUXZXMOGAMXAEFUNVQCVTDGPTBJZNVUGJLBYVNDDMCZOFJKAJSCZIQYEUHHTYEOUJAOIXOSHAKANTWQPJWIDRQBGLGLWURVJXSQMBSTROECZQFGPRSWPEIUZXRHLHH");
    msg.max_speed = 0.37017531388010383;
    msg.speed_units = 106U;
    msg.lat = 0.32480389908702634;
    msg.lon = 0.06575463460947994;
    msg.z = 0.07249834561944535;
    msg.z_units = 199U;
    msg.custom.assign("OJAGMLXKBNDQUKAVTTCRGLLVJJQNECKUTEWRSPLYIGPIITRBDRYWDAMDYJOZPZBBXZZDONVHYGJNSSZQPGFXBPFSCBLYOUJXMRAOCNIHWRVUTQGHIQKBEWDITNKPHECFECPYASFFFNULVZRSXSQMCVTVQDOUQQZLLKSPUHKDCUOGPDNAJXWOVRNTSFHHHHIODXFYATMIXWPLEXNVQWWSROWRLMGJBBKMZHK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.03997232623510483);
    msg.setSource(55950U);
    msg.setSourceEntity(41U);
    msg.setDestination(17141U);
    msg.setDestinationEntity(26U);
    msg.timeout = 12032U;
    msg.lat = 0.9687286942203056;
    msg.lon = 0.7083797326252974;
    msg.speed = 0.9211473925934289;
    msg.speed_units = 247U;
    msg.custom.assign("MOCWGRRJZMTCXQCYEHAGLSIAJDXCIWKWVFNWPDALZQPBGGAYPOWIOHZXMQPNVBBQMKCRYHDSUQDHQYFVMPKLROOUGTETLYTJGMFWEBACGXXSAFFJEQZBRZHFXYPEXSCNQIUZSJLYJGDSLWIKVFVBUUEFINPDTVHEPVRVHZZOTOTKOOCQDITKTLARLNBARZMSLNMKNIDJATZSXERYUIMBXOHWWHDKVSJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.41025295153173336);
    msg.setSource(61008U);
    msg.setSourceEntity(195U);
    msg.setDestination(4769U);
    msg.setDestinationEntity(131U);
    msg.timeout = 53653U;
    msg.lat = 0.16397443847502624;
    msg.lon = 0.49718025677892896;
    msg.speed = 0.4434362182973084;
    msg.speed_units = 168U;
    msg.custom.assign("PGGXSYHEDTMECFKKUVQNPXSPVFFDOZTNYSBBKXRUAZRLYVEWRKCGDPULYMFNCCCRGBTMPEAPQXANJZBIQBGXUKEGNALXIBMUEWMHOTDQCNGSTWMVOUZFILIHZWMHJOTJJAAESEFHDHWVRUFQCLEKRUSAQYYDAJHSDPHFEBZYFPTOBWZWNOGJUQOFLNXVIOAYXBDWLZSKCMRXILRTSVVZKYZGIMICCX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.4752549741536355);
    msg.setSource(42826U);
    msg.setSourceEntity(58U);
    msg.setDestination(6655U);
    msg.setDestinationEntity(144U);
    msg.timeout = 36584U;
    msg.lat = 0.620513726319891;
    msg.lon = 0.014914993997661496;
    msg.speed = 0.7983289650522061;
    msg.speed_units = 62U;
    msg.custom.assign("BDCWHBTSAFFCCWIHZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.36503882362963225);
    msg.setSource(5113U);
    msg.setSourceEntity(124U);
    msg.setDestination(23915U);
    msg.setDestinationEntity(3U);
    msg.lat = 0.13004118964665656;
    msg.lon = 0.5844656862899327;
    msg.z = 0.9301314074407315;
    msg.z_units = 188U;
    msg.radius = 0.40836590003560547;
    msg.duration = 55370U;
    msg.speed = 0.36813707743625934;
    msg.speed_units = 211U;
    msg.popup_period = 59459U;
    msg.popup_duration = 28438U;
    msg.flags = 191U;
    msg.custom.assign("HRJVYGPGIGVKPFCNVIAXESIKBLAHZNTXVMZDTZIKDQTOJBZPMCBALBEEYJTNCOTGLDPZKKVPZBUUZGLSNTWDWHJIUNROGAKKMEGFKHXZMTXLNYXOFJUGILXFWFCSPEWPUSQWQHVBDADLKNRUDVOQOJQMWLXYNACBINPMEMNLDWSQRISAYHRSCRQAIRBFCCEVWBY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.29823156682427887);
    msg.setSource(15132U);
    msg.setSourceEntity(250U);
    msg.setDestination(36780U);
    msg.setDestinationEntity(190U);
    msg.lat = 0.37128412634534425;
    msg.lon = 0.5006890444856037;
    msg.z = 0.08107300733020806;
    msg.z_units = 132U;
    msg.radius = 0.3996724909474464;
    msg.duration = 15219U;
    msg.speed = 0.36139229666640904;
    msg.speed_units = 57U;
    msg.popup_period = 25109U;
    msg.popup_duration = 15803U;
    msg.flags = 193U;
    msg.custom.assign("WJUFLHUDPTDMGZEXMGIDEWKLQAXOEHRCKADEHKKBMSBYPTVOONNYFAZDBJRMGWRFXJYUGJEHEAWMR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.18180538179549588);
    msg.setSource(30240U);
    msg.setSourceEntity(86U);
    msg.setDestination(41271U);
    msg.setDestinationEntity(254U);
    msg.lat = 0.9958808918319193;
    msg.lon = 0.03970176546421533;
    msg.z = 0.45041293283306394;
    msg.z_units = 159U;
    msg.radius = 0.5202347995110513;
    msg.duration = 59063U;
    msg.speed = 0.900634605715794;
    msg.speed_units = 176U;
    msg.popup_period = 32804U;
    msg.popup_duration = 61147U;
    msg.flags = 68U;
    msg.custom.assign("CYPGCLKXHVKTYWBOSCDKDLRAPTXWRMQYAUPTQNPGWSFNQBHNRSFQCNZEHIZXCMYGKJUAEZWEECJMLRHEZOEXZBAJEPLHFWLUKBVGRGYFRUAHOSSPHLZDNTDDLLSOARKZNPCAYKQXQKVNMRIXGDPIVJRVFBSFFZSVFHGURWJGCUKPWDIMOUDHDTVITSYYQAHQINBUAVBKMIAZBXUGYOYITWPTJBBNSUMEQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.14151486413443837);
    msg.setSource(29172U);
    msg.setSourceEntity(92U);
    msg.setDestination(55580U);
    msg.setDestinationEntity(108U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.7742086361368267);
    msg.setSource(28834U);
    msg.setSourceEntity(233U);
    msg.setDestination(28190U);
    msg.setDestinationEntity(176U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.9032284299154768);
    msg.setSource(1042U);
    msg.setSourceEntity(225U);
    msg.setDestination(2796U);
    msg.setDestinationEntity(92U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.5003448389914441);
    msg.setSource(62749U);
    msg.setSourceEntity(214U);
    msg.setDestination(7399U);
    msg.setDestinationEntity(156U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("LMRHGYDVLTQVQMTODNRZETEDJKEDRDPWNLFAQRIVOSZNFKWIQMZITJLUMWWVGFQOFBILXGERZTBVA");
    IMC::RowsCoverage tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.7706302735854417;
    tmp_tmp_msg_0_0.lon = 0.846046508008257;
    tmp_tmp_msg_0_0.z = 0.7146909221153684;
    tmp_tmp_msg_0_0.z_units = 110U;
    tmp_tmp_msg_0_0.speed = 0.8994713588811047;
    tmp_tmp_msg_0_0.speed_units = 189U;
    tmp_tmp_msg_0_0.bearing = 0.6716725495709013;
    tmp_tmp_msg_0_0.cross_angle = 0.8918971758057621;
    tmp_tmp_msg_0_0.width = 0.8349664795736824;
    tmp_tmp_msg_0_0.length = 0.3283646537201165;
    tmp_tmp_msg_0_0.coff = 180U;
    tmp_tmp_msg_0_0.angaperture = 0.5802977425174325;
    tmp_tmp_msg_0_0.range = 43645U;
    tmp_tmp_msg_0_0.overlap = 87U;
    tmp_tmp_msg_0_0.flags = 3U;
    tmp_tmp_msg_0_0.custom.assign("UQAPYWJNDWJHVKZYPXPXLRZFLDQXKRGTFFWXXLGJAUNECGDACKKBOQZOHTTMGAILFFPCKWOBVFOOYNXUUMMVQEDKMFLBIWMVAYNHPSZBKNELZGZJXVITLYJMSJORFSOVNIHFQXIXARTHFRNEJIHNRCLPQCQSJMGSVLXUGRINAWJZNVAZQCZUPYHMYABTESMQEYOCWBTKWPERDSZEARIDWPBUMUWGLIEJUGQODSCKBVDKYRDOH");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.5588039670994941);
    msg.setSource(64679U);
    msg.setSourceEntity(209U);
    msg.setDestination(17825U);
    msg.setDestinationEntity(18U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("BPJLPUQGEZPSNSJAVINVOXHXYMHVFWPETIIAFKDJX");
    IMC::PopUp tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 57957U;
    tmp_tmp_msg_0_0.lat = 0.3325565989793656;
    tmp_tmp_msg_0_0.lon = 0.3734974170069054;
    tmp_tmp_msg_0_0.z = 0.21571010362178833;
    tmp_tmp_msg_0_0.z_units = 30U;
    tmp_tmp_msg_0_0.speed = 0.4861941320092775;
    tmp_tmp_msg_0_0.speed_units = 216U;
    tmp_tmp_msg_0_0.duration = 19679U;
    tmp_tmp_msg_0_0.radius = 0.8883557104364894;
    tmp_tmp_msg_0_0.flags = 5U;
    tmp_tmp_msg_0_0.custom.assign("OXUFKXLRHHUEXSIVIKVWEBYNKPCHZSIQRANDOPCAHSYLRKIHLBICFVVXOJSFDXOBFGIVSRWESGMROGFNYDXWKQVCQMTTQUYHENRHIZTIHQWYMFELLETGTZTJXUNWZFJTPDSINBUMJ");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.27007053386076507);
    msg.setSource(39930U);
    msg.setSourceEntity(178U);
    msg.setDestination(5781U);
    msg.setDestinationEntity(58U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("CHQWCUUZABQYZJXZZSMEWFHJLIHXFUDUWCYTWYGTGLTRISTDXYINJMYDYMVHDQLUVAZOBRQOVILGFNCGMUEKDKTMOJUIGDYVEMENWXIFOQFNYSZSJKGMECTFMOCRPWDKVEXCWNZOBROJMCUBBHLYGBVOAHAUMATNNFEGPNKDKIWIGBLKRQAXPOSTFCAPXVXSPRWQZBBPFYN");
    IMC::FollowPath tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 56827U;
    tmp_tmp_msg_0_0.lat = 0.45997337648307735;
    tmp_tmp_msg_0_0.lon = 0.5893630057404802;
    tmp_tmp_msg_0_0.z = 0.8496080484117398;
    tmp_tmp_msg_0_0.z_units = 214U;
    tmp_tmp_msg_0_0.speed = 0.8771901423252907;
    tmp_tmp_msg_0_0.speed_units = 104U;
    IMC::PathPoint tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.x = 0.07810755002142789;
    tmp_tmp_tmp_msg_0_0_0.y = 0.6551382458861665;
    tmp_tmp_tmp_msg_0_0_0.z = 0.0870913984369226;
    tmp_tmp_msg_0_0.points.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.custom.assign("OTVPEDJABJMJSJWFBDWOSDQORVBGLIXIEZHNCOSZSNTQDTIYSAMLKPCMYUTMKEGJFPNFAKVPXVOKMXTRRSTWGKOBETPPCDFFPHBIIWPXKBQHNVGXWQLRTHWLXOZK");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::AisInfo tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.msg_type.assign("NZPGSXFDJFMTNRYSTMAEOMJLZPDGEGYWRQZBQVMQUHIOESWFBBXPARORGSVAMAJNCXHJPJYEOLFSWLJUTFQULZGSGSEHGPCNGZMWVNUVONIOFZWWCXZKDBLJEITKVZXTPUWB");
    tmp_tmp_msg_0_1.sensor_class.assign("CVSEMTYOYUYNLYIIRSLCNTWBGORDNNQSBFVYLXGEUJDEAFDVJHAVVRHCKZAVXUIKGXIWEDZLZDAFZYQNGNBFDCAO");
    tmp_tmp_msg_0_1.mmsi.assign("SDRLJNYESDFOJOIKDLXQSYQHPKCYXMOGOTDDWVJAAGZEXJRWVIVETMKHJUKZZJQSGCYZWPXGSRSMXXFGLDZTOKVKNAZTIIMLDOMTHCPYAAQKHHNTUFQLAZYRFPLFBCGCDOMEBMQQRNLCYLBJKCWHOVNGGJKESVRUAAFFXVZECHNEJZPBSYHTPUROLVUUWVMXQIWZTNTVUUMCBFBBGXMHEHDAGRWXSFQFIPPIQRKIYY");
    tmp_tmp_msg_0_1.callsign.assign("ZYZYJLQQIAIOCKTSMLJRKJDDVZDTZOFZXXYATCQTVAHXBYNLRKKQVEXULKNCMJQLIFUAXPSQZHNUFITHOXGHUCFRCHNJTSDLNMGUFMHMBYEJAABVNMFBVOCWKJPPIMDBOQRYUKENDEVSZJHGPVAWOEYSNZSHWWOBRCLMFGDQELUPX");
    tmp_tmp_msg_0_1.name.assign("QFHDMIMFGNJEJZIZTXTOXAAQQMAELREXWBRDPSKQCTQLHKIJELTSBBCKFUJEJDVZLAQOWIJXMXR");
    tmp_tmp_msg_0_1.nav_status = 64U;
    tmp_tmp_msg_0_1.type_and_cargo = 84U;
    tmp_tmp_msg_0_1.lat = 0.49252355485990384;
    tmp_tmp_msg_0_1.lon = 0.9987467506905119;
    tmp_tmp_msg_0_1.course = 0.7470108020354608;
    tmp_tmp_msg_0_1.speed = 0.45833487583862675;
    tmp_tmp_msg_0_1.dist = 0.622326461891548;
    tmp_tmp_msg_0_1.a = 0.22186685711521414;
    tmp_tmp_msg_0_1.b = 0.6494057902105231;
    tmp_tmp_msg_0_1.c = 0.07827081314769191;
    tmp_tmp_msg_0_1.d = 0.18897452126901826;
    tmp_tmp_msg_0_1.draught = 0.939157489274433;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    IMC::TrexToken tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.timeline.assign("OMBFHZMEQWZSQKWYAFBPWKLBCXSHNMVHOFQXESXELYRHBHKRKVRCUZYEYASBKEUFOGNNTHBDYTVBOXVPNGDSVJCQIO");
    tmp_tmp_msg_0_2.predicate.assign("RDTKOHIZZLPXFLUIXQECLCCOFCTJLWHTYJGOARTALNWLNLHSGQHSGGPZQWKYPWEBKMTINAQMWFUDFCHVQHRVEPPBRQSYGISCBSRVMRFNMYGBGWPZWMDXKJUQVI");
    IMC::TrexAttribute tmp_tmp_tmp_msg_0_2_0;
    tmp_tmp_tmp_msg_0_2_0.name.assign("PISLUOLQJLFFBGZDIJLDCAJJBQAU");
    tmp_tmp_tmp_msg_0_2_0.attr_type = 75U;
    tmp_tmp_tmp_msg_0_2_0.min.assign("AAIIZVDALELXZLTHEZTVTZNPMYWGTPUBSHCVBTQNPEWDKQMKAPGLZTCIOGSNJNBLVFIGUVAYROSXKPBXRFNQOUAQETYWUNTANYMAWJXHRZQLOCPRIXCDRKESZWVNIFIPYQWHEKYXOICJERXSNVBMWZZXCSOFRSMHGGBORDPCIKHVUQFVSBUYKHOXHUCOMJWDUJGVEDPBDJJZANMFQFYIYHFJFSMTKWCQGBLWJMMQDESBGOLDKDLJ");
    tmp_tmp_tmp_msg_0_2_0.max.assign("FRFZMXPBAYGHTICLUOJVDQXLCYSBHNARHWPMBJYVFQZZMXERXDZKAUJOYWOPFYFDMVOFHKCRLVITZAGAKKJMDOGSGEJIDITLZWDOAHKATPEIQPPWGIYTQGYVWFNHCPNXZFUQBJOEHUQQGAXLHFEJRJUBLPMLYSWEOCAYRPVVIMVTHILSMORUURWIERNKEXJBGEJEUWBSLHMNQPVCBNXXNKZCWCYIDTNNDLOKRSDCSDXZGSTNKQSUZTKVUQT");
    tmp_tmp_msg_0_2.attributes.push_back(tmp_tmp_tmp_msg_0_2_0);
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.6622261458956051);
    msg.setSource(28446U);
    msg.setSourceEntity(136U);
    msg.setDestination(25550U);
    msg.setDestinationEntity(145U);
    msg.timeout = 45183U;
    msg.lat = 0.4241190636590486;
    msg.lon = 0.6351715460236663;
    msg.z = 0.5084257227319735;
    msg.z_units = 0U;
    msg.speed = 0.40873690137276386;
    msg.speed_units = 193U;
    msg.bearing = 0.956107508912819;
    msg.width = 0.4605040713523042;
    msg.direction = 1U;
    msg.custom.assign("UYDZCRWGVQCAGRQJNLHTSDTWPLWDFFYOJMWNNBAKYSELQNXMTMKCYHTPUQCSNQBBJJFANKICIBDGBOJHXSKVYGDOZCIJIWXTEXUZFRXENKMUBUUIFVACFHPAYKDYEBSYLXBAZQIBOYVVSBVCLRCNEZTOHZVWTHRRFOEQM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.3445597989065138);
    msg.setSource(19559U);
    msg.setSourceEntity(147U);
    msg.setDestination(13945U);
    msg.setDestinationEntity(217U);
    msg.timeout = 61580U;
    msg.lat = 0.6433410427164682;
    msg.lon = 0.1843679325231422;
    msg.z = 0.44908630282932716;
    msg.z_units = 46U;
    msg.speed = 0.6581923117268678;
    msg.speed_units = 249U;
    msg.bearing = 0.48737832600065445;
    msg.width = 0.15754538995270528;
    msg.direction = 29U;
    msg.custom.assign("YUCLNTVAKFOYEFALCJBQRYSTFOICIGCPYXEAMQHTBZLPJPKYCXZVUJDOYAWEECXWADZVOGARNLH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.17742927521199015);
    msg.setSource(15143U);
    msg.setSourceEntity(8U);
    msg.setDestination(37125U);
    msg.setDestinationEntity(44U);
    msg.timeout = 25818U;
    msg.lat = 0.47106757517561293;
    msg.lon = 0.24691062630020366;
    msg.z = 0.32197055914937067;
    msg.z_units = 129U;
    msg.speed = 0.6966524305482688;
    msg.speed_units = 241U;
    msg.bearing = 0.4385449582955512;
    msg.width = 0.24354843710525742;
    msg.direction = 2U;
    msg.custom.assign("MYDZQJPUQACJMNRJOWFZYTAFFESXVIFYCCB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.9954268691518459);
    msg.setSource(45517U);
    msg.setSourceEntity(97U);
    msg.setDestination(22611U);
    msg.setDestinationEntity(170U);
    msg.op_mode = 3U;
    msg.error_count = 46U;
    msg.error_ents.assign("ZBNYQXLLNJBUMXCANGTVDVBCJKRFNJSSWKJVVMCYROAOGOKVHZPUQCPCMRLDITDOXTJRQQNKHXYPLKFZDGWTHKOIUWPIUYZGGFLSAZEYHIOZMMBPQWMMARQXKVVQHTICIWJUYMWPEATEOUKYPDPVIXUEIBVDHLSBKXDLDZYBSGFIAKUWHFRGENWFSFAFGMNWRXQJCJNDEBRIAMVOCSEJX");
    msg.maneuver_type = 49093U;
    msg.maneuver_stime = 0.37155653875483663;
    msg.maneuver_eta = 41259U;
    msg.control_loops = 776865363U;
    msg.flags = 117U;
    msg.last_error.assign("OOGZNRASXJKKAHZWLCIXEDULCPDGCDDUOVBZEGTXFRPQPFCMNWQEAJNUHHQTMYWYTWMRFESIEIQWXDTQEYLROGGRBGRXKOTKPNIULIRSJHAMIKATUCBTKZHDCMHVOGPMHXFYF");
    msg.last_error_time = 0.09668903329064182;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.3496745405786822);
    msg.setSource(8836U);
    msg.setSourceEntity(65U);
    msg.setDestination(49199U);
    msg.setDestinationEntity(179U);
    msg.op_mode = 31U;
    msg.error_count = 235U;
    msg.error_ents.assign("IMTMCIXQSCOBVTKFGNOYHVCXYRFPMPDPWRWOBOMTRDWGBXZGSYXYWMLVNJCMISAJXBANLIAEHPILDYVEUTUQNFAJKPHEWWBBXFDSTHRJZIPCLN");
    msg.maneuver_type = 24539U;
    msg.maneuver_stime = 0.9400369472584695;
    msg.maneuver_eta = 22777U;
    msg.control_loops = 80977415U;
    msg.flags = 53U;
    msg.last_error.assign("PLHZDHGKLSJRWQWXYUDGLYGJBBNUBTXJXQHVZSTKFPYWJLSOCBYTUKEFRQZFCMEXBSCXLUQWUSNRXPTOOAMJZYRMVQMOMLTSQXNRPANFIIOPNVEQJHRBCGRLANKIDNTMJWVKOZWTCQUSTJOAZDXFCUYQIAUDCHQDBYIFJJDEMFHEYFAEVPFOIZR");
    msg.last_error_time = 0.19361537973036202;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.27027574774611307);
    msg.setSource(16789U);
    msg.setSourceEntity(157U);
    msg.setDestination(44177U);
    msg.setDestinationEntity(117U);
    msg.op_mode = 84U;
    msg.error_count = 163U;
    msg.error_ents.assign("AEQHIQKDKVHGZHBORADGTFPSPADJRVPUYBANMJDQHZCAMEEXQWEWYWCGSVIUTLUSMRTKOQUYNVEPMZIQRIAOIOYYELWLUWKOGVFEMCOZCFFKHWLZYBUXQBJCMVPSFNJXSFOZJBTJAFCGKBBIHUJTUITFFNVUXAXXCYMDWRXPKNIPHLDNTCPAMFQGJTXDOYRZISWOELPTGBOLESWSREHRJXLSHNSMZWRCQXKZVPDTDZYGRGDBNLH");
    msg.maneuver_type = 41152U;
    msg.maneuver_stime = 0.6738927112330715;
    msg.maneuver_eta = 43763U;
    msg.control_loops = 1715039941U;
    msg.flags = 209U;
    msg.last_error.assign("JQQMWZFRZHPNRVFMMAOWGHLKBIBDFEUEZHSYJPEINMVSBAKPFQZVAJRPZJYOWY");
    msg.last_error_time = 0.9081992790241754;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.9773488501293159);
    msg.setSource(44869U);
    msg.setSourceEntity(112U);
    msg.setDestination(32222U);
    msg.setDestinationEntity(79U);
    msg.type = 226U;
    msg.request_id = 34667U;
    msg.command = 221U;
    IMC::Alignment tmp_msg_0;
    tmp_msg_0.timeout = 45904U;
    tmp_msg_0.lat = 0.01925445320080099;
    tmp_msg_0.lon = 0.21918989610893114;
    tmp_msg_0.speed = 0.152517802419455;
    tmp_msg_0.speed_units = 108U;
    tmp_msg_0.custom.assign("FOKWIHEOKDUIWPJLXDK");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 9943U;
    msg.info.assign("ZEJFMJMZGRBSJTFXZBYKFWCBOYIEDKUSKHKKUUUOPMJGPUVZSTKMEAHIDGTIFAXWCWLCNLWTRVJVLQOSRBQHNQVYVMIQRMWQGYDHPYCYZOQVZTOXMELUUOSDVXEWYCTYIIPQBWXQGAMNIGJTOBRGXZHASN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.20605453689094655);
    msg.setSource(40482U);
    msg.setSourceEntity(221U);
    msg.setDestination(18187U);
    msg.setDestinationEntity(146U);
    msg.type = 5U;
    msg.request_id = 29115U;
    msg.command = 164U;
    IMC::Rows tmp_msg_0;
    tmp_msg_0.timeout = 19322U;
    tmp_msg_0.lat = 0.06558799007121563;
    tmp_msg_0.lon = 0.7184905039276991;
    tmp_msg_0.z = 0.26444169911115667;
    tmp_msg_0.z_units = 63U;
    tmp_msg_0.speed = 0.2193269173122928;
    tmp_msg_0.speed_units = 241U;
    tmp_msg_0.bearing = 0.49712883595467794;
    tmp_msg_0.cross_angle = 0.9066521041736159;
    tmp_msg_0.width = 0.06687168897737994;
    tmp_msg_0.length = 0.48501145375921184;
    tmp_msg_0.hstep = 0.6610508528455528;
    tmp_msg_0.coff = 190U;
    tmp_msg_0.alternation = 215U;
    tmp_msg_0.flags = 106U;
    tmp_msg_0.custom.assign("CCGZVQXOBDEDYROWNXEJUIWCJHTAOR");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 32118U;
    msg.info.assign("FGMHXRRDGRQDRPLXENWRPPUFXOEVALMHLRZMCWZZWCCNJMYDQDQIHHYKQVIBVLTTOASBZZIXFCYWPYYPEKKURARMLYCVXTIHNQXGRRDGPHEIOFOWQFIBUIINMCKXYAVOOSHEZTISLFKCNVVKGZPJTOSVKZEYZXUJGUDMQTSEYGSOKWDVSHUWNEFPBDEJTAPIKLDSCNAMQSGWFWFEMHBVBLMATOPBAUBBSNNXUZJCHJXKNCBUJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.2508050289012257);
    msg.setSource(9875U);
    msg.setSourceEntity(150U);
    msg.setDestination(52007U);
    msg.setDestinationEntity(44U);
    msg.type = 219U;
    msg.request_id = 49948U;
    msg.command = 115U;
    IMC::CommsRelay tmp_msg_0;
    tmp_msg_0.lat = 0.15826345491092042;
    tmp_msg_0.lon = 0.5202907492602453;
    tmp_msg_0.speed = 0.7961411086392232;
    tmp_msg_0.speed_units = 93U;
    tmp_msg_0.duration = 47548U;
    tmp_msg_0.sys_a = 53452U;
    tmp_msg_0.sys_b = 60118U;
    tmp_msg_0.move_threshold = 0.38800825596445543;
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 47854U;
    msg.info.assign("VMRJNJXOGOLZDYOXAOWBMZZRSRWECYJUHPVHWECXLICCNISGOVIPNQPHASSDSFVJWQVUZBWMQFSJGOFFNDYHXOIVGQYPLUSCZVZQB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.29468970156002294);
    msg.setSource(53146U);
    msg.setSourceEntity(235U);
    msg.setDestination(1758U);
    msg.setDestinationEntity(136U);
    msg.command = 52U;
    msg.entities.assign("ADIKMIAPXAWOUGJGBEKTQTFFBVMXNTPHFTPGWEXJYRPDERJLGFNADUBVIYQSTPIVSABCXDTXLVKYGXNTZVPMTSZIBDOHPNGZVGMYS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.7395840828866243);
    msg.setSource(6265U);
    msg.setSourceEntity(207U);
    msg.setDestination(10942U);
    msg.setDestinationEntity(171U);
    msg.command = 142U;
    msg.entities.assign("FUUUBWOALJWUBNOGLZEZDOMZDIDMXMQUAAVTJGCLRESLABGIVQINTHTCTENYFJPVXYPCWTYKAEXGDHGEIHMFZVGLOSISJNBLMNOAHDQLOYHFPSKSMPITSYCFKTJGACQJQYKMBBQJWXIGBHZQAYWNZDITXCNLICROQUBPXCIJWMEVKRBEWRXFDDKUUDQKKYRRATVWMZBHFNSMFXNSNKGUPTKSZAFDVHEVFGWRPUYCOERCWS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.23645062888042934);
    msg.setSource(32998U);
    msg.setSourceEntity(53U);
    msg.setDestination(36119U);
    msg.setDestinationEntity(109U);
    msg.command = 46U;
    msg.entities.assign("QQPBGDWNKFLDZSSTISMHBFHYTXVQWAYQJDJVBRUOMEJTZXXPSNBDWDPCGDUUVZCNJVELMSFUPJUMYFLTUHGXFWZACWGOHOPVMZLJGGYRDXXGJVPUSQHRSAYEKCPXUTIVSRQMIADIFAJCNZGONWC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.04687733319870713);
    msg.setSource(29319U);
    msg.setSourceEntity(130U);
    msg.setDestination(54315U);
    msg.setDestinationEntity(183U);
    msg.mcount = 157U;
    msg.mnames.assign("DFQFVBVRLWJUPBLGGMNEVXOTVOQONDCNHATZIJKWZZJFTQEVEPWQQOGIBDUDOUC");
    msg.ecount = 131U;
    msg.enames.assign("RYUCPNXPLBNPVOTJOIUOIIJHXYGHUZT");
    msg.ccount = 128U;
    msg.cnames.assign("ZFMZMNAKDIHTWIDFBXLZGQOINXJJEZLRJMNTRPCWQUNOKLUQQECEPECPDFFFBSRSKHQAHLHMKVQDJCTDGSGKAEMVBHVDPLDUYGHUOUUJZIRRTYWXELTYMWTPKDUABPMP");
    msg.last_error.assign("QYBWGKBSFJIBBHLIMSL");
    msg.last_error_time = 0.3044105947325739;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.0381291780011882);
    msg.setSource(19912U);
    msg.setSourceEntity(96U);
    msg.setDestination(33834U);
    msg.setDestinationEntity(191U);
    msg.mcount = 12U;
    msg.mnames.assign("QAWUDEXRLIDWUKCDJUTSYHNIZZBIFAYUXILNMLBARRKGYCMXUAOCXTNOOWCSFYUUUJORSVPHCTEAKUVQYLOGMINNYBKHVVXJUJDFHPKYNWQSADGSSQELKMYDJBPHJFZQWWFGOQAZVKQQBSTGMJTEYVZRHVWEGIWCDMIOONTTBGMTFVEFFOPWLLZLOZEPIXIFHXKBVXZJVIWLQRCAQXXBKECSNCANRKPFLHDRRCMDJJMS");
    msg.ecount = 166U;
    msg.enames.assign("DIJTMUQPEHDNRVODEOHOKINKSBFPPQSZISDGNSWZLXTBFIAUXDWCUKXMZPLTQWEAVHCPYZLRKLTUUOZOSZGGISFFGSEBYOCUPWHGMHJFHXTSCRXZCHKAN");
    msg.ccount = 180U;
    msg.cnames.assign("ADUEZOIXYYZPHQIEWMKOUEFCBBBODEUTFIRAWGNICVGNEDNRTITGZCUGCTQOZFUOHHOVGDDCQWVXAKSJVITNWCRAOLVNNPQPEHVJFZVVRXOQXFLHNBWILHXPJJHDRRXKSDSYMBDRFGIMQOCXQGJDLYZRXIKKNTPSJSVMZLK");
    msg.last_error.assign("CPIWDXAHQILVRYIQMNOLTIXX");
    msg.last_error_time = 0.625706259046555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.9392218970356658);
    msg.setSource(29345U);
    msg.setSourceEntity(143U);
    msg.setDestination(30952U);
    msg.setDestinationEntity(70U);
    msg.mcount = 22U;
    msg.mnames.assign("ELVCMODWJZWLZOGMMIEASRBYQTZVNYBKTSIJKIRJLNHPMIEUOAWZKAQY");
    msg.ecount = 217U;
    msg.enames.assign("UITKSHTHGHWYHVKJZHOEFFIDTBDSLFKCKRRACMHTRQRETSKXNPPMTESCGMRBGS");
    msg.ccount = 58U;
    msg.cnames.assign("KEDSSCZYHBACDTDTGKOMX");
    msg.last_error.assign("HQKZXATYQFVOFQOYOHJKUDRJL");
    msg.last_error_time = 0.40283938520663054;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.5631682446156463);
    msg.setSource(2235U);
    msg.setSourceEntity(12U);
    msg.setDestination(1565U);
    msg.setDestinationEntity(127U);
    msg.mask = 253U;
    msg.max_depth = 0.9406838014507701;
    msg.min_altitude = 0.6249934698306046;
    msg.max_altitude = 0.8167408507030589;
    msg.min_speed = 0.7148978560481902;
    msg.max_speed = 0.7980295321016446;
    msg.max_vrate = 0.8484723709702708;
    msg.lat = 0.41572751072248415;
    msg.lon = 0.10305175551270795;
    msg.orientation = 0.5365015242263955;
    msg.width = 0.2858302086165353;
    msg.length = 0.8298561283484306;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.5033107386968962;
    tmp_msg_0.lon = 0.5759786954652707;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.32672195079046473);
    msg.setSource(15231U);
    msg.setSourceEntity(150U);
    msg.setDestination(19270U);
    msg.setDestinationEntity(2U);
    msg.mask = 191U;
    msg.max_depth = 0.609676364939603;
    msg.min_altitude = 0.45195555972486057;
    msg.max_altitude = 0.34532875005146235;
    msg.min_speed = 0.11580779050017043;
    msg.max_speed = 0.9001923255701513;
    msg.max_vrate = 0.47763222693301643;
    msg.lat = 0.172035078781819;
    msg.lon = 0.8390181570113032;
    msg.orientation = 0.24918775574040508;
    msg.width = 0.5444708861591876;
    msg.length = 0.4568544804530522;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.08822787943851096);
    msg.setSource(28811U);
    msg.setSourceEntity(197U);
    msg.setDestination(8550U);
    msg.setDestinationEntity(92U);
    msg.mask = 108U;
    msg.max_depth = 0.3304418432655194;
    msg.min_altitude = 0.13307470265675547;
    msg.max_altitude = 0.002055317705562776;
    msg.min_speed = 0.7892843151869942;
    msg.max_speed = 0.05260476104458833;
    msg.max_vrate = 0.8045863581747587;
    msg.lat = 0.6295814731108205;
    msg.lon = 0.09364492634060206;
    msg.orientation = 0.8545252751355044;
    msg.width = 0.42745026805297903;
    msg.length = 0.38029684465042923;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.5865695066677706);
    msg.setSource(48430U);
    msg.setSourceEntity(199U);
    msg.setDestination(36875U);
    msg.setDestinationEntity(217U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.47228635691571297);
    msg.setSource(45827U);
    msg.setSourceEntity(239U);
    msg.setDestination(55137U);
    msg.setDestinationEntity(32U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.9927801818113662);
    msg.setSource(8366U);
    msg.setSourceEntity(173U);
    msg.setDestination(36460U);
    msg.setDestinationEntity(93U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.7618510078913258);
    msg.setSource(12924U);
    msg.setSourceEntity(186U);
    msg.setDestination(29589U);
    msg.setDestinationEntity(128U);
    msg.duration = 9393U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.7376428374227669);
    msg.setSource(1130U);
    msg.setSourceEntity(123U);
    msg.setDestination(17216U);
    msg.setDestinationEntity(222U);
    msg.duration = 37989U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.5387296328692102);
    msg.setSource(6178U);
    msg.setSourceEntity(14U);
    msg.setDestination(55801U);
    msg.setDestinationEntity(237U);
    msg.duration = 18793U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.06760888056912628);
    msg.setSource(31955U);
    msg.setSourceEntity(176U);
    msg.setDestination(54977U);
    msg.setDestinationEntity(249U);
    msg.enable = 171U;
    msg.mask = 1306482608U;
    msg.scope_ref = 3423170537U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.7995370876275196);
    msg.setSource(11698U);
    msg.setSourceEntity(63U);
    msg.setDestination(23817U);
    msg.setDestinationEntity(175U);
    msg.enable = 176U;
    msg.mask = 1824329053U;
    msg.scope_ref = 653708124U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.5716608554659516);
    msg.setSource(6611U);
    msg.setSourceEntity(151U);
    msg.setDestination(12638U);
    msg.setDestinationEntity(207U);
    msg.enable = 177U;
    msg.mask = 1481170805U;
    msg.scope_ref = 1437249756U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.8752851652368143);
    msg.setSource(4415U);
    msg.setSourceEntity(43U);
    msg.setDestination(16401U);
    msg.setDestinationEntity(231U);
    msg.medium = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.866845080481261);
    msg.setSource(52925U);
    msg.setSourceEntity(161U);
    msg.setDestination(22750U);
    msg.setDestinationEntity(254U);
    msg.medium = 250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.5400642723503956);
    msg.setSource(65038U);
    msg.setSourceEntity(208U);
    msg.setDestination(51018U);
    msg.setDestinationEntity(40U);
    msg.medium = 251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.1420977115301627);
    msg.setSource(3722U);
    msg.setSourceEntity(141U);
    msg.setDestination(31739U);
    msg.setDestinationEntity(116U);
    msg.value = 0.10748083212923376;
    msg.type = 15U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.32244407807034303);
    msg.setSource(14425U);
    msg.setSourceEntity(81U);
    msg.setDestination(58238U);
    msg.setDestinationEntity(86U);
    msg.value = 0.4453181797874681;
    msg.type = 134U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.45812340414940533);
    msg.setSource(6948U);
    msg.setSourceEntity(160U);
    msg.setDestination(14311U);
    msg.setDestinationEntity(221U);
    msg.value = 0.8307224950601069;
    msg.type = 113U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.4647892386575615);
    msg.setSource(64063U);
    msg.setSourceEntity(117U);
    msg.setDestination(47212U);
    msg.setDestinationEntity(85U);
    msg.possimerr = 0.484165387233472;
    msg.converg = 0.06845346046647627;
    msg.turbulence = 0.8612904995442565;
    msg.possimmon = 106U;
    msg.commmon = 7U;
    msg.convergmon = 246U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.6010685746243702);
    msg.setSource(7886U);
    msg.setSourceEntity(45U);
    msg.setDestination(48923U);
    msg.setDestinationEntity(87U);
    msg.possimerr = 0.3335858360460393;
    msg.converg = 0.2593341694858281;
    msg.turbulence = 0.33910199946781516;
    msg.possimmon = 217U;
    msg.commmon = 95U;
    msg.convergmon = 131U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.7584507518666761);
    msg.setSource(38510U);
    msg.setSourceEntity(88U);
    msg.setDestination(2510U);
    msg.setDestinationEntity(3U);
    msg.possimerr = 0.8165810444266869;
    msg.converg = 0.4975762693506022;
    msg.turbulence = 0.30053730297152426;
    msg.possimmon = 245U;
    msg.commmon = 140U;
    msg.convergmon = 166U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.6057071282628727);
    msg.setSource(62781U);
    msg.setSourceEntity(35U);
    msg.setDestination(51805U);
    msg.setDestinationEntity(177U);
    msg.autonomy = 190U;
    msg.mode.assign("WYDRVHENNUYNFPZTESNMUETOJXRPPVEJKQJKRXMFWQEBHPWIVMAGTVBZRBKYELYLUXINNUFABIWUBRANSYEDYIHYBAZQCMZJQKGGZMHTJSOURXWIFIHONEHAGOICOLECLPKRUPWUDMDYGDMUFXMLOVIAICFRBQPBLFV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.5309558154838885);
    msg.setSource(18449U);
    msg.setSourceEntity(137U);
    msg.setDestination(28660U);
    msg.setDestinationEntity(68U);
    msg.autonomy = 35U;
    msg.mode.assign("ZSPAONLVCJVQOCUJDWZDHTNBGMTZZXLVQRLGKDHYSLFVMAGKJOYPZQFTIHBNUGFLAIDEOWTFKURRZEAWEEDSBTYATLYRGMECBAUXYCBJNITUPOMNKBCUNXOJDKOYYJSIVKFBIPPLFOGBXPXOZICURIREIG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.877949044296967);
    msg.setSource(62977U);
    msg.setSourceEntity(216U);
    msg.setDestination(54290U);
    msg.setDestinationEntity(157U);
    msg.autonomy = 75U;
    msg.mode.assign("KCYWGECXTMUQWNKZNFWNQZPXIVIHSVJZGGRTIUXNUMYHLDDVGTRBTSXBPQWMDJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.4637763082573312);
    msg.setSource(19003U);
    msg.setSourceEntity(174U);
    msg.setDestination(4214U);
    msg.setDestinationEntity(68U);
    msg.type = 191U;
    msg.op = 37U;
    msg.possimerr = 0.44125071545764194;
    msg.converg = 0.611034594347133;
    msg.turbulence = 0.5261034615973732;
    msg.possimmon = 117U;
    msg.commmon = 67U;
    msg.convergmon = 249U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.997710821531939);
    msg.setSource(42021U);
    msg.setSourceEntity(110U);
    msg.setDestination(57743U);
    msg.setDestinationEntity(151U);
    msg.type = 6U;
    msg.op = 172U;
    msg.possimerr = 0.38073927941570274;
    msg.converg = 0.7964305220854041;
    msg.turbulence = 0.4641769627088981;
    msg.possimmon = 214U;
    msg.commmon = 215U;
    msg.convergmon = 209U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.20881832292883418);
    msg.setSource(18841U);
    msg.setSourceEntity(97U);
    msg.setDestination(17700U);
    msg.setDestinationEntity(171U);
    msg.type = 123U;
    msg.op = 102U;
    msg.possimerr = 0.598952091348208;
    msg.converg = 0.5255837458564085;
    msg.turbulence = 0.5564247945543137;
    msg.possimmon = 232U;
    msg.commmon = 157U;
    msg.convergmon = 158U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.13247581910894302);
    msg.setSource(47437U);
    msg.setSourceEntity(216U);
    msg.setDestination(34754U);
    msg.setDestinationEntity(134U);
    msg.op = 190U;
    msg.comm_interface = 38U;
    msg.period = 24751U;
    msg.sys_dst.assign("DOBLYJCIOKTXAXKUPUQVAPIGHCITDEAPKVEALSMJYKRJWSOLDTHPICEJEHVYQUFFNFLPWQIWLTAPKMTQFESVNZFWSVQRPZQMXAGVPJVMDXLFRUOTLBKKGDHCKZSGXSJIQAFBECYJMITBWCDHVWIDHTCCXYSUWLZZNVMURGWBUZHNZRSONBNRZIECOYGTBKJGEDALNNKMSWMOXBHJQUCFVMQPXF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.6393502804648402);
    msg.setSource(47841U);
    msg.setSourceEntity(110U);
    msg.setDestination(20859U);
    msg.setDestinationEntity(125U);
    msg.op = 24U;
    msg.comm_interface = 145U;
    msg.period = 51546U;
    msg.sys_dst.assign("SNMHDYKBUIXDJTGUCPQUIBOHJNHUUBMBOMDBLTIRKFHEZQQLBYMIAXBRCXLSOVSPDVGHABSJJUTGWSWSFYVAHZJPZFWDFWLMOVKS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.7136601282653477);
    msg.setSource(16853U);
    msg.setSourceEntity(241U);
    msg.setDestination(1338U);
    msg.setDestinationEntity(239U);
    msg.op = 169U;
    msg.comm_interface = 113U;
    msg.period = 32354U;
    msg.sys_dst.assign("XOCDJFVKBZYLXKNLBWKAJTXGNNKSYCOGJYXWFXMIJIUMMEHTXBODDGSYKRZRCZQFNGPJCHDCQZGWQDXUFGAOLEOCAKKJPUMHIPUWSDQKWSUFBUEWFAYPSCTJMFVTKDJZNTQMLNBEQEZLCIPSPIVGBNIVDSMFCPXADOERVBNIVUBHYRWPSAGTCRIIUAUIEWAWDRTRLNTHREYPN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.3077611723576872);
    msg.setSource(56937U);
    msg.setSourceEntity(43U);
    msg.setDestination(25109U);
    msg.setDestinationEntity(109U);
    msg.stime = 3038649488U;
    msg.latitude = 0.7956692840326207;
    msg.longitude = 0.3208531305825243;
    msg.altitude = 14489U;
    msg.depth = 10642U;
    msg.heading = 3335U;
    msg.speed = -14334;
    msg.fuel = -42;
    msg.exec_state = 122;
    msg.plan_checksum = 28537U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.7252678814958958);
    msg.setSource(41187U);
    msg.setSourceEntity(105U);
    msg.setDestination(23101U);
    msg.setDestinationEntity(227U);
    msg.stime = 3189434124U;
    msg.latitude = 0.4427794487977078;
    msg.longitude = 0.8930054154829498;
    msg.altitude = 63748U;
    msg.depth = 50465U;
    msg.heading = 44781U;
    msg.speed = -17936;
    msg.fuel = 2;
    msg.exec_state = 88;
    msg.plan_checksum = 56043U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.37459084346774885);
    msg.setSource(54606U);
    msg.setSourceEntity(55U);
    msg.setDestination(9523U);
    msg.setDestinationEntity(133U);
    msg.stime = 3446557090U;
    msg.latitude = 0.21227325492767202;
    msg.longitude = 0.8333689232831712;
    msg.altitude = 59097U;
    msg.depth = 48380U;
    msg.heading = 35440U;
    msg.speed = -5526;
    msg.fuel = 87;
    msg.exec_state = -125;
    msg.plan_checksum = 328U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.07964876185233749);
    msg.setSource(7571U);
    msg.setSourceEntity(72U);
    msg.setDestination(31102U);
    msg.setDestinationEntity(253U);
    msg.req_id = 31014U;
    msg.comm_mean = 66U;
    msg.destination.assign("CHOEOAJRCEYRBUMBGK");
    msg.deadline = 0.9955607689055451;
    msg.range = 0.4796789903526981;
    msg.data_mode = 16U;
    IMC::AcousticSystemsQuery tmp_msg_0;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("KPRWPNVGIVTIJKEJFICEQJHAIAWVQUZUPQBERRMRQSSPEHCSFUZVNQCUMAYADHDNXJUFZUWGFZDWSRYPQLF");
    const signed char tmp_msg_1[] = {-112, -110, -11, -106, -39, 28, -84, 54, -111, 105, -82, -7, 53, 96, 22, 52, 4, 62, -118, -24, -87, 111, 21, 19, -64, 89, 64, 5, -82, 86, 4, -109, -69, 64, -122, -124, 23, -17, -8, 38, 55, 11, 27, -86, -121, 106, -26, 108, -22, 106, 107, -90, 43, 27, 33, -33, 0, 37, -97, 101, 55, 64, 122, 18, 109, -114, 114, -125, -104, 105, -80, -109, -29, 43, 70, -8, 105, -36, 89, 4, 50, 69, 110, 16, -108, 77, -121, -60, -32, -125, -57, -114, -121, -29, -6, 49, 56, -39, 22, -9, 20, 21, 68, -89, 78, -94, -39, 88, 84, 36, -1, -67, -68, -14, 42, 86, -77, -44, -48, -80, -12, -63, 0, -15, 89, -31, -98, -107, -114, 98, -65, -74, 34, 80, 12, -21, 43, 52, 62, -16, -98, -46, 15, -17, 41, 55, -55, 46, -80, 24, 80, 74, -56, 1, 26, -69, -62, -82, 111, -52, 3, 51, -6, 27, 112, -44, 5, -73, 113, -9, 74, 30, 93, -40, -5, 53, 3, 69, -81, 96, 49, 37, 16, -106, 109, -79, 106, 44, -117};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.8485732837298341);
    msg.setSource(58328U);
    msg.setSourceEntity(146U);
    msg.setDestination(56193U);
    msg.setDestinationEntity(87U);
    msg.req_id = 4527U;
    msg.comm_mean = 210U;
    msg.destination.assign("VMWSVKSZMCGIOGLIYEJNDTSPTBCWGDXYGELFIJAZQGBXYCBWNOKSUGXUYWAUPLSQOZVJOXHUQCFFIGNBVCCAEBIJDBSILUJFIENKPRPJZHKSHQYTQKWHRYRNFVLRNBRVNAEXERMUOYKLNGBUOMKPVJKJUXMWTBXDZDCZHUFCHMWADCSTXOKLRHZRWDSYEGEPPIHEIAQTQRFTNSVARKLPDHMFFMYZ");
    msg.deadline = 0.7515558693300848;
    msg.range = 0.2511889431167833;
    msg.data_mode = 138U;
    IMC::PlanControlState tmp_msg_0;
    tmp_msg_0.state = 141U;
    tmp_msg_0.plan_id.assign("BXFJDVIKRRRMVKOZCCFUBBKCVTRUQLOJYCOYHHABRZMHMKXYZANYGWPEPCHGGXTKYWEIUZTGSVIJWLVQSJTTDIYQLWANZJVAYWHVPMZUDNHBHSPWRPPNBNSUPSFDQDGCFEMWNKSZXEAITEXOEJLKOGJIERVGHLNEPTZMADUBPAJXQUSUCZNADXOMVWCAOGZLIQISHJDRYQTLFFXOPLFLBBKYSEVCKITAQEGSD");
    tmp_msg_0.plan_eta = -234012261;
    tmp_msg_0.plan_progress = 0.8251764855931292;
    tmp_msg_0.man_id.assign("NYUNZNLFMNTERUJKLHGVOHGJUZUDOWGICZCHIVEKTFCAVCQTGJDBRVGTTBMLXKPOUMVTKWAOSIWYMOFZDIMWLIORHWSGGNWGUSCBTKSELQQNPVNXEACJVEQIWPZAFQDKFRCFYHSTJYOSGLJWAPRSJVFR");
    tmp_msg_0.man_type = 61174U;
    tmp_msg_0.man_eta = 1726012839;
    tmp_msg_0.last_outcome = 156U;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("ELSXKJXSOHZHDGFQWZFIDKZRLFTSKZYDEXPMSCHEGBRQDYDGQIEJQQWPFROUEHMYHYMJTPFGTVMUQUANTOHIVNAIRNZVVXILHYNXRNEANCMBWTVPH");
    const signed char tmp_msg_1[] = {-126, 48, -119, -84, 123, -51, 109, -77, 35, -10, 67, 65, 12, -97, -100, 21, 116, -4, -45, 108, 78, 119, -2, -62, -22, -25, -23, 63, 26, 5, 2, -32, -2, -126, -105, 122, -8, -55, 9, -36, -82, -113, -86, -70, 7, -38, 77, -122, 13, 88, -50, -50, -64, 85, -114, 85, -112, -123, -110, 57, 73, 79, -26, 90, -27, -58, 22, -77, 109, -1, 70, -87, 33, 87, -3, -12, 24, 54, 41, -103, 69, 63, 65, -63, -54, -52, -19, -125, 124, -15, 104, 70, -103, 37, -6, 117, 31, -116, 42, 3, 11, -122, 29, 94, -58, 48, 52, 75, 65, 100, 77, 113, 25, -21, 15, -51, 59, -41, 116, -21, -84, -103, -3, -77, 58, 42, -80, 91, 13, 80, 50, -81, 65, -35, 37, -96, -64, 95, -77, 96, 96, 51, 105, 91, 109, 111, 93, 61, 9, -85, 7, -123, 12, -49, 119, 85, 73, 20, -40, 59, 117, 124, -91, 77, -58, -28, 93, 3, -49, 58, 110, 88, 11, 22, -61, -72, 105, 32, -38, 2, -100, -102, 15, 65, -97, -110, -105, -84, 70, -52, 26, -21, -17, 56, 10, -18, -18, 107, 74, 14, -127, -62, -36, -79, 12, 121, 84, 107, 19, -33, -128, -80, 56, 14, -94, 95, 59, -99, -22, -55, 42, -6, -104, -99, 67, -111, 89, 90, -85, -9, -53, 10, -79, 28, -124, 102};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.6616372813121879);
    msg.setSource(33487U);
    msg.setSourceEntity(148U);
    msg.setDestination(10306U);
    msg.setDestinationEntity(0U);
    msg.req_id = 22057U;
    msg.comm_mean = 88U;
    msg.destination.assign("ULGHWZEBUFBTYYGXYWHOTWMXXIENODTECLCSXHYHJJCKCZRAUVDFXVPZIESCBPUHFSDXCWNHZWXBVVIDHBTPGCRAYNMVZZBLDOAMZROTMTSKLKKDQYTOHTGUKIBWCSKNAGPDLRYLUSRGQAWRPFOSPFNVEELOQMJITPAJFWBD");
    msg.deadline = 0.7826022580216551;
    msg.range = 0.32369930887156184;
    msg.data_mode = 57U;
    IMC::PowerChannelControl tmp_msg_0;
    tmp_msg_0.name.assign("XGKWUFWMANYXVARPUOIZPFLBFTOFZQQONMUFSALGGDIKXLWQTHNAEVSOWLJDNMSXSCCREQSLKTHRJUKBUDYBZRXKBCRLDURQYPRYHMTCWBHEHTCIPAHEFNKYSFCXFMJZWCISZJAIYPJRJBHHKNCAQGLEGPEYWDDRNTEIKPBNVMQOQBGCKMZAFEASIOUXKYMJZOTZJ");
    tmp_msg_0.op = 252U;
    tmp_msg_0.sched_time = 0.15598899122711496;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("ZAUSQCDWWZTJVGLGMAVPFTNKWDBRFYYATDRACVXJRHJNB");
    const signed char tmp_msg_1[] = {-60, -65, 27, -110, -64, 36, -111, 28, -10, 29, 3, -63, -121, -105, -105, 15, 36, 55, 57, -19, -4, 93, -8, 44, 33, 23, 126, 25, -103, 59, 34, 18, 2, -85, -61, 102, 124, 88, 9, 31, -55, 20, -2, 60, 85, -94, 0, -5, -60, 82, -65, 91, -124, 5, -71, -67, -61, 81, -14, -19, -10, -126, 6, 73, -1, 26, 78, 110, -44, -100};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.864014196305848);
    msg.setSource(55549U);
    msg.setSourceEntity(12U);
    msg.setDestination(33619U);
    msg.setDestinationEntity(230U);
    msg.req_id = 27559U;
    msg.status = 180U;
    msg.range = 0.49355318144210814;
    msg.info.assign("LNTWRKTEQJNTZCEUKCPYWZAHMNPVYQZGFZMUPNXYWJTHERQZHMNISFIWGULXWPOVZISNXTDFDIFAFASMJRTMBITFNYIBQLLARGSJUOSPJXYDJTREKLVUYGEPHBDFEQKWGBAYODFMPQMQLEODUWLGBVEVDIHGAJSGGQCFXPXCBXLBQOPJBWJWHONHHANLAADLCOZIX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.770580641855791);
    msg.setSource(45083U);
    msg.setSourceEntity(121U);
    msg.setDestination(56190U);
    msg.setDestinationEntity(112U);
    msg.req_id = 19576U;
    msg.status = 67U;
    msg.range = 0.19645134929907582;
    msg.info.assign("JMGEIHBZDPVFTWHCAXDZUZWMTNLLJKNEEXSWIOLDAUAPBCEFIVRHWKHTBGMXKAUJGTNCQNQROSNMJTJQUAHTRDHFPUJUQXZBPTOAYUEJXBRKHSKNKWDBIYMFHSBYTXXEVIQALMWIEASPWBWPQVIJZFLPGRFXYCWKDDSYGVO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.7092249950130144);
    msg.setSource(7103U);
    msg.setSourceEntity(169U);
    msg.setDestination(52965U);
    msg.setDestinationEntity(251U);
    msg.req_id = 26654U;
    msg.status = 127U;
    msg.range = 0.2196885675695741;
    msg.info.assign("PRVDKMVFUUJACIYHAQEPNXBDWDAZVTGRTVCKNCVABPGBVOTYRVQMHYYXOZWMYQEITPFUSRUPAQIEKGYIULWCCLTPHLDDUFTQJFEOSUHSHUJIXIVJNQHRAESXKWHZWACJLDYOOZHSZINDMNGBLHXBJIMYRMRUWAXOMSZTSAGZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.5170012401691251);
    msg.setSource(18700U);
    msg.setSourceEntity(23U);
    msg.setDestination(30898U);
    msg.setDestinationEntity(252U);
    msg.req_id = 20190U;
    msg.destination.assign("UBAXFMFLGMBIBCBTVXPZXFOWOTIIFENIWHKIYJGHLKNBZOHZMWCWXDSMKBJRGJYCWDJGGZVMFSVLYEGVAHLKUDVYUQUNASELZTDSJIOFVQTJAUCAPPSKVAMJZHQZXUMIVZOETYYMGEVAEUKCWQSEQWTKQNQLDNNFUWMNF");
    msg.timeout = 0.7219429363588955;
    msg.sms_text.assign("ILYAKNCLHGGXHPQJRAWIFRVXCN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.2701772675875552);
    msg.setSource(6997U);
    msg.setSourceEntity(99U);
    msg.setDestination(58228U);
    msg.setDestinationEntity(230U);
    msg.req_id = 33253U;
    msg.destination.assign("PJJMWBCBHXIILGFNXVGHVXHWCPSETFPYLYZGMHXOTVRCOZYCMKBKTHWJKMYWTKNTFOJVARXMKAUWADQFPUBTLZFEKFVRNOESQALJRCEUXKYJZDSYLQPPAURINYWSUBGVYLWBOLUQDRMQDTQEIESKFGTDSDWPJKOEJPZNZSYAVXQQFLGETNODXVCAHFIXIRWYZSBIUVPTFKABQHZONUGHCRBLUNBDEJSMRJHINDMZPMGQNXARGHCOC");
    msg.timeout = 0.8643923655832454;
    msg.sms_text.assign("CFPZRCOCWFKLTZMPYEYOOFQAFYBENGKMJHZLJDKNPWVZAMEAXRBBUTIVACUGRPNVFCPIVZDPUNNHTSJNKRBLQIBIJGAGQFUIWDEIQOEQPMQTTKBVJOTFBFOZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.46124819169940157);
    msg.setSource(61521U);
    msg.setSourceEntity(169U);
    msg.setDestination(62792U);
    msg.setDestinationEntity(159U);
    msg.req_id = 29975U;
    msg.destination.assign("QLWHETPBBZYLPLDTVMNSWKCNOJOTNLQFAYMNKGIEOGVPZOWMZERSQWLBPDYYJKBRZUGNTVKIRNHBSHCUJUWIQURFCSIXXFDCCBMDKCGEKGEENJJOLXBTVVGIERYIPSCYQZRCDNIHAUSIUFPEGHTEJMVFGVWUAHSRCXHQAMZXTURXFZVMQAUXZWPMKVFOJNBWKDOUPYAWJZMHF");
    msg.timeout = 0.353277750087448;
    msg.sms_text.assign("PTXPSZVDWFVUODJGBPYJEROYEGWEYJVZXNKCRBFAIFECDBF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.6917269533504535);
    msg.setSource(46864U);
    msg.setSourceEntity(28U);
    msg.setDestination(2373U);
    msg.setDestinationEntity(169U);
    msg.req_id = 40101U;
    msg.status = 129U;
    msg.info.assign("TGAZTAAKOOUSSLCYZDGHXRAOUORFYDKQQEXCUPUGVTPAVZNGLTVEHBFBBXLJWULREFTCTNUDQIAQGLZWWDSCCFCCZFJMPZDWTJHYSDMYNRDVAMKNEVPLOPIQMSYBJVLOIZIHYXETCLKWQSYSYNDGV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.8232471506296614);
    msg.setSource(30037U);
    msg.setSourceEntity(162U);
    msg.setDestination(4079U);
    msg.setDestinationEntity(232U);
    msg.req_id = 1844U;
    msg.status = 1U;
    msg.info.assign("GIBZKILFTMKKEEXJSSGRWAUNKTMQKABPVNFWWYGNNDBQMSTFOPJUUTMHUNXKVVWNCLLZYGFHCTALFEEGXYRJECZJXOIPPHHMRDVERFHIDSIIPRCKLRZKHZIYAUNVFBPSNZHLYBAQXVYCLMVWDCFLAROJYEOQTNJGDYMDMSOOXBZAPJBDVAUFMQSZBSFQYXGAQTOWHPRAVEIBJCDIXVCSOGL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.07811457407659284);
    msg.setSource(65394U);
    msg.setSourceEntity(130U);
    msg.setDestination(61621U);
    msg.setDestinationEntity(155U);
    msg.req_id = 2502U;
    msg.status = 18U;
    msg.info.assign("SYOOEPBRUXLSFDFYHUFWLMTVMVBIAKLDNGTWBVNOULNRRSYAVAPAYEKURKDMTRCJAIQUMGDZKITHYFXCDBCTRODJTQGFTQFKGOXMHIFOYEB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.1638175125871587);
    msg.setSource(52349U);
    msg.setSourceEntity(103U);
    msg.setDestination(62130U);
    msg.setDestinationEntity(35U);
    msg.state = 136U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.7929263575959956);
    msg.setSource(9001U);
    msg.setSourceEntity(216U);
    msg.setDestination(56999U);
    msg.setDestinationEntity(75U);
    msg.state = 157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.36178332725990126);
    msg.setSource(35980U);
    msg.setSourceEntity(151U);
    msg.setDestination(32030U);
    msg.setDestinationEntity(187U);
    msg.state = 48U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.6782731279640359);
    msg.setSource(54550U);
    msg.setSourceEntity(6U);
    msg.setDestination(64129U);
    msg.setDestinationEntity(82U);
    msg.state = 173U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.7328004197693196);
    msg.setSource(63053U);
    msg.setSourceEntity(45U);
    msg.setDestination(496U);
    msg.setDestinationEntity(88U);
    msg.state = 10U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.7904206757904964);
    msg.setSource(60093U);
    msg.setSourceEntity(171U);
    msg.setDestination(20685U);
    msg.setDestinationEntity(162U);
    msg.state = 23U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.9128076054586722);
    msg.setSource(18620U);
    msg.setSourceEntity(80U);
    msg.setDestination(28088U);
    msg.setDestinationEntity(136U);
    msg.req_id = 54261U;
    msg.destination.assign("YKIJJOJYPKRQLXRWBKFRWWHXSLXLSVEAORWZGDIIVDHRUCXBKBEIRFCEUOLSQCQMZUWNOAFRVAGYSNDQKJINHFXIPBEFDMKUQEHWSWVEVLNKBOKZXPPYAZPTYTILNBQLDSUNUCTHSKSGT");
    msg.timeout = 0.7579052884632658;
    IMC::SmsRx tmp_msg_0;
    tmp_msg_0.source.assign("GOISMNQDDGJMCALEAIQSNVOBMJSYFHXWSOIWGCHQKNTCZHKJEUCBNBQWJLTDZUAITDOGBIMSACKPXLUMXFAACPXGRBWDEUPX");
    const signed char tmp_tmp_msg_0_0[] = {-122, -7, 60, -68, -52, 56, -12, -119, 55, -14, 71, 108, -64, -112, -94, 57, 1, -84, 50, 47, -104, 107, -54, -21, 92, -101, -109, 49, 35, 105, 115, -58, -111, -106, 52, -31, -11, -88, 0, 121, -112, 87, 121, -101, -5, -27, 125, 87, 104, -80, -18, -51, -77, 67, -60, -121, -18, 107, -64, 124, 13, 36, -118, 77, -40, -123, 35, -47, 82, 68, 48, 31, -97, 113, 24, -79, -23, -2, 36, 110, -121, 116, 71, 76, 22, 27, 10, -127};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.9358231835529112);
    msg.setSource(57513U);
    msg.setSourceEntity(184U);
    msg.setDestination(46782U);
    msg.setDestinationEntity(19U);
    msg.req_id = 56933U;
    msg.destination.assign("TSEHSFDWJACYCXHWHIPOBSLDZIGPJYBPQWJEAKMSNHL");
    msg.timeout = 0.8704191278471226;
    IMC::PushEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("OCDFWUYVXLLVBVYJUHQFXRKWYYEOFFZBMPMHOPGABEEIZCTVQIUZQSHVKTEFSHGXTLPJDYOPABTFSQZAIHAGPWITITJKCMRMTKJETPOCMGNXUOULJECSQBMEXMNVKIXOUQQGIRHYIORASQWXZWSWBKWREBNUVSLFWNKLFD");
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.2816536211783045);
    msg.setSource(13238U);
    msg.setSourceEntity(210U);
    msg.setDestination(11606U);
    msg.setDestinationEntity(224U);
    msg.req_id = 37264U;
    msg.destination.assign("DXIQAHITNPDCXEUGQKQVCTSHCOQDAYNSLSYRIMBMPOLGLJLEWFMYTBX");
    msg.timeout = 0.9778669656383336;
    IMC::PH tmp_msg_0;
    tmp_msg_0.value = 0.28042052987904864;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.12692414368804072);
    msg.setSource(18503U);
    msg.setSourceEntity(80U);
    msg.setDestination(33422U);
    msg.setDestinationEntity(159U);
    msg.req_id = 26319U;
    msg.status = 83U;
    msg.info.assign("WDDGLBFNYAMKHGAPZCOAULSKHRTSXXQICDKSZMFDSAZMXNDSECVVTJSWI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.9698809214262302);
    msg.setSource(31662U);
    msg.setSourceEntity(116U);
    msg.setDestination(47182U);
    msg.setDestinationEntity(69U);
    msg.req_id = 53175U;
    msg.status = 152U;
    msg.info.assign("AAGMAFZTRYQTGSAZIWVIZOPCPJW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.07707206117221266);
    msg.setSource(55740U);
    msg.setSourceEntity(33U);
    msg.setDestination(13074U);
    msg.setDestinationEntity(3U);
    msg.req_id = 18193U;
    msg.status = 107U;
    msg.info.assign("NZNNJMPMLTZWWUZLQUOLNYEGBTOQPMQMNCDHGBVHLYETVVXEMZBKURBFIODGHARLPGPZTBQGPSAWWARURWGEPJOTFICIFZVTBNVCKOCXQRXHNDMFUMXIMHIVFCMTDXUKUIVRVOYSANOADDQAUQEPRNEAIQKJLZYPGIKTYGFZYSIKSOSTEJQUGBCWOFDYJRFUHXKXSJOEXDDLFHAAXYJRWLTEWDCPCLEJZHAIFSVVBCRS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.23417906117313303);
    msg.setSource(3315U);
    msg.setSourceEntity(87U);
    msg.setDestination(24832U);
    msg.setDestinationEntity(156U);
    msg.name.assign("ZXGJQQIEHHDCIEUDXJKDVVEYKQUYLJRMJOQTGVODWXQYMUPOBJTPAVXYSH");
    msg.report_time = 0.8334007519245482;
    msg.medium = 146U;
    msg.lat = 0.8927415151413012;
    msg.lon = 0.6953658337805341;
    msg.depth = 0.5173437460629681;
    msg.alt = 0.4736784182824729;
    msg.sog = 0.389103948408138;
    msg.cog = 0.06718142571160213;
    IMC::SimAcousticMessage tmp_msg_0;
    tmp_msg_0.lat = 0.47419535694871207;
    tmp_msg_0.lon = 0.6783710956597175;
    tmp_msg_0.depth = 0.6846608529669973;
    tmp_msg_0.sentence.assign("UJYAJOOHONTZQXHENBNIGGR");
    tmp_msg_0.txtime = 0.8191396039978901;
    tmp_msg_0.modem_type.assign("ZQISATNJQZRLVSYZUEFOBAKBGFWSKXZVRDQPPCUETLLKBWVBAWZARXNNJVZTOQ");
    tmp_msg_0.sys_src.assign("EBEQBLVGBLTYKXQNEWIWMPHPBVXTKSSWVYHAKNMXVXJQCQTFCIWPFUYHNFAPPKESNGYIWSBAZULFGBDNYVEGALMUFOEKAYFHSQRVISWPCRLYYTNCFJINJGMTROR");
    tmp_msg_0.seq = 25093U;
    tmp_msg_0.sys_dst.assign("XFHXSPLOETOCWLLBYUHTIWZWDRMFPXHCSPWIGXHSFXCCARTNBHFLJOZXRLEXQRFMFVTSQTAYVAHUUJTRGKYRTJFYEZHNVQJMUVRFVMGYNQJBZLC");
    tmp_msg_0.flags = 200U;
    const signed char tmp_tmp_msg_0_0[] = {-90, 31, -84, 51, -25, 122, 80, 32, 32, -77, 2, 82, 3, 125, 97, 60, -30, -80, 39, -21, 77, 88, -91, 47, -120, 88, 63, -107, -59, -90, -64, 7, 12, -100, 68, 77, 1, -109, 102, -13, -56, -116, -71, -35, 100, -66, 80, 27, 54, 94, -112, -95, 99, 17, -43, 79, 34, -99, -118, 75, 123, -33, -54, 74, 14, 30, 23, -87, 24, -22, 42, -13, -76, -94, 70, 79, -123, -48, 105, 82, -77, -64, 64, -68, -93, -122, -112, -91, 53, 42, 93, 22, 95, -69, -11, 30, -39, 4, 95, -79, -101, -110, -72, 110, -40, 33, 36, -12, -88, 39, -124, 109, -24, -107, 45, -68, 70, 62, 58, 68, 45, -38, -19, 51, -112, -119, -108, -12, -83, 94, -32, 122, -69, -4, -97, -39};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.03818999117682065);
    msg.setSource(44717U);
    msg.setSourceEntity(64U);
    msg.setDestination(22706U);
    msg.setDestinationEntity(44U);
    msg.name.assign("GMGGJJRFKOTLPUQMMORRHWDYPCZUQBIUCYGXQBMQLAJSHLMIWKGNAKEDFHWXOUUNNBVPPDEFRKDKBSGRICXWYHGMJJBWQMFVWBPYCQSNDTZZREMRWENPLPLLINZULZTGCSADFWIAQMTIVCWUFAXDPUKANBZBXPXKARELRKCHAVOONOQGOET");
    msg.report_time = 0.1472700242360807;
    msg.medium = 120U;
    msg.lat = 0.9401669979721353;
    msg.lon = 0.600158342561365;
    msg.depth = 0.6785813024901834;
    msg.alt = 0.5743073527460067;
    msg.sog = 0.16947482503456557;
    msg.cog = 0.8319146829577811;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.12758005959666885);
    msg.setSource(9648U);
    msg.setSourceEntity(137U);
    msg.setDestination(38216U);
    msg.setDestinationEntity(153U);
    msg.name.assign("ADVSHRNUMMBAEAGQAMCJFREUVSDNHMQUXYGITFJOAWATZBQBGNXF");
    msg.report_time = 0.8004966396344894;
    msg.medium = 147U;
    msg.lat = 0.7645699127256892;
    msg.lon = 0.6694395370988964;
    msg.depth = 0.5734892233651024;
    msg.alt = 0.5104511091831614;
    msg.sog = 0.5789921056760533;
    msg.cog = 0.7749314542366568;
    IMC::DesiredVerticalRate tmp_msg_0;
    tmp_msg_0.value = 0.12502927176570422;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.6723349695213405);
    msg.setSource(48242U);
    msg.setSourceEntity(246U);
    msg.setDestination(5489U);
    msg.setDestinationEntity(120U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.8865306963051488);
    msg.setSource(65196U);
    msg.setSourceEntity(5U);
    msg.setDestination(63349U);
    msg.setDestinationEntity(46U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.892062535756605);
    msg.setSource(15654U);
    msg.setSourceEntity(181U);
    msg.setDestination(25810U);
    msg.setDestinationEntity(83U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.49655701451044876);
    msg.setSource(8245U);
    msg.setSourceEntity(219U);
    msg.setDestination(47943U);
    msg.setDestinationEntity(79U);
    msg.plan_id.assign("YUAHMBZJUCZZDEAXUKXYBUHCFNZPPDXJBWHOMMBAFIARTKIRCSCDUTCAWQGXKJQLDKGQJNZLRVNQBIARVFKLLEEIWCQLMOIRIMYOZPPSRMYZFTYIYNGZLBSQEHLNVOJGWFTBXRNBOUAQCUTMVHXQHTJNSFDHUAVSTVAGVOGJOPGFXSNUFOJYTMGWDUIEEOTWIFCKVHQPKSGJHKK");
    msg.description.assign("VYNMQLSGYUMSNCYKZVBSATPTRTXNZVBXQHCTIXVEUBHKBIFNBAEPUWYJPP");
    msg.vnamespace.assign("FNZYSJJHOBOKLQWTYFVBVWGKTFNLWMWHMODHWEINXXMRRRDKCXZJZESJKRFZCWEUQEWJOJCGIAOVZGDDRKLHAQILFAUNQOPGPKSHVQMVSXATCCXUXNSEHMTJRIUCPHWUBXTTPNBXDMYDTGSHLQGPIARDSEUBYBLIYUJRZXEDBFFKKZSMYF");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("KWZRAOREKBQXRBZRYTLKVHPQMJOSICJFEOLFMWSYTFUVGSXRFLHSXRHUCTAZZEXLWLUZQZOIGGULRKAFLESGCFIGBDETRQPCNMVOUPSWPKOXQDURVCRWWHQMKJKVUAHJWDMBNDNENYDQMIHXZWPCTAHCDYGVJLTTMGZASFBJSCYHGTLB");
    tmp_msg_0.value.assign("XTRCDUVNASVQTDNYRN");
    tmp_msg_0.type = 223U;
    tmp_msg_0.access = 97U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("WCZTBYERXMVQFUOXNZMWHKJRYHCLVZDPKTVKXACAHIYEOKHUIIHXMKVSUXOLMEJBPDLOTBWBLATHDRBLUKDWMUNVYTDCMZPVXVLNYBSBYRSVJPPZRMPEZJRKFCPNGIXBAOEGNYVQQWEXGZOISFCIOTPSEDJCIIAOZFISFG");
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("XVTWYBIJWGZLINMZAQRPALSXZJYGFOFDUDDJVUNQPGPOCSNTLPVZQNWGHNMYEVARBXCKRKFOBQLIUAASKDZBGEAGTVNCTNMTXOJKDHGJLRULBLOOWBBLKVACIHCCTKFQZXXZJGMSWZHMGTSHZPQDDICEUIEKZAJFQYPWKNAUOOSSXULXPMCLJSWMWEHMB");
    tmp_msg_1.dest_man.assign("RRAFRJRGHHNJNAAXRHPYJHZMQCLPBRLNBXESIGXITTCAOEPBZMKQNEDTRGZDJDHBJFMWWEVFZQUQNLKHYPATVQQOU");
    tmp_msg_1.conditions.assign("EOOJFFRGUCEUIHCXFTMLYTRNHTYLPGWSBESOKRMHWSEHJWNQBRAIAQPFYXFOVRAIHLBANV");
    IMC::Phycoerythrin tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.value = 0.8566565922347478;
    tmp_msg_1.actions.push_back(tmp_tmp_msg_1_0);
    msg.transitions.push_back(tmp_msg_1);
    IMC::TrexObservation tmp_msg_2;
    tmp_msg_2.timeline.assign("HZXPOMIPRKVEGMXHGSCFUAHBOGOLNPTQQLIYHPYUFNOJANEINDVODXURFKSLOIKPLME");
    tmp_msg_2.predicate.assign("ZULPIWBWTDMFMHDDUXSFSOSJZCTPFQMDBYPESDUDVAGNKQUDPRYBTYINIIJWLITHTNIPDSJAJEPNATWVFAJHZVRUGNOOZHVAKPZULLNBUWEEWGQGNMTLXBVNXVGCOJBSPCZFCOLCFESWVFJDRFMKCQRXYTEQERNAMKLEZBEHUFAOGSJ");
    tmp_msg_2.attributes.assign("OHBYALYEYDESWDXIUBJIFESWALOBIUWWRNDVKYPMIEROARCVCNZGXMKCBWTZCYHXYRHGNUSUKOGTPTZMSNUXEZQGDQCJLRKHKWEATQRYUPHZVJQDUOCPTFGSMNVMFDVFPPLQSQKOPLZBLUZKMIVDFHMVTGSSBOJBNLJOCNHSWXJBAIIHYQPXTFAMGEXVNFJKCJPVQTDIHAMRTMNRZWYXFOVUXRLPLCLAQESKA");
    msg.end_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.31093866253404);
    msg.setSource(7555U);
    msg.setSourceEntity(237U);
    msg.setDestination(57265U);
    msg.setDestinationEntity(99U);
    msg.plan_id.assign("TPTNDMMJHATGXYNVGHFNYBWIWCAEWSNUXKOOCWRQJRSGHCKZRVXVCCGCAPEROEUGCGOMSORBTNISNLAHEEIKCIHOSZADRPGPEZZSDXVQGVKXFFGXXZBUAAJHYGFDYQLLJYYHUQDOPFQRBVRMQJSILURETSJMXPIIM");
    msg.description.assign("LQIJSOBRGSPEOUMUTIDSFKIKNYLHYJRAWGXEUDRZDMLHWAOYKMCJSNHMLEATCMQWIXYLMVETWVXBKGIUEJNWQSGFSBVMDOHTPPZGVTZIUJCTRBKBVWBXPKHNDWINKOPLHPJMNACGSJXGJBIVSWXHLZJFGDAUOVWRBAFLCJCMLYNZATEFKHDTVXBRYUSSWNONEQFBQQZDYEXYURKIQOFHUQQNFQGRTDXUZRC");
    msg.vnamespace.assign("BBWCTURVOWMSXNCPBRDNLCOLFAZUYJGNFFEGLAONLMEYTVHTXTYMFAJHUXVBXEIWTQQPVRVAYMTDTGAPKHAXKERVOCOPHIYXOGEDRNRYVMHHEPIJORSZLSCSQUKRIODJSHLKPWCFGYDDZPPWIOGMTBMBAWRLKMUDZSMLIKADXG");
    msg.start_man_id.assign("ZBSDHJIJIZTMQSCDQHTLHYCVXRGOLLMNQYFXBORKYMJAUDWOWBUPTSZTIEDSUKRXBPLYVYQDUDWAOBCREEXZHVEMJBAELMUQWEHLFTOMWYOXFNKHTZEYGADSVTNNYXRIDPGNWUWNMKWTPSZCFOHSAJCBKOQKLITYIXNKGUGZQOGHNBHVFBPKFJCVCLFJJEZDLFXYRAIQJIQZARLXEOTCUGCSSNIVHGBMQFWNUPDCKZWIPMVSK");
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("RWZKYVLSUXYXRHTHXVOOMXWJNDXBKPQDYBNRVCTFPAYWIPQSLCUUBALDDXLHAQJPOLDZGMROBNWGMEHWAIXRAQRWSEFCNBGIYETQNAZBDA");
    IMC::CommsRelay tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.8136246138753468;
    tmp_tmp_msg_0_0.lon = 0.6237234293184682;
    tmp_tmp_msg_0_0.speed = 0.05762448194234027;
    tmp_tmp_msg_0_0.speed_units = 141U;
    tmp_tmp_msg_0_0.duration = 53852U;
    tmp_tmp_msg_0_0.sys_a = 6441U;
    tmp_tmp_msg_0_0.sys_b = 11846U;
    tmp_tmp_msg_0_0.move_threshold = 0.3528636600928339;
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::EmergencyControl tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.command = 181U;
    IMC::PlanSpecification tmp_tmp_tmp_msg_0_1_0;
    tmp_tmp_tmp_msg_0_1_0.plan_id.assign("GMJUFTRLHHWUZBVGTRWOYBSFCQSVSDGAYZNCMCSWDRIYOUYMRYEFVLQPFXCQVXECKPTUAGOGJBXIONKQFIBFMXCDHDPIDORWBPKWKNNGEOAVZKNUJEELTSIMDA");
    tmp_tmp_tmp_msg_0_1_0.description.assign("FXYPYJPJMLMGQIVCCJQUSLNULNLOQWZCAHBSKMCPDWIWBKAMIKFLEYBOKBXMQCOPSAOXGYQAWZZCFXNOIDVANLUVNHSGRPJSYRKJPJNKTZRFGVVWHOKQFWRJMRDGIFECOOBHTOIBICRGEZZUBEFYRTCNDYISMDFQAEVXPDKRJH");
    tmp_tmp_tmp_msg_0_1_0.vnamespace.assign("VHIVUTOQCWEJTYBFRYYCAWXZUHNVDDPGKHZOIABRZGSCBNBWFFFRNXZWTLGXBGBEGNUSYDVXWQSIMOWMVKKUDAKECYZSCPJECMWVZDJZZTRQDFJNZUQEOPALPFVLAOOXIQOLSTEGJCYQRYVAPCXLHEUTWOLWIUKGKQXSWJDHLMG");
    IMC::PlanVariable tmp_tmp_tmp_tmp_msg_0_1_0_0;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.name.assign("PBJEUTCBHPMNFSHANYOBKXDFIPIYNECFQHVWKIDUKNIBTAVIZZWTYWVIOZTPJUYDSVWEIDGCBXACHZAYNXNSRQVRGPKLQHCEFGETJQEOKSOIPVWSLXOUXEMRVRVOTSGOGHRLQAZQFLELRQOUNLYYIJZOQPMSRYGLLDASJBEFFZMNXVWHDHWRDNKFHBTBAUAQUCQDJSXGEFHJTSCJIKM");
    tmp_tmp_tmp_tmp_msg_0_1_0_0.value.assign("ZXANOZWQSRDIZWAWSNYARTGTLXKYKWJBTHBSKSQNRIXHQHFPPFGXFXLJJYRGPEGMJVLPNLIXFYJWCTELEUZCDMQVGDIUPBBFORHFPUVGYEQCPKDSIDORXXVAFERSUPQJNUXUSLCVJWBEAYQMINZLMWNJGBKNHWUKMKALAMPEIVTRUDAZFZJICSOHZKTODQKBFW");
    tmp_tmp_tmp_tmp_msg_0_1_0_0.type = 140U;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.access = 5U;
    tmp_tmp_tmp_msg_0_1_0.variables.push_back(tmp_tmp_tmp_tmp_msg_0_1_0_0);
    tmp_tmp_tmp_msg_0_1_0.start_man_id.assign("VFKBGUGSLEXMBGUNARM");
    IMC::PlanTransition tmp_tmp_tmp_tmp_msg_0_1_0_1;
    tmp_tmp_tmp_tmp_msg_0_1_0_1.source_man.assign("FDWMFKCIDLFFRACTIMHROAWAHQENRTBZSQEYDCEBNMALGVKUNXTYGZTFNNZSMFFLGCYKWOQOIYDYBGEJWIGHJHQXGRVJDLTYVFHSPKEZSGXROFOAPXBESVHRXJEQPZLCZYCPBTRA");
    tmp_tmp_tmp_tmp_msg_0_1_0_1.dest_man.assign("WRDNDIVNVYIJCYTQSJWBQZXROTCYSFEXSCLXLIAHQSTSQFFNEGQOJMLFEFKSONAMPTTILVFAROPPJPJPUPDAWKEPBDUDXJVIRIXVXPRMBPDAFZYDCBWSUUEZYFEZWOOKAUOCGXKIFOHGBQXMHIBNJUMVEKBLVAELMECWCSUJPQGNJWOGEAKRRVXUYHUVBYZTTANHRYBWKUIGKM");
    tmp_tmp_tmp_tmp_msg_0_1_0_1.conditions.assign("MJOJJSBJVQNXDYIHKWHRGUJHNIFYZIYGDZLNTXOENLAVRRQCU");
    tmp_tmp_tmp_msg_0_1_0.transitions.push_back(tmp_tmp_tmp_tmp_msg_0_1_0_1);
    IMC::GetOperationalLimits tmp_tmp_tmp_tmp_msg_0_1_0_2;
    tmp_tmp_tmp_msg_0_1_0.end_actions.push_back(tmp_tmp_tmp_tmp_msg_0_1_0_2);
    tmp_tmp_msg_0_1.plan.set(tmp_tmp_tmp_msg_0_1_0);
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.maneuvers.push_back(tmp_msg_0);
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("MWTIXHFXRUFEROIMCALVBXZSBHFXDQZVUZWNTENCIODBZOJPQPGBLSNLJYFIGYQACAOYZPCJEROPHDYTYSVDAWABSKRKRFNUQKXEQGDIVQGQLDJVBEMFWWAFYYVLNNKXLOEWBIJJVNQXYVONRHATPBXFHPRURLZDDGSTGEQPQHGPYHMHZP");
    tmp_msg_1.dest_man.assign("BQDGFAWLKUSXWEOJWUYWJPTHMPBEICPFTQFJHIGINEPEGKD");
    tmp_msg_1.conditions.assign("GOQMMXJKJFFPYLYHKBOBCMDJOMSDOTUEWVZLRZAEIAHDYTJKSSTVICPCJAGCUFBZRHGJYXLIXIEMIKQBPUNWELTPHPH");
    IMC::DataSanity tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.sane = 173U;
    tmp_msg_1.actions.push_back(tmp_tmp_msg_1_0);
    msg.transitions.push_back(tmp_msg_1);
    IMC::Phycocyanin tmp_msg_2;
    tmp_msg_2.value = 0.3697612589479441;
    msg.start_actions.push_back(tmp_msg_2);
    IMC::DesiredLinearState tmp_msg_3;
    tmp_msg_3.x = 0.15411065902397347;
    tmp_msg_3.y = 0.8577993447084515;
    tmp_msg_3.z = 0.1359680205174656;
    tmp_msg_3.vx = 0.8322951741614867;
    tmp_msg_3.vy = 0.5120072906799442;
    tmp_msg_3.vz = 0.861831266497575;
    tmp_msg_3.ax = 0.35801627465393315;
    tmp_msg_3.ay = 0.259452878030069;
    tmp_msg_3.az = 0.1515419493425193;
    tmp_msg_3.flags = 58930U;
    msg.end_actions.push_back(tmp_msg_3);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.5623197304549931);
    msg.setSource(51474U);
    msg.setSourceEntity(243U);
    msg.setDestination(54660U);
    msg.setDestinationEntity(95U);
    msg.plan_id.assign("FDXCWYSUWALHWOPFBABJLDGRLMXIZNSXBMHQJVCLQBRRTWVMPBWGTKIBFAQXOEEAWBFNEISZMETYGRPOZHOEFDSPVJHRXYBHTKWHKNCTKJVKTMOODHZZWJAWRKQGJGSVZDPOXRZYGIPNNDJQGPQCJDFORYADHVCLMYNJYUIMZXEJITQMEUFIHVVUZFCWUYUEDUGCPNQMSTCDGZVXXPYLSVXLAKTTUNIROGONIBNSKUFAUPILSEBKCQQHYM");
    msg.description.assign("SZEEWSBTDAFBMKIFFKNRSTGLUNGTGGLKOBCHIJUOMRRMFOMUPOWYNWSWOEXDKFVPJFWXHJQKDUKIBLICZHSGVYYUIEUUXLDVOCSDTD");
    msg.vnamespace.assign("DZACZGJMQCMNGYTSPRQLNHDATQPSFEGUGXIAOUAVCIZHQTVRYASSEZSYNFHGWFLQXLIXWPGBMQPRNGVCHYJELEVAIXVDIBHOMIRUAUPOFCVXWWSYEAATLHOFKCCSLRNSFENHMDJRBHUWJGZTRAXBTDUJQZWFQKWPGIXXLMPZYEZRLJYSBJKFCUMHZZINBBVOEHCTYFEWNQJRDMTKIKPWOQMPBYKVXKKGDTBXDDIEOUUOYVMUKL");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("QCUTORHTRGKNBIBLUELFLSNQWAUITJUFPWMHDSIDXKTRRIIWXOXYNEZZHHFEKVQUOWJVOMBZVOYDODUPHYKGBFMYBNYJNTRNYXXCOPPRZQGVGATBAHHEWNQNFKZWNOMIUIWLXWYSJFRRCTFCDEFJFFJDSE");
    tmp_msg_0.value.assign("RFKXTGWQRJWWMEQHPUCOXXEDTPDYIFWUYDHCSSWWBHTSBSPPMGFUYBJKBKSNQAJUMNNZQOAXNDFWRAMDSZQCHIBPEBTMLQYNGPGLONO");
    tmp_msg_0.type = 171U;
    tmp_msg_0.access = 243U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("OFZJSKKBBDUALHAYXCESFQXWDDHYNLQUSBZBFRUMJHQUOPEAYXZXFAEKSMFVZTXXKFHQBSDLQKKHKKQNRCNKYIRAMCUUTTKRSGIMJMEETJYLSCCLYGTHGYZCNTNIVOOVJFOATGDBIACZJPILEROGIYJOMUNUZSGGFRNVOHEJPMHXNJJMEBSVQPGWAPQE");
    IMC::PlanManeuver tmp_msg_1;
    tmp_msg_1.maneuver_id.assign("IUDSBIVGTAUBFNGGZXAUFCKLAYXPTMODEZXXFKWQHRPZANWFNZOILRKKOQKMHSMRXJBODWXYDPLBOWNRNPVLKLSQQZWGAEHIANTPPOGLNUQCXDYWIMQEODEMLVDCZARSFOIWELADGVEJJRVHDFKCC");
    IMC::FormationPlanExecution tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.group_name.assign("NYWSTLYCKGKJMISBDAPMXWAUEZRANWJEGTMHWBQNDQJOWFAUYEWPLTJVMEOZRITQVNYRFQNTOUPNEGMRHQBZSKTWJSCHYFYKCKIZLRXALXXZGMOCIVZGNUFOZHYCMYOJABPTMVESIEROLXDNTXAFHUVVVXTEEFDSSOBVMKPXJCQLKGFNKKWHHSHNCCFDPVAQHRAIJHDPUDYDALPLCVFRGMJDLQULIQZ");
    tmp_tmp_msg_1_0.formation_name.assign("YSKALGOKISFVOMBEYMRVWWUWNOZQAAJCYLXTVIRZVL");
    tmp_tmp_msg_1_0.plan_id.assign("MVSPUKTQXVNLKRNZQCZUDVHOHSAHWFEZPXLXDGRKXZHBTPFSYZYUEGVTCIWNCCDWQFLQJMKXWAYDPNODSSJCEQNKHEPMFLLAWRCHTZOLDZMB");
    tmp_tmp_msg_1_0.description.assign("FHEHAQNKEPNKIQKTYSYFCXZXMAZUWLOCGWTVDZJUZLVEHTOALRUNFGBOQZLOQV");
    tmp_tmp_msg_1_0.leader_speed = 0.08338389853269246;
    tmp_tmp_msg_1_0.leader_bank_lim = 0.7927448352962646;
    tmp_tmp_msg_1_0.pos_sim_err_lim = 0.12262668836265878;
    tmp_tmp_msg_1_0.pos_sim_err_wrn = 0.6788722073997259;
    tmp_tmp_msg_1_0.pos_sim_err_timeout = 59105U;
    tmp_tmp_msg_1_0.converg_max = 0.4721717756369017;
    tmp_tmp_msg_1_0.converg_timeout = 11415U;
    tmp_tmp_msg_1_0.comms_timeout = 32325U;
    tmp_tmp_msg_1_0.turb_lim = 0.09781148189865707;
    tmp_tmp_msg_1_0.custom.assign("FSIAEZZDODKLPKCTWFOYNNZVIYLAJAMRLZLYMAHQUTTPDEFPJGSCHQSEHQUCJJYEDAKOBMDCSMGLAVRLVJXNWHVMYWGVYOKHDUXDRPBKRZZUTLGDWKAHXUTPJFENFZYBMDIUWQNYMTIQRXUBSEXSGFTSTQRRJYWFJCZIAIHPNAEVGSWOLDKFOSIE");
    tmp_msg_1.data.set(tmp_tmp_msg_1_0);
    msg.maneuvers.push_back(tmp_msg_1);
    IMC::Announce tmp_msg_2;
    tmp_msg_2.sys_name.assign("DZLWNDUOFGEFQVTXIJQIABFYHZYZKRMUHLBJKSIXMHLSVTRCJUWUYBIXT");
    tmp_msg_2.sys_type = 162U;
    tmp_msg_2.owner = 41572U;
    tmp_msg_2.lat = 0.8275149286593473;
    tmp_msg_2.lon = 0.9288679526404398;
    tmp_msg_2.height = 0.3346982982756054;
    tmp_msg_2.services.assign("HHSBCSPYFEREPARTAXKJSUEOSXQEEZNKEBGQUPOYYFENLMCSWIXAFZADHBNGXWOJNVHMLIGCGMLYETHDIWNTBIQSNDXYR");
    msg.start_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.09519487507399382);
    msg.setSource(7675U);
    msg.setSourceEntity(82U);
    msg.setDestination(61261U);
    msg.setDestinationEntity(181U);
    msg.maneuver_id.assign("GTZYBKUXEEESOMSPBBOPKUOGEUTUAWWHZCGZDUFPINHQBDLFCJRKGSMRKXTZZYYWHGQGNLUWRWXLWKMVCNMJYVEHMVOIDRBKXPMENIYM");
    IMC::LowLevelControl tmp_msg_0;
    IMC::DesiredHeading tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.39701955973601444;
    tmp_tmp_msg_0_0.off = 0.9586287931208947;
    tmp_msg_0.control.set(tmp_tmp_msg_0_0);
    tmp_msg_0.duration = 16733U;
    tmp_msg_0.custom.assign("YMIMOLSSTUPIVRAPNRXQCSMSFHFYOAPLQLZICWMLMQRYXPGLZXAPHYJPDGDKYFVEFAQSPTKMYVBAVBOGIXYGNTETFXQBQGHVMTUZQZDJBWHKJPCNHODZHIUUYUIZSOZMCEVGUPGHBRBHYVGGDNAHOKRDBXOJCWEZDUWFBUKVOIJXCS");
    msg.data.set(tmp_msg_0);
    IMC::AcousticSystemsQuery tmp_msg_1;
    msg.start_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.9939646926911023);
    msg.setSource(5397U);
    msg.setSourceEntity(233U);
    msg.setDestination(30612U);
    msg.setDestinationEntity(203U);
    msg.maneuver_id.assign("STMYFOABQFXDVRQITWVXAFDUOONZZJMUTEGHHUDMDYVGSHKVMGDRPRQBZJETBMEBJNJVNEZDHQAWKUBXOUTRYBLLKHKRICEFPPWWCSLKWISQIPGWWKCXROZL");
    IMC::FollowPoint tmp_msg_0;
    tmp_msg_0.target.assign("PHGJVKFRRATVBNPLTHGFVKBZRSKBIEDDMMIEKKUGUJQCTMNPHFMYCSZFVDALFCYBJUNTOHBHBLIPOEKSHEITVTXZJDGVYBPSKNWCUYLKENXRRCUYTJFZXCOUWISEMJXGHOQZZTFPAGRLICEAPRGXHGJIY");
    tmp_msg_0.max_speed = 0.7763685401842306;
    tmp_msg_0.speed_units = 9U;
    tmp_msg_0.lat = 0.7682617349386358;
    tmp_msg_0.lon = 0.7985998745119552;
    tmp_msg_0.z = 0.8091632921131919;
    tmp_msg_0.z_units = 170U;
    tmp_msg_0.custom.assign("TUAZYCMTWSXZORBNKDLMQTWVCPLKJUMBNPCLLIEMSKUGEVUGQDEFDZCQFKXMFZWLKTIWKSRSDINHBFGEOOCBQCBXPUMHJOXNRXGUYXJAHAVYRVBMYOQHAPWSTFGYJCZIKNEAPY");
    msg.data.set(tmp_msg_0);
    IMC::LoggingControl tmp_msg_1;
    tmp_msg_1.op = 211U;
    tmp_msg_1.name.assign("VIVHLPLQSFWGIXARCDYPDLRYZKBNBJSROHDWDCDSOJNVQXLJUBBCMUTZBKFOYWSNHNKHJJYACMQTIQRPLUEYSFHGDDEPQOUMEHRYNWSWZUNCAXDYMFZTZMAUNYHLGITNKKZOEMFIXLWOMZQJFCBVZ");
    msg.start_actions.push_back(tmp_msg_1);
    IMC::Pulse tmp_msg_2;
    msg.end_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.5548238765247653);
    msg.setSource(13429U);
    msg.setSourceEntity(171U);
    msg.setDestination(48403U);
    msg.setDestinationEntity(245U);
    msg.maneuver_id.assign("NXLOEHJDWWHMQSCB");
    IMC::StationKeepingExtended tmp_msg_0;
    tmp_msg_0.lat = 0.016633703364509422;
    tmp_msg_0.lon = 0.5520328933879253;
    tmp_msg_0.z = 0.3750388542429043;
    tmp_msg_0.z_units = 243U;
    tmp_msg_0.radius = 0.5700169819167681;
    tmp_msg_0.duration = 3867U;
    tmp_msg_0.speed = 0.8706547374309257;
    tmp_msg_0.speed_units = 1U;
    tmp_msg_0.popup_period = 9722U;
    tmp_msg_0.popup_duration = 9795U;
    tmp_msg_0.flags = 173U;
    tmp_msg_0.custom.assign("CMIEIVHDGKCNFNEVXQZPBETIGNPNFXDDWZJOKJEYUCWSRDVASXGBYNJYPVWYMZMNAAPOCBLEMUPSSQBSFCRIKHJTFCEHGAVNJFLMLRXEZGGFRWOLZPTNJZOQWTEYYFOTKRGTELWAVTOUJFSMQQMUYYCBRWQYXYPQAXWHBCKZTLUIHCSVSHZQOADSQLFZHK");
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.6296379579466653);
    msg.setSource(25031U);
    msg.setSourceEntity(3U);
    msg.setDestination(34247U);
    msg.setDestinationEntity(63U);
    msg.source_man.assign("HEWCIYNDKITQBCNBKNAIOTWGFSMYMZTICSWNMPQJKVSPDNHFIXUDXPLYRLJXPINSSOGOKKVCXZDAJYLJMUMJSCVFFCRATQXRDDWYFRAUCORIFJYNUZMVGMBSZNUTAKKVGNXVEHVLMQWQWZCNOVPTLUGRGOECGGHPIYJESUHAZOVFPQZLDOLMHJLTRXLZW");
    msg.dest_man.assign("VTDHELJZLEBQRXDURIKDRCZDRZ");
    msg.conditions.assign("OPAIWNXPKZLYWDQUZEJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.860711591503008);
    msg.setSource(40008U);
    msg.setSourceEntity(161U);
    msg.setDestination(57496U);
    msg.setDestinationEntity(137U);
    msg.source_man.assign("TSHOEJLQSQQPMRDXIZWIRSWRCHTOZ");
    msg.dest_man.assign("DWLQIMSNIVAPGEXJEJCTJYDVYFRMQDWVKRXULABMTUZNNZRZUVGBFHPGSRTMCKGSHNKJMSRXQSCPEGVARJAYFWUGQWZNVTJYBLKDLITAVOJGVHOKFQNWPSSDEXBQOHOWZOXHPUYBZEZLQNVIQFCDELOCTPBFNICOWAGKJCWIMCHDMMAYYXUKHBFJOFESRIGRZTRBEPHHOBYZXYLOFTUILQKGDXLP");
    msg.conditions.assign("XDANCCIEKKDTGJTTKMXPNPPLNSRCDGPIQRZDVHGOKGYSCIEQYFTOKUPJRUKZRDJIBSTQHRRQFMWRJVYEBHKWNJNBPAFEATDOJECYTLBAWFZNMX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.6092293098229308);
    msg.setSource(61606U);
    msg.setSourceEntity(105U);
    msg.setDestination(61282U);
    msg.setDestinationEntity(17U);
    msg.source_man.assign("OEJIYGFQKCNXBLLUOCZHQNLQCZTUMZRKKZMKARXWBHGNXLODCZBWCRIHSRHBZGGQRCHVAP");
    msg.dest_man.assign("OINCKELRBGNFQCEDHDTCOQRUAWPAJXXDVRFBD");
    msg.conditions.assign("YKIDEOTSPYNKXJRJXYHLVZIDUOSFXRYULIQFULKJVZQDAYGPWFOTKAQFZWCTMJFERHEXHTHMRWCXXAEOGDEPJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.18278560907321806);
    msg.setSource(1189U);
    msg.setSourceEntity(53U);
    msg.setDestination(42950U);
    msg.setDestinationEntity(124U);
    msg.command = 156U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("VRHPGXDHUCXD");
    tmp_msg_0.description.assign("RLBLTJYRABUDYNZBDXWAHMGVWAQYODVOYVVDONXJRZQFMALJLNWVIDUJASVTIWNUMVZCMQOPGZMFZHHRYVJGGXSBNCKMFTS");
    tmp_msg_0.vnamespace.assign("AARUMXELQJIXSUTEEMGBMKIHQHHCKYXROKJRCTDIZHQWICLFBMZPTMWVFQXDJHKNPTGNQOHSYKHLUYYJYBICWTFFBYUGOLNUCZGCDNGWLNALEKOIUJYOPKRTFPCKOJRYLDZPXAPOOXTOFGCDBSQRFDZNBYVVLPJWQFCNIAMJRJZSAWRDUUQEGWIPQSWESKASWBXCPJMSHFZPGDZTNABDLTHTIZVMXYBZVWUMVMXVVEEAND");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("MDGTVHEVMUYFDQDXAWRIHMNPSPIJWOGDIKKARRJWFRATSIVPJLACLQNFDECDUPTXGJCWVCHOSMZKVYCRDUASGRIHULIOXHOYIJYSAUIIKKPTXTSPEMBNJZFESMUEDYAHFNQFRHLHVOFEXVIPTODXYWBKVFOVLBNNCLNMBUCYPNRZTYUTBQGGBJNHTQAEZPOBUXJCKZLOUQGVQZKAJFMGMZKBSNWBWYSGQKZELRLZC");
    tmp_tmp_msg_0_0.value.assign("ZUIXJDWBGKNRXGATZBMTGJESCQBEQMVLLEFHOJSLMHYDATIEIPOMDTJVOINNDIFHKUZRKRJXWSHUSUASNTNXUEODQVZFWXYPIAVRRLLOZLRBYFOFRQIMZTXJPQOWKSUXKWOYBQCDVESQQPUALXAKBQFDZPMCJWZLHGOTYHKNCBFJCCGTJNZVPGHFRVAEGCSVDPSKQICWB");
    tmp_tmp_msg_0_0.type = 143U;
    tmp_tmp_msg_0_0.access = 111U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("VFWWQNEPLAXBTSQTABSCVFMWXDDLGCFTFZIRFMQXABMIESXOYHRYNJE");
    IMC::PlanManeuver tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.maneuver_id.assign("CNKZXYBHZOKAYOOATGRDJBMXWQSBWIHIATEBCDRCEWCNOEFGJSHXMAEWPKDFPEEBIQUPYHGBCAMLKKLFQOLXDXXWVJZCWXVGWNSUTJITPSZMFFVPSPVUAXJFSMLPHAGSFLXRUFEPMAJDYGYUWJMNIYRLRMBKQELKSDUZTSDNTWUMUUHPNRDAGKRINQOZYROZO");
    IMC::Land tmp_tmp_tmp_msg_0_1_0;
    tmp_tmp_tmp_msg_0_1_0.lat = 0.6667867070602951;
    tmp_tmp_tmp_msg_0_1_0.lon = 0.24367769975032993;
    tmp_tmp_tmp_msg_0_1_0.z = 0.8492673885816014;
    tmp_tmp_tmp_msg_0_1_0.z_units = 235U;
    tmp_tmp_tmp_msg_0_1_0.speed = 0.47568710314934814;
    tmp_tmp_tmp_msg_0_1_0.speed_units = 61U;
    tmp_tmp_tmp_msg_0_1_0.abort_z = 0.17492299879223727;
    tmp_tmp_tmp_msg_0_1_0.bearing = 0.07817513579386115;
    tmp_tmp_tmp_msg_0_1_0.glide_slope = 84U;
    tmp_tmp_tmp_msg_0_1_0.glide_slope_alt = 0.42804738915177043;
    tmp_tmp_tmp_msg_0_1_0.custom.assign("VCNWWJKNIQVOTBRNDYFRUQGLHXBBGGUZRRCEMUFTXHMOFMDSDUJKWSRGQNLRIHKFHWCJSZSTCNLSDISZIORQKBPKZEIAXLMVVMWPAWDETXLHIIPDGYJLXMXFQNSILFTZEVYCPVDAHXCBEUHJCOAGYAUFPQKMBWTWTZQOXYYOUJAFOZVAKIWRDNSK");
    tmp_tmp_msg_0_1.data.set(tmp_tmp_tmp_msg_0_1_0);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_1);
    IMC::PlanTransition tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.source_man.assign("CEWRBQQLSANCVOQZZMIVHYVIDTEKFORUDBDPBYCOYEXSLTGIDFTEMXYEYVWZNAXBZFGULNICSJCUPTRHMNAJVHVAOSCQQ");
    tmp_tmp_msg_0_2.dest_man.assign("EDFKMMEJFUFGNLZTXEHURJPSZQPKYOBUULNCRDVVZXACQAGULVVPMWKYJSXXUBQNHNRYBTARPGOHOFCLDHIBK");
    tmp_tmp_msg_0_2.conditions.assign("UMCEMWQBQSGMNHKGHPEFIDKNHOUIKVTYRXLPQIOYRRCKRHAOKWIWSKLOUFZSZSTJLPTBEQQBJVPEWUBCRUNFKDCLVVDMPSONGGGWTUWZILGVTJMOPZSHPGAAZDQDQZNDZXYJPETXAXI");
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_2);
    IMC::LogBookControl tmp_tmp_msg_0_3;
    tmp_tmp_msg_0_3.command = 85U;
    tmp_tmp_msg_0_3.htime = 0.4280019304690176;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_3);
    IMC::VehicleFormation tmp_tmp_msg_0_4;
    tmp_tmp_msg_0_4.lat = 0.6971147290098676;
    tmp_tmp_msg_0_4.lon = 0.7049722344028416;
    tmp_tmp_msg_0_4.z = 0.09521296999857176;
    tmp_tmp_msg_0_4.z_units = 11U;
    tmp_tmp_msg_0_4.speed = 0.038261780301036996;
    tmp_tmp_msg_0_4.speed_units = 206U;
    IMC::TrajectoryPoint tmp_tmp_tmp_msg_0_4_0;
    tmp_tmp_tmp_msg_0_4_0.x = 0.2220221313754407;
    tmp_tmp_tmp_msg_0_4_0.y = 0.053676278879255634;
    tmp_tmp_tmp_msg_0_4_0.z = 0.020506934172534796;
    tmp_tmp_tmp_msg_0_4_0.t = 0.5389056263974535;
    tmp_tmp_msg_0_4.points.push_back(tmp_tmp_tmp_msg_0_4_0);
    tmp_tmp_msg_0_4.start_time = 0.5659537702167079;
    tmp_tmp_msg_0_4.custom.assign("SVIPCCJBBFUGQXMNZKNSFAJGXCTDJTGLIPWIJRMEWJRQYCCOLNFADWMUPAVZYEOVHEUMWOLRKRSKMTHCTFMUPSGKIFUSDHVTGWQFFVUZOYZNEHNVSNYIAYQMOADLCDXYEZBJWAATACLRBFLTOQIPXUOKXIEQCQJBZQKXKRBJDXEOXNGHWGJHANRXEGRLUOSBDTDMZWPWYIILZFVFNONTLSBVMQKVEBTGPYRQSBMSPXGZIYUHHPHDZJ");
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_4);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.10756096026835704);
    msg.setSource(55248U);
    msg.setSourceEntity(11U);
    msg.setDestination(53395U);
    msg.setDestinationEntity(16U);
    msg.command = 44U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("LZKOTXLVYUHPNORXVNY");
    tmp_msg_0.description.assign("TFDCZLAOMNORFWGCILYNXXFIHWARGEOYKNBGJMHBVARFHHBKIMPLXCWMKVMNKGCXWTWDFHTDIQZHRGTCTYPNDLHMPFMAYVFCELIIAFURPPCUZREAOONVLZTEJBSXMSWZBPQLNKDKBAKKRQTYES");
    tmp_msg_0.vnamespace.assign("UEQCYECNSYLUVLOHWOBNMMSCNNXQBHRXRRYUGIIA");
    tmp_msg_0.start_man_id.assign("JRTKGMNGWKCRLWTZKIIEMKRPRNEIUPDFBPIMPUWXVHLUKRPSLEYASOASOKEYUQSTBLGAORDFEDZHIEIMHWLJRQXFITADJSCMYNPEZSTNXHYSTBSKIWCKHUJBZUKXQGNZJAAQMCCGXFCKHOIXGTFJOWEMGQDWYDGUBZLUCVSQCAZJMOQOOEWPFGZUNZCVXIYXFNQHETSUBMRBHJYRBVFYFWBNVDDWZPFMAQH");
    IMC::PlanTransition tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.source_man.assign("KRMLBFPEQZOPHLWGWNSCAJAPZPWOBHXGMVZXTYXKWYACGLIWVJWRTBJVNWFFZDIFWDEUZCTAEHTHSRJIYHDULFOIQPPQATVJEIGXMOVMNOSGDZDNFPCTYQVXQIHYDTECURUYKACIDRJRTOQEKDTIVQZFIWRISAEKHLNBODJCBGUKHOLHCKGCUCFZMYOSVXMUMLKESQYKVNJBR");
    tmp_tmp_msg_0_0.dest_man.assign("DVYATBIWQFJDHZFBYGJXTEKSBRFKSLGZTOSJXDSYGJUA");
    tmp_tmp_msg_0_0.conditions.assign("KOPTJFNIGZCZWMLIXMUOCDSCGKXPYVDNCUYLDOEXTGGTQQPNXEAWWYVXLYMANWVMJETBISARQDFUQRFIZNXCHKZIOLVQRPWAGCTEBDRRGKIBXIPSRAQTGQAXPTYUERJOBSAUHSOYFZBCOUPJVTMWEDZHKSTJYHZNFSFQSVLMNHJRIAMBJFLVDALKWHXECZLPQXJMBEVZECRYKSJGSGBUWIBFOOMDNOBKH");
    IMC::PulseDetectionControl tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.op = 171U;
    tmp_tmp_msg_0_0.actions.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_0);
    IMC::AcousticOperation tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.op = 198U;
    tmp_tmp_msg_0_1.system.assign("WRRSWIKXUHBSFUDIFNZWEMXKUSSJPIYTDGXKEFLUFIHAFKYSBURABWVVMHNQJAHHYNOHYLMZLEMPBPAGODBGSHXHTMKYEP");
    tmp_tmp_msg_0_1.range = 0.782766142877944;
    IMC::PlanSpecification tmp_tmp_tmp_msg_0_1_0;
    tmp_tmp_tmp_msg_0_1_0.plan_id.assign("BNRWPUZXUIJAUCNBTGGQKGUBMRVDHMOIOZPWFPHWZGYNBWJHPZFXJLOBQOJVIZRGUYJDYHCADGELBOFEHAXSTPEEKBCQRZSXFYMXASOINYKVTLOWVQDVLICNNGJZSSLDHCPLEXCKDTBQTNCPEITKQMEXYRNSFDRUERFTAYOQABPLGCZFSXHGYPRQSUDSDRVIGOKZAUUCLJMXIDTWWCVMERMHZXNIMVQKALFFMNWWVTIEHKY");
    tmp_tmp_tmp_msg_0_1_0.description.assign("PSNHTLUSQGHCDHKACBRKBTFZJKTMUDCZEVPCMBFKOQYLQEZTUENDFBQILXJQNQIQIWYPZMAGWVCCCPKIYSQDWBHVVASOADJNZUEUGGUAJVTVJXVFJGOSUGVROSAJXPXOTRTTLFKLJNFOLXRVOWWPYIQJZGGDATRWKEOHHSNIVDHMZXLYZWWESFYWKNMAISGYCRPUFMREYWXMGZOCQHCYMNJXBP");
    tmp_tmp_tmp_msg_0_1_0.vnamespace.assign("VIHUHOTMRLCSCXVIJFNLUIONDBFSSUCCDOLTRRVOCRZNLETUQYYEZKMWUXXQNCTXPZDJGKKKSSQVZPDGAXJAKIWELOALCZYJUHJBVHAGYERCBJGGMOFWBRETPWDFEVQPHVAWFXNYKMAWGSCOUYDIFZPIBXMQLPZLTMXJOTBMWEOKXDPJCZNUGTDVESHHIILYPAKXUOVRPPQNMBGBSTQFDHNZYEQQKBVSJLRBDGFWUHYWARAHFNYMWREZ");
    tmp_tmp_tmp_msg_0_1_0.start_man_id.assign("AHTRDJUIYQCKZROHBCFCCOWTBLNJWEGVZCKCEPGHCCARVNVBQ");
    tmp_tmp_msg_0_1.msg.set(tmp_tmp_tmp_msg_0_1_0);
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    IMC::TransmissionRequest tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.req_id = 51581U;
    tmp_tmp_msg_0_2.comm_mean = 47U;
    tmp_tmp_msg_0_2.destination.assign("ZGCNYFWGKYQEYEVCDXIEMPUHZLIYATEOTMNIXMTQBJOMVGQONOBLTUCBDJGYL");
    tmp_tmp_msg_0_2.deadline = 0.5523584455056072;
    tmp_tmp_msg_0_2.range = 0.7761314921457066;
    tmp_tmp_msg_0_2.data_mode = 38U;
    IMC::HomePosition tmp_tmp_tmp_msg_0_2_0;
    tmp_tmp_tmp_msg_0_2_0.op = 37U;
    tmp_tmp_tmp_msg_0_2_0.lat = 0.06702859967843855;
    tmp_tmp_tmp_msg_0_2_0.lon = 0.016669557871563545;
    tmp_tmp_tmp_msg_0_2_0.height = 0.9221367456034939;
    tmp_tmp_tmp_msg_0_2_0.depth = 0.03929606978471911;
    tmp_tmp_tmp_msg_0_2_0.alt = 0.14878875806027603;
    tmp_tmp_msg_0_2.msg_data.set(tmp_tmp_tmp_msg_0_2_0);
    tmp_tmp_msg_0_2.txt_data.assign("FLIRYAMCKNMVGBJISZBPMPZTDGRBUVQWQQDXPLAZHUPNVIADENTUVBOLEUVSMHDQSWUQTUQHVSDWPAXHXCEZWVOQOBQNDKVPUHMXJEJTHEJOASYKLICYPAFEGCDFASNFLZRQHKXSMRCYXEWYJZHOGIWMTYGLUANICLWMAFOCILTOFKXRFVMCORN");
    const signed char tmp_tmp_tmp_msg_0_2_1[] = {88, -12, 112, -41, -71, -98, 119, -96, 36, 62, 30, 118, 38, -46, 60, 56, -116, 120, 36, -94, 113, 112, -12, -38, -26, -83, 11, -7, 95, 73, 115, -7, 34, 18, 117, -28, -30, 5, 100, 19, 106, -128, 15, -117, -10, 79, -104, 51, 1, 123, -42, 83, -57, 92, -97, 89, 125, -59, -126, -82, 25, -38, 61, 119, -67, -114, 113, 123, 78, 48, 47, 111, 81, 32, -14, -3, 11, 0, -91, 63, 36, 7, -15, -113, 125, 107, 13, -46, 20, 81, 98, 113, 25, 42, -110, 20, 51, -117, 32, 11, 65, 76, 92, 62, -71, -88};
    tmp_tmp_msg_0_2.raw_data.assign(tmp_tmp_tmp_msg_0_2_1, tmp_tmp_tmp_msg_0_2_1 + sizeof(tmp_tmp_tmp_msg_0_2_1));
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.7302807614887946);
    msg.setSource(41904U);
    msg.setSourceEntity(99U);
    msg.setDestination(7313U);
    msg.setDestinationEntity(155U);
    msg.command = 50U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("YGSXVWKVDWCUSDCQRRPDSNQBVRRFANDZYAQIJHFSIXBEOGVBEZCCRHJWXLMPTIJKKMCXREBWNYMZQOLMVDWNWXLJWQJHNZLAQMWEUPNFEDOOBRYWTMRXYKSBCBMPYZBUOHGSGPVALDYSFOKJKVQGVFPYIVUHQTSGBANPEA");
    tmp_msg_0.description.assign("NDTCTVQRNNIFRDFPBJLZPTCSLAZXKQOPFHTFTDDYVXLYPMICAXRAIRGNSZFUUOJGRUMHACALGPIUUEHLZBIXQPMWMGKXCOYDJOCYCEHBWKOBEGBWFCWQZVUGWOSRFEDWNTLDTYXMEDUVXZPVYIJQQAVRNHTLYVSHVDPBESXWOTXMPREQUKYNHTJLCQOKHDSKZFIAMMEZHKBSZAKYSAINLGOGUWNVJILOCWHNSQQZBJEYKMGSXWMGB");
    tmp_msg_0.vnamespace.assign("ZUPYQWJEVDTKOWBBBIFGIJMJHQKQNCNZTHUTMNPZSSATBO");
    tmp_msg_0.start_man_id.assign("AWRXSBGAFNYHOOHLTLPIDOTVJIPZXSRRYZDWZQV");
    IMC::LinkLatency tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.5364832022888685;
    tmp_tmp_msg_0_0.sys_src = 39130U;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.5165805072125729);
    msg.setSource(43751U);
    msg.setSourceEntity(21U);
    msg.setDestination(42740U);
    msg.setDestinationEntity(245U);
    msg.state = 137U;
    msg.plan_id.assign("KXMIVYCUMFCKVROQYPTASMFVRJLCWQLPYTTOZFBJUCD");
    msg.comm_level = 83U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.08612406300035924);
    msg.setSource(55248U);
    msg.setSourceEntity(129U);
    msg.setDestination(30165U);
    msg.setDestinationEntity(53U);
    msg.state = 34U;
    msg.plan_id.assign("QMSGNDAGWHHCZILQHXDIFSYPHSYGCEGIEWAABLAVYCWTSEUCLXBOWLREIKSPPPHIQDTXJXHGITTYVOWNQQGQZHREXOSQLVIPHUXAJRKVEZKKJHCBLWOV");
    msg.comm_level = 56U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.5751764939818387);
    msg.setSource(29618U);
    msg.setSourceEntity(148U);
    msg.setDestination(2272U);
    msg.setDestinationEntity(254U);
    msg.state = 208U;
    msg.plan_id.assign("LDYLTKEVMSECPJHTGZIECVNTXKHTDJJEBHWBTEKWUCNJRGNXNZZDYIKCFBLKQEXUUBBLUUWGBWIOMXQVMZASGDRAGAFIFAGPZQLQFQOGTFEKSCSOHVXKUYQBOITBQGBDXRRLF");
    msg.comm_level = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.5234773613172471);
    msg.setSource(30391U);
    msg.setSourceEntity(116U);
    msg.setDestination(43316U);
    msg.setDestinationEntity(247U);
    msg.type = 26U;
    msg.op = 236U;
    msg.request_id = 2583U;
    msg.plan_id.assign("UWEHKUVLLDIEEBSOKIRNUFAINYHBIIARSDVTAKHMACRTUIYB");
    IMC::PopUp tmp_msg_0;
    tmp_msg_0.timeout = 62335U;
    tmp_msg_0.lat = 0.6047422663665268;
    tmp_msg_0.lon = 0.9169849258287347;
    tmp_msg_0.z = 0.8485065461553257;
    tmp_msg_0.z_units = 57U;
    tmp_msg_0.speed = 0.5064907719929069;
    tmp_msg_0.speed_units = 220U;
    tmp_msg_0.duration = 20545U;
    tmp_msg_0.radius = 0.3464638789083784;
    tmp_msg_0.flags = 110U;
    tmp_msg_0.custom.assign("TCRUYQCIMDKFOKICZPPOQUNJFDGDFUMQUJU");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("XQBIZHJRLRWPGNUSRDHT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.7275019331265795);
    msg.setSource(4957U);
    msg.setSourceEntity(91U);
    msg.setDestination(38823U);
    msg.setDestinationEntity(132U);
    msg.type = 107U;
    msg.op = 234U;
    msg.request_id = 30214U;
    msg.plan_id.assign("PMPUEVDVQNWCQBDBYWVFOWHEELHIJTMBBOLKXCOHEIWAMMZ");
    IMC::GetWorldCoordinates tmp_msg_0;
    tmp_msg_0.tracking = 247U;
    tmp_msg_0.lat = 0.5342286943391868;
    tmp_msg_0.lon = 0.12285140413957363;
    tmp_msg_0.x = 0.09589716239805057;
    tmp_msg_0.y = 0.6821652006200303;
    tmp_msg_0.z = 0.9436865097855673;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("CQZFCVDUZNJVIUPCVLZSFQQWQIOMRXUTFPRLPHSWURQXEMKLWQKMAWLKBGFQUSVCEHDCFFNDUELZPDBBNMZDIKZEJENYPKWILGRRJXJYHSAHKMOGRKLIGSAMYPVLRONNRJYGBUWMREBWPOTJVEFHGBSBJQZVWSNZXAESSCVROEBPAUYYGIOHFUQZPXBMGHTASYWXNWOYYDHPGAFEUINMIBXTXKHFXXJKACVMVTDT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.6103717630475982);
    msg.setSource(17931U);
    msg.setSourceEntity(153U);
    msg.setDestination(45701U);
    msg.setDestinationEntity(121U);
    msg.type = 193U;
    msg.op = 87U;
    msg.request_id = 8844U;
    msg.plan_id.assign("LKROXKBACBSJRUXAJQIKFCKLYFVFYHWVGNTPICILGPNRONWLEXOKZDPNFNIUDTMKJJDTLFEAOKKQABSBABAYCBJSUJRSZCGJHGNXVVGPUZBBQWWOFYMMBHWDGXJMDTOAYZJMCDUZQXSNMUZGHREOWLFUBTVNLMDWWR");
    IMC::ManeuverDone tmp_msg_0;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("LITNOVSVQPXHCHNSASXENVNWJBKJUJCXRVKDZVMLMPTAMCWCEUJKEIROAEDQSZOJRDOTYFCAEXUDPWYKMBQHLONQXMMZOUKIQRWVDSCYBVUCAIKZPHPYRREXPBCHUBNORXAMDBTMRVEGEGAOWBWYSYZNS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.9900262998393513);
    msg.setSource(13513U);
    msg.setSourceEntity(18U);
    msg.setDestination(4370U);
    msg.setDestinationEntity(36U);
    msg.plan_count = 29305U;
    msg.plan_size = 1765707445U;
    msg.change_time = 0.410679426430402;
    msg.change_sid = 10279U;
    msg.change_sname.assign("JQYDDDAIEQYIGGBXGYKRCTPEOSVRHXHXJHHNSEMQWGYHWBSNBCPUFOWEDBZGQZQEQ");
    const signed char tmp_msg_0[] = {108, -36, 92, 71, -51, 84, 76, -40, -25, -44, -116, 1, 21, -87, 47, 33, -77, 55, -25, -38, -114, 55, -76, -8, -93, -109, -100, 76, -17, -22, -108, -101, 60, 80, 66, 102, 7, -41, -105, -113, -12, -111, -76, 119, -102, 94, -45, -52, -123, -58, -27, -119, -108, 126, -65, 32, 31, -27, -58, -100, -72, -112, -89, 80, -46, -39, -12, -104, -58, -76, 65, 34, 108, 120, -28, 0, 13, 71, -59, 16, -3, -21, -10, -87, -35, 29, -46, -59, 87, -1, -128, 106, -73, 27, -17, -24, 30, -99};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("PQDJWXOUTHVGLYSKQFIGECWMLYNGWFNVQTEKIDIGDXGRZIKHZAYBATLGASULCTXNXVBHSTNHVOGIPYCEBBTWQLRBEPJMFYYJMREPQMSRXDVEKYJSQIYVRWWWPOSPOMBFMEAASXRNNHZKKFHGQHVYGWCDMTSEOEDICWJAUUULBNZUCMGABISOPDNHOBFSUKZWONTMOKXDIZQVJUTJRHEUXDOQICYPAZRZRCDCPTALHVPLRFJFKJXNZCQZFVBLLM");
    tmp_msg_1.plan_size = 59449U;
    tmp_msg_1.change_time = 0.669349456355941;
    tmp_msg_1.change_sid = 18708U;
    tmp_msg_1.change_sname.assign("DLDNDFOCEGEAXYWRBCPLLQCKDZJKKHOEVXPJTCMDSJNPCCQSPCDHNNSQZPBNYFMNGMROTLGGTXLJWJC");
    const signed char tmp_tmp_msg_1_0[] = {10, 123, 23, -42, 87, -95, 106, -20, 21, -98, 85, -99, -60, -102, 43, -98, -126, 73, 15, 99, -15, 16, -81, -117, 61, -59, 7, -101, -126, -122, -2, -55, 107, -86, 95, 108, -90, -49, 23, 81, 112, 69, -90, 91, -112, 33, 101, -58, 57, -37, 8, 85, -115, -102, 80, 107, 111, 61, 118, 82, -49, -123, -92, -66, 12, -53, 31, 1, -99, -96, -35, 120, 39, 53, -78, -113, 109, -85, -39, -84, 16, 78, -34, 118, 36, 94, 64, 49, -117, 124, 40, 119, 116, 101, 23, -61, 29, -39, -51, -15, 19, -20, 23, 36, -62, 43, -78, 28, -5, -1, 107, -87};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.013317253670437013);
    msg.setSource(12271U);
    msg.setSourceEntity(4U);
    msg.setDestination(38815U);
    msg.setDestinationEntity(97U);
    msg.plan_count = 43664U;
    msg.plan_size = 1016531535U;
    msg.change_time = 0.8864111608396964;
    msg.change_sid = 35695U;
    msg.change_sname.assign("JPTTCWTYTGWZJXYWOMWEBHXKVEQFRYGNIESSBGYBXILLGBOBFOCYUWCJZTFDNSQGPDFTUNXITAPAFLFNKQSTW");
    const signed char tmp_msg_0[] = {122, -104, -25, -7, 33, 93, -9, -61, 13, 44, 25, 86, 119, 63, -49, 51, 49, 67, 0, 11, -3, -29, -74, 116, 94, -3, -18, -120, 60, -58, 66, -17, -56, 58, 41, -119, -101, 118, -49, -27, -97, 116, 13, -93, 106, -80, 97, -96, -102, -89, -39, 115, -126, -55, 21, -44, 25, -65, -28, 9, 87, -27, 99, 108, 40, -62, -17, 69, -16, -90, 71, -76, 98, -15, -45, 10, -23, -32, 74, -46, -40, -79, 72, 3, 73, -70, -123, -56, -55, -53, -124, -80, 2, 10, 45, 60, 56, -107, -5, -117, -98, -72, 77, -99, -8, 28, -77, -128, -87, -77, 114, -32, 60, 90, -64, 117, -127, -97, -23, 87, 44, -13, 15, 63, -90, -117, -74, -79, -112, -43, 24, 118, 48, 4, -14, 88, -77, 113, 73, -85, 108, -105, -77, 91, 54, -41, 66, 94, 45, -31, -69, 48, -125, -24, 5, -8, -32, -117, -55, -50, 23, -96, -120, 103, -38, -101, -2, 14, 0, 6, 118, -56, 91, -80, -100, -28, 61, 117, -89, 29, 33, 32, 73, 17, 94, 111, 66, 126, 101, 95, 101, -51, 25, -1, 48, 45, 49, 103, 106, -56, 13, -36, 121, -100, 53, 57, -102, 98, -104, 70, 60, -112, 31, 100, -108, 1, -13, 33, 120, -35, 8, -53, -55, -104, -83, 98, -108, 101, -55};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.581515221356379);
    msg.setSource(29621U);
    msg.setSourceEntity(246U);
    msg.setDestination(40035U);
    msg.setDestinationEntity(252U);
    msg.plan_count = 15U;
    msg.plan_size = 342532216U;
    msg.change_time = 0.21592529302988395;
    msg.change_sid = 36902U;
    msg.change_sname.assign("RMUEHZEVSNLJYCEOLPCIAYBRHUTTDVZ");
    const signed char tmp_msg_0[] = {-52, 51, -24, 121, -110, 61, -111, -84, -93, -80, -83, -123, -57, 63, 57, 35, 51, -52, 65, -87, 35, 95, -50, 53, -85, -107, 22, -64, 106, 14, -113, 115, -78, -103, -65, -39, -57, 32, 86, -109, 49, -66, 79, -22, -34, 97, 38, 19, -117, -36, 124, -72, -61, -112, -92, 11, 66, -9, 92, -88, -9, -61, 38, -67, 48, -29, 18, 52, 82, 30, 53, 41, -77, -41, -110, 97, 25, -125, 82, 39, -74, 3, 126, 6, 125, -78, -79, -123, 9, 35, -22, 49, 41, -112, -11, -53, -95, -70, -110, 78, -68, 39, -41, 3, 98, 6, 7, -80, -9, -12, 42, -2, 68, 26, 47, 92, -69, -56, -12, -33, 122, 85, -67, -14, 35, 51, 94, 118, 48, 123, 103, -68, 104, -38, -13, 30, 39, 122, -102, -114, -22, 55, -113, -6, -7, 7, 70, 49, -110, 5, 11, -31, -37, 67, -28, 13, 43};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("BYVFHQMDNXQKTKEGWHICOGSBJJWVAQFKAMPUSQNKGXMKGQTIOPOOZIZHSGZMHLCULUCMKLEETYAXOHHCBFLKTBKBAHNOVJUBTPEWSRYNMATCLDAYWNLLKOOTI");
    tmp_msg_1.plan_size = 8812U;
    tmp_msg_1.change_time = 0.14647303166307135;
    tmp_msg_1.change_sid = 36351U;
    tmp_msg_1.change_sname.assign("LVIZQYQCARVKCWLIEBVHWJTJZVWQGSZFAOOPUJUWKBXDHXQNXTGGNXBPBMLUQDTPNDBZWCCPHDJFSUTYNOYMVCKIWRIQMIWAXEWEVAFUBE");
    const signed char tmp_tmp_msg_1_0[] = {-55, -69, 4, -70, 93, 53, -56, 71, -16, -39, 113, 10, 111, 88, 73, 125, -128, -29, 28, -33, 59, 94, 48, -90, 80, 23, 11, 4, 90, 95, -65, 40, -51, -39, -91, 88, 11, 14, -115, -114, 3, 38, 107, 57, 43, -8, -91, 103, -110, 17, 76, -35, 86, 99, -94, 47, 7, -4, 35, -38, 98, 87, -53, -71, 126, 40, -91, -121, -71, -108, 50, -87, -35, -119, -27, 31, 86, 110, 47, 11, -8, 107, -32, -57, -25, -40, 77, -39, -77, -51, 7, -114, 75, 33, -38, 13, 12, 68, 62, -63, -80, 119, -113, 6, 85, 50, 85, 103, -61, -46, 52, -67, 34, -100, 50, 73, 22, 90, 67, -23, 47, 73, 2, 44, -31, 10, 95, -31, -87, -30, -37, -45, -58, 126, 125, 116, 41, 68, -30, 126, 13, -1, 77, 101, -96, -57, 39, 95, 48, 102, -10, -103, -35, -67, -26, 118, 26, 67, -24, -22, 36, -100, 43, 65, -31, 20, -14, 82, 15, -94, -1, 31, -102, -117, -31, -119, -120, -63, 8, 51, -98, 60};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.17340799789140826);
    msg.setSource(19389U);
    msg.setSourceEntity(63U);
    msg.setDestination(3285U);
    msg.setDestinationEntity(167U);
    msg.plan_id.assign("TCBLSKZQMGBTYFYAMYDOQKTZSQTSXZWFRUSRYQLIGCRPHVSHRBSJQGJCAEKMALTOXFIDFMNVBQHTWISCXWYCIIPPYKCZLVNBYQKRBO");
    msg.plan_size = 63922U;
    msg.change_time = 0.586326334382476;
    msg.change_sid = 48124U;
    msg.change_sname.assign("LBKONZHSICBPZWFISHCWTSEKDKEEQYTLTLFKISJYQWKCMNHXXHDSJITQASZOGHBQMZVELCXMTFERRJAZVKYJKAOQBSYAORLEPOJRWHGYHKURCAUNCSOJZHNWQWZPUIVEBXDMU");
    const signed char tmp_msg_0[] = {-50, 92, -112, 98, 31, 33, -14, 85, 26, -46, 88, -95, 123, 11, -83, 17, 82, 31, 125, -60, 93, 84, 79, 85, 44, -47, -72, -31, -62, -41, -41, 41, 70, -44, 78, 55, -119, -86, -46, 68, -114, -43, 100, -107, -67, 40, 13, -73, -25, 103, -46, 95, 94, 88, -61, 37, 20, 51, 43, -58, 75, -17, 80, 45, 64, -112, -61, -81, -108, -12, -80, -127, -2, 119, -55, -79, -87, 115, -81, 78, 99, 70, -73, -99, 125, 47, 64, -47, -105, 58, -49, 52, -127, -49, 110, 85, 83, 62, 11, 19, -27, -59, -119, 76, -24, 59, 18, -68, -39, -2, 44, 119, -88, 0, -65, -82, -42, 83, -114, 84, 56, -28, 6, 28, 119, -49, -82, 41, -12, -14, 115, -122, 38, -115, 16, -18, -93, 47, 77, -89, -90, -125, 124, -28, 16, -14, 6, -116, 65, -120, -119, -34, -61, 42, -3, 109, 69, -26, -60, -33, -119, -59, -70, -67, -1, 77, -113, 52, -16, 113, -75, 57, 92, -67};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.8062054407038213);
    msg.setSource(52929U);
    msg.setSourceEntity(189U);
    msg.setDestination(37355U);
    msg.setDestinationEntity(114U);
    msg.plan_id.assign("XJMGXPFWGZYTJJVGNIFQWXABDGLMRQACUFDPADYCKCAUWVJRIPQUIVRFYQEEOZVMSJTIMBTOYMSZCPRBLRTEIUTCHLUYRWHROHTWLKNTIAKMFOTTHXICLUHVIFGBGLJYENHXKYUYCXJEZPNQKBKHDXQSMKZGEOVVZKSXABDDZIAZXEPGFSJVHFOCYNWUELFLWGBH");
    msg.plan_size = 62592U;
    msg.change_time = 0.4004795103376094;
    msg.change_sid = 42011U;
    msg.change_sname.assign("KYGXDDTAUDRKFJHWVMBOQGMJKGNAJBBOPMYYQCSZHRSHTFPLQANRSKWTMKYQDWQWMUVOGGHXXINUFUATUCQNRKJIJYIBNEEWPFOSRDYAASOXZLYDLZMTAJHISWGJKIXTJBPDVHNSPYEZPRHEWFVFQOHMLMVMVVKHBWKVLOXCPXRXFYMLELRUCGBJAILZGVAUCURZUSWBFNOPPFUBDNCATJQSEQDZVCSENRZNTCQIE");
    const signed char tmp_msg_0[] = {-118, -124, 120, 66, -41, -17, 23, 27, -18, -83, 119, 108, -41, 41, -27, -1, -28, -74, -14, -43, -56, 124, 64, -114, -41, -7, -60, 60, 99, 35, -3, 57, 15, 45, 76, -38, 93, -111, 13, 107, 31, 72, -83, 61, -97, 7, -92, -99, 54, 23, 41, 21, -107, -16, 24, 30, 76, 27, 115, 67, 20, -85, -66, -118, -35, 3, 30, -45, -76, -1, 107, -52, -53, 89, -18, 40, 81, 123, -50, 118, 16, -74, 10, 67, 105, 114, 94, -68, -90, 82, -107, -117, -13, 48, -8, -79, 76, 114, 45, 32, -116, 125, 77, 102, -77, -87, -124, 42, 52, 22, 15, 45, -1, -14, -43, 12, -12, -49, 26, -105, -2, -102, -18, -79, -8, -40, 119, 40, 97, -56, 5, 10, 92, 84, 117, -26, 3, 62, -78, -109, 46, 123, -97, 34, 4, -58, 91, 89, -12, 62, 20, -42, -46, -42, -128, -105, 84, -69, -58, 85, -87, -66, 19, 122, 15, -94, -53, 31, 72, -16, -32, 115, -114, -15, 120, 11, -113, -64, 92, 49, -43, 72, -41, -37, -89, 91, -110, -97, -80, 66, -69, -26, -49, 81, 66, 87, 21, 17, 7, 123, -43, 68, -105, -67, -98, -36, -67, 82, 124, -4, 3, -43, -121, 32, -117, -51, 103, 26, -18, 121, -22, -31, -81, -115, -66, -58, -5, 29, -10, -95, 105, -13};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.1771007453423039);
    msg.setSource(65405U);
    msg.setSourceEntity(40U);
    msg.setDestination(48975U);
    msg.setDestinationEntity(144U);
    msg.plan_id.assign("CJXUTQKIGNZLPQMVBKPVGHEROQJRYKQWVREI");
    msg.plan_size = 52596U;
    msg.change_time = 0.28116814116975475;
    msg.change_sid = 12544U;
    msg.change_sname.assign("LEYWFIPNGACHNFMEIJQYXZTTPZRMQNASVNZTKYHBKWLABHIRFQIBBUKVASRRJ");
    const signed char tmp_msg_0[] = {-10, 25, -115, -110, -86, -41, -30, 30, -112, 92, 94, 13, -61, 46, -75, -30, -75, 51, -11, -48, -97, 108, 113, -33, -19, 38, 109, -109, -127, 28, 48, -27, -69, -115, 30, -103, 46, 43, -97, 7, 3, -66, 125, 39, 18, -61, -33, -75, -104, 121, 58, -9, 31, -14, -62, -83, 29, -48, -94, 95, 30, 88, -93, -48, 4, 114, -69, 39, 24, 63, 38, 17, -120};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.1318186836625176);
    msg.setSource(28780U);
    msg.setSourceEntity(53U);
    msg.setDestination(10153U);
    msg.setDestinationEntity(146U);
    msg.type = 231U;
    msg.op = 171U;
    msg.request_id = 33420U;
    msg.plan_id.assign("LBFUUMFGZCKKENLXZDUABTOQDAQBCQBKAYDWNETMUVXHWJMMSFYHSHLLZLYASETZKFQVPZCGPAJHBOKAUFBFZQPIMDMRRKMSOAXNAPXTNNPESTYGLKXAZZCZPJYEQHIJGKTEXGVRWEODUXJGIFMOAMIBJMLFVWHOLIVXPSWSNSWYDDRKTHWTLIWWRRFQFRJYOCUITGVYOEDGKTDOLVSPYRG");
    msg.flags = 59397U;
    IMC::DesiredLinearState tmp_msg_0;
    tmp_msg_0.x = 0.5489601586792002;
    tmp_msg_0.y = 0.42921921262811447;
    tmp_msg_0.z = 0.0005650277883482158;
    tmp_msg_0.vx = 0.6989914613820242;
    tmp_msg_0.vy = 0.9964969709384172;
    tmp_msg_0.vz = 0.30376581301629046;
    tmp_msg_0.ax = 0.39767077577841015;
    tmp_msg_0.ay = 0.9591662969286007;
    tmp_msg_0.az = 0.8072050096274157;
    tmp_msg_0.flags = 62964U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("PICAHXCCPSRZOWNPURZCEEQJMJFHSFZYPLNNYDJAURJTPKBTTICORSDHOXCQWASFAGBPUMPNLOOATXZHMWNDNTMIQIAIVLBBRUEFEMHEKZLTKQLXGHYUTVEBYMZMVYGOJGLABREWNLFODNZASQSCRTCXGVDPYGNOQJWSQVVEFQVFEIKTGSYQXHKYMVXUBIKZRJSIUQXDDSOKHEHLGGWWZKJWHVNWFVKLXFMTWJAUCXMAIODBFJYPLDRYKU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.48558603575852033);
    msg.setSource(6372U);
    msg.setSourceEntity(116U);
    msg.setDestination(59773U);
    msg.setDestinationEntity(104U);
    msg.type = 25U;
    msg.op = 26U;
    msg.request_id = 50667U;
    msg.plan_id.assign("WTQZZEFBPEBVZLTSCHFAEVMGWZZIJZTQFLGQIIUAJBOXTZPWGSNXMXONASWICJSGVRHHAMQBQUTHLQLVQFAMCCSYPPXJEDKJWCUNPAWDUDUAVMLKXRYRVWQFRTJXCB");
    msg.flags = 29081U;
    IMC::TransportBindings tmp_msg_0;
    tmp_msg_0.consumer.assign("SFQZOQDONMOXLXPICHVWMBEZHXEGCHBXSGKLAESMVQLJUNBXJZHJTEFGQFXUUXQPROAFNKMCZWBKPYLNAGRLHJJWKVOMQETTRSLMFPNULFNPKQBWYWVEF");
    tmp_msg_0.message_id = 35694U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("XOGCBHRGVUATTACOCSIEVXALJFKMLRQVUUHYNSOPZWRDQFEJYUJDZJRGDVQKVRIIDCFATRDKLWMYVUUCBZJZWWPJRTWZQSYZFUBBMAJWFNNSXYGSJNZSCTOFQYDLHZNBYTWOINDCHEYIIUPBAENBEAKZHLQMHKVELBMNPJKXHXTUVAPPBGMHGXOLPKQH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.17204930785937733);
    msg.setSource(24962U);
    msg.setSourceEntity(133U);
    msg.setDestination(56783U);
    msg.setDestinationEntity(204U);
    msg.type = 117U;
    msg.op = 44U;
    msg.request_id = 60097U;
    msg.plan_id.assign("BILEGVNJNFSKPRAKIJGMELTRPVSXCZIXDYBYHTJZVJSEZTFJPNEVFNORLMEOIQADXHJGBRLJFZBCPMOVKKUTLWLAHBDNMVWKNMLXFTMQLXYUCWKFLQFZUNGETATDRCZAQ");
    msg.flags = 27803U;
    IMC::FormationEval tmp_msg_0;
    tmp_msg_0.err_mean = 0.804680539213952;
    tmp_msg_0.dist_min_abs = 0.585419711833195;
    tmp_msg_0.dist_min_mean = 0.6393657234797994;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("CCEOMBVJVXRHLLOTAQFZDFGPQKPTLYZVOBWGJOEPAICLHPDLHSGNGRVUHUCBFRSTPDJLCWNXZYSIMVXTWUOUCNIDCVIJZWE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.3051973115440699);
    msg.setSource(46389U);
    msg.setSourceEntity(174U);
    msg.setDestination(25409U);
    msg.setDestinationEntity(62U);
    msg.state = 165U;
    msg.plan_id.assign("EASNDWQICZOAHYRLKARVNVVDSQUMWSYKUHRFIJIRFHFUIMZHTYRCSMQFCHOISIZOBLBFJI");
    msg.plan_eta = 716834800;
    msg.plan_progress = 0.10817550364240414;
    msg.man_id.assign("KSLNKCLXFAZSFSIATDTISWFXYSYQNVJITAXUFNTHZWDLXGLLWDUSHHUTXDQIAKGBOJXAQGDHPNTSGEIKCKQUJDCDIJGZBEGOWCVEWCTVMRZXOYRERCBUBOOEEFYQR");
    msg.man_type = 12410U;
    msg.man_eta = -63480412;
    msg.last_outcome = 178U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.10086867004370803);
    msg.setSource(50180U);
    msg.setSourceEntity(192U);
    msg.setDestination(17420U);
    msg.setDestinationEntity(52U);
    msg.state = 89U;
    msg.plan_id.assign("NBKTPWJPFTWWTIFSZKAIQYLJYBEAHCGDGGWMDULYSLYURNDHKWLISCKKOJSRPFAVODQOOPFZEKPIHNG");
    msg.plan_eta = 816364417;
    msg.plan_progress = 0.7987744350293485;
    msg.man_id.assign("TRSADZRPKXDTEWSVGQXTAXHNZHCQYMOLGVKSRJHLKSLCVVHBGVGWBRAOZCRBQWNHPCQIIQJGTRXEQYYGD");
    msg.man_type = 59206U;
    msg.man_eta = 452075283;
    msg.last_outcome = 60U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.6064062088642466);
    msg.setSource(27655U);
    msg.setSourceEntity(177U);
    msg.setDestination(16589U);
    msg.setDestinationEntity(217U);
    msg.state = 46U;
    msg.plan_id.assign("YQXJGPWILFSRDAWRHGORLYTGNKWXSEJQQLHGAHMLSVJJILXCFTNAIEDWKVUZFIMOXKKQQJDTRXYEHCZBRJGHOCZBCFNBVNUJOIVZLKPYCWTDHOYFPRTZCSBLYKRWLXXVCWEATOBTZUEIJIHCEVMFUMTPFCWNDMDCDWJRSUGSQUWDRMHKBYBPPN");
    msg.plan_eta = 1770903742;
    msg.plan_progress = 0.850096317169104;
    msg.man_id.assign("JNMWYVYJTKJHBOCBIUYORMDSOPVY");
    msg.man_type = 63605U;
    msg.man_eta = -74157834;
    msg.last_outcome = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.8078292550096321);
    msg.setSource(32406U);
    msg.setSourceEntity(90U);
    msg.setDestination(48063U);
    msg.setDestinationEntity(204U);
    msg.name.assign("NYAKBFLQQADVXYNXKJMFZTZMSAUKPDJPQD");
    msg.value.assign("TZXOIMTNSULTQYZOTTFINWGWBKXJJVLYHPXQTIICKCXWRLPEHSGCJHGIMDNEPLDLAJCBNRPMU");
    msg.type = 92U;
    msg.access = 118U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.6839877067707992);
    msg.setSource(35440U);
    msg.setSourceEntity(183U);
    msg.setDestination(43056U);
    msg.setDestinationEntity(11U);
    msg.name.assign("KUUPCFBMOTPORLLDVYHCYZVYKCJTHHJKWPCVPHADTFASFIEGNQHPKQXCMTWYNZGFUZUJJQBBRROZJYAQJGGBUQTKWRFGUVRZZEBVJJPEYEILABPKNXYIWAXS");
    msg.value.assign("KOFHVDMRXQMUJBVCBNSNKTBAQDZBEUMSHPASOWTYESNEQDYOKISE");
    msg.type = 101U;
    msg.access = 213U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.26789563085086654);
    msg.setSource(43504U);
    msg.setSourceEntity(245U);
    msg.setDestination(59765U);
    msg.setDestinationEntity(19U);
    msg.name.assign("JXOMVYITJFMMYZETUEZYZKQSFKWPNJBZATRQUDWFHXBEILTGSGENUIWTETYWGBCTQKSKVXMAFNDKHXRURDVIMFOFWJSNJHSCJFDILEJQEIHRDRXGNEJKSLKWLDPJUUAMYVLWYUFNGPRQZLACLLGZAOYGUDPQMCVRIXCAODNXHHHCNYFYOFBPGHUZWPASTMBVBMDUDQLPIOBMXRTGGVBXQAOAORWCZBSWBXCH");
    msg.value.assign("EHEILSLCMMVOAHQCAPYTTYSMNGGCNAQDBJITSUVELSONZMFLDQYMLQOVRDWHGLRZWRNNHTZCWDAJNGIZJVVZHVKFBCNZQOUZZQSFDIXFEMUWZWBXWCNBCUESGYFQVLPARHKVTLQFBSXDUPLEHMJPYRXYONAMXS");
    msg.type = 226U;
    msg.access = 183U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.9974104566613542);
    msg.setSource(42427U);
    msg.setSourceEntity(228U);
    msg.setDestination(6536U);
    msg.setDestinationEntity(30U);
    msg.cmd = 161U;
    msg.op = 9U;
    msg.plan_id.assign("AEBYJBAXLNRWDVWXYXERGLICZAZJPWVNVIOZTIVJSCUAMWHXWXSSCUUHITWZOZXQMSUWFBBSPOCCPQFVFLLJVVHZZHUDTZRTQXFEGUHOSNICAFBHJOQOTVPKDMWGYREFHINCLQYQYDXZMOZKKJMDNISRMJLYPEGTLBWGFGEDVOMCSJULYARRINMDNFHUEPUNGDAKDBOQKPKKXY");
    msg.params.assign("YUPEMTKSNGGQQCORVUIRFTPPQKXSOOSOPZXBOGQLIYFZYWMUFUGDATTICSRCJTRJQGVPAZDAKZRVGWSUHKCPRMJMNKMZLWREHUBUAELYLPNXXENBPWLRCZDJFVVFCWQPSREIFZUCXLBMQFKXOCBGTKHYTDARVDDFEIIXSBOAHMJPIQKFYSTNLBJYJJVMUBTTJHIQKGEL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.8625947654199724);
    msg.setSource(49541U);
    msg.setSourceEntity(18U);
    msg.setDestination(18860U);
    msg.setDestinationEntity(32U);
    msg.cmd = 54U;
    msg.op = 104U;
    msg.plan_id.assign("MYQLGABKDUJZAGFRBTPVUNRRZELJKVEJGYCGMOXIUNFLVTDZBXUX");
    msg.params.assign("SNPTJRBIXBKUXXNJRDQKMAQZFYKQVWRCELLMVZMNBJXCWOQVVBYBEZZSDPTYTJUOERUGIVIKUHTADPSSDAGEEJHWIYBDHBGFSOMXZQWLGAKRQNYJWRLFGHYGKMYXNFQNUPOLNCRYWIVPAHLZGSTKTLCMAMTXNQICXJJSEEOLQZMY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.7439742382647472);
    msg.setSource(47625U);
    msg.setSourceEntity(218U);
    msg.setDestination(14601U);
    msg.setDestinationEntity(166U);
    msg.cmd = 47U;
    msg.op = 19U;
    msg.plan_id.assign("YMWNSHFKEDNIHRJSUQNMEX");
    msg.params.assign("NTAYBIHXOGJYXSNHNFJWUWVRTSLTJHNNGDPQHDALMUDCMESQELOOSXCGOFAKJCITDFAEMGPTBVHMUFZWRHLJZQRXIQQMPGQVJBIZJXNMCWXMIYEORNQILUJGXVSTUILVFJGQTRHHZOIBUHYMUWVC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.6070943476160203);
    msg.setSource(4010U);
    msg.setSourceEntity(18U);
    msg.setDestination(31980U);
    msg.setDestinationEntity(168U);
    msg.group_name.assign("RGKWCYDZWMFYKJNSBEQTYJOSPTUWOPLQVZXLIDAKXNTWGHBVMNDCJEEIAOLHFLHXIATHLPAIJKMVFLSMDUFURWPSMOARCTCKDE");
    msg.op = 136U;
    msg.lat = 0.5338330122325654;
    msg.lon = 0.7643073749193751;
    msg.height = 0.28473604512783224;
    msg.x = 0.8212836552913817;
    msg.y = 0.23461827540810165;
    msg.z = 0.15412703252018356;
    msg.phi = 0.10950201835553741;
    msg.theta = 0.286391257477695;
    msg.psi = 0.31524753215534784;
    msg.vx = 0.6025000065173229;
    msg.vy = 0.18874955195482046;
    msg.vz = 0.19167237978120266;
    msg.p = 0.44282021399457605;
    msg.q = 0.9060946314936255;
    msg.r = 0.9635687964895809;
    msg.svx = 0.8689816999549876;
    msg.svy = 0.9661843930272073;
    msg.svz = 0.3819473840429971;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.5821081790529671);
    msg.setSource(32964U);
    msg.setSourceEntity(103U);
    msg.setDestination(27308U);
    msg.setDestinationEntity(86U);
    msg.group_name.assign("FQTFTTJLSXPLHFUYIWCVQKKUPEWRMKVLHQVYZHDPXPQOQXHLSNEWNNZOIWBLHGSRYNUMIYBXAJDAFSJEEVZUFNUONUBMAMTRVQQSSDIYRBHSVLQCLVJWSINJHRTMBZEXLIHPTERNFYKOKAIDTRDKYZMMVEOQORCXGEGBODBKIOUFTSZYWTXWCBTBMBPIAJKCADNWCAHZGCUFRXGLKZAHVWNPGFKGXLMEPOGFPYACZ");
    msg.op = 98U;
    msg.lat = 0.5506917596498361;
    msg.lon = 0.3534243398690603;
    msg.height = 0.6916297978778811;
    msg.x = 0.8086662561663636;
    msg.y = 0.3498400664478907;
    msg.z = 0.5369592161241916;
    msg.phi = 0.5348515560675425;
    msg.theta = 0.2624926733152294;
    msg.psi = 0.2596456265065713;
    msg.vx = 0.1306485822316782;
    msg.vy = 0.16146380936214666;
    msg.vz = 0.8701253364840073;
    msg.p = 0.6347706508799961;
    msg.q = 0.5261656678679393;
    msg.r = 0.9995776224452416;
    msg.svx = 0.5253574007566043;
    msg.svy = 0.8292683048301189;
    msg.svz = 0.38225321671290624;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.7344953724157148);
    msg.setSource(12155U);
    msg.setSourceEntity(223U);
    msg.setDestination(41263U);
    msg.setDestinationEntity(156U);
    msg.group_name.assign("AEOELFEJUYGKVGZIJJDFFMOTOWABSNWWFKDFGNZPQAOAJCXOOIRENTMPWLWNEQBUUXQIARNSBQICIZVTVXUPBDLPDYEESTRCMSRCMBFKUICTRGXRPZBKUTDMPBSVJPPUDKUIJTYXDDHEAKOXTAACQLLHGTHNJRXBHQLCCLMQFLCYXNGKHYWAJDGGJ");
    msg.op = 37U;
    msg.lat = 0.5611947284496634;
    msg.lon = 0.493273464763326;
    msg.height = 0.054911047207000574;
    msg.x = 0.9651177986082924;
    msg.y = 0.37712922672613625;
    msg.z = 0.44583664281038016;
    msg.phi = 0.5571864287731568;
    msg.theta = 0.5955693024540575;
    msg.psi = 0.9327071753465241;
    msg.vx = 0.8081834604229089;
    msg.vy = 0.8607165760002612;
    msg.vz = 0.17010370106846784;
    msg.p = 0.196695730006627;
    msg.q = 0.8585589267721803;
    msg.r = 0.7875540598799001;
    msg.svx = 0.42484508929513076;
    msg.svy = 0.28909279471847527;
    msg.svz = 0.33683420811318565;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.8224149545665489);
    msg.setSource(3029U);
    msg.setSourceEntity(143U);
    msg.setDestination(55326U);
    msg.setDestinationEntity(100U);
    msg.plan_id.assign("XTWAYPFXGKLTAGRVUQCKQHCUSLMBDKODJJIUDYMTJJNZOWNMKNABVFOGGPFGMDRKQKRAVOCGHQOAHKEVWYBNPJINTTJMKOTEQARLWJCBQFSERWVPMQQLYBXHLWHYBTHVSJZGSUIAUPMGNXYAYHSFWEWEPIDZPQWKSFEIYLDTDDCBGJXPZICVONUCKQBTABNURRXZZOLDUIZZLFCRWFSMSEJRRLNFBYCYSHXO");
    msg.type = 132U;
    msg.properties = 109U;
    msg.durations.assign("YGLZIBCYOGMDGMQNNKNISAZXGZFKAMFGOXJLWDOE");
    msg.distances.assign("NEZXHAMLFPTYGOJNDGB");
    msg.actions.assign("MWKHEPDQDHMQPZBKWHNIMXKQVHYFTELGRPSGORXFNRGADLPCIUSOUFBJVSQZGMMHSSEBWVVCZPZUTAJCLVDAJGTXFITSYRUUGGNXYKQWAIYCHSBEVXUBTRSHJRRMQAAZCEKLSYDVFUA");
    msg.fuel.assign("SBPBTXWKXJELTKKYKU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.8291581386139895);
    msg.setSource(40293U);
    msg.setSourceEntity(74U);
    msg.setDestination(13070U);
    msg.setDestinationEntity(21U);
    msg.plan_id.assign("OFAXQWYBWCJJSREDSKQVTCJBNMKKSERQIAOSZQGPYBPEDJLLDJKIWAESUPRBTUTEXLCWKSAXLBYIVU");
    msg.type = 230U;
    msg.properties = 73U;
    msg.durations.assign("OBUXGPFLPESRWPMTKQJOFTKOBJWMACMTSKMHMUDREEKHLLFKNBRVPRCBEXIOUTZDEFABJVFAYQHTSWQJFDDYCNWMZHQYDGCSXPZQIVUVUVWHACGTSXHNHFGIIONYTDMDOEBDRSMDSUWSYZLVLBYKFXQJUNORUIZWCFYGOGGTXKREQETSVXJSPRGKQAEUXJCAJAAPDKMUYOGNPPTNBCYVVLBXVLIQHXWZOZNZPLZBKNJMRQIGLJLIFWWHCYNAIZ");
    msg.distances.assign("RABHHVJKSGIXLMQXFWKIEQMBHLNDOGBEWWHPZHTCKNPZWYUILYMQBFZHDVEOUIMAJUGCJKUCACGJBTEVPANSL");
    msg.actions.assign("ELVBILVSFWASO");
    msg.fuel.assign("JRTWHQTHRDDLTLSKMLGPCRGDKHB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.5293576330412677);
    msg.setSource(61762U);
    msg.setSourceEntity(3U);
    msg.setDestination(55478U);
    msg.setDestinationEntity(16U);
    msg.plan_id.assign("CGDBXXSDWHHYEWNPKZUT");
    msg.type = 98U;
    msg.properties = 101U;
    msg.durations.assign("OGGSNXELVQIABONWBYJJXMBGKDZIYKTTPRBOPGEIGXTHJRQCIYEAESKMBQTPPQHZFWGVUHAUILMSXKPEDVGQAPRZHZTFMCCQUOXFEUTFDJISKBVS");
    msg.distances.assign("KZTYFDKPLMQYDVUPQBLLALCSQSVNJHUEBZZKFUAQSHCBFYGVGQKOJWKPBEZJPTZKTTRWSSPDTXMYRKOWIARUGHQMJNVNCFEZWOWVLXZEVKTJXNOYHOYFXOXCWPWDMJGPNRRYLDEAIOBIHLKRCZPGXMUGMCOBXOINWENNIZDDUILSEXBOPBIQCRWCFGEHANQHPYYHMXETTJJIAAVUCDYGRVTISUFVQIREA");
    msg.actions.assign("OFFWPZSCSBOLQDNQMVCDSMHLPPCTZJTGNMKWHUHITOYOTRVCSGYILAKNHSQSBRLVBJJTEMGIJHQMXUETZQDWDVXOJAFWAFBPEWRFUSEAKNCHQQPECNYAPEEIAECYBXUVYURZLWRWATHJODXLWVVMRXDNLZH");
    msg.fuel.assign("PLVLKJUJOSARSEPDMLUEEX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.301201833574261);
    msg.setSource(20042U);
    msg.setSourceEntity(191U);
    msg.setDestination(49748U);
    msg.setDestinationEntity(221U);
    msg.lat = 0.3199825451368453;
    msg.lon = 0.14258880058050838;
    msg.depth = 0.9657171173924172;
    msg.roll = 0.3021163403544149;
    msg.pitch = 0.48247630950302933;
    msg.yaw = 0.22389679400272133;
    msg.rcp_time = 0.6488938018562469;
    msg.sid.assign("FPLUKWTACEGWXSCGZQAXUFSMMZEJCDIOWFAHLUGYDLVHHDUXCSIBTJMGQDALPBUXVJBFTZPKEGTLXYVQZYGAORCOPEHOAVQENNNHOKQSXUOYCZWWJCBDSLHHEMYXJOEIKWQTLMMYEFBXZUOIGONOBMSWNURHSWJ");
    msg.s_type = 232U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.11985187007009945);
    msg.setSource(37125U);
    msg.setSourceEntity(106U);
    msg.setDestination(30223U);
    msg.setDestinationEntity(189U);
    msg.lat = 0.5383176897527336;
    msg.lon = 0.9961165844510543;
    msg.depth = 0.5226573945255215;
    msg.roll = 0.46748203111202036;
    msg.pitch = 0.2154501144074178;
    msg.yaw = 0.8308649985961144;
    msg.rcp_time = 0.16930812319746935;
    msg.sid.assign("PNEMENCGCIJXAIYJIIPPKMZKXAEYAWIQDHCDZQZWWXMTLKXRSJKUIDCIELTSEQZFFRLZYUIAHTVVUWBPJSTZPLRGVLYZBGDPHHMOLKWNMYJUBFOSEHBHLIAXTAHXYDSUZAVNDFNECJFT");
    msg.s_type = 196U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.20390872971847984);
    msg.setSource(51126U);
    msg.setSourceEntity(204U);
    msg.setDestination(28210U);
    msg.setDestinationEntity(88U);
    msg.lat = 0.5761659553997576;
    msg.lon = 0.8538633216680408;
    msg.depth = 0.2795101886165702;
    msg.roll = 0.07112565136378413;
    msg.pitch = 0.703832561042974;
    msg.yaw = 0.831823496750894;
    msg.rcp_time = 0.29581483842084366;
    msg.sid.assign("CTCCQMMBYBRIKSSNHUGINCOZLUDEKTRDPCOHWWOPLUFW");
    msg.s_type = 114U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.46555556601550196);
    msg.setSource(29733U);
    msg.setSourceEntity(20U);
    msg.setDestination(47599U);
    msg.setDestinationEntity(182U);
    msg.id.assign("CBETEMJIVMTAUOTFAYDZKLLSRDLGAQFLBTVWONYQZITDEGZFWKPBPRZRIOGECDNSFWRTBXFOIZVNFJMGXUDRAKJPUIYVIFXPYROTWMZJZVMHKYBYGVHZESGXWRERZRHIGLPXLXNKHQREEMMTCHEMWVONPZUTOXYQJAVPWHLLVKHKBT");
    msg.sensor_class.assign("IDLFUMNXVOYZEYGGTXIQAEIQMGCUSFXFYZORGRDPNMJKNHEKSJFSPTEJWAWAJOGDTFIJCDEWKGWSUCSZJYYGRKTUFHVTPCRIZSALYEVKUZHRBSBLYZXHRLQPQJVWLPOKXUXODIJDQGS");
    msg.lat = 0.20913897403579007;
    msg.lon = 0.6787126407405409;
    msg.alt = 0.40570310714393554;
    msg.heading = 0.7272650214801468;
    msg.data.assign("YNCKFPVLQMKQMZSIBTTRDCCNMQOJLCVSUYTUPPUDEWYHKIOSDPKBMYAVMGCFAFGWILYUTSFTTHEJXWPYFGLPDWJYQTALEGIGNBKQUMLHFJVFOWCCREFDWZYHVKUVXRXBKMKGBTDPIQRULNRWVHEOSTEYVHHUOAO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.20947586153551934);
    msg.setSource(11394U);
    msg.setSourceEntity(16U);
    msg.setDestination(41679U);
    msg.setDestinationEntity(235U);
    msg.id.assign("FDPBGHSBZRMEIYLFL");
    msg.sensor_class.assign("JHRDSDTZMUECWKVVAQMUVKFMZ");
    msg.lat = 0.8714567538355368;
    msg.lon = 0.1890406121834245;
    msg.alt = 0.890766927743236;
    msg.heading = 0.7242422512493762;
    msg.data.assign("ZKVQDRUCCWETFEKCULTFNVEKOGWXIEJWAATMLVBMXRNTOGXVIFSBYSKFBCPUSUOILDASOTEYBKCMNSEMEHHXUGJLQMOWYNQXDQLVWVQIGNBORNWLHSFYXNCTRUGIKUSUBEVBVJHDRAZZSMNBGRJP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.8573436702576541);
    msg.setSource(56419U);
    msg.setSourceEntity(252U);
    msg.setDestination(3612U);
    msg.setDestinationEntity(92U);
    msg.id.assign("BEGSNJYTLKAWFJBDBRWZLNNPRMLZRGPMHPTSSEQNQVGKIPHLIVWMZTSGXMUJKKQMSCDRARFWRGTFLI");
    msg.sensor_class.assign("TUEUUDYFJWDNMVYJDKTVQCSGZABTQBEAMXDMAROELCNNHVYXTHXRWFNMVXHVELWCZJIBWBCPROFEFEUAYOJJFULKPZZWTQMKMCOQMIJXRSUMPBSLBPRGGWAZIICDWQNLKKHKHJTIATIGSVKWFIYDCEGPNSYVHKYDBD");
    msg.lat = 0.9776931041866131;
    msg.lon = 0.6321905485978062;
    msg.alt = 0.45200892065949516;
    msg.heading = 0.723551119306995;
    msg.data.assign("JQJANDBTFBDVXLXZDLCBMCKVIUWVEZKJCSEVTJFZNFBLNEPYACVRRYUTFQIWHMSYWKDOLROMTWQIVBONYGGSFAWVYZQPDDNRPRIY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.6715063508335269);
    msg.setSource(31884U);
    msg.setSourceEntity(211U);
    msg.setDestination(45025U);
    msg.setDestinationEntity(128U);
    msg.msg_type.assign("MJEEQLNDNDNCYKKASLCUVODJAEPUCPMTEFRAZWRDEOQGHPSETYIRCRJGGTNWFCVAVSUZBWYKNDPZZMXZMFEYVQOTOPITFTQQAFMKLKKLCBTCFESXCKLJHGXTCFRSPIXFAZHOUOBLVIHLUBNGAWUVQYWLVKHYYTWXWRIMDSEJQGFUJZIGUPLRKDJFJLQXBOHZOGVMEHSTBYSMXBNDMJQXZRVYYPZUHGWBBISXA");
    msg.sensor_class.assign("MZDJOJPUPOUGACHVVOANFRTIBVVKTHTARLKIOUDWIDKWXQPQYPXJWJNFCBZCBAUJUAHWXWSGCTUBDYRCSMXZMQTMUFCBEEIITVKDZHPNJWPEIYENGDAFUGBKBCPXSBJFMXWULD");
    msg.mmsi.assign("YETYHTXBNIMRUVQXUQGBGQRJLZXDWLGNMVHCEKJKQNPBXYZZYMDJTPDNCTRGCCKKVLYLDKCBJDEAHNO");
    msg.callsign.assign("JCVNAEAZZQVYUIBBGFSRFAUVMUNTKKCKGPCVPNABLQOMLMMMZJZUSSDRIRUKLLQIGYRSCMGHLSFMWTIJWEZQORSXDDXVKQOFGQXXYUSEQJWISEGJCWAJU");
    msg.name.assign("WBVMLSGFRMYQVPEBTQLOPMSRNCBAKVNPMOCSGITNJJENTNUXIGDBLVBDDZOFZLPGUWKSVUYHFRHRTDHHHVJLJGMWMTACJBEQXPRLMOEMNNZILRFPHUEXAOECGIPFJFGZWOQOORSIAQYEQ");
    msg.nav_status = 184U;
    msg.type_and_cargo = 155U;
    msg.lat = 0.2628294247097839;
    msg.lon = 0.6721207205851131;
    msg.course = 0.7183511533043895;
    msg.speed = 0.785263150514389;
    msg.dist = 0.7531273138734441;
    msg.a = 0.49383565042750177;
    msg.b = 0.5921786591778049;
    msg.c = 0.31752621644933987;
    msg.d = 0.6767495952738156;
    msg.draught = 0.6286350687531305;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.4795183320826303);
    msg.setSource(53140U);
    msg.setSourceEntity(143U);
    msg.setDestination(64928U);
    msg.setDestinationEntity(219U);
    msg.msg_type.assign("BIJNZWFDJBCKEYHEKTXEGQHEHGLMQNYTXAPGZOQDIHRRUZMHFETMROFMTDLTVUERWZUVVQKJZHRJOFPHBHOOIVORLSSYUNAYFWACQBAGRGOWJXTDKUZBLFVGUEGWIPEOAXMDQCHUYGSZZFCQAXLCYMKMPSSIXBATJWIPIYJZDMGYJXMQOWQLBCCYEHDORKLVSDEPMDNXVASBWAVLFTCKXNBVBAZPNJSUWSXKRKKPI");
    msg.sensor_class.assign("AJQHPMYEQZVHUJGQGNTIMCXIYGPAXDWDHKERONOWUSUYRCFPPOCCQDNBKLWFBBXBSLFEXRCJIMQWO");
    msg.mmsi.assign("FPYEGUTABTQDLDZMUKKZETFAOCJLMELPTKDYLVEUOAVSZGKRUGTPWHOCDANQMASKYXYPEJFUCLNYOTKIQBJZIGXGVAVDIASOYIPUXMGDFVJWZUCPRAOGBWYCWOSOROMBKESIVHQWCVJVFBLNMBCXXCGHHMPZDXEJJXUFNWFSGSRLCPQNLTXYEJRXQKTHUVZJRNEZWJIDDOSQETRIXIBFNRWBDZYNHBSUPWYLMHPQFNMZRSCWQQHKNHL");
    msg.callsign.assign("WUPWRJNVSAAULTNOWUBUOVZQTZHAWWHQANINTRXSGURCLVLEBMAFGCJYROHIGLBKFEGVSKTSNDGPRMJCFBWJVHDNSRAQOHSDWFJPAGDXVXXYSAKAOUTNHRMKDKTZGELOBKUHUWIKODTWLFZEILBQYQCEYZUPDQJJOUJLIMYEDQZQCJZFOSMDQPYHFPMOMYXNKCP");
    msg.name.assign("EPXKDCHLZUOCAPQFRDQZNEVIBLWYDVGGMKBSBALYJEAUYVZNWYORWEFQUQEPWCIXEKAMJMPNMGLXRCHQQ");
    msg.nav_status = 244U;
    msg.type_and_cargo = 13U;
    msg.lat = 0.8513126944343951;
    msg.lon = 0.5694744209160333;
    msg.course = 0.8065805498685042;
    msg.speed = 0.7776926847849853;
    msg.dist = 0.42974354363697487;
    msg.a = 0.46170139006204847;
    msg.b = 0.5559456918915613;
    msg.c = 0.9997118528785427;
    msg.d = 0.9018292876183702;
    msg.draught = 0.5393763683447387;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.26241649213510976);
    msg.setSource(60425U);
    msg.setSourceEntity(225U);
    msg.setDestination(45328U);
    msg.setDestinationEntity(139U);
    msg.msg_type.assign("AZJFUYVKWNYCBRXMJYDKHCCYVANGNLBHLCTBCYEQTWEHXEHKPGMFTOZCATZCNFMAQBQHXJVYDLATCNWJIMERIIGYSNZORRNDHMZRXVKGLXLDUPPPOXSADOLZBUZIVIABTQWVUUFTCPHPFUKKLESGBMBRPQIXKWPJOYSVLQYAWFESWVYMSEDSFNRTSOOAUEUMZHXJOGVCRMDTBQBQWZXPSQVJHDGJIQUZSFIOFGNDOUGMTGJAEHLKLW");
    msg.sensor_class.assign("AHIQVQDPKHKUKLDFWGABWNICQDIMSUWMNGHDSNZRYLBXEZVZZLKYEFEYMIKFTOTXUCPYUDQWVCVYBAHXTRWZWCHWYXQYAOADOLEOOYEANHRFPEBMPZPISBLXQRTWSWIVCEGNHJMISMVPSBR");
    msg.mmsi.assign("CEDQLRVBRHLATCDXNYFQTWPXIZBNQJRXMKGJTSGVIFNYJYSWAYWIKZCOPWRMMQGDORCKOBVESXPHGOZVAFWHFRNSDKLUDZFHTPOGBDTQJFHUJAHJBOPOVNZFLAYKYUCXXPE");
    msg.callsign.assign("SZZULUVOERUDXUCQOTTTXWYCJVFKGTXNDMVVHBASGYTIXICIHCVPXTSWVUJUMIPPKFBORAISQPKZQJCQMRMSLCGKRAAHZMUPNQFLQVJBNYADXDOBCEGWFLILRLCVQYKYXTXHEDXEWUUPETBPTNLEAQNZYNNWAOJUCXOLZEWWSNOVHBYBJDNWYHFIWDJQGPKJRSCDKLRFBQIRZARTRNHHEJAYPFZLGSHAFMOMBMFGEOKJFMSOWGZYKDGISVPDK");
    msg.name.assign("WRTVCBSRBQTJAQBUXBWGVYAGQCAPSOKMRNOSFTAGPJTZRNDAEFWNGCACOJNZEYYKRFHVLTHNZOXJDMYEHYMKCJRFYMEJKIXSVUPIVZNSUWIBEZRRKVTSQRSUEKDAJFHTFXEIJWCLUHQYNMWIJXQKHPLSTYOKAZIHHNGOCTUOCKXDFXBQJHVHGNWGVLVQAPQISGARCLLBOEMEUKZILOPVEIDPUDWBTYM");
    msg.nav_status = 114U;
    msg.type_and_cargo = 105U;
    msg.lat = 0.6068813623682776;
    msg.lon = 0.2091452126013703;
    msg.course = 0.2914492536548994;
    msg.speed = 0.781649818514794;
    msg.dist = 0.9474708891042218;
    msg.a = 0.7210278264993174;
    msg.b = 0.18809888125934315;
    msg.c = 0.4474803230815887;
    msg.d = 0.9700650045866557;
    msg.draught = 0.8543199111645264;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.060878728110077884);
    msg.setSource(37705U);
    msg.setSourceEntity(114U);
    msg.setDestination(61829U);
    msg.setDestinationEntity(85U);
    msg.id.assign("TFXVQAJHNZGCGNBGWUIMRYTMBIPYOSCX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.14974625667124808);
    msg.setSource(45324U);
    msg.setSourceEntity(30U);
    msg.setDestination(19916U);
    msg.setDestinationEntity(234U);
    msg.id.assign("JBEGQTCAVUPMLQPHMHBAVDRUCSWOOENEOLGYXQJYVHUXZBBBXOKHHRCGPFGWEZJRGKZXFHOQKVCBKKFCLLJFYBWLDZAXPJFTMZVMQDSINTBLMGARMSIJDZNXLWVYJHOVECROQZPLRHJNORHDWNGFPXJIEVKAGWCVXLDFBUGUMOQADWMTQNAGFEDNSYTRKVDWQNIULBPQKTCSICINOI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.3443572241785964);
    msg.setSource(12419U);
    msg.setSourceEntity(200U);
    msg.setDestination(59732U);
    msg.setDestinationEntity(139U);
    msg.id.assign("BVIAPUUKSBBSUOTKETFUMJUSJSJFWBHAHRCZZSIAFTOLVZFGFPJEGCTNLKRIHWCBCEQDMZTJNCUSEKHXJXQRZATYOOUSLTCKNIRFPWWHKWLMLXLVNMJRZEYMXCNVBVVPFHYAQOSPORDAYGELNQPYDNEDPWYAHSPWXZ");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("NJRWVWOKOKHLFCFKDLVUOBSBAPDVWDJWUMYLIAVVGKLPDEGYLEJTYAXZHSMVVKTGDPIYSIAJFZYPRJGDEXICKVFGQBLPHUERNAEXYCMTTIZPDTCOQTBZIHASGTBNKJBWSCUMQEHXDIBKAFXFSYRRMNM");
    tmp_msg_0.feature_type = 107U;
    tmp_msg_0.rgb_red = 197U;
    tmp_msg_0.rgb_green = 10U;
    tmp_msg_0.rgb_blue = 201U;
    IMC::MapPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.5968889814305323;
    tmp_tmp_msg_0_0.lon = 0.7668698222878698;
    tmp_tmp_msg_0_0.alt = 0.19015548879858923;
    tmp_msg_0.feature.push_back(tmp_tmp_msg_0_0);
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.6735290044715136);
    msg.setSource(5520U);
    msg.setSourceEntity(219U);
    msg.setDestination(32088U);
    msg.setDestinationEntity(126U);
    msg.id.assign("VDIKWXPMSRNWIAXZBRLYDKQEFACCCXHGXRVFHQPFZZXXCUPMBVWUDHWRNNILHQNROBOJHSEVSAUTYQSUFSWXFMIMKYIGKJJKKYEGZSKYMLMUMJJQBYLLWFSBETQUZOBDDLTCRHOYPFYNRFCGWXHJAIJPHXWOUOVSAHONCIZDVLOCNSDBRUTZA");
    msg.feature_type = 104U;
    msg.rgb_red = 3U;
    msg.rgb_green = 201U;
    msg.rgb_blue = 112U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.8980512885241951;
    tmp_msg_0.lon = 0.9166856362162591;
    tmp_msg_0.alt = 0.009273857750439984;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.6918793435404385);
    msg.setSource(19064U);
    msg.setSourceEntity(78U);
    msg.setDestination(39096U);
    msg.setDestinationEntity(145U);
    msg.id.assign("IHXAOKZCFLCNJUDUMYXCPPLIXGSANUMSQXGPWRRDGNBGCTDASJJDXUWRZZHKCXHOMCUBBHNFZNJHYNEWVWQONC");
    msg.feature_type = 58U;
    msg.rgb_red = 45U;
    msg.rgb_green = 176U;
    msg.rgb_blue = 154U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.6404010060629647);
    msg.setSource(11322U);
    msg.setSourceEntity(242U);
    msg.setDestination(23252U);
    msg.setDestinationEntity(126U);
    msg.id.assign("POOMTFBOSUJRUFANYHOSXWXSHTMGUXNBUMWLUMS");
    msg.feature_type = 250U;
    msg.rgb_red = 197U;
    msg.rgb_green = 237U;
    msg.rgb_blue = 67U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.0564074806455408;
    tmp_msg_0.lon = 0.7675412703415755;
    tmp_msg_0.alt = 0.4413137230825468;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.3506222779649445);
    msg.setSource(2134U);
    msg.setSourceEntity(2U);
    msg.setDestination(6560U);
    msg.setDestinationEntity(199U);
    msg.lat = 0.6241000885782104;
    msg.lon = 0.8948664637082439;
    msg.alt = 0.30186704151494537;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.016861546109427694);
    msg.setSource(49883U);
    msg.setSourceEntity(54U);
    msg.setDestination(29081U);
    msg.setDestinationEntity(139U);
    msg.lat = 0.18453852335337795;
    msg.lon = 0.20108640399646338;
    msg.alt = 0.019947425719125;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.6926383370140383);
    msg.setSource(49145U);
    msg.setSourceEntity(8U);
    msg.setDestination(263U);
    msg.setDestinationEntity(107U);
    msg.lat = 0.5778774719094733;
    msg.lon = 0.21872440201090548;
    msg.alt = 0.2743064754985509;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.6812290408423329);
    msg.setSource(43665U);
    msg.setSourceEntity(21U);
    msg.setDestination(63733U);
    msg.setDestinationEntity(2U);
    msg.type = 9U;
    msg.id.assign("XIRQMSCZBTRZQKUPAUBZJMBSCZFCCYPBFTYKJLGUXWTXSSJLYMSNOTULEHAXL");
    IMC::HistoricSample tmp_msg_0;
    tmp_msg_0.sys_id = 16725U;
    tmp_msg_0.priority = 78;
    tmp_msg_0.x = 12565;
    tmp_msg_0.y = 16989;
    tmp_msg_0.z = 29261;
    tmp_msg_0.t = 27290;
    IMC::DynamicsSimParam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.op = 41U;
    tmp_tmp_msg_0_0.tas2acc_pgain = 0.1580226262328368;
    tmp_tmp_msg_0_0.bank2p_pgain = 0.6896508965227566;
    tmp_msg_0.sample.set(tmp_tmp_msg_0_0);
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.2395467838582297);
    msg.setSource(27297U);
    msg.setSourceEntity(115U);
    msg.setDestination(18798U);
    msg.setDestinationEntity(37U);
    msg.type = 210U;
    msg.id.assign("KICDDFZNJBNFXHADJVGMYGQWFOAKKBDXMFOSRGWPIYFVWVRLTGIUJHXQUHNPKZQNKBYADBZXEPFIKLPHLIWEPMLCTPZWOGCSTABGTGFJRFTZU");
    IMC::QueryPowerChannelState tmp_msg_0;
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.23118980707930226);
    msg.setSource(49370U);
    msg.setSourceEntity(156U);
    msg.setDestination(8191U);
    msg.setDestinationEntity(6U);
    msg.type = 70U;
    msg.id.assign("AIELSCBPQNNBGYPRABXUPEWSGEITXDQMWMLVDDMZKQBHNXOXFUFUVVSIZZXMKYGVPSKVCCAGTGXUXUBXHWGZKCTFSHTPFAEZCURHQWJKKPOOEHLUJGMYENLJMRUSMVAVWODMDCNHTFAZLOTCWRTVOJONBSHLLAJOAIFIKWH");
    IMC::TCPRequest tmp_msg_0;
    tmp_msg_0.req_id = 27394U;
    tmp_msg_0.destination.assign("BEHTBISPHKMTBZVQJHEKCWWYLXHTJFIORUVCJNUPGXQMHRSTTVAPXLLHIOTSNKUCYFTFRGYXHGDSOODDAWVRMJUGZGZKZQAQYWJZDGPWLGDCTILQJVMPBKYBWJRSIUMIRJCSBAOGEBOVNLXKIWLHKJFDGFGZMZOYPOVDTZIWXYQRDSWAYKNIKFABEVSSCHMXPRLDEFKJFCVAYYUHNERBEOMSXAAUQTAL");
    tmp_msg_0.timeout = 0.12152841612164245;
    IMC::OpticalBackscatter tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.4021015021587253;
    tmp_msg_0.msg_data.set(tmp_tmp_msg_0_0);
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.07493122978029132);
    msg.setSource(23902U);
    msg.setSourceEntity(193U);
    msg.setDestination(3712U);
    msg.setDestinationEntity(12U);
    msg.localname.assign("DWAHRXFBLGUFPUVEKLUXQOERFZUVQBKPWLRXGEMXIICTHVVNWJEEASONHTNUZSEADTYBUNMCPVHINCKKTIMVF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.27818986329102346);
    msg.setSource(53246U);
    msg.setSourceEntity(211U);
    msg.setDestination(27600U);
    msg.setDestinationEntity(209U);
    msg.localname.assign("OHPPFKTMXUECPOVHJPKJRCWUDWGLJYGXTZIQJJMWHOGTIDUZVDCCNKQGBOREXAZNIBCWYA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.33433547071473046);
    msg.setSource(45453U);
    msg.setSourceEntity(26U);
    msg.setDestination(43930U);
    msg.setDestinationEntity(39U);
    msg.localname.assign("IVIJGBYJEEMIZFYULVTYTBSK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.3429706015514008);
    msg.setSource(29698U);
    msg.setSourceEntity(89U);
    msg.setDestination(16277U);
    msg.setDestinationEntity(160U);
    msg.timeline.assign("KUZQWBNNTPLIGWOUQYBLIEYUMFPTOOXSFGIPARZJORRYXRULKMQXCXQLHRDPEWPTZVSUGSKNBNICKJHIWOOVVXQWZUTQBEFNWIHAZSHUKXWODEEKAJVHAZEYVVWTJ");
    msg.predicate.assign("CEAECRMSYHNTRYFXLPFLGKIQMUGNADWSWRJADSGFZPVHDJIWKMBBEQXLPDKVSEAZYGIVFFDDPGNMEUZQGTHHJRFHBXKAHWLCJWPFKOZYJPNUJUIMUQVFQUKNLHHQNMEDCTGYBAGNERKJJTQOHYZSBCWDOCIUWQRVCWVSDAFRBGSOMZOEOMJZMLTCILNXQPHQUKAKIBELXGXV");
    msg.attributes.assign("UUIDZCHEQVDHRDGDYSSPEYILTJVWOEQYZCTECPITZBAINKXYJGHJORILHYSJRMQBRWTUOEEFQLPSLGUBJAXNXOHVULGWNAPEVOVYQNMCAEZDZGZSWGIUFCMNOOHPYABGGPZGXSVSLMBFVEQKFDPKNKOMHWUS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.3689468789675725);
    msg.setSource(25056U);
    msg.setSourceEntity(181U);
    msg.setDestination(52619U);
    msg.setDestinationEntity(77U);
    msg.timeline.assign("SIBVPKPMPYFWGWCIOHUAQHHARVGFHCVDMMBDDYDIYALGFTRSQOORDXWRKJTGXZASZEAPPVNNNHQQCQVWGSTNQIXTFALDLEOEEJTXPOLPWMLGBDBSFFGFWIVRVQZRICKTZZZUULCJMADLPJIJZKNHSELRVBZIBCHTRBVRFYOI");
    msg.predicate.assign("WRBBMLPFOGGQANSZPXJIBHLAIVGCLSLIIMXKPPZWIJGKJUFUEUDEPOALXVVCBPWYHYHDQAGKKLTFCWVMSNRMQQTUYIMSDUBZFKFOJODPYRVHHOTKEKDYUQMOOVTNVUNBFVXNMQTCFCCDZRTEHAWQUEINHZKGYYEKAFITLROMWSPCARJDODYPJCABZNTVYWWPJHYTQXZQRENMRZGUKFZAGLJRSBSCH");
    msg.attributes.assign("VZGEDCCYHRELRSYIGNXBVOSFVEKIHHOIDTUWAFNTLXJCPSDQFDLEQJOQJZLCGAGLLVPOKDFJUBSTVCZHNMUYOGYALATJNCMXPPFJYKBRAWKPHWZMRQYHBIPMILSJUJWXAXMBROUUFYFSVPCSTMTWLGQZMRGMASBCXOBVQKXNQRBAOKKQOYRQDGEXVYAMFQIATTWDZIERPWDWDCRMEWNDKIT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.006878517322253308);
    msg.setSource(53973U);
    msg.setSourceEntity(101U);
    msg.setDestination(12120U);
    msg.setDestinationEntity(199U);
    msg.timeline.assign("UQMRZRLESDQQICOFHZIAGJMMFEXYDFUVCLOVNASQKUXBAYAPJHSLSSGFDPFCDAVSPXWZUJTBHSXMPBWTLMAKMMNGANEQQFJVBYBZUDIDNJWOITJYQOITZUKRMWKYCOGCOLZOZNHVXGFHYSYHZPREBHBAGNHJHVNESAILXCFEBZXKUPGQRNMWPCVQNFKDDCJRNZGPTEYPOYTTDLGMIWHBUURSQEJWKWLIVPJRLEXACXKFO");
    msg.predicate.assign("SJMYDZIEBHMSYXFBNAJDOKAZPHFLHCIEIQJGXFGTMKLPRJMIAFZQPGEVNWAKXJEKKEGZWNLONADFXREBQNGDSFUGSBOYVH");
    msg.attributes.assign("IKOGHLMHZJEMXPLQKMCJXIEYGZXYHMZLTBENIRKGOVJSVFIXSBFIUATOQDDULCVWOINPEPRWWPOES");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.7806509631128784);
    msg.setSource(18153U);
    msg.setSourceEntity(236U);
    msg.setDestination(1242U);
    msg.setDestinationEntity(27U);
    msg.command = 227U;
    msg.goal_id.assign("IXNFPJLRYMYDLJISTQJZDKPNUWNWQKJHDZTRAJMCGCQSHYXTLWZCHVVFJBOTSEOVWOAPXSEXBPUIRIVAUHNMMGPXPUNWNUXOZVYMZEKFLUNTGFTCCQYXXBVEUROJKCLWSAPIFRKNDZQAFELPFVYOSQTHVKGAFEADEOWFOYGEXMWASMGSUITBFUMWIJQODNGYQIQ");
    msg.goal_xml.assign("QAXWQNVZGAIRBRCZYSDHXCCBPCVNDZEEQQXYCSYGWWDNMMIETKBNZOIYJTRPORVCDKEDMFXLSCESSULORTKOJXBDYFLFISOASUGKPKHWQVEGYGBGBNKTJNTOGIM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.7986125994806458);
    msg.setSource(19698U);
    msg.setSourceEntity(192U);
    msg.setDestination(31395U);
    msg.setDestinationEntity(70U);
    msg.command = 136U;
    msg.goal_id.assign("CCFPUIQDQMJIJAEFRFZOUZIXCEXALFFEHVCPGSQTQZHXNSXRLKJIKIRQPRBVAMDIXBMANFHGDCRTSNOQMESYCWNZZKPGESIEMNYHNR");
    msg.goal_xml.assign("ZPVLDUVPPAQPBJZWHAIXWDWKDIJBMOSKQKACSRPYBWHLIGUJEVMPGYMGPCXVVNUSCMMTUJH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.6639446173653849);
    msg.setSource(56833U);
    msg.setSourceEntity(164U);
    msg.setDestination(11357U);
    msg.setDestinationEntity(94U);
    msg.command = 53U;
    msg.goal_id.assign("RWPEGEGXFCUVOHZGVXZDFBDJHHPUGLWPCRQIXBKYZPQAVWDWSNKTPDHZCRYQWJEMNDSQMVGAYWLZWURYTGAVVKKYJJYUFUKKXPCDRILTNOHSTKHZISSKBGJSFQSBENKLHPEBONRHVVEMBIBCMQATRYUIOBLQEIOIZLOMUIYCHZJDUJRFLQJEHVWLSWSAKVCMODNYUTEGPINOMNSAFFFRJFTTTANQCGANXPBMXWIBYMGPTLCOXFRCJXL");
    msg.goal_xml.assign("HQFEQDZIGRRENCRUVQKJWJAHVGPMOTSTDKWUCOGCXGXMWVRWKEYLUUGJNYAICXNLGOSFBVBYOYBMWMHKPNZCBBADZFULQALWVZHTRNWUPYBZEERTYSEKZBCOTPLEAIGFGIJBQLVDTLSSULTQHUQKZQDISARXQNXTMVDXROCFWZAHOPUFXTJJYPOPKSFDHKYERDP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.01985695937964116);
    msg.setSource(14172U);
    msg.setSourceEntity(20U);
    msg.setDestination(39071U);
    msg.setDestinationEntity(245U);
    msg.op = 69U;
    msg.goal_id.assign("FXMBUSZTVPJWOWZNVHKJGCLUQWMZBZPYCGPKHOHNFLYVCOHCGQBLIPWXWIGGYXISOTQCFDUQFDYHWKUNZRGINEMABKSOBYQZOJEIAJUJJTVZJMTTUNAELSAFFVSHIHVBJTLEXARQKQ");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("WVJQYCCTFOIHZMUFECYLIHVUNDQMRAWFFQTRGBZHLARPTXDNAJMEJPBZQMQZUPMNMQFAJIRFZYWEMXOKSOHVHCOJFWBZXLALVVNWBITULRATKGVVEUGAZCBIUZXBQTOGIDLDSJSKNKNYEGFRMGYUBQKEBANUGBKGGKWOSKUSSOTBCLLIYGNHCYDRHVXEDOKPHPJAPZTYAWMPXWOXDDISHSKWXYJLR");
    tmp_msg_0.predicate.assign("TWQQSGKSSPOHJIXBPBLSWZYGMDGLYAKQVLZASRENBNBIUCMAQHAHTLXGDWAWNVRZERUGNSHKPHVOXODUCMTLCUEIGQJMSFGHTOMBCWVCLKFQYHWKLXYSAUINUDCBMBMISPWEYLZCVEOURBJAPTKFOEDRKIARYFOAEKDJTDJVYVCWCFNVZZQJXGMAMRTIGENYYTZZNKUWHHKNHEJDPPZCFPPMOUBFFXRFFXNVLIPODJVWXIOEBQYSQUR");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("WSADFYJNJVCCTGHEQLYUJNZDHVSKWVUGRBXHGIMIRUJLLEFXIGABHRTXLVSAIQEKZIFFBNIQPNMIMYEBEPVDKIXJOQDQODZTZKYFYNPPQOFRCABZUETYHLEWTXSRHQFLTIDBJKWOJBMSAOWCXOWJMCLHJLUHWZANAGJMUSNZCNRXLPYYFVCMPGGRPUKVTSMQORHEDLOSYBREPYCAXBUAGVSQNAPEOWZUFXMKPKKKDGUNDGWMVQTSCVRX");
    tmp_tmp_msg_0_0.attr_type = 25U;
    tmp_tmp_msg_0_0.min.assign("JOTXWCSJTKGBGBHVMDGEXDTXFTYHFDSVKMWUDWQCAMIAZFLTOGYUZHEOXJRLGIWEDRKIPURMLJAMYZPVIEAFMEOIWCWLILDBTDUOQBUNBCNOXSJRPKZGMTYCSBUTWJQH");
    tmp_tmp_msg_0_0.max.assign("MJCUYWNIQQUAESDGTEODQOPNGCSIEJZJRBJLLWFUBDJNYAMGUPVJANXPHXQEKRHVQVUZUWXSOSRDBRFWKVIAPFSLWKVBCGMLGQMEXPMHXZOIWDCZBUHBNKTAACRGWBLQUMKORDIYOPBKFGPVGNSYIYXHAKTSAIRQVZZNUHCBEMOLCUYPRDXFFCGGRPJNAQYTTTZWLPTFSVYSQLCEFEYFOKVRIE");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.5634606852313674);
    msg.setSource(42344U);
    msg.setSourceEntity(42U);
    msg.setDestination(37324U);
    msg.setDestinationEntity(190U);
    msg.op = 31U;
    msg.goal_id.assign("UFHNRIPZVPBEMQIFCJAHVCBBUOXPFLDWVFZWZDHQJFDWTROAEAUGKIRYT");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("YTQPLMRDCVAPVMCHHXBUDGVOZGPRHZUKFEHFBFGFLCQALMGASHWORKWMUTDPICKGFTDISROMINTAMCXKBTCIVCTDRZSYHYSOZFAEKZUXBQGMNUIJPJFRMLPIFTYVZVNBEOQDGUBMJTYXSYONFVXEYXTIHHKBKNJNKQWSORJWPRCZAPDDQONXZWKLNQIGEGUQJRZSPPAQXJSAZAHESEEDXUSLCUJDXGECVFLWLVRWWQYNJLJINOBB");
    tmp_msg_0.predicate.assign("MZOCEIFJOTVSGYQTCAVYQSVLNOUFRGWYOMQAOUSGOEECKQAENDNOHDJMAAUXMZATXQEAJGKKIELFUIWSXW");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("FQDKLWNKKBODNVOPNEHJEMRQCTMKKJXSMYLRWRONARWUHURQKKTSXMJFTJHXWHGSOQYMFCPXYPNUYICSBPZHLSFJCIEDCAFOTSHAPQGAMEDHMKYGTGDCXIUZDIVVBTOMWSYBQRVFXIHTJXWMZDJLVSIRVDPBEQSBFYVYGZAJZAULEKJDPLBHIVKVQGFPBBAWQLETZRZZTPFWAXYERUFRUUOXGABIGAOOVSNICONJCWIZCGMXPY");
    tmp_tmp_msg_0_0.attr_type = 148U;
    tmp_tmp_msg_0_0.min.assign("IYHYPQNXOYGLJEMRIFEIFTDJVHJAPWJKKSKZWVVYODONHEFSSMMLPTBCRQRVQSGZHUUEEWXG");
    tmp_tmp_msg_0_0.max.assign("FVFFDJEAJGPIJYBETDZKEUCBSWGTNLPHUNXGDGKCSBRXOEIVLHVGXAMMYVGKXUNYCYEGKXHYLPCQUABDMNVAZSERTBEHYCOMQUMMAZTIURAMMROYXSOSZLASQAQIWKGHDFDVTIXPBLPORYKMILTEWXNSJODKJ");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.346074560643035);
    msg.setSource(61189U);
    msg.setSourceEntity(204U);
    msg.setDestination(23573U);
    msg.setDestinationEntity(149U);
    msg.op = 93U;
    msg.goal_id.assign("DDICFPHACYIKCAJUOUZRVXYWRXJYDTERVUENCXZMSRKTRJYKTSXNTYRJTOWAXXOFIPOJSBWSLTIZNHKMKKSBFAPVMXWGCGWIWGSELRWAQPDYSZKCBBGGSENBWLFKOEJNGLHGTBHDHDGWLVMKAUOVEAHAQOXKPFJMREGQXCHIALPHMJSFZIVRFC");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("GIPPGABGKZHEGOSKFOZJBJMZSQPZSRP");
    tmp_msg_0.predicate.assign("OVRIATATFLKTXNKYGBRK");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.4253828112410294);
    msg.setSource(47939U);
    msg.setSourceEntity(141U);
    msg.setDestination(26810U);
    msg.setDestinationEntity(139U);
    msg.name.assign("ZTFROFHTRELLOPUYVUTKKHWEVKSYXNWWDIAJGAXNDNESYCYFHWGZCDQDAQUQVHUACJEBGHEOXLDPAFAXGGIJHUCQLWYJDODQWBYSWKWAXPIMSBVQHSEIBKNQUQZGYIRKCZPKOPJVIAPMCNXSZRFFRVAMTGMYUZW");
    msg.attr_type = 235U;
    msg.min.assign("YPUCVZXNFNOKXVURLKKMMDAFBBHIEUVPHSHQXLSJPTLWUQYEYNYIMRMIGOZQIOTIEHMW");
    msg.max.assign("TUXPYLAZEKSPBMDCMQBFQXUAFEJZLBVVS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.14251814557267772);
    msg.setSource(5066U);
    msg.setSourceEntity(159U);
    msg.setDestination(5025U);
    msg.setDestinationEntity(59U);
    msg.name.assign("JPWLOBWJHXXYN");
    msg.attr_type = 151U;
    msg.min.assign("LNJBKAMIEHVDUTYGUTKAKSBFNBACEIWIJVMWBXD");
    msg.max.assign("VDWXKPIMYVPWWSOHUKJFYBQZSFUPWMOOXHACEZJTWQMDVEDIRGVUFCHOOVBFRJBBJANQTWLLFIXKHLVIAPUSMIUAMRHHEYMGKGBTTTOFCWGXJEJYTVLTKLDYAZCFPRPDGFGZQSUXFEIJOZERLAFGBBQSJYCNNDTCNMJCYZWLBHZGAIAZXHRRXNXINCDXLJNAPCLVDKMSOPYOSQMEANNOGSRNDYWECQUUWQDELPVBP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.5583034558705114);
    msg.setSource(46173U);
    msg.setSourceEntity(231U);
    msg.setDestination(35211U);
    msg.setDestinationEntity(220U);
    msg.name.assign("KQUFHLHZMPGUIEBSRYAIZITOTXZYVKVSMWYXWAYCPEYNBQDXLQMFCFOUQQKMQVVNFIYGRORLZEDBTVWCQSNNAWEWWULAOLDACDJVFBNEHDGPUSUJAMAPRKWQEZTJHCOFVUIUJJYCZIKGFEGHEZGXHXSXYZVECNLKKGBMNWPBGPSOVTTMMMRWAOBLDN");
    msg.attr_type = 199U;
    msg.min.assign("SGUKSHGCOIXHWHLZPOWCNLYVHJFDBENKWKXRBVJQVEFOTFXLVJSFDAOQSXXZPTXGGUJRPYMUOKCYLZLMOD");
    msg.max.assign("GWDDQQPNSQBBQNICLXFTZYWTADMIZGHTSMFO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.0006039772575794355);
    msg.setSource(23294U);
    msg.setSourceEntity(166U);
    msg.setDestination(54411U);
    msg.setDestinationEntity(164U);
    msg.timeline.assign("AIQLAZFGULENDNIYPOQPXAHIPLSBPGSGVWACNBWTZCWGDLUTSHMEWRUEMBJTFQUNGQMYZUJHNHOIMJHMYMVQBFFJCCAKQDLTBVZUBRYEQNYMGIVSIQDZWZRDZHTYSXKIAPUMJVTWBWPIQOSKAXWJOFDYFIMEEDMLHXEFCKPFKRVWEXJXNCSRANZWCZRVYTUHOKGVYYHULRPBBETKXJO");
    msg.predicate.assign("RLNSKMVTEPXJDPEHITAUMVTKRGSERLFLLRYCMBS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.41490721321572444);
    msg.setSource(55116U);
    msg.setSourceEntity(193U);
    msg.setDestination(33640U);
    msg.setDestinationEntity(111U);
    msg.timeline.assign("TQLYEZXKPHLTLRCYSDILAUYMWQNIHUTXLARIHGEFADNIOKMPUFQTGDNKQOPWCKEOGHASOJRKPTISVQ");
    msg.predicate.assign("PVHJNDQLVNKWCH");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("NALEZWBHLOBQFAPWBYJENLKISNMN");
    tmp_msg_0.attr_type = 97U;
    tmp_msg_0.min.assign("OPQHJRUVCYJKUFVAIWMGIFLKMDYFGDVFNECWHGGIAHTAJTEEXZSVNBFFAJAACTEQQAEIQBTKRVZSOCIHVMJYKSYKEUMNGOWHXUVTRPQDODANZWLRERPSPGLDZXCRNYJCZBJCOUWXPOXXIUMSZTHYKHOTLDXBCMQQMBJLFCQPUMXLAVIJJVGSIQFLYBZDCNMPKWSSFHU");
    tmp_msg_0.max.assign("NDWBSKOCXWJYSKVDXSXYMFCEQWAPNEJVSOQHRLUHUZCMKYACMGYFHISPEBKWFAHWGERJRQLDGVPJUGTZHMBBLMTHTDVWNHRKNSALPLTZGZKQMDTUOPHGEQRGCMZUWBKQXLIXZFAGUUXEMODUIDZXDXVRIAJLORCGACNYZFIZEAEFVYSRZORBGOSINPDWJBNXIXHKUQIEPMNBLJY");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.31263641756045124);
    msg.setSource(43712U);
    msg.setSourceEntity(174U);
    msg.setDestination(10481U);
    msg.setDestinationEntity(176U);
    msg.timeline.assign("KKDGPJGTQFFZGGQQWMJXIHCYXPBWJNCBYXBBDFXMAUOPOPRJOWLVRLENBQGHT");
    msg.predicate.assign("LZJXJPSUMQRNMCLYGOKWIPVHLDSONFGVZQBOJPPONGWSAZVAZCIWPQNCEJMYFTORLAFKMTZAFDVQXADHBDJUUWCEOCZGKAIHLVZTPNRWEGMZLFRFEKMBYETNOBQVZWXXSDTWDNRPPYIPHTOMNAFOISKHGRDAEBMIXNVRPFBCEYBDUSTGULLYGJVZXFUTRIHTTXSS");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("SVWQYZCSBTCPFGKXPLYU");
    tmp_msg_0.attr_type = 80U;
    tmp_msg_0.min.assign("YZNYFAPUOBJJTSHTWDBVDHCKVRXCQWHSMGBYBLMQYFICDXMAOYSFABWFOAAWSVAZPNFOQYAZKYTPRVNLVXRXQKXKUOGKHIQNHWJZAWLGPOJ");
    tmp_msg_0.max.assign("DNPPQVDCQQHQWCXXLROYLOVFJULSSCQXMSZKOYUQNNDMDOTXRGMLDNSJAWBEIMIGFYOLTWEVPZQPYFCEUUZUXYYRWZRCNBIIBHDSTZFJESUJKENILDGFGHVILFVKRXMYAVBTHAFAVLHGSN");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.19261776608188175);
    msg.setSource(8825U);
    msg.setSourceEntity(21U);
    msg.setDestination(6520U);
    msg.setDestinationEntity(200U);
    msg.reactor.assign("OCPBRAHFHZBYWDHZWPNTYUMDBSGEYJAFTUGAWRBLUYWGUGIWPDFAEIUKJQTLWJMCUJCUCHKSVZBEUCXHHGKCQYPQIDSKLRQSEARPUSITFVOMBNKQYJNFWKVIRILGAMVMFDAOMPQXTTOGRLKIGHBXOCVEXKOVTRNPNL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.060905687937449327);
    msg.setSource(46585U);
    msg.setSourceEntity(53U);
    msg.setDestination(37468U);
    msg.setDestinationEntity(166U);
    msg.reactor.assign("AKCTDUGTGNPSIDGBPKPUTBZXQORIY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.9906495789027564);
    msg.setSource(58737U);
    msg.setSourceEntity(114U);
    msg.setDestination(60489U);
    msg.setDestinationEntity(111U);
    msg.reactor.assign("NUTEVYXGMIDLAJYLXWFXXNDKAOILLWZWKGWGPMPFHKQCEYCSZKZIODLFVRNZPOAOKJRTRVQABNIHALNBBENPITMUHQERLHRUBKUGEIDJJVRCICOCZBFTRJVSVPGQWPEHCFUAMDJWFQUXYDHOAVYYPUYDDIPQSQSSZUNZHZNTKREJHQB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.35823058175229505);
    msg.setSource(52155U);
    msg.setSourceEntity(78U);
    msg.setDestination(6145U);
    msg.setDestinationEntity(38U);
    msg.topic.assign("NMYWTKQOGCEIBWDGPLIDJTFMMPKRYGJNNWKSXAEKOFNLIWRMCRPHJMZSFQJBUUBGJVIHEMAVOHHUZSUGFJWBITAJOPTZNIQEZYHCPVMIOVVGLESBTRXZO");
    msg.data.assign("FLLOIHTJIGGIPHSEHUGWXWVDGMHQPSLYOYKPKVTADMWOYNCZYKPWCAMMGWXPJMXZLKFXAFJUQYLDTJBYJEFTCGSTRXTPRZZPDFAFIUQARPRJPGRAWXKKBDAQTECINVRXGNEQFQBULDVSBWMSBWKHFOZHJEMRPVSZNRCERVUHYMJTQCHIIUVYENNZOGSOXHADVCEUSWWBQBJOBUUDXOKEBOEYKHVANCVOTMLFCFSLDJIDRZQIYNTIXLBM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.14817953710230392);
    msg.setSource(30403U);
    msg.setSourceEntity(223U);
    msg.setDestination(59244U);
    msg.setDestinationEntity(124U);
    msg.topic.assign("WGEIQGEXSKQMMLSYKOZQQZVRHHWDODFAT");
    msg.data.assign("JLNEPNIEZONGASTGCMCXEKCZLYZJWQYASQBCPFRNXFLOMCEDCYJAKWHLAWKCTMTFLDJVSHIOWOCKQEULFPVNDMSSTZYUYKAVRNXBUQEHVPGREHXIYJKPUKOKBFYRNIJVNUMUITXTBIBSQGDSHZIEFXBOJLDUZPSHXQAPLRDWWANJFHJGHLFQPFNGYGU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.796018859069691);
    msg.setSource(39885U);
    msg.setSourceEntity(8U);
    msg.setDestination(62740U);
    msg.setDestinationEntity(6U);
    msg.topic.assign("IAQZLJSGILOJXWPKZYYEETGCJGAHBAFXTGCUKTEQOSUKUGQXRQPCKKVSLWJGMATFOHJVZSBIUEMFWPKTXPFWDPZIKEWNYNFUGNYLKQAYBJHOWA");
    msg.data.assign("HAYYRRWPZIZUDKPSSMOKBGVKNVMBYGXUMNOZVQKZCHSOQPWFYXCUSJHEZGGVDLQUNBFCIZEYQMMHOBNMUTTCTYGDZXOXHIQQHTJXOIWTIJXPTKLJMLOSZSRFGAJDVQKDFXBTIBVKEPDKLAZVMHLASTNWMMFANRCPIODYYNN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.9240271679000613);
    msg.setSource(48911U);
    msg.setSourceEntity(164U);
    msg.setDestination(31687U);
    msg.setDestinationEntity(193U);
    msg.frameid = 28U;
    const signed char tmp_msg_0[] = {-86, 49, 59, -98, 67, 5, -124, 16, 120, -54, -86, 12, -93, -51, -74, 19, -117, -56, 117, -5, 71, 25, -94, -15, -117, 10, -106, 87, -37, 9, 98, 83, 85, 48, -107, 3, 29, -3, -115, -30, -62, 118, -118, -118, 100, 84, -63, 6, -98, -57, -11, 27, 30, 72, 56, -82, 47, 98, 102, 35, -102, 48, -41, -113, 109, 100, 55, 76, -86, 97, 35, 119, -25, -36, 68, 15, -87, 6, 100, 81, 114, 81, -6, -120, 85, -59, 88, 101, 71, 24, 121, 71, -14, 8, -83, 99, 1, -72, -102, -26, -50, -25, -2, -12, -67, -88, -29, 57, -16, 52, -54, -96, 115, 115, -66, -128, 113, -79, 105, -124, 107, 42, -41, -46, 24, 52, 6, 95, 67, -90, -65, -56, -43, 91, 11, 27, 109, 100, -38, -55, -70, 110, 51, 43, 64, -112, 92, 6, -37, -21, 116, -37, -32, -76, -102, -72, -76, 61, 98, -105, -14, 26, -14, 85, -92, -81, 17, -46, -104, -15, 9};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.8326121815934233);
    msg.setSource(35082U);
    msg.setSourceEntity(210U);
    msg.setDestination(50883U);
    msg.setDestinationEntity(2U);
    msg.frameid = 217U;
    const signed char tmp_msg_0[] = {88, 48, 0, -25, -18, -117, -91, -125, -77, -127, -105, -37, -56, 106, 99, 71, -128, 77, 68, -1, 0, 102, -97, 109, -100, -116, -65, -125, 52, 77, -59, -40, 91, 86, 109, 112, -21, -86, 11, -85, 113, -69, 72, 53, 112, -60, -23, 115, 76, 88, 72, -22, -94, -1, -100, -56, -62, -80, 108, 59, -26, 87, -44, 30, -72, -67, -79, 93, 88, 63, -104, -53, 43, 40, -104, -62, -49, 105, -9, 59, -127, 113, -128, 114, 0, -18, -118, -44, 96, -85, -9, -125, -50, -119, -100, 116, 98, 57, -49, -101, 55, -43, -37, -99, 13, -61, -114, 73, -114, 95, -53, 15, -36, 45, -5, 59, 72, 90, -6, 80, 122, -31, -11, 33, 35, -122, -128, 48, -86, 101, 53, -118, 123, -48, 12, 94, -34, 117, -100, 97, -4, -12, -85, -89, -76, -92, 65, -113, 37, 86, 49, -95, 73, 37, -61, 53, -39, -117, -116, 17, -26, -76, 23, -19, -98, -95, -9, 100, 124, -65, 58, -26, 89, -30, -31, 73, 34, 112, -53, 111, 19, 114, 53, -8, -49, 34, 4, -97, -34, -30, 32, 45, 95, 97, -92, -7, 90, -112, -47, 92, -71, -41, -50, 25, 39, -100, 32, -107, -80, -79, -49, 103, -19, -92, 55, -114, -70, -36, 95, 73, -84, -44, -86, 99, -79, -53, -109, -16, 36, 18, 24, -71, -6, 59, -75, 90, 108, 7, 39, 6, 58, 113, -85, -29, 7};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.10958831275594583);
    msg.setSource(50557U);
    msg.setSourceEntity(105U);
    msg.setDestination(43675U);
    msg.setDestinationEntity(45U);
    msg.frameid = 219U;
    const signed char tmp_msg_0[] = {-69, 93, 26, -38, 120, -85, 55, -44, -120, -10, -100, 111, -25, 39, -69, 95, -77, 98, 31, 4, -28, 115, 76, -49, -31, -84, 98, -3, -83, 2, 96, 4, -107, -30, 39, 79, -60, -128, 107, -118, 113, -6, 41, 123, -56, -27, -82, -99, 42, 108, 94, 85, -12, 117, -120, -53, 24, -62, -29, -98, 18, -109, 30, 14, 1, -5, -105, 1, -24, -79, -122, 45, -104, 80, -84, 20, -61, -57, 115, -48, 74, 48, 19, 14, -17, 71, -19, 36, -7, -9, -1, -49, 126, 100, 119, 7, 121, 108, -9, -10, 109, 68, 74, -82, 52, -80, -60, 46, -62, -22, -84, -104, 51, -101, 3, 3, -121, 40, 94, -128, -109, -36, -36, -117, -103, 38, -71, 118, -70, -30, 3, 18, -55, 62, -64, 52, 121, -13, -121, 50, -19, 56, 7, -68, -121, -34, -44, -126, 79, -118, -97, 51, -17, -100, 4, -120, -24, 17, -2, 39, -21, -13, 89, -110, -13, 32, -5, 77, -104, -72, 119, 56, 120, 87, 107, -28, 83, 28, -106, -43, -29, -57, -35, 24, -125, 79, 4, -15, 72, 78, -80, -51, 58, -32, -72, -22, -28, 110, 99, -25, 44, 69, -13, 55, 123, -19, 32, -124, 90, 112, 58, 5, -117, 122, -86, -63, -57, -23, -123, -80, -30, -73, -68, -60, -98, -38, -9, 123, -73, -69, -100};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.43924400111069684);
    msg.setSource(8339U);
    msg.setSourceEntity(211U);
    msg.setDestination(34595U);
    msg.setDestinationEntity(163U);
    msg.fps = 78U;
    msg.quality = 147U;
    msg.reps = 124U;
    msg.tsize = 74U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.7349236176230081);
    msg.setSource(2679U);
    msg.setSourceEntity(250U);
    msg.setDestination(21608U);
    msg.setDestinationEntity(5U);
    msg.fps = 27U;
    msg.quality = 78U;
    msg.reps = 197U;
    msg.tsize = 221U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.15009072328557915);
    msg.setSource(7903U);
    msg.setSourceEntity(222U);
    msg.setDestination(21715U);
    msg.setDestinationEntity(113U);
    msg.fps = 123U;
    msg.quality = 214U;
    msg.reps = 5U;
    msg.tsize = 71U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.2871855887239909);
    msg.setSource(8172U);
    msg.setSourceEntity(30U);
    msg.setDestination(7344U);
    msg.setDestinationEntity(150U);
    msg.lat = 0.5274504722225245;
    msg.lon = 0.008363198279775164;
    msg.depth = 150U;
    msg.speed = 0.2920952509763375;
    msg.psi = 0.9844707261270996;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.052304594533149396);
    msg.setSource(32319U);
    msg.setSourceEntity(132U);
    msg.setDestination(52654U);
    msg.setDestinationEntity(172U);
    msg.lat = 0.4929624996303559;
    msg.lon = 0.2254531325154343;
    msg.depth = 102U;
    msg.speed = 0.2949169862427288;
    msg.psi = 0.27621588883304893;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.3839885912332228);
    msg.setSource(28985U);
    msg.setSourceEntity(170U);
    msg.setDestination(44970U);
    msg.setDestinationEntity(86U);
    msg.lat = 0.6890038956997616;
    msg.lon = 0.8023223777897592;
    msg.depth = 222U;
    msg.speed = 0.17891621414664716;
    msg.psi = 0.745591664304133;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.4278391707755673);
    msg.setSource(39615U);
    msg.setSourceEntity(156U);
    msg.setDestination(51883U);
    msg.setDestinationEntity(225U);
    msg.label.assign("ROELYMGFLFKAAU");
    msg.lat = 0.524496038293018;
    msg.lon = 0.9447607889655695;
    msg.z = 0.7655506301681249;
    msg.z_units = 188U;
    msg.cog = 0.24395693087327242;
    msg.sog = 0.16660342830424468;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.49064072402165415);
    msg.setSource(48940U);
    msg.setSourceEntity(13U);
    msg.setDestination(35061U);
    msg.setDestinationEntity(135U);
    msg.label.assign("FRADRFAMIZUBKWKGMVXCXSQXNIZOVGBOAOULDZHTGVWLJKHCTYLDKQFODFEBJZONDJERHABRDVMRLHLTSKFKSSUVQJPNQGZASDLBBANWECSUBWYWXEKRSJERXYZTHYFGUHUZ");
    msg.lat = 0.20414431630390517;
    msg.lon = 0.3354943261759257;
    msg.z = 0.2736091117636891;
    msg.z_units = 12U;
    msg.cog = 0.30217124887440006;
    msg.sog = 0.8058413605873171;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.6796776487454432);
    msg.setSource(63931U);
    msg.setSourceEntity(54U);
    msg.setDestination(62416U);
    msg.setDestinationEntity(228U);
    msg.label.assign("TNEJRPFKMKOCFPHLCIFMNZTGHJKIZQXDRDVDDBIQXBZGEMYOREHNBTUJJJCFIQOOBHHTSZCMACSVPHIFGXDVMNMWKYGUABSTMSJHIEWCOWAHEVDNPWPRXTXTGTKOVRIGQQYZJLXFRBQSHNLWIVTDDEFSFESACBPKAUZCBALVLNCMAPWUYUPXZEEUXGFYRXGKNSRLAWOJSOGZCKJJDUKLQRIEWOLBLVPKBZYYDGUVQNYYINWAMPZQTVHQYU");
    msg.lat = 0.00474216627942492;
    msg.lon = 0.7363518103280656;
    msg.z = 0.5713703960313463;
    msg.z_units = 59U;
    msg.cog = 0.870938831552063;
    msg.sog = 0.5298909022326821;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.6815823661709176);
    msg.setSource(50528U);
    msg.setSourceEntity(15U);
    msg.setDestination(48356U);
    msg.setDestinationEntity(112U);
    msg.name.assign("SVWVGBCPRFUJYVEORGHHMTFQZBTRCCGERDYYPBXKQSHBBLDHUOQPCOKNROFAAMISLJSBTRIINPBCEKFEGOSRDVGNMHZFJACYNGFHVDZYTJVIMUJBWSJXGWPVONCMJXUTKOZBXMMIAXKYSUYHUTNAXDLJTQUECHWOZXLYAUZ");
    msg.value.assign("MGHIDTNVZOPFYHQXSWDEROZLMLLDXLWQYXIYVMSXGVFSWIBGWOEEYINGWCOTIXBPBOXQFNREZPFTHCRG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.012117959270961598);
    msg.setSource(32348U);
    msg.setSourceEntity(8U);
    msg.setDestination(48033U);
    msg.setDestinationEntity(217U);
    msg.name.assign("YWWIAROBYJOGZVBDJLHEHZMYGVXFTHLPQJRWCSYLRQVOEZNBYESQXWCRCTFULRMGBWXZAUCHOMFKXYKJLOBQSYCKKTJKSDAMGSTSUWOEDBIFVYVQJOTXCUBHHMICYRPQAJFXIIYKAJROXGTZPPGUOQDKMPOINWUUIQFMLEGLVMWVFCVZWRGIKPNNFSFNUHZNDPMJNVAXICREMPNDLSQB");
    msg.value.assign("SUHBCLXCZVABEUIUWYLMPEJTYAHADWNVNDUPFFSDCRROBQTGQTQLNXOPXZQEAWAUYKCHA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.5099481356467512);
    msg.setSource(13415U);
    msg.setSourceEntity(189U);
    msg.setDestination(21042U);
    msg.setDestinationEntity(176U);
    msg.name.assign("MEWVAKAJUPRWOENREWGGSQEDQNCPHIBPQOATKOJOLNBYUMFOXARIJRFYBWVBKKWENKRWUXSXTJAJEZHTNPUMISHULMXLGOKUCDPDFTSSVCMFGIFEINHVZXNLXDWGKYCXXPWQTZMRCJDSDBFUZKVLVISFSZFDHUAXQLQPVQHTJYIQGJELYOCCGRHECHZYMZQMNAMTQDKZRCWUFVYSIBAPRALUYTOINEBBG");
    msg.value.assign("WQCSFSUWLIMCIEC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.6871856801385814);
    msg.setSource(15196U);
    msg.setSourceEntity(55U);
    msg.setDestination(38267U);
    msg.setDestinationEntity(187U);
    msg.name.assign("KUHIVFQVUJWHJWRDPQVDCCUMFPXAMSCDKEVJNLPXVTNVGDHHWSAYABOMYYEZNOLMHWETPODRKVXNUDZBEVLTXYNZWXELFCOBRKYLQGJPPGBSYHHFUQTZALNGTWGRMNHQIXRXGSPTUPONOCSVDIQBZERDQIJGJREAWBSQWZXYUCLRZLAJGOSBGZIWCTEQMAOFSKJTMUMITJPNCFGDYIFXIRZACBAVIKHWFELKOFZLISM");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("BIEJYJEZHVGDTSZHBDWTHORGBCFMFZCWDGURBPOCTVAVBMQYUIVOAYSLIACBFRWRLDSIPQLGPUTIQIJSBLXXSMNJZEYRZNRUEXOVFU");
    tmp_msg_0.value.assign("NNPVDZKBMDOIJACAXJMFVXKUWIP");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.5012477558792371);
    msg.setSource(25683U);
    msg.setSourceEntity(253U);
    msg.setDestination(2947U);
    msg.setDestinationEntity(200U);
    msg.name.assign("TLSIPVWSCXREJNIQLDFDCTAQTSVJMCYZIRVYDAGYRMZQMSADDDDVAUHQXJWOMRZSNXFAGKACKNTFZWJBZYNZMIVKSFJBCRVLOSUHWNUJJEKPPIEPFYKUZOCGORBPAUDIVXHNENAWTNONBSBYJZTOQLXHQVKXGBPZUITLOHMGLTRBWRLUGUYHTBMFFCFECWPEBDHHMRWSLPOIKYQHRMUDFBWLWXKIPTZUGEXKHQAOGGMKXXVLGCYEIQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.8219675062528348);
    msg.setSource(26677U);
    msg.setSourceEntity(221U);
    msg.setDestination(38795U);
    msg.setDestinationEntity(5U);
    msg.name.assign("GTXANCFUHEHJYVKYSIYGOG");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("PFXQOKIFHYIWSVUBHVBGMTLNLKYJONPFYDYKEACCMGTNRKBWCWLPOZOKARCHSZWMUHJIVTWQBRMMJYONYVOQVVTZZLHOVQZYCDCTJFCXXBSQSILGTTXEVJYNHZFSJIFSLFDIAEAGLKBQOHPAHXGNIUHZADNRPUDQEIAEWLBJGPXCWBSPEGEUBNJGIHKMMS");
    tmp_msg_0.value.assign("IILIQCFHXEVJPUOMLJPTDFPAWNPCWVLFLESKTOWQBYQWWXZHQOJKJYJHEEUYKHBQXVYTBOPHNSIGXYNUPKHCUSCEBYATJIZVGRGLUAQKUEWUDRANBCGQDYTRLEESCGCCHRMMFZQXJMGSXTMTPXSCIKMARANJCNUZUGFDL");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.07828167917491002);
    msg.setSource(50216U);
    msg.setSourceEntity(8U);
    msg.setDestination(7218U);
    msg.setDestinationEntity(106U);
    msg.name.assign("JJTFXEDUCQXQSHXOOWYFGSNPMWKVYIKFFVIKRMSEJFPCUYZDYLEETEDIXVIKOLTZJMQTATDUWYGGRKZVSCXDBXGABRYGZOJFXLJYSZWDGGSMXOSQPNRCGDCODPWIENA");
    msg.visibility.assign("XCAZAWKQLKNJVIAHSYJZDQDBXOQPOHLSYWF");
    msg.scope.assign("ZAQOUOWICLGKMFAWHATJHJEBERNQUDDMUZLFWILOYELXCKTUISBLEZE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.5256966105624971);
    msg.setSource(12954U);
    msg.setSourceEntity(109U);
    msg.setDestination(4039U);
    msg.setDestinationEntity(143U);
    msg.name.assign("EXZOIKIOHIAOOMVWMSHHNLNYRYGNKWJHFAQGGULRJCNVIKVSDFJLGDXPTQKWPLRYFBLIWFCCSEHTZWDRXPBCCBOUVXHXVPZTRPGWNCLSSZLKAXQIDTOY");
    msg.visibility.assign("WLOZTANWSSHYMICDJHLQADIUCMHELFIPCEBPHTMTBQHUUKFSBCCXCZXDIVITATRNXTZODVSIBHMIWWGYHSLKOENRPCQGLYSGUJJUXDRBJIFDBGPAKEDKYXNQVOESJLBHKXFJWVZKWCOFWWQNUTSBRMDLPMZRPQGXEZPQPTVMGFZPGRMOISGAQIAWJNMYNAOEYYAUXELTOUJJFUVYDYWCNUSFQRRRFEVXCAYNZTAHZHVOVGP");
    msg.scope.assign("EZYITBMCDRYLMSDCUHWTQGIOGWVBICWGLZRJVFWBOEEHXPAZGGAA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.8149045977968239);
    msg.setSource(50688U);
    msg.setSourceEntity(209U);
    msg.setDestination(60894U);
    msg.setDestinationEntity(162U);
    msg.name.assign("LXLFHMATODOJXXLMBQBWVLGNDYBMCDZRWLWKJFQZXYRGBIGGBCJJRSNSTKNYUIPXUCPGSHIVDZNHLSCHQIEBHLCOABFAVOMSVVZFXHAOIMQFXMUICWYNAZUVBWGTQHXJAKPNPVNWCFXWXKFEDOEROELSWPMJQLCLRYTHGDEKAUIDUFQTTYMJKZHEPZARUJYYFYIW");
    msg.visibility.assign("JLYJUCGYRUOKGMTVBGPVXAKGIWZWRVTEJZTJZDAMKTSEJBUXBYDFYORDQCLZOUWRQLGWTDNSFXCSUQGECHFPSWMJRROXRNMTIDHAYTCQKLHENFLLPTBWEKFQILXJKOECNANWRNVUJPDBIFAOVPGYCEDVHVGIXAZVYDYUMNKQUUVODISFQWAMCMLXFIZZQSS");
    msg.scope.assign("PXBNFFCLBBQHKHHSHZEIFO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.4504013123005337);
    msg.setSource(33752U);
    msg.setSourceEntity(11U);
    msg.setDestination(62652U);
    msg.setDestinationEntity(61U);
    msg.name.assign("ZGWEPLTTYAPXLVXNRCHVDYYMBSAHDLKHRJRCNRDHEAUMJAJPQZMRMWVEFZQPFKWXLFSBCNKTESSNYYDJWFLTKOIOPROLCGBVLJHWTCOKLYSKEBIUYANIFUTUQDCVGYQWFTQAYIHZGJXSCKRGPOVFIQZBEUPQWOXNMUXBZDJELFGWNIGXKRACGJIQCBCQYDIBDSARGPZXHJJTZM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.6395530951902479);
    msg.setSource(14769U);
    msg.setSourceEntity(102U);
    msg.setDestination(42704U);
    msg.setDestinationEntity(95U);
    msg.name.assign("FKUTHYESJJHYWLRYTTUSZLPRTIFLTRRMCVZOLWNYJSYUUFJKQLKDXHLDSIDAVIXHPHBRCEULMUNZTOUTFQOJNZXMKTBSVZTCANBEQXOACDKXZEZEJIGVBYMSJUXGUDPLGIKWXWBFNMRJOBPVWGWFHKMYOZHBYPYAGWW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.8270926442146588);
    msg.setSource(62287U);
    msg.setSourceEntity(229U);
    msg.setDestination(33160U);
    msg.setDestinationEntity(19U);
    msg.name.assign("UKDHNZTJPTQOFQPGYACPXUQJIHNHYQVNIOTCACGAMNAVTRQPEVUBXUSGMFRDBMTIXESXRZJXOWGKQKIAJXDOGREELJUCSLKGHDPZFHTKRBSJYICOAKUJYVWQSHFDIEVXMWYGYBSOLUPCRPWNMKFEBTEUDIWQUSYBAZZNRCPARGALPEDWWZHKVBWLCBHZLZWGWTNMJLEXNVQYXFHCIJTDSIBVMFTFYOILSMOMYRPEJVRKNLULBHZOFMGO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.6227050234858635);
    msg.setSource(29131U);
    msg.setSourceEntity(193U);
    msg.setDestination(44659U);
    msg.setDestinationEntity(111U);
    msg.name.assign("VQCOSUERMWGXAPWPYSCZMYSJFAYIZLQNAVDUHKGUEUJMUWLFQHDWBHRNKGZEPVVKGCPQRQZTMFOALTGDKEPZXCNXTXWLJLRWZYGXNKXBKN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.5821418545624844);
    msg.setSource(48341U);
    msg.setSourceEntity(222U);
    msg.setDestination(26771U);
    msg.setDestinationEntity(242U);
    msg.name.assign("ZROYTUGMHAMLYHFGKWCETQKXFVSZSJAZKHXGMNREJOPKBMJYHDFOSKBZYJTJONTZWRMGXIUMAAOAHEXQYEOULNDDIYTGZRFNIKCVQVLTALKJNLVQTWXVWODQWGBXLCBGBCPZCXTKBSSIRXYMXAASNXBF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.7268146553062503);
    msg.setSource(28948U);
    msg.setSourceEntity(242U);
    msg.setDestination(16768U);
    msg.setDestinationEntity(18U);
    msg.name.assign("FJGAWYZDMPDAMEZRMFUZDOIPVSNWGUBBXHCSPCADYPZYVCTILTRRWVSXQMAKOANFIHDBPPRBFJMMPEUESKGVNLFPVMKTJOAWDBQSWXWTENNYNNCOBLITGVOFZXYYJONTHGENVUKQJJXH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.6613857819392279);
    msg.setSource(39341U);
    msg.setSourceEntity(233U);
    msg.setDestination(62530U);
    msg.setDestinationEntity(174U);
    msg.timeout = 2837831394U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.35680306389405547);
    msg.setSource(57419U);
    msg.setSourceEntity(137U);
    msg.setDestination(28085U);
    msg.setDestinationEntity(65U);
    msg.timeout = 777572482U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.27074526498368734);
    msg.setSource(56622U);
    msg.setSourceEntity(102U);
    msg.setDestination(4614U);
    msg.setDestinationEntity(95U);
    msg.timeout = 1408163976U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.9313429513467102);
    msg.setSource(30195U);
    msg.setSourceEntity(26U);
    msg.setDestination(50061U);
    msg.setDestinationEntity(155U);
    msg.sessid = 2681884337U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.18753957312315783);
    msg.setSource(36332U);
    msg.setSourceEntity(28U);
    msg.setDestination(10199U);
    msg.setDestinationEntity(181U);
    msg.sessid = 764340834U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.803009451318899);
    msg.setSource(46781U);
    msg.setSourceEntity(186U);
    msg.setDestination(64080U);
    msg.setDestinationEntity(87U);
    msg.sessid = 3926849836U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.7988288213689257);
    msg.setSource(33836U);
    msg.setSourceEntity(148U);
    msg.setDestination(14438U);
    msg.setDestinationEntity(136U);
    msg.sessid = 673838741U;
    msg.messages.assign("JPGMLJOMVEMPFOT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.03648815227530411);
    msg.setSource(40822U);
    msg.setSourceEntity(131U);
    msg.setDestination(10881U);
    msg.setDestinationEntity(55U);
    msg.sessid = 4117300133U;
    msg.messages.assign("HPBUNYHNVHXFXWBLRVNSWOQDCMXSATRCMICZOWJNZEAZWONKZDDRRSLXFSEAVNIGEWKOJTRPQSXBHQKAEMFFYUVUEDUFQUDOTXCWALGGWULBSTIDBKYYJBRNJLIZGITDSHIVCGUCZNCYFVVLHBUBLMNRFQPICDYSYSXFYLTRJWWXHXIOVJPMGDEOCTTBHIWLJKPROTGAUXMKAJZIVLUGZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.08021577394529467);
    msg.setSource(27208U);
    msg.setSourceEntity(147U);
    msg.setDestination(61431U);
    msg.setDestinationEntity(174U);
    msg.sessid = 2954744163U;
    msg.messages.assign("XUWGHWOKGFILAUXQIMHXNNBMOKXDMZETYSBTEUOBVZIYTXORONWQQHFFLPBQDFSDICPYFMKALTZFGQGVTNSXOHE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.3399221007523907);
    msg.setSource(30644U);
    msg.setSourceEntity(220U);
    msg.setDestination(63742U);
    msg.setDestinationEntity(215U);
    msg.sessid = 197968117U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.21388349336304457);
    msg.setSource(41214U);
    msg.setSourceEntity(73U);
    msg.setDestination(34328U);
    msg.setDestinationEntity(203U);
    msg.sessid = 1787509863U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.055401422699566605);
    msg.setSource(32616U);
    msg.setSourceEntity(251U);
    msg.setDestination(13805U);
    msg.setDestinationEntity(116U);
    msg.sessid = 2229295912U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.6538550431126812);
    msg.setSource(19902U);
    msg.setSourceEntity(250U);
    msg.setDestination(25615U);
    msg.setDestinationEntity(159U);
    msg.sessid = 32992297U;
    msg.status = 157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.4886153898228187);
    msg.setSource(58127U);
    msg.setSourceEntity(5U);
    msg.setDestination(50130U);
    msg.setDestinationEntity(115U);
    msg.sessid = 2304457943U;
    msg.status = 169U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.21874533680746422);
    msg.setSource(47791U);
    msg.setSourceEntity(176U);
    msg.setDestination(15611U);
    msg.setDestinationEntity(194U);
    msg.sessid = 1474021202U;
    msg.status = 71U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.7169517461637338);
    msg.setSource(15812U);
    msg.setSourceEntity(135U);
    msg.setDestination(17416U);
    msg.setDestinationEntity(55U);
    msg.name.assign("WDQPFSSPWRYJSPTJETORWNFMDNTPMFXDZLLKSMYBYMAHWMOOOYYLAOUPRAUHSEHFWLAWBYXGEBMSHIHRMYLKOKBZDJXLHGJWCZUJRIIKSFYEEBYJGXKRQIDGIQGGVTGWCNGCGMCDPUKDARVIJDNXCQSZBATCLYVIZDMVKBSWVXJNTQXGQDJNRBZTWNUZFPZIQHVKKOQMUXFAHNHSPZVBNJLRQOAEZVCVT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.8209170649516935);
    msg.setSource(45215U);
    msg.setSourceEntity(243U);
    msg.setDestination(63267U);
    msg.setDestinationEntity(111U);
    msg.name.assign("LLUNSZEGVZPXRJDIKWTIHDAHAVWJZECYFXHYRW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.3489225600950959);
    msg.setSource(25513U);
    msg.setSourceEntity(56U);
    msg.setDestination(50687U);
    msg.setDestinationEntity(2U);
    msg.name.assign("IHPHAUKOBBVCGYXFJIUAYXHPAUMZXSWAUGXLBQJOWZKAYYCRJMDYAQEQMRCDCNZHOJYWRUWDVTKAZNXCDWVPCYLGVHNJFIKZRTBGFDDDUXQEBIXKGHALJBEKGQFSBEMNRUHZSOTJGEDITMOEVCITKXPWU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.3916192579304215);
    msg.setSource(40547U);
    msg.setSourceEntity(54U);
    msg.setDestination(44957U);
    msg.setDestinationEntity(16U);
    msg.name.assign("BOSUNDZGTLDUYPKZRKSALDOHNCBPERFDPUALBTELIHOYDAQAIGSQHIIAYSCTBVS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.7391810077000943);
    msg.setSource(7992U);
    msg.setSourceEntity(81U);
    msg.setDestination(32936U);
    msg.setDestinationEntity(113U);
    msg.name.assign("PMJGGHRMOYCUAYXIZQCJVICKTCXHQYCWDHMUONNUNNDIPHWXIVBREDVYFTUBZSARVPASETUOGWKEOWGRDYZTHHXDJMUZLWIVGZOMRFFCWDCQFQMBWIRMLLTPLTPERFSIUAHDFKSNKJAVHSEXGENTCSBQOI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.8869944813709821);
    msg.setSource(595U);
    msg.setSourceEntity(145U);
    msg.setDestination(9908U);
    msg.setDestinationEntity(221U);
    msg.name.assign("YZJYODJRQDRQIMNVWYPEPRCVAKSKJFPNEAALZGXIYZUWZPULLBAHBFTNJLFFDLPWPBAEXXGMKYWQAUVARBSUKGDBAGIENRMEQWHLHQHGCTYOQSWGJVGTHIEUTBKROEQZQKRLNFYXWHROTTAIIQJPUKHAISJXTNYDZLSFIOXR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.9508758337080246);
    msg.setSource(15859U);
    msg.setSourceEntity(69U);
    msg.setDestination(10949U);
    msg.setDestinationEntity(195U);
    msg.type = 141U;
    msg.error.assign("DKIHHXIWYKQOZPPYXKVEIVFEJELBNYAFBOAJSZCFJLIZORVXWTDTSPDNCGDKVFEMSAJINXJXA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.6735034322984451);
    msg.setSource(1124U);
    msg.setSourceEntity(143U);
    msg.setDestination(46632U);
    msg.setDestinationEntity(151U);
    msg.type = 39U;
    msg.error.assign("FKENUPCERQYEBFCUAZSGPGXXCNRMIRUJFFEOBZDMGOYTZSKHWCXPPBTDRRQWPBVMONXYBFIAOJMGFGLSMCSPGLHKYCJXJAIXBJZIWVTLFDOHLGSLIRMLJWTRKNULWZMVEJGWUTBRJAOHFJEVVWQCNCQASWYMHAQSXIK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.48745985571927986);
    msg.setSource(34148U);
    msg.setSourceEntity(137U);
    msg.setDestination(6278U);
    msg.setDestinationEntity(196U);
    msg.type = 83U;
    msg.error.assign("BYUGNPYRZRDBMLPSKPFLPJQMPVIANQMWZNAHN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.8136999730876199);
    msg.setSource(9393U);
    msg.setSourceEntity(149U);
    msg.setDestination(7799U);
    msg.setDestinationEntity(21U);
    msg.seq = 30751U;
    msg.sys_dst.assign("XVKVNQVXJJKPUJGDEOYJFQAOGDCOEASLUBDZZFVDVPYSXVGOZINAHYHSRUELVWRNZOTYQU");
    msg.flags = 102U;
    const signed char tmp_msg_0[] = {-4, -5, -84, 7, 60, -106, -78, 99, 10, 44, 17, 9, -113, -18, -27, 92, 11, -125, -16, 66, 50, 72, -9, 11, -24, -86, 25, -11, -6, -82, -100, -42, -69, -94, 76, 32, 69, 10, -117, -109, -80, 76, 32, -55, 51, -60, -106, -25, -50, 9, -1, -61, -74, -97, -110, 74, -18, 97, 61, -83, -42, -35, 118, 47, 96, 104, -55, -61, -42, -16, -81, -30, -61, -21, -46, 121, 17, -10, -91, 5, -69, -108, 88, 72, -103, 109, 31};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.5514884757049349);
    msg.setSource(33950U);
    msg.setSourceEntity(158U);
    msg.setDestination(47575U);
    msg.setDestinationEntity(64U);
    msg.seq = 63602U;
    msg.sys_dst.assign("DJYHMHMRGFEAKDIBGBYBCCDPHNXVOOZW");
    msg.flags = 137U;
    const signed char tmp_msg_0[] = {54, 42, -119, -106, -98, 96, -122, 8, 60, 62, -5, -54, -18, 94, 101, -36, 24, -17, 105, 98, 12, 67, 91, -123, -39, 123, 101, -27, -23, 102, 75, -16, 66, -59, -118, -30, 84, 104, -1, 18, 114, 110, -76, 108, 15, -37, 39, 32, -114, -128, -32, -1, -104, -45, -19, 99, 63, -93, 83, 104, -45, 108, 32, 1, -34, 31, -62, 87, -91, -42, 72, -17, -27, -40, 104, 106, 108, -52, -54, -101, 123, 122, 21, 28, -64, -3, -34, 57, 98, -93, 112, -78, 72, -91, -87, -51, -41, -42, 33, 68, 113, 98, -71, 82, -98, 7, 64, 92, 27, -42, -119, 3, 51, -119, 75, 36, -122, 7, 46, -85, 53, -44, 83, -21, 121, -108, -70, -33, 13, -99, -7, -3, -54, 30, -69, 31, 13, -43, 2, -20, -57, 75, -109, 36, 122, -92, -123, 98, 37, 27, 60, -33, -73, -10, -104, 10, 1, 34, 107, 95, -9, 39, 59, 37, 69, 54, 86, -25, 99, -102, -36, 123, -62, 33, 19, -39, 29, 121, 120, -95};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.9651946579895326);
    msg.setSource(18844U);
    msg.setSourceEntity(2U);
    msg.setDestination(47204U);
    msg.setDestinationEntity(12U);
    msg.seq = 44737U;
    msg.sys_dst.assign("HSCDATHQHOKZHIBMZNMFZLKKSJYKDWRHIULIJJTZXMNQMQXUJUCPXGOAUFQUZHISEXEYQYYWXGRLHMYAYAONZCWRCNNNBKYJCORYZOMTTTPSRVREZKWEDIGVVQPAIXJZOTRFVPGBIXCBWBRSVBBKDHPJVILLUFMDQIJVTHRPFAWATFGLMPADFDKURXJQHUOVNUSAGYXESEWCPQPDMKYFNACPWGMSOVVTNECEILXSTLEBLB");
    msg.flags = 34U;
    const signed char tmp_msg_0[] = {113, 100, 36, -127, -52, 14, 7, 65, -26, 70, -127, 37, -74, 2, -66, -18, 91, -10, 89, 94, 91, -125, -10, 33, 44, -80, -127, -116, 49, 79, -88, 35, 50, 54, -52, -12, -55, 26, -31, -43, 7, 9, -57, -105, 20, -66, -63, -96, -39, 63, 15, -36, -39, -117, 67, 12, -36, 114, -83, -42, 18, -2, 97, -55, -108, 114, 82, 55, -38, 117, -40, 37, 126, -69, 51, 60, -39, -90, 125, -40, 88, 13, 44, 65, -27, -104, -30, -86, -63, 70, -31, 69, -62, -79, 107, -61, 1, -16, -56, -16, -116, 64, 26, 83, -117, 122, -50, 5, 101, 103, 3, -126, -4, 123, 100, -123, -93, 105, 102, -47, -85, -67, 64, 78, 93, -111, -19, -93, 6, 77, -114, -111, 60, 82, -117, 69, -50, -38, 65, -74, 122, 118, 115, 79, 43, 32, -73, 52, -5, -72, -111, -74, -74, -25, 54, 1, -21, 121, -7, 42, -101, 14, 66, 97, 89, 101, -127, 28, 121, -82, 105, -109, 25, 63, -54, 93, 97, -45, 87, 118, 11, 72, 102, 70, 61, -128, 50, -93, 106, -61, -1, 43, -104, 40, -72, 14, 15, -94, -109, 65, 19, -112, -74, 77, 31, 2, 87};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.04822392943446063);
    msg.setSource(18977U);
    msg.setSourceEntity(191U);
    msg.setDestination(1691U);
    msg.setDestinationEntity(41U);
    msg.sys_src.assign("ZUWCARDVQAXXHIDNQWXVROMDGROJTQAFOLQTYXJVWPVNKTIEGPJZCUJIRQZLSVWLTASYYTUBWDQQLHFEWDBBOXJOHICFNAHCQMEGAYLMVPHXFEFGDXUGRCJSSPGQVKTAIWDSKCTVFLOUBVMNEUTLCZRZWZIPCJFHSTTGKOE");
    msg.sys_dst.assign("IPIYOTEOPPAHTHKMVVWIAMBGGWRXMRAAXJVKUSBGQTYYGCGKCZFMRVOUFRACFNSGEEYFDFPFHMLFTDLCGMUIVVGMBSQOJNTTPQDZJLZOVWIMZFWZCBNELBOPDCFBSKKWLXRZQXTERYNEZUEDZPUUUVUAXBWCTHOGOVWIKQDDYZMDRHX");
    msg.flags = 220U;
    const signed char tmp_msg_0[] = {-117, 7, -96, -73, -15, 45, 82, 69, -69, 4, -1, -39, 44, -14, 102, -13, 5, -121, 61, 6, 67, 15, -65, 27, -124, 62, 124, 46, -63, 116, 20, 35, -116, 40, 8, -17, -52, -15, -127, -117, -121, -114, 70, 18, 82, 42, -65, -82, -8, -40, -23, -72, 39, 101, -14, 28, -31, 72, 25, 82, 1, 50, 35, -80, 17, 67, 72, -8, 90, 51, 77, 66, -43, 33, 23, -75, -49, 17, 75, -36, -51, 28, -59, 72, -41, -101, 20, -99, 95, 96, 70, 47, -74, -106, 92, -48, 77, -109, -25, 35, -110, 110, -121, -7, 124, -60, -125, -8, 121, -66, 75, -104, -79};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.03719981446688181);
    msg.setSource(46914U);
    msg.setSourceEntity(191U);
    msg.setDestination(37878U);
    msg.setDestinationEntity(38U);
    msg.sys_src.assign("HTPWNGSOBEVWOYJDINURMBH");
    msg.sys_dst.assign("NZTMQHESTRCBYAJKCRPBKTSLPZTHVZGWDKTNCVKJFGYLXBSPSOIULPJYTDDBSPJVSITBCBMOOZNWFIKZRGTWDHWUCEIQJGHRXIIWYEBTIUGQZFRJWAQVLRNNIQGSXXXLCOUUAAPFEFDDMKVDKIURNRHFOZXUBNFPPOSGALXMKLUHWAGMMEFGMHNMWUYAVVYDEHJEIOSYE");
    msg.flags = 15U;
    const signed char tmp_msg_0[] = {-35, -75, -80, -94, -97, 40, 97, -60, -111, 105, -68, -49, 88, 23, -113, 107, 69, -126, -13, -63, -103, -26, -66, 102, -120, 82, 64, -111, -100, -103, 100, 92, 91, 115, 62, 119, 58, 85, 112, 119, 41, 116, 93, 30, -18, 12, -28, -40, -100, 97, -51, 102, -90, -58, -56, 15, -54, -92, 76, 67, 101, -20, 50, -81, 71, -57, 120, -31, -13, -126, -65, -118, 29, 16, 125, -96, -98, 13, -109, 85, 2, 35, -23, 35, 3, -20, 68, -100, -69, 92, 87, 81, -128, 44, 76, -37, 23, 20, 101, -99, -62, -104, -28, 112, -62, 18, -35, 72, 99, -18, 63, 48, 69, -71, 59, -18, 92, 88, 24, -101, -5, -16, -40, -98, 4, -118, 71, 50, -56, 25, 89, 24, -4, 17, 41, -124, -98, 120, -63, -125, 37, 63};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.10172275566478917);
    msg.setSource(48392U);
    msg.setSourceEntity(89U);
    msg.setDestination(24915U);
    msg.setDestinationEntity(100U);
    msg.sys_src.assign("WRNJHCWGDVMSCBIXZOOYBBJVDZSIWGTFIQXZUCEVCVLUAUEFWYBZNEWMHXHDFUTOSAIQOJLNGBSRCDSUXKQARZNKIGTEXTMUHIDJYCVDALNYTXCAMRLSWRTIKNLFUPSHRJEJAVKOXKRPTVEMPIUXNOMYTZVLQKDZQUKOHZRINOGQYSYPBDBQPMLLNFPGQJGMWPARKBCEGHJQCGFJHJWAAIWDPPPQNMGBBYMHSLFDCW");
    msg.sys_dst.assign("XXYNZCSRVJTBWEXKPFRKKXIMVVCWQOALPNDSCKOTGZRKJMSPCCJOLKYDDGGGDFN");
    msg.flags = 233U;
    const signed char tmp_msg_0[] = {88, 112, -20, -69, 100, 123, 22, 35, 69, 53, -93, 103, 80, 78, 115, -16, 52, 55, 19, 96, -104, 76, -68, 83, -121, 9, 14, -28, -101, 108, 92, -55, -45, -3, -92, -58, -67, 2, -101, -88, -89, -109, 2, 29, 29, 120, 20, -62, -97, -110, 59, 93, 51, 40, 32, -20, -83, 48, -10, 15, -126, -54, -95, -46, -68, 65, -34, -103, -89, -112, -52, -125, -21, 70, -59, 87, 100, 74, 125, -102, 37, 116, 76, 20, -7, -15, 101, -104, 43, -24, 120, -121, 82, 35, -117, -95, 94, -30, 119, -57, -82, 99, 89, -97, -54, -115, 125, -20, 79, 76, 120, 74, 19, 83, -101, -9, 38, 4, -26, -15, 48, -35, -24, 83, 4, 51, 116, -104, -89, 20, -61, 83, 36, 35, -56, -48, 6, 103, -94, 51, -88, -57, -46, 74, 122, 113, 45, -57, 23, 7, 105, 57, 65, 124, 86, -86, 19, 76, 54, 94, 26, -66, 61, 73, -86, 38, 95, 92, 41, 13, 102, 123, 88, 97, -69, 0, -33, 8, 7, 60, -72, -73, -115, 42, 124, -77, -51, 59, 114, 8, -116, -6, -43, 45};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.7379747514834986);
    msg.setSource(15562U);
    msg.setSourceEntity(142U);
    msg.setDestination(4827U);
    msg.setDestinationEntity(210U);
    msg.seq = 39521U;
    msg.value = 238U;
    msg.error.assign("QGKKNWOYKMVQTXBJPYEQKAHAEAJBXEVFDZKJKLDQAHIOGFYPHCCWJYNGZMWNTPKZDVCALQYNBGUMVYTOFXDKQJTBGHMZEUHWHLECYSXSBSLZELISIUAPIJZSQCXOWOBB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.3923011716858126);
    msg.setSource(38607U);
    msg.setSourceEntity(174U);
    msg.setDestination(36179U);
    msg.setDestinationEntity(16U);
    msg.seq = 30686U;
    msg.value = 34U;
    msg.error.assign("XLYXKYEBNUVXTPEKJWHKLVTFPGBMLDUBEXEILYNLBHHVUESIQSZNFTMTSXJNMJEALUVGSIWFXLVQBHVCUQGWYIOZAZEDITCOJBSXDSYDJQKIFAHTOFCBTGVFYURRONOMAEPAGSZCFMTLIRKHROPUVRDCEGOQHZMNIOTLZAACFRJBMQWCWYGPCVHVUDCQPDGPEUDBNKPJKWPZMRRPWRJNQSJGYBKWXMIYKSFQWZHNQDGUNMZH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.847018144104083);
    msg.setSource(46558U);
    msg.setSourceEntity(235U);
    msg.setDestination(45618U);
    msg.setDestinationEntity(186U);
    msg.seq = 52791U;
    msg.value = 6U;
    msg.error.assign("AGOUUINRASOSAMKJCBOFELRUZOHXMFHP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.9819749496685433);
    msg.setSource(33438U);
    msg.setSourceEntity(135U);
    msg.setDestination(58557U);
    msg.setDestinationEntity(148U);
    msg.seq = 55420U;
    msg.sys.assign("FSJDTMSACYHTXNRQTHDTXGLUAMKVOYBRGVGIJHLIVNPUFNWMDAMYHPBDEUPNQHCMLYCARCZJIDUNLOWXJNABFEWAWEKGIWUZOOCCIDZKYBMKTIOGQGV");
    msg.value = 0.31686574144380697;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.8783180351289155);
    msg.setSource(43228U);
    msg.setSourceEntity(139U);
    msg.setDestination(59665U);
    msg.setDestinationEntity(58U);
    msg.seq = 47797U;
    msg.sys.assign("PBOQTNUEFSLTGDYMRDIGIZMUQXAOXYVWACPPZTSOEFXIFHDNTWNSRLFNUN");
    msg.value = 0.5959758969128953;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.5494399747643701);
    msg.setSource(60968U);
    msg.setSourceEntity(94U);
    msg.setDestination(38078U);
    msg.setDestinationEntity(130U);
    msg.seq = 18438U;
    msg.sys.assign("SKIRIJEMFYBRZODXLZJLDPSTQOJYDHNBRPZAKRNXOCHVRPUAZALEASBGQCTWJBYJJDNPLCOYMLYKMGLWYNEZTKFVXBTAAKQTHOVNCWUVSOMNLWQISXQTDWRIMMBHBMQISFFUFPCGU");
    msg.value = 0.37413117347258784;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.6122887194832234);
    msg.setSource(45591U);
    msg.setSourceEntity(21U);
    msg.setDestination(54494U);
    msg.setDestinationEntity(244U);
    msg.seq = 39371U;
    msg.sys_dst.assign("VBHSUFSVGQHHEPFXPFAGNOMLHPEWCIXRBXCDKVDAMAMHGGVEQUWYUDLQXYIJICVQKDQAWJKCNLEYJSIRLVZRBWYBCDYGPXWCOFCSVHJKYXLUADZOWIAUTFTSMIFEOAPWPNPICYDJZPZKSMOQPABZGBRUWQZWSHIUBGRZMYDLKUFRTVJOOHLBNTBTUZRJAAFTRZQSNXNF");
    msg.timeout = 0.3356040652394119;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.03614001034206937);
    msg.setSource(397U);
    msg.setSourceEntity(118U);
    msg.setDestination(50907U);
    msg.setDestinationEntity(73U);
    msg.seq = 17552U;
    msg.sys_dst.assign("JDJQRZGQIFEKUPNAPCWFHFLUKYYWNHQRCZECSHXDNIFJGXEVYZLYBDIZDGYBLLPPRJDRCDLUMJIVJMTZOLTSQMOVKAUURETDJQLSHWAZCXHMNYSBKUCITWNGBARRKSESXQEXOWMCCFOWOVOGUGOKDSJVRYSNVYZVWQBUDBXPXZHAOEM");
    msg.timeout = 0.9057461385365948;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.05829574904770818);
    msg.setSource(27290U);
    msg.setSourceEntity(228U);
    msg.setDestination(47141U);
    msg.setDestinationEntity(120U);
    msg.seq = 64425U;
    msg.sys_dst.assign("HZVCFCYNMWENXXZWMZDAIHFVVRMPVCUFCTGIAWPRCIXXFDYBTWKGDZKDGQBNRYPFSGJXNBBSEAPPPIHTVSJENAOBQOOARKGJRGKIURNQOJIGWITBTDGSVUKUHJMXEYVPTOEYBFLUPRCIXLWQEOEZAIIQQCEKYAQJSYLYDOLCKVLFPBFQVCHSHFUSHZXCHJMDNYTJSURUHZLLGMQLLWDJMXW");
    msg.timeout = 0.06541295755311416;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.239384398933027);
    msg.setSource(37161U);
    msg.setSourceEntity(60U);
    msg.setDestination(48621U);
    msg.setDestinationEntity(42U);
    msg.action = 184U;
    msg.longain = 0.36397110826726786;
    msg.latgain = 0.030357763162332074;
    msg.bondthick = 203019724U;
    msg.leadgain = 0.9905185447146097;
    msg.deconflgain = 0.9896585300671636;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.18309715755117795);
    msg.setSource(25817U);
    msg.setSourceEntity(195U);
    msg.setDestination(21238U);
    msg.setDestinationEntity(158U);
    msg.action = 173U;
    msg.longain = 0.05966421939189159;
    msg.latgain = 0.2292587787739201;
    msg.bondthick = 3924362703U;
    msg.leadgain = 0.7941685806337797;
    msg.deconflgain = 0.9127856771701665;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.20878715037643958);
    msg.setSource(52530U);
    msg.setSourceEntity(117U);
    msg.setDestination(45527U);
    msg.setDestinationEntity(10U);
    msg.action = 35U;
    msg.longain = 0.9065971735933027;
    msg.latgain = 0.35611547572101443;
    msg.bondthick = 3399931294U;
    msg.leadgain = 0.15193280676145393;
    msg.deconflgain = 0.5192040530699741;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.8466084014884846);
    msg.setSource(5970U);
    msg.setSourceEntity(110U);
    msg.setDestination(18838U);
    msg.setDestinationEntity(216U);
    msg.err_mean = 0.6151004741645397;
    msg.dist_min_abs = 0.35664803359585895;
    msg.dist_min_mean = 0.5569898874175421;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.08337890107007162);
    msg.setSource(51562U);
    msg.setSourceEntity(234U);
    msg.setDestination(4068U);
    msg.setDestinationEntity(235U);
    msg.err_mean = 0.1528611599563311;
    msg.dist_min_abs = 0.01813304141243155;
    msg.dist_min_mean = 0.925650604122419;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.12898461677949802);
    msg.setSource(25162U);
    msg.setSourceEntity(112U);
    msg.setDestination(21509U);
    msg.setDestinationEntity(65U);
    msg.err_mean = 0.762696935856354;
    msg.dist_min_abs = 0.16868211848621084;
    msg.dist_min_mean = 0.09463322453514778;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.8100910383334945);
    msg.setSource(54889U);
    msg.setSourceEntity(129U);
    msg.setDestination(35976U);
    msg.setDestinationEntity(148U);
    msg.action = 247U;
    msg.lon_gain = 0.06574213704183463;
    msg.lat_gain = 0.7080631924826694;
    msg.bond_thick = 0.09483280444842168;
    msg.lead_gain = 0.04443973667391288;
    msg.deconfl_gain = 0.6555514781605184;
    msg.accel_switch_gain = 0.9951224728487222;
    msg.safe_dist = 0.9177692465520282;
    msg.deconflict_offset = 0.6947684839318963;
    msg.accel_safe_margin = 0.6844706300606545;
    msg.accel_lim_x = 0.9702005766519424;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.33220572284826766);
    msg.setSource(58306U);
    msg.setSourceEntity(234U);
    msg.setDestination(30241U);
    msg.setDestinationEntity(104U);
    msg.action = 213U;
    msg.lon_gain = 0.87266726572234;
    msg.lat_gain = 0.22452959978697673;
    msg.bond_thick = 0.5373192554476085;
    msg.lead_gain = 0.9428123334297134;
    msg.deconfl_gain = 0.26788238330699066;
    msg.accel_switch_gain = 0.5937870552539619;
    msg.safe_dist = 0.03989743566555626;
    msg.deconflict_offset = 0.9688511824516246;
    msg.accel_safe_margin = 0.571265423258113;
    msg.accel_lim_x = 0.17906051563332603;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.9516065860909757);
    msg.setSource(21897U);
    msg.setSourceEntity(107U);
    msg.setDestination(45079U);
    msg.setDestinationEntity(165U);
    msg.action = 128U;
    msg.lon_gain = 0.09947511882468896;
    msg.lat_gain = 0.9753345807765009;
    msg.bond_thick = 0.05444655858338854;
    msg.lead_gain = 0.49514014463047296;
    msg.deconfl_gain = 0.5308585168066844;
    msg.accel_switch_gain = 0.5942710773340146;
    msg.safe_dist = 0.0914299849766641;
    msg.deconflict_offset = 0.7078664936933979;
    msg.accel_safe_margin = 0.2481811481846905;
    msg.accel_lim_x = 0.9206477551494746;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.35027599100402707);
    msg.setSource(33567U);
    msg.setSourceEntity(150U);
    msg.setDestination(21023U);
    msg.setDestinationEntity(86U);
    msg.type = 59U;
    msg.op = 101U;
    msg.err_mean = 0.4185208793824463;
    msg.dist_min_abs = 0.4744550196136301;
    msg.dist_min_mean = 0.12727451184513416;
    msg.roll_rate_mean = 0.8678889767356667;
    msg.time = 0.9751541305064753;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 103U;
    tmp_msg_0.lon_gain = 0.2570112308669684;
    tmp_msg_0.lat_gain = 0.5585883159282146;
    tmp_msg_0.bond_thick = 0.8639292290928479;
    tmp_msg_0.lead_gain = 0.4201581434910182;
    tmp_msg_0.deconfl_gain = 0.019968453644157114;
    tmp_msg_0.accel_switch_gain = 0.573967064971589;
    tmp_msg_0.safe_dist = 0.17127924483399504;
    tmp_msg_0.deconflict_offset = 0.8862183207613253;
    tmp_msg_0.accel_safe_margin = 0.399861497042856;
    tmp_msg_0.accel_lim_x = 0.5500908167375763;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.05444940139917087);
    msg.setSource(17250U);
    msg.setSourceEntity(222U);
    msg.setDestination(15293U);
    msg.setDestinationEntity(94U);
    msg.type = 163U;
    msg.op = 98U;
    msg.err_mean = 0.7789104766172487;
    msg.dist_min_abs = 0.7109853032569416;
    msg.dist_min_mean = 0.4506474713431341;
    msg.roll_rate_mean = 0.2792411251900271;
    msg.time = 0.10661993208621323;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 161U;
    tmp_msg_0.lon_gain = 0.4204090139968102;
    tmp_msg_0.lat_gain = 0.7318734298004694;
    tmp_msg_0.bond_thick = 0.7021002973962519;
    tmp_msg_0.lead_gain = 0.46608075445444164;
    tmp_msg_0.deconfl_gain = 0.7360792553604744;
    tmp_msg_0.accel_switch_gain = 0.7964538110349741;
    tmp_msg_0.safe_dist = 0.19577734027019422;
    tmp_msg_0.deconflict_offset = 0.4784372070718441;
    tmp_msg_0.accel_safe_margin = 0.6248800350271939;
    tmp_msg_0.accel_lim_x = 0.48122682863523236;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.8680195028585854);
    msg.setSource(38829U);
    msg.setSourceEntity(66U);
    msg.setDestination(4537U);
    msg.setDestinationEntity(9U);
    msg.type = 241U;
    msg.op = 247U;
    msg.err_mean = 0.8863653608357114;
    msg.dist_min_abs = 0.16854025489116697;
    msg.dist_min_mean = 0.8262203394070998;
    msg.roll_rate_mean = 0.9745602578974671;
    msg.time = 0.40767133681442447;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 82U;
    tmp_msg_0.lon_gain = 0.5703588517847721;
    tmp_msg_0.lat_gain = 0.15076662124069196;
    tmp_msg_0.bond_thick = 0.12230631382113122;
    tmp_msg_0.lead_gain = 0.5556502709872835;
    tmp_msg_0.deconfl_gain = 0.99633682154988;
    tmp_msg_0.accel_switch_gain = 0.8244036588547429;
    tmp_msg_0.safe_dist = 0.6095778470696482;
    tmp_msg_0.deconflict_offset = 0.061980750082312075;
    tmp_msg_0.accel_safe_margin = 0.7851360972618833;
    tmp_msg_0.accel_lim_x = 0.9540272320730264;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.9415284429102533);
    msg.setSource(26916U);
    msg.setSourceEntity(29U);
    msg.setDestination(55603U);
    msg.setDestinationEntity(59U);
    msg.lat = 0.47295757039577124;
    msg.lon = 0.591822373273093;
    msg.eta = 3364531264U;
    msg.duration = 54884U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.6077614873424116);
    msg.setSource(1739U);
    msg.setSourceEntity(132U);
    msg.setDestination(56771U);
    msg.setDestinationEntity(19U);
    msg.lat = 0.09306796578942012;
    msg.lon = 0.455773857625957;
    msg.eta = 2170858013U;
    msg.duration = 48523U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.8284817103497433);
    msg.setSource(6428U);
    msg.setSourceEntity(6U);
    msg.setDestination(42880U);
    msg.setDestinationEntity(167U);
    msg.lat = 0.569548876268879;
    msg.lon = 0.5910991717134613;
    msg.eta = 3679510425U;
    msg.duration = 63805U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.28869330175953156);
    msg.setSource(28754U);
    msg.setSourceEntity(125U);
    msg.setDestination(35331U);
    msg.setDestinationEntity(9U);
    msg.plan_id = 35325U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.4002255231901928);
    msg.setSource(22104U);
    msg.setSourceEntity(225U);
    msg.setDestination(54567U);
    msg.setDestinationEntity(7U);
    msg.plan_id = 43257U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.4873534445541561);
    msg.setSource(28069U);
    msg.setSourceEntity(55U);
    msg.setDestination(41121U);
    msg.setDestinationEntity(67U);
    msg.plan_id = 31473U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.000986387324186877);
    msg.setSource(23180U);
    msg.setSourceEntity(50U);
    msg.setDestination(50415U);
    msg.setDestinationEntity(99U);
    msg.type = 172U;
    msg.command = 73U;
    msg.settings.assign("DECCPVRAYDUCSEMIOCDJGDZLORMIAEVWKIJQGFANPYKZNURYGTUNCXSWLELBLQZKFVKHIGXSEMZQBIDGHSBYFCWUUXZXBRBWFXWSXNTABFQEEBS");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 34415U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.13043054474090687;
    tmp_tmp_msg_0_0.lon = 0.4008847265698503;
    tmp_tmp_msg_0_0.eta = 2810964933U;
    tmp_tmp_msg_0_0.duration = 4006U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("ASHDXRAPCKFAOHIDQVMHGOHPMQJJMPKCUEWEIPFUHETTTDSLXKRGYQNZZXSBBCYNBCFKUFCSDJWLMVGIHWWWSOCVUUFYYXMPIWUSLXQQLTEXOGRBBYVUNTHUVVKIGMEVDHTVJPDKSMCASNAWJKZJNNSMOEPTKFOIEJIECXNZFTOPHVYJZOCAWLGAQRYZLQUILTKVFWNRBYJAJMC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.5557090334032826);
    msg.setSource(35333U);
    msg.setSourceEntity(244U);
    msg.setDestination(37954U);
    msg.setDestinationEntity(117U);
    msg.type = 247U;
    msg.command = 217U;
    msg.settings.assign("EKDBITEUQRHOIZEMORUCMLJGGJSCQBMTSPVHGNYEFVDJWKXVCSXAPHJWVXWLHDUGCNHFKLZIYYWFKBAGOQAVOXGPRTNJJDQHSQYLQSNXPWVQTSVTIXOMTFOIONUZBHHPDPTJFDSBRORJAULURDZENUYQRGFABOFEPUKEIGHMZBJURILHEENWOVSMAXNPTZKNBEPZVJKXLFKACYWMLQRIVGDAGMMWZCDIXPZSXKY");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 2137U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.7944265849535913;
    tmp_tmp_msg_0_0.lon = 0.6649996758469742;
    tmp_tmp_msg_0_0.eta = 776788280U;
    tmp_tmp_msg_0_0.duration = 8808U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("FHGYMMGQVVWQDBUPTORTQFGTVHVDKEIOKIQHFENFGLPFTCKCHBEURJQOTDRANDJKUHNEORFLPLSTBRHDGMCQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.08564750881250793);
    msg.setSource(3718U);
    msg.setSourceEntity(243U);
    msg.setDestination(60542U);
    msg.setDestinationEntity(17U);
    msg.type = 116U;
    msg.command = 139U;
    msg.settings.assign("CPXPLYKXTTMCMSPBOQSZWXFZSCKLQPEVGMETDNXAQVGAOHCQRJYMGAIXSNRQCKXOYQNIKPFIBRDBHGVFHJYBLHFDKOHAZJDQSAYYTZVBZAWREJLPEKBLHUKXCUZYAD");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 5451U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("OEKRWSNFTZOAKJRMJTCMTCTQEWLZHGGIGVKYRPXYMEWQWKMIOYHHUXQANNLFWFHQPRSMBZBPNUNCOUSMXXJDIPWTKEHDIESLCUOGLDEBVCYRJRUWTMDOQZHAXDJWFRGXXUHOGPEDMCSKVZHNKGFJVWAKIOFJIJQILTQRDNYTECDISYOBLVPVGPLCMZPLEXCFXJZSFOYBZUHBKSGYYDUELPAFHBNJRQVWAPNABDAT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.2793986571507764);
    msg.setSource(46862U);
    msg.setSourceEntity(252U);
    msg.setDestination(45110U);
    msg.setDestinationEntity(114U);
    msg.state = 35U;
    msg.plan_id = 16448U;
    msg.wpt_id = 239U;
    msg.settings_chk = 3350U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.048987283449730246);
    msg.setSource(57996U);
    msg.setSourceEntity(144U);
    msg.setDestination(49608U);
    msg.setDestinationEntity(136U);
    msg.state = 203U;
    msg.plan_id = 31936U;
    msg.wpt_id = 130U;
    msg.settings_chk = 50574U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.9023620177819893);
    msg.setSource(11621U);
    msg.setSourceEntity(242U);
    msg.setDestination(54805U);
    msg.setDestinationEntity(53U);
    msg.state = 25U;
    msg.plan_id = 52949U;
    msg.wpt_id = 21U;
    msg.settings_chk = 46835U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.18440267113828235);
    msg.setSource(15241U);
    msg.setSourceEntity(225U);
    msg.setDestination(39508U);
    msg.setDestinationEntity(36U);
    msg.uid = 115U;
    msg.frag_number = 183U;
    msg.num_frags = 226U;
    const signed char tmp_msg_0[] = {-99, 40, 94, 47, -84, 4, -82, -75, -109, -17, 33, 20, -79, -39, -35, 43, 110, -117, -51, 104, -15, 87, 107, 103, 123, -77, 30, -100, 22, 117, 38, -70, 14, 25, 53, 123, 28, -14, 45, 112, 73, -39, 89, 30, 50, 125, 40, 56, 27, -80, -108, -114, -75, 70, 25, -83, 73};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.5450072759949592);
    msg.setSource(36721U);
    msg.setSourceEntity(78U);
    msg.setDestination(20980U);
    msg.setDestinationEntity(88U);
    msg.uid = 155U;
    msg.frag_number = 205U;
    msg.num_frags = 62U;
    const signed char tmp_msg_0[] = {88, 59, -62, 23, 23, -69, 16, -126, 85, -86, -40, 22, 12, -29, -85, 115, 50, -69, -106, -77, -38, 84, -47, 13, -84, -52, 82, -33, 61, -67, -61, -23, -13, 21, -17, 77, 31, 51, 97, 62, -13, 57, -87, -44, 91, -66, -9, -23, 83, -49, -127, -45, 27, 3, -51, 1, -118, -31, 8, 94, -85, -10, -43, 111, 104, 5, -65, -41, 14, -15, -60, 14, 17, -21, -28, -105, 123, -36, 30, 110, -73, 105, -3, -63, -123, -63, 20, 66, -15, -119, 33, 95, 17, -78, -61, -54, -95, -104, 78, -30, 79, 9, 89, -70, 1, -55, 91, 101, 110, -92, -56, 111, -9, -61, 49, 95, -64, -25, 66, -128, -123, 74, 78, 6, -77, 18, 42, 120, -36, 84, -29, 26, -22, -106, 88, 85, -7, 98, -36, 44, -106, 77, -65, -28, 114, 36, 14, 125, 33, -71, -75, 23, -43, 14, 58, 60, 83, 3, -5, 90, 106, 89, -8, -61, -99, 97, 32, 56, -19, -49, 43, 58, -7};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.46622550902599214);
    msg.setSource(34008U);
    msg.setSourceEntity(67U);
    msg.setDestination(19476U);
    msg.setDestinationEntity(29U);
    msg.uid = 240U;
    msg.frag_number = 140U;
    msg.num_frags = 13U;
    const signed char tmp_msg_0[] = {-69, -32, 7, 94, 7, -103, 108, 76, -54, 33, -20, 59, -25, -104, -127, 102, 76, -79, -47, -19, -109, 11, 38, 22, -44, 31, 62, -96, -62, 109, -87, -20, 3, -119, -77, 22, 103, 110, 39, 94, 93, -106, -40, -107, -128, -47, -94, 54, -102, 75};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.7255847632418225);
    msg.setSource(27216U);
    msg.setSourceEntity(30U);
    msg.setDestination(39624U);
    msg.setDestinationEntity(102U);
    msg.content_type.assign("LXRVATRUSHDRCQCLCSNTHGAYWIMXMNAYFCGVFDLSOJBUYIOABPUZOZYRHXMDKIMJBQAJGZQEATEQKZZYDSEYRXTHJJSOKKVYINQDKNCWOBZXGFQGOEEWWNACRFSTIIVVTKQJLFMJEMRBGSLWOAHVYLUWWFHAXQGUOUHWZHPOVZBTTNLCTLZWKHZBPFFICBPPNPIPUIKLFDDWUXYNIHRMSVXDEJFAGCDPYBJBPMUGMKNQUQSNKLREPCVORX");
    const signed char tmp_msg_0[] = {-98, 111, 89, 98, 110, -24, 35, 63, -53, -56, -27, -64, -107, -73, 112, -40, -50, 87};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.09693321583596226);
    msg.setSource(21585U);
    msg.setSourceEntity(7U);
    msg.setDestination(50965U);
    msg.setDestinationEntity(70U);
    msg.content_type.assign("VQVIAIGBLCPZMLLHBLAIBZSRORJGZ");
    const signed char tmp_msg_0[] = {-83, 28, 48, 109, -88, -124, 102, 55, -102, -12, 56, 119, 110, 6, -9, 52, -36, 100, -83, -102, 5, 6, 120, 104, -9, -53, 109, -96, 119, 85, -20, -23, -53, -40, 24, -18, 28, 37, -47, 58, 66, -5, -80, 62, -34, 121, 50, 54, -105, -40, 18, -128, -114, 46, 46, -88, 115, -89, -55, -107, -16, 104, -118, 122};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.5717904015467754);
    msg.setSource(35276U);
    msg.setSourceEntity(118U);
    msg.setDestination(57087U);
    msg.setDestinationEntity(27U);
    msg.content_type.assign("HYPUJNFLGMKOBUDSWROZZFPBFVRDFCLHTXPETCEGWBTSTBVBVPPOQF");
    const signed char tmp_msg_0[] = {62, 0, -12, 73, 32, 114, -37, 56, -68, -111, -58, -121, -60, 55, -72, 4, 59, -54, 43, 19, -97, -96, 14, 7, -121, 59, 96, -41, -15, 9, -40, 95, -74, -66, -43, 76, 9, -76, 42, 73, -70, 72, 105, 46, 80, 27, 84, 45, -15, 4, 34, 65, -16, -64, 79, 8, -49, 71, -125, 119, 40, -3, 101, 35, 30, -39, -9, 41, 82, 54, -28, 17, 67, 39, 93, -116, -68, 118, -7, 37, -8, 99, -118, -48, -55, -68, -49, 0, 124, 70, 90, 81, 107, -49, 90, 12, -73, -103, 58, 34, 85, 66, 86, -89, -66, 47, 22, -75, 27, 106, -92, 126, -22, 11, 85, -103, -43, 23};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.604119441772979);
    msg.setSource(36311U);
    msg.setSourceEntity(73U);
    msg.setDestination(11074U);
    msg.setDestinationEntity(25U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.36199753997708406);
    msg.setSource(46206U);
    msg.setSourceEntity(112U);
    msg.setDestination(2605U);
    msg.setDestinationEntity(95U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.13369159579922774);
    msg.setSource(40306U);
    msg.setSourceEntity(236U);
    msg.setDestination(61613U);
    msg.setDestinationEntity(120U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.3271936291366716);
    msg.setSource(8341U);
    msg.setSourceEntity(112U);
    msg.setDestination(27924U);
    msg.setDestinationEntity(100U);
    msg.target = 65106U;
    msg.bearing = 0.09520973894321505;
    msg.elevation = 0.6564761638943873;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.8319660459337656);
    msg.setSource(52037U);
    msg.setSourceEntity(169U);
    msg.setDestination(46698U);
    msg.setDestinationEntity(27U);
    msg.target = 14282U;
    msg.bearing = 0.613093616976023;
    msg.elevation = 0.24220371620578007;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.6206758318125781);
    msg.setSource(52961U);
    msg.setSourceEntity(171U);
    msg.setDestination(40812U);
    msg.setDestinationEntity(42U);
    msg.target = 22956U;
    msg.bearing = 0.739682055180953;
    msg.elevation = 0.391950843691526;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.4497092881681728);
    msg.setSource(24895U);
    msg.setSourceEntity(154U);
    msg.setDestination(4608U);
    msg.setDestinationEntity(67U);
    msg.target = 6095U;
    msg.x = 0.0484853877251844;
    msg.y = 0.7827489023808645;
    msg.z = 0.7267169427734516;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.6530283412842751);
    msg.setSource(15379U);
    msg.setSourceEntity(84U);
    msg.setDestination(57600U);
    msg.setDestinationEntity(179U);
    msg.target = 36704U;
    msg.x = 0.8186643334678737;
    msg.y = 0.72029147964084;
    msg.z = 0.5912379424070746;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.09746971884653921);
    msg.setSource(39338U);
    msg.setSourceEntity(70U);
    msg.setDestination(6431U);
    msg.setDestinationEntity(86U);
    msg.target = 64089U;
    msg.x = 0.7024559416025374;
    msg.y = 0.36808843676103575;
    msg.z = 0.37855150662642134;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.18215252816374505);
    msg.setSource(46679U);
    msg.setSourceEntity(205U);
    msg.setDestination(24010U);
    msg.setDestinationEntity(174U);
    msg.target = 27773U;
    msg.lat = 0.806084414095795;
    msg.lon = 0.33157697794524954;
    msg.z_units = 140U;
    msg.z = 0.8440490117902555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.9514526359039424);
    msg.setSource(32969U);
    msg.setSourceEntity(250U);
    msg.setDestination(10364U);
    msg.setDestinationEntity(203U);
    msg.target = 64768U;
    msg.lat = 0.41002103424163716;
    msg.lon = 0.015474341949579862;
    msg.z_units = 61U;
    msg.z = 0.028589575734781048;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.44602817575546994);
    msg.setSource(3882U);
    msg.setSourceEntity(201U);
    msg.setDestination(7734U);
    msg.setDestinationEntity(151U);
    msg.target = 33306U;
    msg.lat = 0.6508875370836166;
    msg.lon = 0.4999606190395013;
    msg.z_units = 173U;
    msg.z = 0.7636447810150598;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.9580672709158076);
    msg.setSource(18627U);
    msg.setSourceEntity(210U);
    msg.setDestination(27506U);
    msg.setDestinationEntity(110U);
    msg.locale.assign("ZUFAZUYWXCSDCHMXQLXQEJZGJPQKONAARJVJDOWBOABYZPPMNGIENUGEALSGNEQNRHHVNMFZCMJHNOYICUSYLGVBESKTFSKMFPRVAOPOUTIMHDDWBQIVPURFQVVEHTAHAUMMLPRSALWFXHCDOCXGUCIWKRDZSRQRFBGULWJCIWBDGKYVVEXLYKBKJSTTBXPYAGQUYTOGXNELIPFKDJZFXQPZIBZZFRSETNIYJWIHWLLBD");
    const signed char tmp_msg_0[] = {70, 56, 119, -6, -23, -94, 48, -44, -121, 102, 70, -97, 91, -63, -104, -37, -37, 29, -35, 76, 124, 95, -37, -97, -87, -97, -40, -77, -116, -6, -14, -93, -31, 84, -102, 35, -1, -53, -80, -9, -20, -66, 31, 98, -38, 59, 63, 51, -60, 6, 95, -36, -9, -83, 71, -90, 27, 29, 3, -71, -110, -63, -76, 2, 31, 45, -86, 7, -112, -50, 73, 80, 82, 37, -64, 97, 58, -85, -84, -56, -65, 43, 99, 119, 102, -86, -58, -53, 36, 53, 90, -116, -126, -79, 28, 41, 40, -2, 27, -115, -57, -120, 12, 28, 10, -28, 38, -73, -2, -108, 72, -28, -14, -8, 113, -24, 117, 102, 87, -47, -56, 54, 49, -14, 19, 42, 14, -63, 1, -57, -79, 99, 123, 50, -112, -49, 115, 124, -41, -51, -70, -39, 3, 44, -62, -47, 85, 92, -125, 125, -77, -90, -84, 20, -26, -46, 120, 104, 31, -119, 69, 67, 25, -48, -35, -9, -50, 26, 33, -46, 108, 13, 89, 12, 99, 123, -99, -125, -42, -50, -5, -19, 33, 28, 69, 56, -1, -110, 91, -21, -82, 109, -122, 86, 43, 110, -58, 114, 107, -74, -69, 13, 112, -65, -116, -31, -4, -111, 86, -104, -55, 64, 70, 87, 106, 98, -39, 101, -124, 91, 27, 26, -55, 46, 110, -48, -128, -2, 57, 19, 42, 93, -62, 105, 2, 121, -128, -73, 32};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.7889636562332003);
    msg.setSource(65000U);
    msg.setSourceEntity(201U);
    msg.setDestination(29849U);
    msg.setDestinationEntity(206U);
    msg.locale.assign("BSVJWQKHRIPFSFQGVSMNRDYAVLHCQABYKOYWNBLALPFTMEVOTBQCTLNMQXLDFTMTGROEGEEALGVIDQDPTFUKDFIHWPWEYIPRYDZSGCTEIBZMRKBRCCZIJFVWMWCPYLXKHQCXAIGNXRJVGNHJGIBZNKENXUVGFPSBOUDCWJWCANPCLEFXJSJAIMOGKPMLUZYUXUZNADQROOWENOPEBHHYJVQFXWHUALZTOKTUKSS");
    const signed char tmp_msg_0[] = {100, -119, 30, -21, 4, -116, 0, -79, 75, 36, 73, -31, -18, -10, -35, -30, -106, -3, 57, -127, 69, 2, 99, 23, -25, 2, -63, -30, -80, -45, 74, 61, 70, -88, -23, 31};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.7765782778541063);
    msg.setSource(33896U);
    msg.setSourceEntity(92U);
    msg.setDestination(2009U);
    msg.setDestinationEntity(51U);
    msg.locale.assign("RNQZMJQVAUPUBHLGXHDULLDPNZHODLIAVVSMMEWEAXXQXLKVZPEKJUFNXRYEGDPVATMNTTGWKIUFSLYVQEGOBJSWNXJMUIPESZGVRHCTHANZAFAOWQFHQVTDMKSKTYXWYUHZNZCEEKQIBISZANTI");
    const signed char tmp_msg_0[] = {-108, -20, 123, -42, -61, -12, 16, 53, -108, 18, -110, -109, 98, -104, 25, 113, -77, -99, 74, 31, -86, -31, -102, 53, -121, -41, -45, -79, -42, 5, 87, 46, -58, -11, -19, 73, 66, -10, 112, 101, 3, 92, -109, 37, -123, 60, 28, -89, 49, 17, 107, -127, -123, 6, -74, 3, -30, -32, 7, -20, 85, 85, -3, 37, 122, -60, 21, 21, -66, 111, -41, 39, -114, -15, 73, -111, 45, -95, 56, -15, -20, -115, 118, 75, 44, 112, 9, -87, 92, -87, 6, 100, -85, 76, 39, -23, -95, -106, 1, -59, 46, 96, -72, -52, -61, 74, 30, 102, 114, 58, -57, 50, -114, 51, 1, -7, 89, 45, -125, 92, 114, -123, -11, 108, -87, -71, 11, 49, 82, -31, 60, 125, -32, 107, 61, 81, 69, 3, -2, 1, -33, 84, 17, 66, -43, -73, -35, -70, 111, 44, -9, 20, 62, -46, 32, -84, 28, -77, 48, -2, -97, -52, -43, -128, -35, 112, -98, 126, -66, 104, 50, -102, 23, -94, 118, -94, -15, -18, 95, -126, 76, -14, -91, 40, -55, 4, -63, -69, 80, 15, -59, 80, -103, -69, -127, -72, 87, -66, -127, -73, -107, -14, -43, 8, -112, 65, -55, 15, 37, -38, 56, -61, -10, 123, 101, -119, 79, -73, -121, 4, -32, -70, 110, 93, -60, 27, 22, 22, 61, 13, 117, 14, -123, 97, -91, -114, 21, -111, 53, -19, 24};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.14828272270653664);
    msg.setSource(39524U);
    msg.setSourceEntity(210U);
    msg.setDestination(39730U);
    msg.setDestinationEntity(2U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.4330228114483101);
    msg.setSource(21077U);
    msg.setSourceEntity(140U);
    msg.setDestination(56570U);
    msg.setDestinationEntity(99U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.6688084989949086);
    msg.setSource(35371U);
    msg.setSourceEntity(119U);
    msg.setDestination(27959U);
    msg.setDestinationEntity(252U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.9424161449690932);
    msg.setSource(41050U);
    msg.setSourceEntity(133U);
    msg.setDestination(61649U);
    msg.setDestinationEntity(198U);
    msg.camid = 176U;
    msg.x = 17535U;
    msg.y = 59820U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.7144981474406216);
    msg.setSource(44666U);
    msg.setSourceEntity(72U);
    msg.setDestination(28558U);
    msg.setDestinationEntity(35U);
    msg.camid = 235U;
    msg.x = 576U;
    msg.y = 21669U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.0550440383815578);
    msg.setSource(46290U);
    msg.setSourceEntity(201U);
    msg.setDestination(33771U);
    msg.setDestinationEntity(224U);
    msg.camid = 161U;
    msg.x = 43451U;
    msg.y = 61030U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.8966557223403264);
    msg.setSource(47070U);
    msg.setSourceEntity(84U);
    msg.setDestination(10385U);
    msg.setDestinationEntity(194U);
    msg.camid = 20U;
    msg.x = 62347U;
    msg.y = 64967U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.7633040256481005);
    msg.setSource(39788U);
    msg.setSourceEntity(157U);
    msg.setDestination(31997U);
    msg.setDestinationEntity(77U);
    msg.camid = 177U;
    msg.x = 18101U;
    msg.y = 52095U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.910441640015937);
    msg.setSource(492U);
    msg.setSourceEntity(70U);
    msg.setDestination(58486U);
    msg.setDestinationEntity(171U);
    msg.camid = 65U;
    msg.x = 13025U;
    msg.y = 17408U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.005192052134185832);
    msg.setSource(17714U);
    msg.setSourceEntity(15U);
    msg.setDestination(643U);
    msg.setDestinationEntity(9U);
    msg.tracking = 65U;
    msg.lat = 0.6864323901913643;
    msg.lon = 0.8248305262048157;
    msg.x = 0.12352794960353053;
    msg.y = 0.3888904954314433;
    msg.z = 0.8840177647720742;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.4847979455745267);
    msg.setSource(15109U);
    msg.setSourceEntity(1U);
    msg.setDestination(30367U);
    msg.setDestinationEntity(207U);
    msg.tracking = 86U;
    msg.lat = 0.0954955584792454;
    msg.lon = 0.625803228398557;
    msg.x = 0.09785529757811995;
    msg.y = 0.961058527766876;
    msg.z = 0.829202515591981;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.5554149528888552);
    msg.setSource(20966U);
    msg.setSourceEntity(254U);
    msg.setDestination(2480U);
    msg.setDestinationEntity(208U);
    msg.tracking = 9U;
    msg.lat = 0.17068643626867108;
    msg.lon = 0.10130983893676304;
    msg.x = 0.8425556166278886;
    msg.y = 0.31099307884823046;
    msg.z = 0.6267241826347902;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.5858354292196608);
    msg.setSource(43005U);
    msg.setSourceEntity(218U);
    msg.setDestination(46005U);
    msg.setDestinationEntity(234U);
    msg.target.assign("KMSXFPCGAGXQNUHESQOCFTZSTJZXAUVDALENOJBJOPVUWAACJLQJIXWGBKEVRZNQPBHIWQQMNRDKHDDVKRZYYYHKPVPISDBTWPHVIMTRWYY");
    msg.lbearing = 0.9792600606541345;
    msg.lelevation = 0.5879136311096765;
    msg.bearing = 0.08911049188643283;
    msg.elevation = 0.6710280718513949;
    msg.phi = 0.2556913002514226;
    msg.theta = 0.9025547096894668;
    msg.psi = 0.18260169154478623;
    msg.accuracy = 0.9241200437083127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.843122112331762);
    msg.setSource(11732U);
    msg.setSourceEntity(201U);
    msg.setDestination(26275U);
    msg.setDestinationEntity(21U);
    msg.target.assign("DLQUNQSCCEXFHTUNSCAIPSRUJNYNILQGOOGULKQLOIGFKMIKFRDIYRKWZYKSPRFBDJFOHK");
    msg.lbearing = 0.13633471608627068;
    msg.lelevation = 0.5969245217538228;
    msg.bearing = 0.21416678285432955;
    msg.elevation = 0.8743178535591679;
    msg.phi = 0.438455210235394;
    msg.theta = 0.241564004325319;
    msg.psi = 0.6455626487070574;
    msg.accuracy = 0.08984031572765927;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.8909745507368477);
    msg.setSource(45878U);
    msg.setSourceEntity(57U);
    msg.setDestination(8549U);
    msg.setDestinationEntity(205U);
    msg.target.assign("KWSXFKYAETGHZRTHEUSVICNCODPLSMKWSGQRYWTIBTJUUDLPRWNIQSRILIOKPXSNPWDILDWRBHLZVXXVQTMOCOIJAXKRBFNMJKCQIAACUOLHPXUGPY");
    msg.lbearing = 0.635202376727785;
    msg.lelevation = 0.1116397774716329;
    msg.bearing = 0.9636201303057725;
    msg.elevation = 0.2884431774616576;
    msg.phi = 0.09909283306734451;
    msg.theta = 0.978314255319631;
    msg.psi = 0.26145686017534997;
    msg.accuracy = 0.37972500101039985;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.8003682555514714);
    msg.setSource(55389U);
    msg.setSourceEntity(178U);
    msg.setDestination(21939U);
    msg.setDestinationEntity(41U);
    msg.target.assign("JPXWHTJZIGNLEOHECKLXWFRIVROBVFJNIKACOCQNEELNWUVGBFITVHWLKZMUXWWGHZXTZNDUDSBAMVPZBAEAJLDQFDKGPYZBMTSGUEPRZUDULMKLLROQUAOPTNPHYBKCMSXIYDRGNSDPYEXIMJLYHQKXQKGTIMYFOASVXGUSPIDIQZEAOTAAO");
    msg.x = 0.5581537945521301;
    msg.y = 0.20306190765050436;
    msg.z = 0.27190690367630754;
    msg.n = 0.0680828154431018;
    msg.e = 0.9641119118937731;
    msg.d = 0.5773457228847482;
    msg.phi = 0.438507822062012;
    msg.theta = 0.3019859153198048;
    msg.psi = 0.8457364543125604;
    msg.accuracy = 0.8668871367102339;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.7167428836485662);
    msg.setSource(4843U);
    msg.setSourceEntity(228U);
    msg.setDestination(49413U);
    msg.setDestinationEntity(50U);
    msg.target.assign("FCUHFRHBEDUTRQYLNORRGJUICBOAZCZOZKHLDBPPCUCVVKDDAYCXICAYWKAXWIJBOSCKHVKFBVBYGKIATPBYSDQEASECNMZNRLHWBILPRDPJNBJLFSJMPWXVFGDTQAEPFUMUHFDNIQMOKVMMPXVJWOMLIFLHSYTDQSESHKZNOIGHXZWTWZIMNPEVTLOUZLR");
    msg.x = 0.32817952263980144;
    msg.y = 0.9314821650938558;
    msg.z = 0.2716859958987824;
    msg.n = 0.5297149751553019;
    msg.e = 0.3025760014601421;
    msg.d = 0.7864974955863934;
    msg.phi = 0.44308828243000764;
    msg.theta = 0.4209442114837145;
    msg.psi = 0.9560406836629034;
    msg.accuracy = 0.9656480767723759;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.41974806683056043);
    msg.setSource(63792U);
    msg.setSourceEntity(211U);
    msg.setDestination(56437U);
    msg.setDestinationEntity(199U);
    msg.target.assign("TJWBUEZRFUVVCMLDMVMJZVWZCRIRYLXHUVJUWODWVJJOSTIKXFSQWKHXZQQWWZEGYNEPJXEZPLMVTFDQLBAYXOBODTCQCXBADXASOFHTTKWIUVJWAYBCQODGNBTISSVUIGEHMGZRKMIYLNPDKEBDAURHPNGIXYOAINPPURAYEPNINTHFXML");
    msg.x = 0.639108144182994;
    msg.y = 0.4884332352483258;
    msg.z = 0.41810806630856034;
    msg.n = 0.2119584609019165;
    msg.e = 0.9793408590206407;
    msg.d = 0.6741518531602494;
    msg.phi = 0.20236659194717377;
    msg.theta = 0.999801344955631;
    msg.psi = 0.0028683783308700583;
    msg.accuracy = 0.060671136463873565;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.7405788539784263);
    msg.setSource(2115U);
    msg.setSourceEntity(128U);
    msg.setDestination(37685U);
    msg.setDestinationEntity(82U);
    msg.target.assign("OETCPIOKNEVRFIDJKGSMNOKOYNTYHGYOXGKAQTNWDQZXHUYMFDZQTEHLPWXWRBBVPTUSRRSCIWAHDYMCJDSWKFDOVIWAFEOTAZBVRERHIUBFXIAZLLUJYIGXCJOZCHKTOHNPYUBBTJFLIACHMFVXCEBYFDVTSLLLLDMAMLISNQ");
    msg.lat = 0.6571896498169999;
    msg.lon = 0.2556876557781972;
    msg.z_units = 112U;
    msg.z = 0.15602078741641168;
    msg.accuracy = 0.950805169489045;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.1750821454430601);
    msg.setSource(1436U);
    msg.setSourceEntity(129U);
    msg.setDestination(39534U);
    msg.setDestinationEntity(109U);
    msg.target.assign("RBKIAFBHXCEEDYEZADDKIOFNRXRTRSKQO");
    msg.lat = 0.9034445425565412;
    msg.lon = 0.6396227527011584;
    msg.z_units = 156U;
    msg.z = 0.38797767377824877;
    msg.accuracy = 0.7796664591159944;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.6764641272660484);
    msg.setSource(29820U);
    msg.setSourceEntity(211U);
    msg.setDestination(8834U);
    msg.setDestinationEntity(20U);
    msg.target.assign("VERPMQXEEMSNXBOKQFWOELDNBEOPUBUDTSVTWGKGALLXYKPMOIYGYGLFYVKYWCZHRLMTPDJJGCPWUVEZTJPAOTID");
    msg.lat = 0.8730314674312752;
    msg.lon = 0.828826428364751;
    msg.z_units = 11U;
    msg.z = 0.24784508699341;
    msg.accuracy = 0.12073080083586007;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.5608048313991002);
    msg.setSource(5506U);
    msg.setSourceEntity(198U);
    msg.setDestination(33335U);
    msg.setDestinationEntity(28U);
    msg.name.assign("XXHVWGIZXRYVAPGFLZAOZUOZPQRKTXZSFFNRWQFNMFAODBKAORYHWSNYZZQSSTYMVBARGGISJZAVLGOJUMBQZWBLLKPCMVEJUSIFHOURSTGBEYIYHVRWAODDUIUJQMCDKWLTQNQRCMFDCYUHYLCELPVKVRXFMTNCIWCSWXTBDCOAYOJJJIHECJBZEUNIELQBLPKQBKPFKFXAAXMYBWUOKQNEHSPXTNHPTGHXNGKJSVHVTDDTIRPECDJDMNGEG");
    msg.lat = 0.3865792435241455;
    msg.lon = 0.17651208077465408;
    msg.z = 0.15896623037827706;
    msg.z_units = 203U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.3309196466276134);
    msg.setSource(50467U);
    msg.setSourceEntity(121U);
    msg.setDestination(18081U);
    msg.setDestinationEntity(157U);
    msg.name.assign("APLSCCDAMTPAHAIVIBYQQRVRBHXZDJTHIDNSXVCVIHNJZYRISGCFVBBEJVJZRQKZCUPFJCGPWNVUYFHADRSKNOTOUXZZDHYMOXCFPXNYRBLLMMLQPHGPYUMQKIGTWFLDVZEECUAE");
    msg.lat = 0.8196907625664481;
    msg.lon = 0.7949964058159734;
    msg.z = 0.29237526993841456;
    msg.z_units = 250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.12948592481289534);
    msg.setSource(43659U);
    msg.setSourceEntity(246U);
    msg.setDestination(22502U);
    msg.setDestinationEntity(95U);
    msg.name.assign("IUGSOBFWAETCAUHVIOTRUKESURCKGXSBZJEOZEKQIUBTYGGQSQQCCNXATZZRJPQWWPLWKAVNYEPLKECYVQHZBNNRXJOVQVDWSRDHKQMKJUVJLCX");
    msg.lat = 0.31065683395768084;
    msg.lon = 0.14208025234292554;
    msg.z = 0.11023852517944321;
    msg.z_units = 192U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.9221153267420078);
    msg.setSource(45327U);
    msg.setSourceEntity(171U);
    msg.setDestination(17727U);
    msg.setDestinationEntity(206U);
    msg.op = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.4472505369165517);
    msg.setSource(12121U);
    msg.setSourceEntity(156U);
    msg.setDestination(10969U);
    msg.setDestinationEntity(197U);
    msg.op = 194U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.12176993984353213);
    msg.setSource(49651U);
    msg.setSourceEntity(36U);
    msg.setDestination(24346U);
    msg.setDestinationEntity(55U);
    msg.op = 215U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("RZARWSMBCODHMFQXBOLEVPELEJYFJPRVTLTOIQVNCUOWSTHYNKZBHLWFJEXAJORYWBHZBTVPSQOQAMKAZUCAEH");
    tmp_msg_0.lat = 0.10427245182925382;
    tmp_msg_0.lon = 0.39283750738478795;
    tmp_msg_0.z = 0.6453820381242046;
    tmp_msg_0.z_units = 128U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.7785227733150935);
    msg.setSource(6346U);
    msg.setSourceEntity(37U);
    msg.setDestination(31392U);
    msg.setDestinationEntity(93U);
    msg.value = 0.16777481033992014;
    msg.type = 180U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.41138046562514496);
    msg.setSource(63661U);
    msg.setSourceEntity(114U);
    msg.setDestination(60138U);
    msg.setDestinationEntity(229U);
    msg.value = 0.06142803906733674;
    msg.type = 250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.20453754789506107);
    msg.setSource(19676U);
    msg.setSourceEntity(57U);
    msg.setDestination(44460U);
    msg.setDestinationEntity(5U);
    msg.value = 0.5776824166085788;
    msg.type = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.43823903665130737);
    msg.setSource(31820U);
    msg.setSourceEntity(154U);
    msg.setDestination(27467U);
    msg.setDestinationEntity(196U);
    msg.value = 0.347505746930744;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.7029281234697377);
    msg.setSource(48898U);
    msg.setSourceEntity(67U);
    msg.setDestination(65511U);
    msg.setDestinationEntity(239U);
    msg.value = 0.09548250378106693;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.8632884774824642);
    msg.setSource(4552U);
    msg.setSourceEntity(166U);
    msg.setDestination(24991U);
    msg.setDestinationEntity(225U);
    msg.value = 0.03526298997826771;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.5155772376807194);
    msg.setSource(53261U);
    msg.setSourceEntity(129U);
    msg.setDestination(47039U);
    msg.setDestinationEntity(131U);
    msg.timestamp_last_service = 0.5019220924726001;
    msg.time_next_service = 0.3976063780841914;
    msg.time_motor_next_service = 0.7751267453721128;
    msg.time_idle_ground = 0.7195283929585283;
    msg.time_idle_air = 0.452380930191865;
    msg.time_idle_water = 0.46978326155199335;
    msg.time_idle_underwater = 0.37384478322332415;
    msg.time_idle_unknown = 0.5542335370715213;
    msg.time_motor_ground = 0.9055963642796604;
    msg.time_motor_air = 0.4211520265586124;
    msg.time_motor_water = 0.3530707457855674;
    msg.time_motor_underwater = 0.32343661192946005;
    msg.time_motor_unknown = 0.007154977368577065;
    msg.rpm_min = -1616;
    msg.rpm_max = 20670;
    msg.depth_max = 0.11053708682194197;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.7990640846120064);
    msg.setSource(42928U);
    msg.setSourceEntity(63U);
    msg.setDestination(15384U);
    msg.setDestinationEntity(246U);
    msg.timestamp_last_service = 0.4278132424755575;
    msg.time_next_service = 0.6906378953497297;
    msg.time_motor_next_service = 0.4029279392678047;
    msg.time_idle_ground = 0.7823597193057625;
    msg.time_idle_air = 0.4098153428686119;
    msg.time_idle_water = 0.39250099022047835;
    msg.time_idle_underwater = 0.30844846316188357;
    msg.time_idle_unknown = 0.17027359709383594;
    msg.time_motor_ground = 0.1010326346246222;
    msg.time_motor_air = 0.6756340561294348;
    msg.time_motor_water = 0.9693359624673624;
    msg.time_motor_underwater = 0.6554471208203232;
    msg.time_motor_unknown = 0.4998069997789847;
    msg.rpm_min = -26367;
    msg.rpm_max = 6304;
    msg.depth_max = 0.3461485000725928;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.7169705220231188);
    msg.setSource(1355U);
    msg.setSourceEntity(155U);
    msg.setDestination(18406U);
    msg.setDestinationEntity(17U);
    msg.timestamp_last_service = 0.30261896291714574;
    msg.time_next_service = 0.7517402265421598;
    msg.time_motor_next_service = 0.9859948759551805;
    msg.time_idle_ground = 0.46944536971642337;
    msg.time_idle_air = 0.048055989444891756;
    msg.time_idle_water = 0.5213774544572196;
    msg.time_idle_underwater = 0.3153095587082877;
    msg.time_idle_unknown = 0.8459504892974032;
    msg.time_motor_ground = 0.42757886245924503;
    msg.time_motor_air = 0.056900506630310654;
    msg.time_motor_water = 0.9832602564518105;
    msg.time_motor_underwater = 0.12718978172906792;
    msg.time_motor_unknown = 0.8843562323191657;
    msg.rpm_min = -19839;
    msg.rpm_max = 23586;
    msg.depth_max = 0.050614342553574554;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.603761331751972);
    msg.setSource(33444U);
    msg.setSourceEntity(135U);
    msg.setDestination(29144U);
    msg.setDestinationEntity(211U);
    msg.severity = 236U;
    msg.text.assign("ZDNXDQJYHRLUEKHIJZAVGDFPWCHPAROVEYSWXNU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.7561856997550646);
    msg.setSource(17325U);
    msg.setSourceEntity(8U);
    msg.setDestination(8575U);
    msg.setDestinationEntity(105U);
    msg.severity = 175U;
    msg.text.assign("PFYLEHBCLSYVBUKZSAPHNWNQERFYRATCHEBBYLTTPCGYSJIIEUOVDAVRLSKJNHTPRPZHZSKJPIIRZNOZXUMXCHCCWXQDBWFT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.38839142486018674);
    msg.setSource(60621U);
    msg.setSourceEntity(42U);
    msg.setDestination(51336U);
    msg.setDestinationEntity(18U);
    msg.severity = 152U;
    msg.text.assign("JXJQDLUCRAVQUOTVZWKIAPGBFXTZKTODTALGBXEMGJYAXTBSPUYFHDZQUJXRWDHHPCFDVEKZZBMTRRDEXOLKBQGNUIGZDGJYVKSSSOMEKFTISOBPOASWUELXCVHNWEAUBHTTFUCVEXW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.40096490210678837);
    msg.setSource(12577U);
    msg.setSourceEntity(6U);
    msg.setDestination(49656U);
    msg.setDestinationEntity(55U);
    msg.channel = 41;
    msg.value = -602041449;
    msg.gain = 171U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.7899965835841771);
    msg.setSource(38080U);
    msg.setSourceEntity(230U);
    msg.setDestination(16038U);
    msg.setDestinationEntity(49U);
    msg.channel = -100;
    msg.value = -1191012764;
    msg.gain = 234U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.2714359176623399);
    msg.setSource(6985U);
    msg.setSourceEntity(207U);
    msg.setDestination(2815U);
    msg.setDestinationEntity(107U);
    msg.channel = -125;
    msg.value = -455503602;
    msg.gain = 19U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.9706404735396317);
    msg.setSource(43754U);
    msg.setSourceEntity(56U);
    msg.setDestination(47570U);
    msg.setDestinationEntity(213U);
    msg.ch01 = 0.8241098334726066;
    msg.ch02 = 0.8016156149864918;
    msg.ch03 = 0.525708306444007;
    msg.ch04 = 0.7540609614640487;
    msg.ch05 = 0.250413787568608;
    msg.ch06 = 0.28268207877497786;
    msg.ch07 = 0.5199015031634331;
    msg.ch08 = 0.28872063062041053;
    msg.ch09 = 0.5835855491488527;
    msg.ch10 = 0.9835689039779646;
    msg.ch11 = 0.17464741032327213;
    msg.ch12 = 0.5968636991687372;
    msg.ch13 = 0.6964319853959609;
    msg.ch14 = 0.155508399195334;
    msg.ch15 = 0.3169156167495517;
    msg.ch16 = 0.8590094666533041;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.028359850151215116);
    msg.setSource(40514U);
    msg.setSourceEntity(65U);
    msg.setDestination(55045U);
    msg.setDestinationEntity(181U);
    msg.ch01 = 0.9100692380939226;
    msg.ch02 = 0.7659516142938454;
    msg.ch03 = 0.724995846529685;
    msg.ch04 = 0.6183758695712408;
    msg.ch05 = 0.6372235205085879;
    msg.ch06 = 0.6063120953215612;
    msg.ch07 = 0.5719359170574583;
    msg.ch08 = 0.7649512365806989;
    msg.ch09 = 0.5489911572104444;
    msg.ch10 = 0.4611990384540776;
    msg.ch11 = 0.4320644750639747;
    msg.ch12 = 0.4591254780391789;
    msg.ch13 = 0.3341270274008963;
    msg.ch14 = 0.7398639583361627;
    msg.ch15 = 0.9197824455499984;
    msg.ch16 = 0.9013343032755415;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.22657704130474687);
    msg.setSource(43991U);
    msg.setSourceEntity(179U);
    msg.setDestination(18255U);
    msg.setDestinationEntity(103U);
    msg.ch01 = 0.6136481390433411;
    msg.ch02 = 0.6702401260629977;
    msg.ch03 = 0.23580561339111528;
    msg.ch04 = 0.9127458926114492;
    msg.ch05 = 0.9037117422838276;
    msg.ch06 = 0.9915947269770817;
    msg.ch07 = 0.15101956011713125;
    msg.ch08 = 0.3493732566630794;
    msg.ch09 = 0.9945824875109099;
    msg.ch10 = 0.148634316330721;
    msg.ch11 = 0.06876976432680126;
    msg.ch12 = 0.007665565455705847;
    msg.ch13 = 0.006012657000442179;
    msg.ch14 = 0.18587177236407149;
    msg.ch15 = 0.6762866399269396;
    msg.ch16 = 0.9464349055755529;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.373978501041462);
    msg.setSource(41676U);
    msg.setSourceEntity(184U);
    msg.setDestination(65398U);
    msg.setDestinationEntity(151U);
    msg.op = 126U;
    msg.lat = 0.7523687602405386;
    msg.lon = 0.0002829836283047005;
    msg.height = 0.01413795234380899;
    msg.depth = 0.07310132976453387;
    msg.alt = 0.04218058345528153;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.23779658913829904);
    msg.setSource(40315U);
    msg.setSourceEntity(223U);
    msg.setDestination(55638U);
    msg.setDestinationEntity(71U);
    msg.op = 220U;
    msg.lat = 0.14707752070217306;
    msg.lon = 0.44969014116037986;
    msg.height = 0.7976321804095109;
    msg.depth = 0.6694165986304211;
    msg.alt = 0.149440017793791;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.3505818142309872);
    msg.setSource(55499U);
    msg.setSourceEntity(38U);
    msg.setDestination(64001U);
    msg.setDestinationEntity(169U);
    msg.op = 15U;
    msg.lat = 0.4673420797714084;
    msg.lon = 0.7511048852344119;
    msg.height = 0.9260780962245861;
    msg.depth = 0.7261436127688381;
    msg.alt = 0.787000928463509;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.8990997171759948);
    msg.setSource(26398U);
    msg.setSourceEntity(46U);
    msg.setDestination(20130U);
    msg.setDestinationEntity(96U);
    msg.name.assign("RYYTTGIBYDXPAJJXIYGVBMFMOWPSPALMAPAWKILCPEDOXNELZEIKDIUXTSPJLHQTWBSQULVQIKTBUWVFVTSYJKEJNLMEKCGQHWGQTNKEHMTIINRRUJUUZDDOPLXHHGZFURFSMIRJXRJYAVOPWGRGHZLMDBZEQMWDFVEKLHXCUFZCFWNGQYYTDY");
    msg.value = 95U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.3249244644971244);
    msg.setSource(32997U);
    msg.setSourceEntity(180U);
    msg.setDestination(23740U);
    msg.setDestinationEntity(162U);
    msg.name.assign("EWHOZMBRIQZRTPGFPSLLXGPDCEOEZPPJJJYNNKMOJEHCRJMMOLDRDBDYLQWLEUMW");
    msg.value = 15U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.27735892928679207);
    msg.setSource(39549U);
    msg.setSourceEntity(90U);
    msg.setDestination(49966U);
    msg.setDestinationEntity(48U);
    msg.name.assign("ZPVULVZPOTWVSXQRJDPBHTHHEJRCATSEISGAFMXWXYGWDFLZPOXIGMVHPNSCLNLTD");
    msg.value = 226U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.15874608472155027);
    msg.setSource(5315U);
    msg.setSourceEntity(153U);
    msg.setDestination(41359U);
    msg.setDestinationEntity(235U);
    msg.name.assign("IIYRAMFUJUAWBURWZTYEEJKDREGTUDFAOHBNALIHVSTKUUPINLFLZECCKVTMHSKCHDVXVBPXDSOKJWYXPZAJRZUPJYLOQOGG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.7299890095492129);
    msg.setSource(2184U);
    msg.setSourceEntity(177U);
    msg.setDestination(34695U);
    msg.setDestinationEntity(163U);
    msg.name.assign("IXJXOAERPSUPWUJIIDWCMRSYNCNHZGXBMBPPULEKUKSQZOQOATPJHBREVSYFOYWTMERUULFSJMVDCWWNQNVDHFDHTLVSXZLOUTCPQAGFKQWAGJVGYSKEVIMXMRTFDXGIXVIYKOSDQZXBAHHNECVJGJRJYPOITNQZTYSKPURRDCFDNLIPOHDBBBZKDZUAETYMGFLRMVTCGGMLAWLIMUAKQSHICFZBNAHLEJLHCVWQZW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.11362146806598283);
    msg.setSource(11580U);
    msg.setSourceEntity(46U);
    msg.setDestination(38793U);
    msg.setDestinationEntity(128U);
    msg.name.assign("SMMJBKAEWHGCSRUBQRUFKTYHDKPBFVDCASEVHEMJKJXTGFRNGLCVFIDMZWFZYCQUODILCLYOEGSQUQTMLLMMKVDNIVZRSIXKIOTFFLYXYGAZCGGARYJUFVQWJMKXHNCRKEDAZWVHYJFSZMUOWOWSICIPIPTUBPTQWTESSNHZNPLQSTPBFCTXJDHENOHVABXOHGAKNBLJDRGHADPUZINR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.07020066611152398);
    msg.setSource(53001U);
    msg.setSourceEntity(218U);
    msg.setDestination(6975U);
    msg.setDestinationEntity(75U);
    msg.name.assign("TODTRSNLPTRVOGZYVNCVNXBDCYCTQDJZWELEZTGHLUPAOYVYBDLGMZWGLFDMLDBAJRHONWNXGAAUNPCEMXPNASHIAEQIFEWRKBBFRIHZEMRXJIRAJYSVHBSII");
    msg.value = 200U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.9813193644433661);
    msg.setSource(16350U);
    msg.setSourceEntity(200U);
    msg.setDestination(2224U);
    msg.setDestinationEntity(151U);
    msg.name.assign("HNOWXJGEVIXOMYMXAVMMLRAQYWTLNIRQVJNDPVIMAYGIFJPWJFDIEFTCSCICVVUYIXEWARICGPDYEUUHGZZFTBQZ");
    msg.value = 78U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.5788589677734315);
    msg.setSource(24010U);
    msg.setSourceEntity(174U);
    msg.setDestination(61549U);
    msg.setDestinationEntity(224U);
    msg.name.assign("JGPCHPYUGKGRZHEHARYOSMJOIUFYMICZHEQVDHQLCGAQEZQNVJBNWXQLLMWEWQAUNTDHQXYCSCMAPXFEJMZSUCCAYAPKANROXSIQDDDIXHKFTWDOHHHRVRPLMRCZYJWGVTFUXPPIZXRZBPFKUNQWFBKTTIKGTLLBVT");
    msg.value = 168U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.3248375024004304);
    msg.setSource(35265U);
    msg.setSourceEntity(89U);
    msg.setDestination(32060U);
    msg.setDestinationEntity(171U);
    msg.value = 0.717551404313702;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.2030655304667799);
    msg.setSource(5904U);
    msg.setSourceEntity(177U);
    msg.setDestination(12578U);
    msg.setDestinationEntity(111U);
    msg.value = 0.46821350996753885;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.8506400388963916);
    msg.setSource(61078U);
    msg.setSourceEntity(103U);
    msg.setDestination(35498U);
    msg.setDestinationEntity(32U);
    msg.value = 0.8366154768816286;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.06883817334029796);
    msg.setSource(14544U);
    msg.setSourceEntity(191U);
    msg.setDestination(43758U);
    msg.setDestinationEntity(141U);
    msg.value = 0.8994540134832969;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.8397525536104179);
    msg.setSource(42224U);
    msg.setSourceEntity(55U);
    msg.setDestination(21276U);
    msg.setDestinationEntity(212U);
    msg.value = 0.4371305775990173;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.08076160798573617);
    msg.setSource(25606U);
    msg.setSourceEntity(223U);
    msg.setDestination(60231U);
    msg.setDestinationEntity(131U);
    msg.value = 0.5923713853255107;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.40447624625220535);
    msg.setSource(65388U);
    msg.setSourceEntity(245U);
    msg.setDestination(445U);
    msg.setDestinationEntity(226U);
    msg.ampl = 0.994609261779504;
    msg.dir = 0.9759967606081255;
    msg.freq = 0.9385678247055679;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.57026411148708);
    msg.setSource(59590U);
    msg.setSourceEntity(216U);
    msg.setDestination(37339U);
    msg.setDestinationEntity(221U);
    msg.ampl = 0.5614633494872816;
    msg.dir = 0.16039491471783474;
    msg.freq = 0.5323169977965119;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.34597941892393236);
    msg.setSource(34141U);
    msg.setSourceEntity(208U);
    msg.setDestination(44337U);
    msg.setDestinationEntity(167U);
    msg.ampl = 0.9395036035849209;
    msg.dir = 0.7726753841509324;
    msg.freq = 0.13160542758437577;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.49486570274894726);
    msg.setSource(59840U);
    msg.setSourceEntity(47U);
    msg.setDestination(47522U);
    msg.setDestinationEntity(94U);
    msg.value = 0.08314860166474136;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.594472932495258);
    msg.setSource(11733U);
    msg.setSourceEntity(3U);
    msg.setDestination(45625U);
    msg.setDestinationEntity(110U);
    msg.value = 0.16272292097705143;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.7164318445877851);
    msg.setSource(3625U);
    msg.setSourceEntity(2U);
    msg.setDestination(19562U);
    msg.setDestinationEntity(152U);
    msg.value = 0.2841940606529193;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.22733946673001437);
    msg.setSource(28830U);
    msg.setSourceEntity(58U);
    msg.setDestination(53179U);
    msg.setDestinationEntity(32U);
    msg.value = 0.10192625566058533;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.4909122618893844);
    msg.setSource(35788U);
    msg.setSourceEntity(35U);
    msg.setDestination(3993U);
    msg.setDestinationEntity(18U);
    msg.value = 0.2959011676520864;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.7943120259944334);
    msg.setSource(19416U);
    msg.setSourceEntity(219U);
    msg.setDestination(59068U);
    msg.setDestinationEntity(186U);
    msg.value = 0.5345179364503396;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.2921534661723917);
    msg.setSource(5930U);
    msg.setSourceEntity(60U);
    msg.setDestination(33719U);
    msg.setDestinationEntity(70U);
    msg.value = 0.7875462642324415;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.7822501284474704);
    msg.setSource(57304U);
    msg.setSourceEntity(239U);
    msg.setDestination(46559U);
    msg.setDestinationEntity(211U);
    msg.value = 0.14816577409018228;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.8776860387100074);
    msg.setSource(47618U);
    msg.setSourceEntity(143U);
    msg.setDestination(36249U);
    msg.setDestinationEntity(198U);
    msg.value = 0.09027069156411138;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.9432783895268875);
    msg.setSource(53270U);
    msg.setSourceEntity(138U);
    msg.setDestination(30948U);
    msg.setDestinationEntity(77U);
    msg.id = 106;
    msg.state = 49;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.475886039774547);
    msg.setSource(63213U);
    msg.setSourceEntity(155U);
    msg.setDestination(57560U);
    msg.setDestinationEntity(213U);
    msg.id = 44;
    msg.state = -69;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.9481052156063804);
    msg.setSource(28598U);
    msg.setSourceEntity(192U);
    msg.setDestination(13278U);
    msg.setDestinationEntity(213U);
    msg.id = -57;
    msg.state = 3;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.3361829531024374);
    msg.setSource(50260U);
    msg.setSourceEntity(89U);
    msg.setDestination(49931U);
    msg.setDestinationEntity(216U);
    msg.angle = 0.9672315609231728;
    msg.speed = 0.9267449303606503;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.7740034318005036);
    msg.setSource(26429U);
    msg.setSourceEntity(73U);
    msg.setDestination(43573U);
    msg.setDestinationEntity(219U);
    msg.angle = 0.11562857142460148;
    msg.speed = 0.4557993594859163;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.20678873097285133);
    msg.setSource(25645U);
    msg.setSourceEntity(183U);
    msg.setDestination(33886U);
    msg.setDestinationEntity(78U);
    msg.angle = 0.1569113120561706;
    msg.speed = 0.9854311972274228;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.7108512027453892);
    msg.setSource(16651U);
    msg.setSourceEntity(122U);
    msg.setDestination(22902U);
    msg.setDestinationEntity(92U);
    msg.dir = 0.16378611143285382;
    msg.speed = 0.5984479348047672;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.9277271701662666);
    msg.setSource(3488U);
    msg.setSourceEntity(160U);
    msg.setDestination(12198U);
    msg.setDestinationEntity(199U);
    msg.dir = 0.9825268797378787;
    msg.speed = 0.33999385584293473;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.3894625874547696);
    msg.setSource(30076U);
    msg.setSourceEntity(29U);
    msg.setDestination(42521U);
    msg.setDestinationEntity(43U);
    msg.dir = 0.9408335160870038;
    msg.speed = 0.2123288118159682;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.24608648421538748);
    msg.setSource(5541U);
    msg.setSourceEntity(153U);
    msg.setDestination(62164U);
    msg.setDestinationEntity(20U);
    msg.x = 0.3684614998312622;
    msg.y = 0.6830705851553667;
    msg.z1 = 0.008415772908718422;
    msg.z2 = 0.9046659570966398;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.9826850435320352);
    msg.setSource(54138U);
    msg.setSourceEntity(36U);
    msg.setDestination(49848U);
    msg.setDestinationEntity(107U);
    msg.x = 0.1996458728261492;
    msg.y = 0.3421609587270663;
    msg.z1 = 0.9898663741423461;
    msg.z2 = 0.36165609685855704;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.5276258502015159);
    msg.setSource(28596U);
    msg.setSourceEntity(109U);
    msg.setDestination(57921U);
    msg.setDestinationEntity(214U);
    msg.x = 0.2733148976738109;
    msg.y = 0.15885117067678745;
    msg.z1 = 0.787234491821842;
    msg.z2 = 0.6501122988415363;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.1387536778816275);
    msg.setSource(23919U);
    msg.setSourceEntity(94U);
    msg.setDestination(24996U);
    msg.setDestinationEntity(145U);
    msg.mmsi.assign("WRFZESLPVCVRZKAPASAWCBHIFGEVRZPVCWHCUTMFAWPZBOKMTPMTIWXKXLQSYIEWUUCDOBNWIGUHRVCUGUXIMUXQPGAGYLFTERLCJEFDBMMBDQ");
    msg.lat = 0.6022481039230042;
    msg.lon = 0.43263125424253246;
    msg.x = 0.9505608260004803;
    msg.y = 0.550714121557741;
    msg.speed = 0.003601945917783289;
    msg.course = 0.9933987148279311;
    msg.dist = 0.3392668600194505;
    msg.length = 0.08672008652936558;
    msg.width = 0.3901720192878715;
    msg.o_vect = 0.5668510580575374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.3326946564760076);
    msg.setSource(19287U);
    msg.setSourceEntity(204U);
    msg.setDestination(35697U);
    msg.setDestinationEntity(141U);
    msg.mmsi.assign("NCHCVBCPOIYEDREHVSSYDDEHZQJFXZDMQPSPPMIWYAKUCBSTIEJUODJBTWILJZEIVFAJMMKLNOALPEKFWRJBZDAAHPGDIVWWFTPKTSKOSDZZGLTNWKZROZWNNJRCMY");
    msg.lat = 0.9993713774077189;
    msg.lon = 0.3260743370229322;
    msg.x = 0.826211266248283;
    msg.y = 0.5213172955940585;
    msg.speed = 0.07391306463641556;
    msg.course = 0.44245783731411026;
    msg.dist = 0.9532973216106123;
    msg.length = 0.2560184621486382;
    msg.width = 0.9032568517851215;
    msg.o_vect = 0.8722662032895158;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.31875237247088717);
    msg.setSource(21450U);
    msg.setSourceEntity(213U);
    msg.setDestination(39581U);
    msg.setDestinationEntity(6U);
    msg.mmsi.assign("OWZFQJTCVRAQAIQWVMPDEXUDCLUSITMLYZLWMGGEMHZQMLSLPIZDJIGKTWKZOSGZNUBYFMARYKUJUQTKBNSBUENGJWKYUNTLNBMBDFTUVEFHSZLMAESEQACYEIRBDPSBGCZQK");
    msg.lat = 0.5846308595924365;
    msg.lon = 0.9658920888348174;
    msg.x = 0.16392508595834798;
    msg.y = 0.9996148702665226;
    msg.speed = 0.9198805900775455;
    msg.course = 0.04605855618890542;
    msg.dist = 0.09355461929187614;
    msg.length = 0.19296688764554026;
    msg.width = 0.854576017517954;
    msg.o_vect = 0.5416214626419147;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.3302753249855409);
    msg.setSource(50789U);
    msg.setSourceEntity(121U);
    msg.setDestination(32722U);
    msg.setDestinationEntity(186U);
    msg.depth_at_loc.assign("ZACHYVBYCBUDEIXOMLOMYGNGFNWCHIOTDZUYKIWNWTCUMGWRPLVVAUVLLBRAFQPRBOQTYRNROUFSUFDTJVLDSELRDJFAXGOXGMHRPCJIBPWZUMNBKTSISHKMGKRZWQ");
    msg.danger.assign("MDLKXZKRYEYUGSLLGLAGZBFDUVDYHORVYYPOIYQZXCPNRMPBFDTLNRWQJEFSPMMOUINGMQXBWNSMEHWICJQHZWETAOLTJKHCWPQRTQTNJDSTXFHVBZKITUUCFH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.3235007688668351);
    msg.setSource(555U);
    msg.setSourceEntity(198U);
    msg.setDestination(21288U);
    msg.setDestinationEntity(33U);
    msg.depth_at_loc.assign("WFHCKSRXQYBCGAYRHT");
    msg.danger.assign("YKMKWVFTEJYVDZXEQSWDBJFJJFXCTYCEBHAOVEBPGUXEMOIGZLCTJFDVGUAJPOPHQEUUIQVWPFXFZAGBVCTHOBINUKFRQDREDYYNZUAZQXKLIVSIMLNWTDZKOGTMBFKOVRJAWQABNINHPDLYURXZFMYHGIOQDIRBBRQNSSYCBGSYJXTDNLHHCPKRLWHMLLPZMCCUCZSSWAKETSMWYQGUOPPKRHNURMLZJMO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.6352792973799772);
    msg.setSource(15015U);
    msg.setSourceEntity(27U);
    msg.setDestination(41458U);
    msg.setDestinationEntity(99U);
    msg.depth_at_loc.assign("YBZAHJWCKKRINILEDSDVJJENAPZEFREOPKVKVWCMEOAUQZRWLOQTSUNYYOSFIDCYSPOSGVTYFZSMLUQRGNLINLHTIMTFRZEWCAVPVFMWCXPXATQPAHOCYUOQXJSNDRGDPTHSTIQTRJORUPZGDLUGI");
    msg.danger.assign("ICDPMACIDFDXQHPTCRTGGHUZZDWQABQMNMOYELBGNXLGRVXFJHHWQPPKFLCIDOJMKUOIRNFBNDSTEAZKFTEZYHPWPVLWSXLIXYPKBMQVATVKUOZIQSOUYWEHASLIHRPHQYYXNNYJESJCTBNBUUCSKUGZDCIIWXHQRHVTNBAAJOJYZOWMRQSDRJQMLVXRPUYTFEPOFEVCNEJZU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.4511719015912783);
    msg.setSource(46862U);
    msg.setSourceEntity(97U);
    msg.setDestination(48988U);
    msg.setDestinationEntity(210U);
    msg.value = 0.6067254941137634;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.9085903959383742);
    msg.setSource(53065U);
    msg.setSourceEntity(122U);
    msg.setDestination(5872U);
    msg.setDestinationEntity(34U);
    msg.value = 0.7271963977994337;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.6165519149514513);
    msg.setSource(49922U);
    msg.setSourceEntity(141U);
    msg.setDestination(27488U);
    msg.setDestinationEntity(112U);
    msg.value = 0.6677707399754383;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.5262697067653307);
    msg.setSource(981U);
    msg.setSourceEntity(122U);
    msg.setDestination(16684U);
    msg.setDestinationEntity(239U);
    msg.beam1 = 0.6521376863655598;
    msg.beam2 = 0.46901344131892897;
    msg.beam3 = 0.6502362801105364;
    msg.beam4 = 0.8240164519613716;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.7317005619906694);
    msg.setSource(65014U);
    msg.setSourceEntity(6U);
    msg.setDestination(35226U);
    msg.setDestinationEntity(211U);
    msg.beam1 = 0.1616728951811276;
    msg.beam2 = 0.9846149115143259;
    msg.beam3 = 0.2579063448972948;
    msg.beam4 = 0.29569239352543797;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.4159865708509528);
    msg.setSource(18115U);
    msg.setSourceEntity(114U);
    msg.setDestination(18270U);
    msg.setDestinationEntity(211U);
    msg.beam1 = 0.35187544884481803;
    msg.beam2 = 0.9891716446267294;
    msg.beam3 = 0.7707793771991399;
    msg.beam4 = 0.7640337827691831;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.5497359284310848);
    msg.setSource(33604U);
    msg.setSourceEntity(47U);
    msg.setDestination(48578U);
    msg.setDestinationEntity(179U);
    msg.beam1 = 130U;
    msg.beam2 = 145U;
    msg.beam3 = 33U;
    msg.beam4 = 155U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.11446866646855502);
    msg.setSource(40111U);
    msg.setSourceEntity(153U);
    msg.setDestination(56556U);
    msg.setDestinationEntity(245U);
    msg.beam1 = 21U;
    msg.beam2 = 19U;
    msg.beam3 = 248U;
    msg.beam4 = 175U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.0590228887859795);
    msg.setSource(59264U);
    msg.setSourceEntity(52U);
    msg.setDestination(47821U);
    msg.setDestinationEntity(114U);
    msg.beam1 = 68U;
    msg.beam2 = 196U;
    msg.beam3 = 120U;
    msg.beam4 = 191U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.8993604384891206);
    msg.setSource(849U);
    msg.setSourceEntity(173U);
    msg.setDestination(15526U);
    msg.setDestinationEntity(159U);
    msg.pos = 0.501981448938456;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.1538548910517552);
    msg.setSource(250U);
    msg.setSourceEntity(242U);
    msg.setDestination(48693U);
    msg.setDestinationEntity(41U);
    msg.pos = 0.08103212349624533;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.9243782576766578);
    msg.setSource(5986U);
    msg.setSourceEntity(181U);
    msg.setDestination(64373U);
    msg.setDestinationEntity(110U);
    msg.pos = 0.4577070367600079;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.7433621066700721);
    msg.setSource(45495U);
    msg.setSourceEntity(231U);
    msg.setDestination(8216U);
    msg.setDestinationEntity(151U);
    msg.beams = 29U;
    msg.cells = 79U;
    msg.coord_sys = 128U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.4053137788464505;
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.3364976608892395);
    msg.setSource(24825U);
    msg.setSourceEntity(207U);
    msg.setDestination(10197U);
    msg.setDestinationEntity(98U);
    msg.beams = 218U;
    msg.cells = 87U;
    msg.coord_sys = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.46954105532669954);
    msg.setSource(2140U);
    msg.setSourceEntity(80U);
    msg.setDestination(65004U);
    msg.setDestinationEntity(155U);
    msg.beams = 197U;
    msg.cells = 9U;
    msg.coord_sys = 222U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.4128460295587735);
    msg.setSource(29923U);
    msg.setSourceEntity(71U);
    msg.setDestination(49720U);
    msg.setDestinationEntity(161U);
    msg.vel = 0.453581411764611;
    msg.amp = 0.236261832559586;
    msg.cor = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.797730898103495);
    msg.setSource(33249U);
    msg.setSourceEntity(157U);
    msg.setDestination(39985U);
    msg.setDestinationEntity(188U);
    msg.vel = 0.876486473127471;
    msg.amp = 0.809209257783344;
    msg.cor = 102U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.3013797985037735);
    msg.setSource(59563U);
    msg.setSourceEntity(224U);
    msg.setDestination(51544U);
    msg.setDestinationEntity(8U);
    msg.vel = 0.1476914220351111;
    msg.amp = 0.46940296879178367;
    msg.cor = 177U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.7343054009035223);
    msg.setSource(59000U);
    msg.setSourceEntity(137U);
    msg.setDestination(5953U);
    msg.setDestinationEntity(31U);
    msg.serial_no = 1884421544U;
    msg.unix_timestamp = 4181796102U;
    msg.millis = 11176U;
    msg.trans_protocol = 218U;
    msg.trans_id = 1177995202U;
    msg.trans_data = 10901U;
    msg.snr = 224U;
    msg.trans_freq = 254U;
    msg.recv_mem_addr = 25795U;
    msg.lat = 0.6167862774745337;
    msg.lon = 0.040212852155394385;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.11084225891108479);
    msg.setSource(10288U);
    msg.setSourceEntity(203U);
    msg.setDestination(5214U);
    msg.setDestinationEntity(108U);
    msg.serial_no = 1747588565U;
    msg.unix_timestamp = 2337310117U;
    msg.millis = 60964U;
    msg.trans_protocol = 118U;
    msg.trans_id = 2802608481U;
    msg.trans_data = 21949U;
    msg.snr = 149U;
    msg.trans_freq = 249U;
    msg.recv_mem_addr = 59368U;
    msg.lat = 0.48615769952665133;
    msg.lon = 0.5478735209701494;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.213394749827159);
    msg.setSource(32435U);
    msg.setSourceEntity(42U);
    msg.setDestination(57265U);
    msg.setDestinationEntity(99U);
    msg.serial_no = 2062568020U;
    msg.unix_timestamp = 1557841971U;
    msg.millis = 46148U;
    msg.trans_protocol = 55U;
    msg.trans_id = 2150733785U;
    msg.trans_data = 22472U;
    msg.snr = 249U;
    msg.trans_freq = 225U;
    msg.recv_mem_addr = 43359U;
    msg.lat = 0.2927563729154967;
    msg.lon = 0.6894504310583636;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.46956033039717293);
    msg.setSource(33734U);
    msg.setSourceEntity(131U);
    msg.setDestination(4025U);
    msg.setDestinationEntity(204U);
    msg.serial_no = 9348278U;
    msg.unix_timestamp = 3977112597U;
    msg.temperature = 0.2761963061174062;
    msg.avg_noise_level = 81U;
    msg.peak_noise_level = 10U;
    msg.recv_listen_freq = 254U;
    msg.recv_mem_addr = 28201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.8121583260160128);
    msg.setSource(19475U);
    msg.setSourceEntity(2U);
    msg.setDestination(17798U);
    msg.setDestinationEntity(124U);
    msg.serial_no = 1651842474U;
    msg.unix_timestamp = 1484959307U;
    msg.temperature = 0.050607337192768886;
    msg.avg_noise_level = 206U;
    msg.peak_noise_level = 2U;
    msg.recv_listen_freq = 181U;
    msg.recv_mem_addr = 50596U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.1370106328461994);
    msg.setSource(64280U);
    msg.setSourceEntity(249U);
    msg.setDestination(42426U);
    msg.setDestinationEntity(184U);
    msg.serial_no = 472495947U;
    msg.unix_timestamp = 3385126330U;
    msg.temperature = 0.7355873458679127;
    msg.avg_noise_level = 254U;
    msg.peak_noise_level = 126U;
    msg.recv_listen_freq = 108U;
    msg.recv_mem_addr = 35292U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.477778195720894);
    msg.setSource(37480U);
    msg.setSourceEntity(16U);
    msg.setDestination(4508U);
    msg.setDestinationEntity(63U);
    msg.frequency = 1169132316U;
    msg.info.assign("AMRSNCBZJKCLIOARGMQXPJYVDRFHAWGVDVBBXPWYJZZPBUGUDGHHDVZOYRJRCNEASQUMLGQIDXRRTDCPXYTKGH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.44403318124895863);
    msg.setSource(47372U);
    msg.setSourceEntity(26U);
    msg.setDestination(18696U);
    msg.setDestinationEntity(217U);
    msg.frequency = 2993752960U;
    msg.info.assign("CZNEFMPQPAGLTXMDQGYKUBFJKNVCXPGOEQOXVAPVTJJRXSEGALDDCYAQKBFQWTJDNVVGTQFDZUGWZWFSSDSDWNKVRAVXBHZFBVIJCDOPIMQBUNSLLTLEMBTNFBMHBKGUJBFRJOYFWSZHQWHKILAHPSVKIMTUXZPHIMYEARCZHNY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.8995870023991996);
    msg.setSource(54961U);
    msg.setSourceEntity(215U);
    msg.setDestination(49237U);
    msg.setDestinationEntity(0U);
    msg.frequency = 1080350688U;
    msg.info.assign("JBRAMTPVHTAXWPQGEFXHISAFCRGMFLISJXUEOMBOYHXJYRUQBXHAMQTWBRBXWQTCMBKOPIGFLNHDSVKNEUOKGXOIZHPFGWXOYRPDRELSJVCEAVGGHTCONTZLMTZAUJCQYCPEACSLBMVYNSUZHNTUOLNWLDOCWKOLHKNQLGRSDRVVVKZFMZZQSFFJKSEAJEWVUYYQGKDDMMIDDXPSGFXDUYQNNIUTKRPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.8552404955503246);
    msg.setSource(18223U);
    msg.setSourceEntity(215U);
    msg.setDestination(42405U);
    msg.setDestinationEntity(219U);
    msg.restriction = 4U;
    msg.reason.assign("XNEZRJWIWNTFZDTIDXPSVRZRWGIMHEQKLGR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.1337492989344875);
    msg.setSource(8481U);
    msg.setSourceEntity(152U);
    msg.setDestination(59680U);
    msg.setDestinationEntity(5U);
    msg.restriction = 156U;
    msg.reason.assign("CIWYTEXBLYKNEDLKQEVP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.372267770811921);
    msg.setSource(50061U);
    msg.setSourceEntity(211U);
    msg.setDestination(33832U);
    msg.setDestinationEntity(0U);
    msg.restriction = 55U;
    msg.reason.assign("IKBIEBXRJSAOBZZEYTGXRUTWCAHVHUZGVHYJKVTILHLXJOWCDAVPFWNGDQPXKJSYTQWQCSUWVETHTVKBMZTXNRAMHYOPQFGDQDGRGIGEXB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.7114329803398143);
    msg.setSource(49192U);
    msg.setSourceEntity(162U);
    msg.setDestination(14553U);
    msg.setDestinationEntity(191U);
    msg.adcp = 67;
    msg.adcp_dur = 1290406361U;
    msg.adcp_fr = 26356730U;
    msg.ctd = 34;
    msg.ctd_dur = 2270340277U;
    msg.ctd_fr = 936322643U;
    msg.opt = -12;
    msg.opt_dur = 3615290614U;
    msg.opt_fr = 1770036441U;
    msg.tbl = -87;
    msg.tbl_dur = 719715807U;
    msg.tbl_fr = 3467828638U;
    msg.eco = 120;
    msg.eco_dur = 2378967377U;
    msg.eco_fr = 1810774149U;
    msg.par = 34;
    msg.par_dur = 3741078509U;
    msg.par_fr = 2985984286U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.7924229705108956);
    msg.setSource(20937U);
    msg.setSourceEntity(184U);
    msg.setDestination(57206U);
    msg.setDestinationEntity(2U);
    msg.adcp = -96;
    msg.adcp_dur = 840926226U;
    msg.adcp_fr = 495438856U;
    msg.ctd = -21;
    msg.ctd_dur = 101092199U;
    msg.ctd_fr = 1731432159U;
    msg.opt = -65;
    msg.opt_dur = 2980656137U;
    msg.opt_fr = 2379472129U;
    msg.tbl = 6;
    msg.tbl_dur = 2522823828U;
    msg.tbl_fr = 1460960294U;
    msg.eco = 25;
    msg.eco_dur = 3395478033U;
    msg.eco_fr = 2481415804U;
    msg.par = -34;
    msg.par_dur = 994963255U;
    msg.par_fr = 2652362411U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.6750911253385774);
    msg.setSource(52713U);
    msg.setSourceEntity(48U);
    msg.setDestination(11376U);
    msg.setDestinationEntity(88U);
    msg.adcp = 67;
    msg.adcp_dur = 210211644U;
    msg.adcp_fr = 3142148253U;
    msg.ctd = 17;
    msg.ctd_dur = 1728137513U;
    msg.ctd_fr = 1837195576U;
    msg.opt = 81;
    msg.opt_dur = 2727767528U;
    msg.opt_fr = 3447664784U;
    msg.tbl = 95;
    msg.tbl_dur = 2121323165U;
    msg.tbl_fr = 2868532762U;
    msg.eco = -65;
    msg.eco_dur = 1694962936U;
    msg.eco_fr = 2698907282U;
    msg.par = 83;
    msg.par_dur = 71492667U;
    msg.par_fr = 4264645628U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.040325205735070035);
    msg.setSource(8094U);
    msg.setSourceEntity(220U);
    msg.setDestination(33473U);
    msg.setDestinationEntity(60U);
    msg.adcp = 99;
    msg.adcp_dur = 2456064982U;
    msg.adcp_fr = 2782784235U;
    msg.ctd = 62;
    msg.ctd_dur = 2258113247U;
    msg.ctd_fr = 3420269400U;
    msg.opt = -126;
    msg.opt_dur = 3732347140U;
    msg.opt_fr = 4272503895U;
    msg.tbl = 105;
    msg.tbl_dur = 221627810U;
    msg.tbl_fr = 118830137U;
    msg.eco = 79;
    msg.eco_dur = 2212242784U;
    msg.eco_fr = 812281044U;
    msg.par = 35;
    msg.par_dur = 341572539U;
    msg.par_fr = 2674987132U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.3256015182490739);
    msg.setSource(36664U);
    msg.setSourceEntity(129U);
    msg.setDestination(12751U);
    msg.setDestinationEntity(183U);
    msg.adcp = -59;
    msg.adcp_dur = 2264958399U;
    msg.adcp_fr = 88536146U;
    msg.ctd = -59;
    msg.ctd_dur = 411102779U;
    msg.ctd_fr = 3784830342U;
    msg.opt = -89;
    msg.opt_dur = 3593378099U;
    msg.opt_fr = 3504737259U;
    msg.tbl = -55;
    msg.tbl_dur = 1789113124U;
    msg.tbl_fr = 1498823011U;
    msg.eco = 20;
    msg.eco_dur = 2846740263U;
    msg.eco_fr = 2138834244U;
    msg.par = 78;
    msg.par_dur = 3577458130U;
    msg.par_fr = 992966903U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.0927238084265688);
    msg.setSource(49810U);
    msg.setSourceEntity(108U);
    msg.setDestination(20292U);
    msg.setDestinationEntity(23U);
    msg.adcp = 52;
    msg.adcp_dur = 692702064U;
    msg.adcp_fr = 3746990990U;
    msg.ctd = 31;
    msg.ctd_dur = 3616246022U;
    msg.ctd_fr = 1615987892U;
    msg.opt = -96;
    msg.opt_dur = 3504947255U;
    msg.opt_fr = 36860065U;
    msg.tbl = 118;
    msg.tbl_dur = 4034434705U;
    msg.tbl_fr = 1798094021U;
    msg.eco = -52;
    msg.eco_dur = 55334131U;
    msg.eco_fr = 2941281124U;
    msg.par = -80;
    msg.par_dur = 1798195561U;
    msg.par_fr = 974662177U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.574328845728546);
    msg.setSource(32270U);
    msg.setSourceEntity(127U);
    msg.setDestination(49883U);
    msg.setDestinationEntity(92U);
    msg.value = 0.9419176816497362;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.6751558964171956);
    msg.setSource(35288U);
    msg.setSourceEntity(2U);
    msg.setDestination(64196U);
    msg.setDestinationEntity(153U);
    msg.value = 0.9664020275219127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.9468249146345947);
    msg.setSource(32135U);
    msg.setSourceEntity(16U);
    msg.setDestination(37431U);
    msg.setDestinationEntity(116U);
    msg.value = 0.5319975730924736;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.10098929541825796);
    msg.setSource(2520U);
    msg.setSourceEntity(254U);
    msg.setDestination(22710U);
    msg.setDestinationEntity(181U);
    msg.lat = 0.11208295522290213;
    msg.lon = 0.19195645715867848;
    msg.depth.assign("SGIVHRQCEIRLYQHBLUXTGDSCLOXZXWDVBNFNPXWMAYVVRVLQKMOHSYMFWTAPMNEZCRVSPHYPSBLNWOFWPDOYLCNRBEUAPVNAFGJDTKQYRWMKAUDXZHOUJCJRLTIPBIRACKOTRZJJGB");
    msg.vel.assign("SQIQPFPKWMXHBIXDONJNGKKZDFFGLMVTLJFACCXCZMVJBUCHXPMDTQKQZNHJVTXFQHSGHJGFWCMSBBROZBAVDDUPKEVEOHBPGNSCKZMTLYRPNVYPIIUAAOBKFLXTMJIIEYBAQEKCVEFMFGEUZTRPCXZMZPDNSJKIRUJTXSHE");
    msg.dir.assign("FJJPWTJDGQEQOLXAYWKYNCDTVJUXIPNDHDALRPTTAKHLFKGOEIRMRHRFQNAAHNXMOQWZCVNAVQTRIECKXUWKBGWGXEOOGQZYZEHZVYFADQFUBENLCSSTPELJKDKAQCFZIPJSOUNFGVMHXMKWBOZWCUAPNLLJYMXZODPI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.8587554266290797);
    msg.setSource(35335U);
    msg.setSourceEntity(212U);
    msg.setDestination(48697U);
    msg.setDestinationEntity(100U);
    msg.lat = 0.9784949717980453;
    msg.lon = 0.023903490460427057;
    msg.depth.assign("JXJUAGFCHJMZTPSZGDMXEZBWHCVXUUCLXJPZVYBFFIYNNTKJXGCFAQJAVFAGN");
    msg.vel.assign("JWLGEIEFQV");
    msg.dir.assign("ZAQPKYIMAICTSFTHXKTRIOFGWENCFFQPSRHUWXNBVLEQEGFLSDQGAJNIHZJBDYNVMTDWHFRLRVEOPOCYAXGLDLLKYKGJWIJCMWEXVEBTPOXYWMUASPYTCPRJNOSDEJSEYIXMZAKUVXZZVGOUMDXAZVWIVSBJHSTMROWRRQSQHNLKGGTXTHCSDOIEFVDDQXMUUAMKRZBKUWLLBZCKYGDUQBQBJWFYBCNEZMYPNNLUHOAOHFKPR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.03533549588045537);
    msg.setSource(6182U);
    msg.setSourceEntity(206U);
    msg.setDestination(21801U);
    msg.setDestinationEntity(12U);
    msg.lat = 0.14128247113387216;
    msg.lon = 0.43626256939039965;
    msg.depth.assign("GPIWYYLQTKVEJTTMDRPJLYKCCCBQHFSSHUJJPUHSQDWQFYFKNDATEXAQRIGA");
    msg.vel.assign("KWWRRIPABEOFPNGLTXBZKONWSTCHHULAOBEQOWMCKPJBZUMVGCJMWGNDXVVUSMHSYMFNEUXAEXGYVQTFJYTWKLBLOLIRURIJXLFRRTVGDJFIDMSKTJWREXYDGBTQQFOLTPOPWYHAQHIAEDLOZERKHQIQBUMBKIPZGQNAASSATQSZZWEDNVQCS");
    msg.dir.assign("WEGAZYIEDFWBAUJQWCMGZHKTGX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.547027892121017);
    msg.setSource(56521U);
    msg.setSourceEntity(186U);
    msg.setDestination(5456U);
    msg.setDestinationEntity(224U);
    msg.source.assign("UMZADQHPBLINRUZMIZCXAVGEWIKGASNSRYVAGMFCOJSJKYQZRACARYCUPVEJOIRLFBPIDWFYIXULITEMTLOHYTG");
    msg.lat = 0.48290957598579065;
    msg.lon = 0.16704637196707928;
    msg.sog = 0.4387060569501806;
    msg.uc = 0.25761723320981156;
    msg.depth = 0.6839282642931525;
    msg.value = 0.4434925957557472;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.24671749922206943);
    msg.setSource(42953U);
    msg.setSourceEntity(113U);
    msg.setDestination(10908U);
    msg.setDestinationEntity(158U);
    msg.source.assign("XSRUVPZBOFIYAWSMJGUOBLXFDMRSNJMPFXZLEXFKQQXPNTTUHWMYHPWZTUSEEWWEDMJCENYLPYIFCATMQBEGEJDLVNHZEIDRRPFOARASGKCDMZGNKYSBUILPIOIJOHTBHCPBMMCOQAAOKYQLEGRTSJQXRAKYJURYXRNCUYLKWHQMBZRJCXOOFZXWLDVDLNVFKFBIPAN");
    msg.lat = 0.5213430103020078;
    msg.lon = 0.2761391197951716;
    msg.sog = 0.6729581491256676;
    msg.uc = 0.4369761048299674;
    msg.depth = 0.22305597826956458;
    msg.value = 0.6467427497820931;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.5957543090590208);
    msg.setSource(34892U);
    msg.setSourceEntity(59U);
    msg.setDestination(17583U);
    msg.setDestinationEntity(34U);
    msg.source.assign("SUCDABVSYSHHZUVEOREGVCEFJOHBLHAFBFACWQJNUJZISYHCBGFRUZYXKERAXZKTMWDHEQSRKXTUPVOMVJQBXKMQIBYHOCLFDAYUYQWTOIVZBQOZKOCLOKPRUIGLMSLMWVNLPHG");
    msg.lat = 0.9123977741291504;
    msg.lon = 0.9494784680066104;
    msg.sog = 0.9601355982649425;
    msg.uc = 0.2885625300372202;
    msg.depth = 0.1399383679965167;
    msg.value = 0.15443834797885547;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.057797975789171785);
    msg.setSource(43762U);
    msg.setSourceEntity(139U);
    msg.setDestination(33193U);
    msg.setDestinationEntity(51U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.8547139762453964;
    tmp_msg_0.x = 0.7274090383718623;
    tmp_msg_0.y = 0.3130357132086562;
    tmp_msg_0.z = 0.751120159266501;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.7548116223487727;
    tmp_msg_1.x = 0.5703598185277625;
    tmp_msg_1.y = 0.9916062103026054;
    tmp_msg_1.z = 0.422355050655285;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.011818076373825592;
    tmp_msg_2.value = 0.19110030354776364;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.4861173927523431);
    msg.setSource(27675U);
    msg.setSourceEntity(13U);
    msg.setDestination(34986U);
    msg.setDestinationEntity(223U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.7573570726664194;
    tmp_msg_0.x = 0.9149883926835014;
    tmp_msg_0.y = 0.2998405548684979;
    tmp_msg_0.z = 0.8878748194925001;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.3976450138685985;
    tmp_msg_1.x = 0.05129996671914383;
    tmp_msg_1.y = 0.04608895503360766;
    tmp_msg_1.z = 0.4935217664494548;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.9647027224499888;
    tmp_msg_2.value = 0.160719795517973;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.9388555690372449);
    msg.setSource(27657U);
    msg.setSourceEntity(74U);
    msg.setDestination(61125U);
    msg.setDestinationEntity(62U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.688482530726752;
    tmp_msg_0.x = 0.13966383984817365;
    tmp_msg_0.y = 0.790714839858912;
    tmp_msg_0.z = 0.824238988486603;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.7834953266314253;
    tmp_msg_1.x = 0.3919743631077869;
    tmp_msg_1.y = 0.8538973264979722;
    tmp_msg_1.z = 0.8228994003630365;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.5053342048998356;
    tmp_msg_2.value = 0.00658526864436948;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.7687237890248874);
    msg.setSource(44893U);
    msg.setSourceEntity(31U);
    msg.setDestination(48143U);
    msg.setDestinationEntity(11U);
    msg.gdop = 0.6950936980812733;
    msg.pdop = 0.6066682234188434;
    msg.tdop = 0.6059034202982285;
    msg.vdop = 0.437595814266004;
    msg.hdop = 0.04016516988788865;
    msg.ndop = 0.6489851288008872;
    msg.edop = 0.9085329269736151;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.7956606828600894);
    msg.setSource(18167U);
    msg.setSourceEntity(229U);
    msg.setDestination(19928U);
    msg.setDestinationEntity(88U);
    msg.gdop = 0.8696892286051059;
    msg.pdop = 0.9074984313186594;
    msg.tdop = 0.9827398549662104;
    msg.vdop = 0.6610775036801113;
    msg.hdop = 0.3705116150733213;
    msg.ndop = 0.11808179086017156;
    msg.edop = 0.7244757455392791;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.5784319754131532);
    msg.setSource(16727U);
    msg.setSourceEntity(146U);
    msg.setDestination(50464U);
    msg.setDestinationEntity(2U);
    msg.gdop = 0.36199157277972327;
    msg.pdop = 0.37437295336134546;
    msg.tdop = 0.5759352410697915;
    msg.vdop = 0.16809368369268451;
    msg.hdop = 0.7085682899281148;
    msg.ndop = 0.7068677261643364;
    msg.edop = 0.9695215761318006;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.7689497471526854);
    msg.setSource(52635U);
    msg.setSourceEntity(145U);
    msg.setDestination(64143U);
    msg.setDestinationEntity(82U);
    msg.meanx = 0.9174867370531297;
    msg.meany = 0.7164673871923604;
    msg.meanz = 0.5489231941914968;
    msg.dur = 1098875217U;
    msg.meanacc = 0.24504386352771534;
    msg.obs = 1590425340U;
    msg.valid = 178U;
    msg.active = 126U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.7529146008905736);
    msg.setSource(4411U);
    msg.setSourceEntity(147U);
    msg.setDestination(26533U);
    msg.setDestinationEntity(167U);
    msg.meanx = 0.397538626744133;
    msg.meany = 0.45677934903427353;
    msg.meanz = 0.9977569596725209;
    msg.dur = 2733022659U;
    msg.meanacc = 0.5551789695650504;
    msg.obs = 1798874602U;
    msg.valid = 101U;
    msg.active = 225U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.6984281597680939);
    msg.setSource(4940U);
    msg.setSourceEntity(23U);
    msg.setDestination(48322U);
    msg.setDestinationEntity(224U);
    msg.meanx = 0.40398683126138246;
    msg.meany = 0.8782415084215786;
    msg.meanz = 0.012300369879256423;
    msg.dur = 1347077774U;
    msg.meanacc = 0.8572345747757727;
    msg.obs = 198058698U;
    msg.valid = 128U;
    msg.active = 195U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.8089075491245326);
    msg.setSource(54684U);
    msg.setSourceEntity(196U);
    msg.setDestination(18210U);
    msg.setDestinationEntity(149U);
    msg.gpsfixtype = 216U;
    msg.flags = 13U;
    msg.diffcorr = 134U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.8436966726989796);
    msg.setSource(50678U);
    msg.setSourceEntity(74U);
    msg.setDestination(15741U);
    msg.setDestinationEntity(139U);
    msg.gpsfixtype = 123U;
    msg.flags = 142U;
    msg.diffcorr = 35U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.47105895366667394);
    msg.setSource(37203U);
    msg.setSourceEntity(196U);
    msg.setDestination(36482U);
    msg.setDestinationEntity(130U);
    msg.gpsfixtype = 156U;
    msg.flags = 115U;
    msg.diffcorr = 73U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.3758729590504718);
    msg.setSource(6871U);
    msg.setSourceEntity(165U);
    msg.setDestination(60551U);
    msg.setDestinationEntity(63U);
    msg.gnssid = 245U;
    msg.svid = 47U;
    msg.sigid = 35U;
    msg.freqid = 246U;
    msg.prres = 0.9155508970784554;
    msg.cno = 112U;
    msg.qualityind = 61U;
    msg.corrsource = 161U;
    msg.ionomodel = 113U;
    msg.health = 127U;
    msg.sigflags = 52U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.6659981981254074);
    msg.setSource(64519U);
    msg.setSourceEntity(13U);
    msg.setDestination(18410U);
    msg.setDestinationEntity(237U);
    msg.gnssid = 137U;
    msg.svid = 23U;
    msg.sigid = 32U;
    msg.freqid = 19U;
    msg.prres = 0.7833264175201914;
    msg.cno = 49U;
    msg.qualityind = 250U;
    msg.corrsource = 36U;
    msg.ionomodel = 36U;
    msg.health = 198U;
    msg.sigflags = 244U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.6444657993126759);
    msg.setSource(7770U);
    msg.setSourceEntity(32U);
    msg.setDestination(26188U);
    msg.setDestinationEntity(215U);
    msg.gnssid = 11U;
    msg.svid = 173U;
    msg.sigid = 20U;
    msg.freqid = 125U;
    msg.prres = 0.7519230637919277;
    msg.cno = 88U;
    msg.qualityind = 178U;
    msg.corrsource = 68U;
    msg.ionomodel = 139U;
    msg.health = 237U;
    msg.sigflags = 165U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.15033956141718463);
    msg.setSource(17175U);
    msg.setSourceEntity(64U);
    msg.setDestination(60099U);
    msg.setDestinationEntity(53U);
    msg.numsigs = 51U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.3955026762607853);
    msg.setSource(3630U);
    msg.setSourceEntity(142U);
    msg.setDestination(21247U);
    msg.setDestinationEntity(115U);
    msg.numsigs = 45U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 61U;
    tmp_msg_0.svid = 26U;
    tmp_msg_0.sigid = 177U;
    tmp_msg_0.freqid = 11U;
    tmp_msg_0.prres = 0.7010485311124023;
    tmp_msg_0.cno = 181U;
    tmp_msg_0.qualityind = 131U;
    tmp_msg_0.corrsource = 187U;
    tmp_msg_0.ionomodel = 91U;
    tmp_msg_0.health = 137U;
    tmp_msg_0.sigflags = 253U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.4106185696236596);
    msg.setSource(64812U);
    msg.setSourceEntity(182U);
    msg.setDestination(34750U);
    msg.setDestinationEntity(20U);
    msg.numsigs = 8U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 36U;
    tmp_msg_0.svid = 166U;
    tmp_msg_0.sigid = 159U;
    tmp_msg_0.freqid = 104U;
    tmp_msg_0.prres = 0.8025395424343709;
    tmp_msg_0.cno = 61U;
    tmp_msg_0.qualityind = 82U;
    tmp_msg_0.corrsource = 193U;
    tmp_msg_0.ionomodel = 171U;
    tmp_msg_0.health = 238U;
    tmp_msg_0.sigflags = 68U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.1664128447822436);
    msg.setSource(63120U);
    msg.setSourceEntity(29U);
    msg.setDestination(5804U);
    msg.setDestinationEntity(8U);
    msg.gnssid = 177U;
    msg.svid = 112U;
    msg.elev = 0.47989484561120765;
    msg.azim = 0.1459958271961358;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.8032743038488304);
    msg.setSource(45148U);
    msg.setSourceEntity(2U);
    msg.setDestination(52578U);
    msg.setDestinationEntity(168U);
    msg.gnssid = 185U;
    msg.svid = 59U;
    msg.elev = 0.20467334724998965;
    msg.azim = 0.032769398748307865;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.32087943418371745);
    msg.setSource(2210U);
    msg.setSourceEntity(232U);
    msg.setDestination(19018U);
    msg.setDestinationEntity(149U);
    msg.gnssid = 99U;
    msg.svid = 10U;
    msg.elev = 0.31045844031717684;
    msg.azim = 0.4348346408950059;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.9359021268410486);
    msg.setSource(22795U);
    msg.setSourceEntity(187U);
    msg.setDestination(36352U);
    msg.setDestinationEntity(160U);
    msg.numsvs = 73U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.5353588089702465);
    msg.setSource(45216U);
    msg.setSourceEntity(196U);
    msg.setDestination(50326U);
    msg.setDestinationEntity(33U);
    msg.numsvs = 174U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.13300579457667838);
    msg.setSource(56441U);
    msg.setSourceEntity(41U);
    msg.setDestination(13499U);
    msg.setDestinationEntity(139U);
    msg.numsvs = 239U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.9266126247426584);
    msg.setSource(34986U);
    msg.setSourceEntity(57U);
    msg.setDestination(31533U);
    msg.setDestinationEntity(122U);
    msg.refstationid = 38798U;
    msg.itow = 3128479547U;
    msg.relposn = 0.5850596491764607;
    msg.relpose = 0.9855231308881577;
    msg.relposd = 0.6900264213464119;
    msg.relposlength = 0.6012996078274296;
    msg.relposheading = 0.5658913884298361;
    msg.accn = 0.014092238069319807;
    msg.acce = 0.4240762284507451;
    msg.accd = 0.20252556567356972;
    msg.acclength = 0.017215814321851486;
    msg.accheading = 0.5633752064434778;
    msg.gnssfixok = 191U;
    msg.diffsoln = 195U;
    msg.relposvalid = 205U;
    msg.ismoving = 231U;
    msg.refposmiss = 19U;
    msg.refobsmiss = 1U;
    msg.relposheadingvalid = 152U;
    msg.carrsoln = 28U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.7398568866490478);
    msg.setSource(26010U);
    msg.setSourceEntity(144U);
    msg.setDestination(62175U);
    msg.setDestinationEntity(190U);
    msg.refstationid = 12205U;
    msg.itow = 4083196298U;
    msg.relposn = 0.4861122471132877;
    msg.relpose = 0.9068630582851543;
    msg.relposd = 0.4782182623567025;
    msg.relposlength = 0.6364659044114326;
    msg.relposheading = 0.3915635433997572;
    msg.accn = 0.8050152904947238;
    msg.acce = 0.381680101193162;
    msg.accd = 0.4238660678881946;
    msg.acclength = 0.7419984092208549;
    msg.accheading = 0.4614781232794063;
    msg.gnssfixok = 239U;
    msg.diffsoln = 55U;
    msg.relposvalid = 61U;
    msg.ismoving = 223U;
    msg.refposmiss = 242U;
    msg.refobsmiss = 142U;
    msg.relposheadingvalid = 86U;
    msg.carrsoln = 69U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.37086127000673963);
    msg.setSource(53121U);
    msg.setSourceEntity(125U);
    msg.setDestination(20712U);
    msg.setDestinationEntity(4U);
    msg.refstationid = 63405U;
    msg.itow = 1284161459U;
    msg.relposn = 0.23840550960757667;
    msg.relpose = 0.46655898644731697;
    msg.relposd = 0.4008710471541038;
    msg.relposlength = 0.49814963755707564;
    msg.relposheading = 0.104186260104562;
    msg.accn = 0.9964776651125833;
    msg.acce = 0.5044136702533932;
    msg.accd = 0.6327320694642914;
    msg.acclength = 0.7331278130116153;
    msg.accheading = 0.1461610274526277;
    msg.gnssfixok = 132U;
    msg.diffsoln = 3U;
    msg.relposvalid = 67U;
    msg.ismoving = 121U;
    msg.refposmiss = 65U;
    msg.refobsmiss = 46U;
    msg.relposheadingvalid = 187U;
    msg.carrsoln = 226U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.45818961846567174);
    msg.setSource(22974U);
    msg.setSourceEntity(18U);
    msg.setDestination(13775U);
    msg.setDestinationEntity(194U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.991276737244422);
    msg.setSource(27340U);
    msg.setSourceEntity(184U);
    msg.setDestination(46678U);
    msg.setDestinationEntity(76U);
    IMC::CollisionAvoidance tmp_msg_0;
    tmp_msg_0.mmsi.assign("BETCHGSLYKSBLEJMVNWCXGPJFFQREXTHUGAWFCNLQJPVTUGDNWPRWIAIFCLDKGMXOSWSJVXYWNKJ");
    tmp_msg_0.lat = 0.4143083702349095;
    tmp_msg_0.lon = 0.735274094749756;
    tmp_msg_0.x = 0.3766117241092314;
    tmp_msg_0.y = 0.40807974980934636;
    tmp_msg_0.speed = 0.31076597405109707;
    tmp_msg_0.course = 0.6845517993138878;
    tmp_msg_0.dist = 0.1585206020354939;
    tmp_msg_0.length = 0.04747941869625505;
    tmp_msg_0.width = 0.8704010310852791;
    tmp_msg_0.o_vect = 0.43242271866626203;
    msg.obstacles.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.8951591850653102);
    msg.setSource(7408U);
    msg.setSourceEntity(154U);
    msg.setDestination(3548U);
    msg.setDestinationEntity(138U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  return test.getReturnValue();
}
