//***************************************************************************
// Copyright 2007-2025 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Bernardo Gabriel                                                 *
//***************************************************************************

#ifndef ACTUATORS_MODELS_CURRENT_T200_HPP_INCLUDED_
#define ACTUATORS_MODELS_CURRENT_T200_HPP_INCLUDED_

#include <vector>

#include "Model.hpp"

namespace DUNE
{
  namespace Utils
  {
    namespace Actuators
    {
      namespace Models
      {
        namespace Current
        {
          //! Performance values for the T200 thruster from BlueRobotics.
          //! Available on: https://docs.bluerobotics.com/thrusters/t200_current_plot.js
          static const std::vector<float> c_pwm      = {1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132, 1136, 1140, 1144, 1148, 1152, 1156, 1160, 1164, 1168, 1172, 1176, 1180, 1184, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1420, 1424, 1428, 1432, 1436, 1440, 1444, 1448, 1452, 1456, 1460, 1464, 1468, 1472, 1476, 1480, 1484, 1488, 1492, 1496, 1500, 1504, 1508, 1512, 1516, 1520, 1524, 1528, 1532, 1536, 1540, 1544, 1548, 1552, 1556, 1560, 1564, 1568, 1572, 1576, 1580, 1584, 1588, 1592, 1596, 1600, 1604, 1608, 1612, 1616, 1620, 1624, 1628, 1632, 1636, 1640, 1644, 1648, 1652, 1656, 1660, 1664, 1668, 1672, 1676, 1680, 1684, 1688, 1692, 1696, 1700, 1704, 1708, 1712, 1716, 1720, 1724, 1728, 1732, 1736, 1740, 1744, 1748, 1752, 1756, 1760, 1764, 1768, 1772, 1776, 1780, 1784, 1788, 1792, 1796, 1800, 1804, 1808, 1812, 1816, 1820, 1824, 1828, 1832, 1836, 1840, 1844, 1848, 1852, 1856, 1860, 1864, 1868, 1872, 1876, 1880, 1884, 1888, 1892, 1896, 1900};
          static const std::vector<float> c_curr_10v = {13.62, 13.63, 13.45, 13.2, 12.81, 12.5, 12.14, 11.96, 11.63, 11.32, 11, 10.8, 10.45, 10.2, 9.9, 9.56, 9.29, 9.1, 8.8, 8.5, 8.3, 8.05, 7.71, 7.57, 7.3, 7.1, 6.82, 6.6, 6.48, 6.2, 6, 5.8, 5.6, 5.4, 5.2, 5, 4.84, 4.64, 4.5, 4.3, 4.1, 3.9, 3.73, 3.6, 3.5, 3.3, 3.2, 3, 2.9, 2.8, 2.6, 2.4, 2.3, 2.1, 2, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.2, 1.1, 1, 0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.5, 0.5, 0.4, 0.4, 0.4, 0.3, 0.22, 0.2, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.47, 0.5, 0.5, 0.6, 0.7, 0.7, 0.8, 0.83, 0.94, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.43, 2.7, 2.8, 2.9, 3.1, 3.3, 3.4, 3.5, 3.7, 3.84, 4, 4.2, 4.4, 4.5, 4.7, 4.9, 5.1, 5.3, 5.5, 5.7, 5.9, 6.09, 6.3, 6.5, 6.73, 6.9, 7.13, 7.4, 7.6, 7.9, 8.1, 8.33, 8.64, 8.89, 9.14, 9.4, 9.7, 10, 10.2, 10.5, 10.79, 11.04, 11.35, 11.6, 11.9, 12.28, 12.44, 12.8, 13.13, 13.4, 13.62, 13.6};
          static const std::vector<float> c_curr_12v = {17.03, 17.08, 16.76, 16.52, 16.08, 15.69, 15.31, 15, 14.51, 14.17, 13.82, 13.46, 13.08, 12.8, 12.4, 12, 11.66, 11.31, 11.1, 10.74, 10.5, 10.11, 9.84, 9.5, 9.2, 8.9, 8.6, 8.3, 8, 7.7, 7.4, 7.1, 6.9, 6.6, 6.4, 6.2, 5.99, 5.77, 5.5, 5.32, 5.17, 4.9, 4.7, 4.56, 4.3, 4.1, 3.9, 3.73, 3.6, 3.4, 3.3, 3.1, 2.98, 2.8, 2.7, 2.41, 2.3, 2.1, 2, 1.9, 1.8, 1.7, 1.6, 1.5, 1.31, 1.3, 1.2, 1.1, 1, 0.9, 0.8, 0.8, 0.7, 0.6, 0.5, 0.5, 0.41, 0.4, 0.4, 0.3, 0.29, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.7, 0.7, 0.8, 0.8, 1, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 2, 2.1, 2.2, 2.3, 2.5, 2.8, 2.9, 3, 3.2, 3.3, 3.5, 3.67, 3.8, 4, 4.2, 4.4, 4.6, 4.8, 5, 5.2, 5.4, 5.69, 5.8, 6, 6.3, 6.5, 6.7, 7, 7.2, 7.5, 7.8, 8, 8.32, 8.64, 8.9, 9.24, 9.5, 9.82, 10.14, 10.45, 10.72, 11.1, 11.32, 11.62, 12.01, 12.37, 12.61, 13.04, 13.44, 13.7, 14.11, 14.4, 14.76, 15.13, 15.52, 15.87, 16.3, 16.74, 16.86, 16.91};
          static const std::vector<float> c_curr_14v = {20.71, 20.63, 20.47, 19.9, 19.45, 18.96, 18.39, 18, 17.37, 16.96, 16.54, 16.04, 15.64, 15.19, 14.71, 14.33, 13.93, 13.57, 13.1, 12.7, 12.4, 11.9, 11.6, 11.3, 11, 10.6, 10.36, 9.93, 9.67, 9.33, 9, 8.7, 8.4, 8, 7.7, 7.4, 7.04, 6.8, 6.5, 6.29, 6, 5.77, 5.5, 5.34, 5.1, 4.9, 4.7, 4.5, 4.29, 4.1, 3.9, 3.7, 3.5, 3.3, 3.2, 3, 2.9, 2.7, 2.5, 2.3, 2.2, 2, 1.9, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1, 0.9, 0.8, 0.8, 0.7, 0.6, 0.5, 0.5, 0.4, 0.4, 0.3, 0.3, 0.2, 0.2, 0.2, 0.11, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.05, 0.05, 0.01, 0.1, 0.1, 0.13, 0.2, 0.2, 0.2, 0.3, 0.4, 0.4, 0.44, 0.5, 0.6, 0.7, 0.7, 0.8, 0.9, 1, 1, 1.18, 1.3, 1.34, 1.5, 1.6, 1.7, 1.8, 1.9, 2.1, 2.2, 2.3, 2.56, 2.8, 2.9, 3.1, 3.2, 3.4, 3.57, 3.7, 3.9, 4.1, 4.31, 4.51, 4.79, 5, 5.2, 5.4, 5.6, 5.8, 6.1, 6.3, 6.57, 6.8, 7.1, 7.4, 7.74, 8.09, 8.4, 8.7, 8.95, 9.39, 9.6, 10, 10.3, 10.6, 10.86, 11.29, 11.57, 11.9, 12.3, 12.6, 12.95, 13.37, 13.72, 14.14, 14.5, 14.96, 15.36, 15.89, 16.24, 16.72, 17.18, 17.65, 18.08, 18.63, 19.08, 19.56, 20.07, 20.29, 20.36};
          static const std::vector<float> c_curr_16v = {24.30, 24.3, 23.78, 23.25, 22.64, 22.07, 21.46, 20.98, 20.44, 19.9, 19.32, 18.74, 18.11, 17.53, 17, 16.45, 15.96, 15.48, 14.98, 14.43, 14.04, 13.55, 13.1, 12.74, 12.3, 11.93, 11.59, 11.2, 10.8, 10.5, 10.27, 9.9, 9.5, 9.2, 8.9, 8.6, 8.2, 7.9, 7.57, 7.19, 6.89, 6.53, 6.29, 6, 5.75, 5.5, 5.3, 5, 4.8, 4.6, 4.4, 4.2, 3.98, 3.7, 3.58, 3.39, 3.2, 3, 2.84, 2.7, 2.4, 2.3, 2.1, 2, 1.9, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1, 0.9, 0.8, 0.7, 0.66, 0.56, 0.5, 0.4, 0.4, 0.37, 0.3, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.45, 1.5, 1.6, 1.8, 2, 2.1, 2.2, 2.4, 2.6, 2.8, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9, 4.1, 4.3, 4.58, 4.7, 5, 5.2, 5.42, 5.69, 5.9, 6.19, 6.4, 6.7, 7, 7.4, 7.7, 8.04, 8.4, 8.7, 9.03, 9.34, 9.69, 10.01, 10.4, 10.68, 10.9, 11.3, 11.64, 11.93, 12.38, 12.79, 13.14, 13.54, 13.99, 14.46, 14.86, 15.4, 15.86, 16.41, 16.97, 17.42, 18, 18.5, 19.13, 19.59, 20.15, 20.67, 21.13, 21.8, 22.38, 22.81, 23.28, 23.9, 23.83};
          static const std::vector<float> c_curr_18v = {28.22, 27.91, 27.31, 26.62, 26.04, 25.38, 24.8, 24.03, 23.53, 22.78, 22.21, 21.5, 20.61, 20.17, 19.51, 18.85, 18.23, 17.57, 17.12, 16.34, 15.8, 15.19, 14.69, 14.16, 13.68, 13.27, 12.83, 12.36, 11.99, 11.58, 11.32, 11, 10.65, 10.27, 9.97, 9.55, 9.2, 8.87, 8.54, 8.19, 7.77, 7.39, 7, 6.65, 6.3, 6, 5.75, 5.5, 5.23, 5, 4.79, 4.59, 4.3, 4.1, 3.9, 3.68, 3.4, 3.3, 3.1, 2.9, 2.73, 2.5, 2.3, 2.14, 2, 1.9, 1.76, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1, 0.8, 0.8, 0.7, 0.63, 0.53, 0.5, 0.4, 0.4, 0.3, 0.3, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.7, 0.8, 0.88, 1, 1, 1.2, 1.3, 1.38, 1.5, 1.6, 1.7, 1.83, 2, 2.1, 2.3, 2.47, 2.7, 2.9, 3.07, 3.24, 3.4, 3.6, 3.8, 4.07, 4.29, 4.52, 4.72, 4.98, 5.2, 5.47, 5.7, 5.97, 6.25, 6.55, 6.87, 7.28, 7.64, 8, 8.4, 8.8, 9.15, 9.48, 9.9, 10.2, 10.53, 10.81, 11.18, 11.58, 11.88, 12.29, 12.59, 13.12, 13.5, 14.04, 14.49, 15.09, 15.55, 16.14, 16.66, 17.32, 17.89, 18.45, 19.27, 19.72, 20.38, 21.03, 21.6, 22.29, 22.87, 23.55, 24.23, 24.77, 25.48, 26.04, 26.74, 27.22, 27.57};
          static const std::vector<float> c_curr_20v = {32.17, 31.37, 30.6, 29.67, 29.04, 28.26, 27.56, 26.74, 25.82, 25.16, 24.45, 23.54, 23.08, 22.46, 21.63, 21, 20.3, 19.65, 19, 18.36, 17.75, 17.11, 16.43, 15.81, 15.23, 14.74, 14.12, 13.66, 13.22, 12.69, 12.36, 12.01, 11.57, 11.27, 10.84, 10.54, 10.22, 9.77, 9.4, 8.96, 8.6, 8.29, 7.87, 7.48, 7.03, 6.6, 6.3, 5.97, 5.7, 5.41, 5.16, 4.88, 4.6, 4.31, 4.09, 3.81, 3.58, 3.32, 3.09, 2.9, 2.71, 2.46, 2.3, 2.1, 2, 1.84, 1.7, 1.59, 1.5, 1.3, 1.29, 1.2, 1.05, 1, 0.88, 0.8, 0.7, 0.7, 0.6, 0.5, 0.5, 0.4, 0.4, 0.3, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.7, 0.7, 0.8, 0.8, 0.96, 1, 1.1, 1.2, 1.3, 1.4, 1.51, 1.6, 1.79, 1.9, 2.06, 2.2, 2.37, 2.63, 2.82, 3.06, 3.28, 3.49, 3.72, 3.98, 4.26, 4.59, 4.83, 5.08, 5.39, 5.66, 5.9, 6.2, 6.5, 6.87, 7.3, 7.72, 8.14, 8.53, 8.92, 9.29, 9.7, 10, 10.43, 10.77, 11.12, 11.47, 11.78, 12.23, 12.62, 13, 13.47, 14, 14.46, 15.07, 15.64, 16.27, 16.83, 17.51, 18.07, 18.69, 19.3, 19.98, 20.63, 21.21, 21.88, 22.49, 23.2, 23.8, 24.55, 25.19, 25.95, 26.62, 27.55, 28.12, 28.95, 29.74, 30.46, 31.21};
          static constexpr size_t c_middle_index     = 100;
          class T200 : public Actuators::Models::Current::Model
          {
          public:
            //! Constructor.
            T200(void) = default;
            
            uint16_t
            getPWM(const float& voltage, const float& current, const bool& direction) override
            {
              std::vector<float> _pwm;
              std::vector<float> _current;
              std::vector<float> current_src;

              if (voltage < 11.0f)
                current_src = c_curr_10v;
              else if (voltage >= 11.0f && voltage < 13.0f)
                current_src = c_curr_12v;
              else if (voltage >= 13.0f && voltage < 15.0f)
                current_src = c_curr_14v;
              else if (voltage >= 15.0f && voltage < 17.0f)
                current_src = c_curr_16v;
              else if (voltage >= 17.0f && voltage < 19.0f)
                current_src = c_curr_18v;
              else if (voltage >= 19.0f)
                current_src = c_curr_20v;

              if (direction)
              {
                _pwm = std::vector<float> (c_pwm.end() - (c_middle_index + 1), c_pwm.end());
                _current = std::vector<float> (current_src.end() - (c_middle_index + 1), current_src.end());
              }
              else
              {
                _pwm = std::vector<float> (c_pwm.begin(), c_pwm.begin() + (c_middle_index + 1));
                _current = std::vector<float> (current_src.begin(), current_src.begin() + (c_middle_index + 1));
              }

              return Math::piecewiseLI(_pwm, _current, current);
            }

            float
            getCurrent(const float& voltage, const float& pwm) override
            {
              float current = 0;
              if (voltage < 11.0f)
                current = Math::piecewiseLI(c_curr_10v, c_pwm, pwm);
              else if (voltage >= 11.0f && voltage < 13.0f)
                current = Math::piecewiseLI(c_curr_12v, c_pwm, pwm);
              else if (voltage >= 13.0f && voltage < 15.0f)
                current = Math::piecewiseLI(c_curr_14v, c_pwm, pwm);
              else if (voltage >= 15.0f && voltage < 17.0f)
                current = Math::piecewiseLI(c_curr_16v, c_pwm, pwm);
              else if (voltage >= 17.0f && voltage < 19.0f)
                current = Math::piecewiseLI(c_curr_18v, c_pwm, pwm);
              else if (voltage >= 19.0f)
                current = Math::piecewiseLI(c_curr_20v, c_pwm, pwm);

              return current;
            }
          };
        }
      }
    }
  }
}

#endif
