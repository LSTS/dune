//***************************************************************************
// Copyright 2007-2025 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Bernardo Gabriel                                                 *
//***************************************************************************

#ifndef ACTUATORS_MODELS_RPM_T200_HPP_INCLUDED_
#define ACTUATORS_MODELS_RPM_T200_HPP_INCLUDED_

#include <vector>

#include "Model.hpp"

namespace DUNE
{
  namespace Utils
  {
    namespace Actuators
    {
      namespace Models
      {
        namespace RPM
        {
          //! Performance values for the T200 thruster from BlueRobotics.
          //! Available on: https://docs.bluerobotics.com/thrusters/t200_rpm_plot.js
          static const std::vector<int16_t> c_pwm     = {1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132, 1136, 1140, 1144, 1148, 1152, 1156, 1160, 1164, 1168, 1172, 1176, 1180, 1184, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1420, 1424, 1428, 1432, 1436, 1440, 1444, 1448, 1452, 1456, 1460, 1464, 1468, 1472, 1476, 1480, 1484, 1488, 1492, 1496, 1500, 1504, 1508, 1512, 1516, 1520, 1524, 1528, 1532, 1536, 1540, 1544, 1548, 1552, 1556, 1560, 1564, 1568, 1572, 1576, 1580, 1584, 1588, 1592, 1596, 1600, 1604, 1608, 1612, 1616, 1620, 1624, 1628, 1632, 1636, 1640, 1644, 1648, 1652, 1656, 1660, 1664, 1668, 1672, 1676, 1680, 1684, 1688, 1692, 1696, 1700, 1704, 1708, 1712, 1716, 1720, 1724, 1728, 1732, 1736, 1740, 1744, 1748, 1752, 1756, 1760, 1764, 1768, 1772, 1776, 1780, 1784, 1788, 1792, 1796, 1800, 1804, 1808, 1812, 1816, 1820, 1824, 1828, 1832, 1836, 1840, 1844, 1848, 1852, 1856, 1860, 1864, 1868, 1872, 1876, 1880, 1884, 1888, 1892, 1896, 1900};
          static const std::vector<int16_t> c_rpm_10v = {-2662, -2667, -2661, -2627, -2617, -2600, -2590, -2562, -2535, -2528, -2514, -2484, -2472, -2449, -2436, -2416, -2395, -2371, -2344, -2332, -2306, -2283, -2271, -2241, -2219, -2198, -2177, -2157, -2129, -2106, -2094, -2073, -2046, -2024, -2005, -1982, -1957, -1936, -1907, -1885, -1864, -1834, -1816, -1789, -1762, -1745, -1717, -1697, -1671, -1643, -1615, -1591, -1562, -1539, -1516, -1488, -1461, -1440, -1411, -1382, -1347, -1320, -1294, -1265, -1239, -1200, -1174, -1142, -1114, -1080, -1048, -1016, -986, -948, -916, -883, -845, -813, -774, -740, -701, -664, -624, -584, -545, -504, -462, -421, -377, -335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 373, 417, 459, 500, 540, 582, 621, 657, 695, 733, 766, 805, 836, 873, 906, 938, 974, 1007, 1035, 1066, 1101, 1129, 1159, 1188, 1219, 1250, 1278, 1303, 1330, 1363, 1392, 1418, 1445, 1473, 1496, 1519, 1542, 1571, 1596, 1622, 1650, 1674, 1696, 1720, 1747, 1765, 1793, 1819, 1833, 1860, 1889, 1911, 1933, 1962, 1984, 2004, 2027, 2052, 2075, 2093, 2118, 2140, 2160, 2179, 2200, 2225, 2245, 2273, 2293, 2307, 2333, 2353, 2378, 2398, 2410, 2436, 2453, 2481, 2499, 2522, 2543, 2558, 2575, 2602, 2613, 2633, 2657, 2665, 2668};
          static const std::vector<int16_t> c_rpm_12v = {-2976, -2969, -2971, -2933, -2916, -2898, -2874, -2852, -2841, -2817, -2792, -2773, -2755, -2728, -2714, -2689, -2676, -2654, -2615, -2610, -2576, -2560, -2533, -2510, -2482, -2457, -2443, -2412, -2383, -2365, -2335, -2318, -2284, -2260, -2231, -2208, -2189, -2159, -2140, -2106, -2082, -2057, -2038, -2006, -1982, -1955, -1925, -1898, -1869, -1846, -1815, -1788, -1763, -1737, -1708, -1681, -1651, -1620, -1588, -1557, -1529, -1504, -1470, -1439, -1411, -1375, -1338, -1309, -1276, -1246, -1211, -1169, -1134, -1099, -1057, -1023, -986, -944, -903, -865, -820, -777, -737, -690, -643, -597, -549, -499, -448, -400, -346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 395, 444, 494, 542, 592, 634, 680, 726, 768, 812, 851, 892, 931, 971, 1009, 1044, 1084, 1121, 1152, 1186, 1227, 1263, 1291, 1322, 1354, 1385, 1424, 1453, 1485, 1515, 1539, 1567, 1599, 1632, 1653, 1686, 1716, 1741, 1769, 1796, 1824, 1854, 1880, 1911, 1931, 1964, 1996, 2017, 2046, 2070, 2083, 2118, 2143, 2169, 2190, 2229, 2244, 2269, 2304, 2330, 2345, 2391, 2411, 2432, 2456, 2482, 2508, 2535, 2562, 2585, 2613, 2620, 2661, 2681, 2698, 2721, 2751, 2773, 2782, 2808, 2835, 2859, 2879, 2904, 2923, 2937, 2962, 2976, 2994, 2995};
          static const std::vector<int16_t> c_rpm_14v = {-3233, -3244, -3206, -3202, -3174, -3160, -3143, -3121, -3107, -3071, -3049, -3025, -3004, -2979, -2954, -2937, -2914, -2883, -2861, -2847, -2815, -2802, -2776, -2740, -2705, -2697, -2659, -2658, -2619, -2598, -2566, -2543, -2504, -2482, -2452, -2418, -2405, -2366, -2331, -2302, -2271, -2246, -2221, -2194, -2171, -2139, -2116, -2081, -2056, -2023, -1995, -1959, -1930, -1896, -1873, -1838, -1813, -1785, -1754, -1724, -1689, -1659, -1625, -1590, -1552, -1523, -1487, -1455, -1421, -1375, -1341, -1307, -1268, -1233, -1188, -1150, -1106, -1064, -1018, -974, -929, -886, -834, -786, -735, -683, -628, -575, -518, -463, -400, -342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344, 399, 461, 515, 573, 626, 675, 731, 777, 824, 876, 917, 967, 1007, 1048, 1092, 1136, 1169, 1214, 1252, 1287, 1322, 1354, 1397, 1432, 1470, 1499, 1532, 1562, 1597, 1628, 1669, 1700, 1731, 1761, 1793, 1817, 1849, 1878, 1912, 1934, 1967, 1999, 2032, 2064, 2085, 2114, 2145, 2175, 2201, 2228, 2245, 2285, 2312, 2337, 2375, 2411, 2437, 2464, 2498, 2539, 2583, 2592, 2617, 2652, 2659, 2693, 2714, 2751, 2773, 2795, 2815, 2855, 2878, 2901, 2926, 2957, 2984, 3011, 3035, 3048, 3087, 3114, 3139, 3159, 3183, 3195, 3218, 3243, 3263, 3288, 3279};
          static const std::vector<int16_t> c_rpm_16v = {-3465, -3468, -3449, -3421, -3410, -3395, -3374, -3356, -3323, -3307, -3282, -3248, -3223, -3207, -3177, -3153, -3111, -3086, -3061, -3050, -3003, -2988, -2952, -2918, -2896, -2865, -2845, -2821, -2792, -2759, -2736, -2712, -2681, -2661, -2629, -2599, -2576, -2548, -2517, -2482, -2440, -2419, -2369, -2345, -2306, -2278, -2248, -2222, -2199, -2157, -2140, -2106, -2081, -2040, -2001, -1968, -1936, -1903, -1870, -1840, -1807, -1773, -1738, -1705, -1667, -1630, -1589, -1554, -1519, -1482, -1448, -1410, -1362, -1325, -1285, -1246, -1199, -1153, -1113, -1064, -1016, -970, -916, -869, -810, -758, -697, -641, -578, -513, -450, -388, -317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 375, 441, 508, 573, 630, 688, 749, 804, 859, 906, 962, 1007, 1057, 1104, 1148, 1195, 1237, 1279, 1319, 1359, 1409, 1444, 1480, 1516, 1549, 1583, 1629, 1668, 1699, 1740, 1766, 1802, 1835, 1865, 1901, 1930, 1961, 1994, 2031, 2071, 2106, 2129, 2160, 2190, 2219, 2244, 2266, 2305, 2342, 2392, 2416, 2446, 2475, 2498, 2538, 2584, 2609, 2639, 2663, 2688, 2711, 2735, 2766, 2809, 2822, 2854, 2888, 2903, 2934, 2973, 3002, 3042, 3065, 3108, 3125, 3153, 3180, 3204, 3242, 3260, 3299, 3308, 3351, 3379, 3406, 3428, 3438, 3455, 3494, 3516, 3527, 3533};
          static const std::vector<int16_t> c_rpm_18v = {-3643, -3643, -3624, -3607, -3578, -3563, -3528, -3520, -3483, -3470, -3441, -3422, -3420, -3375, -3343, -3316, -3273, -3248, -3195, -3193, -3153, -3127, -3087, -3057, -3022, -2985, -2958, -2925, -2896, -2866, -2829, -2806, -2785, -2756, -2720, -2695, -2673, -2638, -2603, -2572, -2549, -2514, -2488, -2444, -2411, -2379, -2343, -2310, -2283, -2247, -2218, -2178, -2155, -2123, -2089, -2046, -2013, -1974, -1937, -1896, -1871, -1832, -1796, -1765, -1733, -1697, -1659, -1611, -1575, -1539, -1507, -1469, -1428, -1390, -1344, -1308, -1270, -1229, -1178, -1136, -1090, -1039, -989, 935, -884, -823, -760, -703, -638, -575, -501, -428, -357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 424, 494, 562, 624, 686, 745, 805, 856, 906, 959, 1009, 1052, 1099, 1140, 1184, 1227, 1267, 1301, 1341, 1377, 1419, 1456, 1493, 1527, 1564, 1599, 1637, 1679, 1716, 1747, 1783, 1817, 1851, 1887, 1920, 1952, 1989, 2021, 2066, 2098, 2143, 2171, 2198, 2230, 2265, 2293, 2330, 2351, 2402, 2443, 2474, 2513, 2546, 2577, 2602, 2627, 2670, 2695, 2731, 2766, 2809, 2823, 2850, 2894, 2914, 2960, 2985, 3026, 3055, 3089, 3124, 3180, 3222, 3265, 3283, 3324, 3375, 3391, 3417, 3446, 3482, 3513, 3542, 3572, 3597, 3619, 3637, 3653, 3687, 3711, 3751, 3742};
          static const std::vector<int16_t> c_rpm_20v = {-3783, -3777, -3740, -3741, -3712, -3681, -3639, -3642, -3624, -3569, -3558, -3571, -3498, -3449, -3457, -3390, -3385, -3335, -3315, -3293, -3250, -3211, -3184, -3139, -3107, -3046, -3034, -2983, -2952, -2927, -2891, -2856, -2824, -2797, -2766, -2731, -2698, -2679, -2636, -2623, -2579, -2554, -2523, -2487, -2453, -2414, -2367, -2346, -2300, -2265, -2229, -2192, -2166, -2135, -2093, -2050, -2009, -1972, -1927, -1895, -1853, -1816, -1779, -1748, -1718, -1676, -1643, -1597, -1560, -1526, -1493, -1461, -1426, -1388, -1349, -1315, -1277, -1246, -1201, -1159, -1120, -1077, -1024, -982, -925, -876, -813, -752, -688, -624, -547, -471, -389, -310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 379, 457, 532, 605, 676, 735, 797, 857, 905, 963, 1001, 1046, 1092, 1129, 1162, 1207, 1240, 1273, 1305, 1334, 1367, 1407, 1441, 1472, 1506, 1537, 1571, 1603, 1644, 1685, 1720, 1751, 1797, 1832, 1868, 1911, 1950, 1991, 2040, 2072, 2110, 2145, 2186, 2218, 2242, 2292, 2321, 2371, 2419, 2452, 2493, 2520, 2552, 2593, 2621, 2654, 2696, 2723, 2752, 2788, 2820, 2861, 2887, 2928, 2968, 3013, 3039, 3088, 3122, 3182, 3221, 3268, 3304, 3341, 3380, 3418, 3453, 3481, 3519, 3561, 3593, 3614, 3660, 3684, 3721, 3732, 3778, 3801, 3837, 3855, 3877, 3907, 3931};
          static constexpr size_t c_middle_index      = 100;

          class T200 : public Actuators::Models::RPM::Model
          {
          public:
            //! Constructor.
            T200(void) = default;

            uint16_t
            getPWM(const float& voltage, const int16_t& rpm, const bool& direction) override
            {
              std::vector<int16_t> _pwm;
              std::vector<int16_t> _rpm;
              std::vector<int16_t> rpm_src;

              if (voltage < 11.0f)
                rpm_src = c_rpm_10v;
              else if (voltage >= 11.0f && voltage < 13.0f)
                rpm_src = c_rpm_12v;
              else if (voltage >= 13.0f && voltage < 15.0f)
                rpm_src = c_rpm_14v;
              else if (voltage >= 15.0f && voltage < 17.0f)
                rpm_src = c_rpm_16v;
              else if (voltage >= 17.0f && voltage < 19.0f)
                rpm_src = c_rpm_18v;
              else if (voltage >= 19.0f)
                rpm_src = c_rpm_20v;

              if (direction)
              {
                _pwm = std::vector<int16_t> (c_pwm.end() - (c_middle_index + 1), c_pwm.end());
                _rpm = std::vector<int16_t> (rpm_src.end() - (c_middle_index + 1), rpm_src.end());
              }
              else
              {
                _pwm = std::vector<int16_t> (c_pwm.begin(), c_pwm.begin() + (c_middle_index + 1));
                _rpm = std::vector<int16_t> (rpm_src.begin(), rpm_src.begin() + (c_middle_index + 1)); 
              }
              
              return Math::piecewiseLI(_pwm, _rpm, rpm);
            }
            
            int16_t
            getRPM(const float& voltage, const int16_t& pwm) override
            {
              int16_t rpm = 0;
              if (voltage < 11.0f)
                rpm = Math::piecewiseLI(c_rpm_10v, c_pwm, pwm);
              else if (voltage >= 11.0f && voltage < 13.0f)
                rpm = Math::piecewiseLI(c_rpm_12v, c_pwm, pwm);
              else if (voltage >= 13.0f && voltage < 15.0f)
                rpm = Math::piecewiseLI(c_rpm_14v, c_pwm, pwm);
              else if (voltage >= 15.0f && voltage < 17.0f)
                rpm = Math::piecewiseLI(c_rpm_16v, c_pwm, pwm);
              else if (voltage >= 17.0f && voltage < 19.0f)
                rpm = Math::piecewiseLI(c_rpm_18v, c_pwm, pwm);
              else if (voltage >= 19.0f)
                rpm = Math::piecewiseLI(c_rpm_20v, c_pwm, pwm);
              
              return rpm;
            }
          };
        }
      }
    }
  }
}

#endif
