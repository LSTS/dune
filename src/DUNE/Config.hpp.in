//***************************************************************************
// Copyright 2007-2023 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Ricardo Martins                                                  *
//***************************************************************************
// Automatically Generated                                                  *
//***************************************************************************

#ifndef DUNE_CONFIG_HPP_INCLUDED_
#define DUNE_CONFIG_HPP_INCLUDED_

//! DUNE's short name.
#define DUNE_SHORT_NAME "@PROJECT_SHORT_NAME@"
//! DUNE's version string.
#define DUNE_VERSION_STR "@PROJECT_VERSION@"
//! DUNE's version year.
#define DUNE_VERSION_YEAR @PROJECT_VERSION_YEAR@
//! DUNE's version month.
#define DUNE_VERSION_MONTH @PROJECT_VERSION_MONTH@
//! DUNE's version patch level.
#define DUNE_VERSION_PATCH @PROJECT_VERSION_PATCH@
//! DUNE's version release candidate number.
#define DUNE_VERSION_RCN @PROJECT_VERSION_RCN@
//! DUNE's copyright.
#define DUNE_COPYRIGHT "@PROJECT_COPYRIGHT@"
//! DUNE's contact.
#define DUNE_CONTACT "@PROJECT_CONTACT@"
//! DUNE's build type.
#define DUNE_BUILD_TYPE "@CMAKE_BUILD_TYPE@"
//! DUNE's system name.
#define DUNE_SYSTEM_NAME "@DUNE_SYSTEM_NAME@"
//! DUNE's source path.
#define DUNE_PATH_SRC "@PROJECT_SOURCE_DIR@"
//! DUNE's build path.
#define DUNE_PATH_BUILD "@CMAKE_BINARY_DIR@"

//! DUNE was compiled with Piccolo avionics support.
#cmakedefine DUNE_USING_PICCOLO
//! DUNE was compiled with Qt5.
#cmakedefine DUNE_USING_QT5
//! DUNE was compiled with TLSF.
#cmakedefine DUNE_USING_TLSF
//! DUNE was compiled with JPEG library.
#cmakedefine DUNE_USING_JPEG
//! DUNE was compiled with DC1394 library.
#cmakedefine DUNE_USING_DC1394
//! DUNE was compiled with V4L2 library.
#cmakedefine DUNE_USING_V4L2
//! DUNE was compiled with SpiderMonkey support.
#cmakedefine DUNE_USING_SPIDERMONKEY
//! DUNE was compiled with support for the Xeneth SDK.
#cmakedefine DUNE_USING_XENETH
//! DUNE was compiled with support for the Exif library.
#cmakedefine DUNE_USING_EXIF

//! Defined on Microsoft Windows.
#cmakedefine DUNE_OS_WINDOWS
//! Defined on GNU/Linux.
#cmakedefine DUNE_OS_LINUX
//! Defined on GNU/Linux 2.4.
#cmakedefine DUNE_OS_LINUX24
//! Defined on QNX v6.x
#cmakedefine DUNE_OS_QNX6
//! Defined on SUN Solaris.
#cmakedefine DUNE_OS_SOLARIS
//! Defined on Mac OS X/Darwin.
#cmakedefine DUNE_OS_DARWIN
//! Defined on RTEMS.
#cmakedefine DUNE_OS_RTEMS
//! Defined on eCos.
#cmakedefine DUNE_OS_ECOS
//! Defined on FreeBSD.
#cmakedefine DUNE_OS_FREEBSD
//! Defined on NetBSD.
#cmakedefine DUNE_OS_NETBSD
//! Defined on OpenBSD.
#cmakedefine DUNE_OS_OPENBSD
//! Defined on BSD variants.
#cmakedefine DUNE_OS_BSD
//! Defined on Android.
#cmakedefine DUNE_OS_ANDROID
//! Defined on POSIX compliant systems.
#cmakedefine DUNE_OS_POSIX

//! Defined when using uClibc.
#cmakedefine DUNE_CLIB_UC
//! LLVM libc++
#cmakedefine DUNE_CLIB_LIBCXX
//! Android/Bionic.
#cmakedefine DUNE_CLIB_BIONIC
//! Defined when using the GNU C Library.
#cmakedefine DUNE_CLIB_GNU
//! Defined when using Newlib.
#cmakedefine DUNE_CLIB_NEWLIB
//! Defined when using MinGW.
#cmakedefine DUNE_CLIB_MINGW
//! Defined when using the Microsoft C Library.
#cmakedefine DUNE_CLIB_MICROSOFT
//! Defined when using the Apple C Library.
#cmakedefine DUNE_CLIB_APPLE
//! Defined when using the SUN C Library.
#cmakedefine DUNE_CLIB_SUN
//! Defined when using the Dinkum C Library.
#cmakedefine DUNE_CLIB_DINKUM
//! Defined when using the BSD Library.
#cmakedefine DUNE_CLIB_BSD
//! Defined when using an unknown C Library.
#cmakedefine DUNE_CLIB_UNKNOWN

//! Defined if DUNE was compiled with GNU's C++ compiler.
#cmakedefine DUNE_CXX_GNU
//! Defined if DUNE was compiled with Intel's C++ compiler.
#cmakedefine DUNE_CXX_INTEL
//! Defined if DUNE was compiled with LLVM/Clang C++ compiler.
#cmakedefine DUNE_CXX_CLANG
//! Defined if DUNE was compiled with Microsoft's C++ compiler.
#cmakedefine DUNE_CXX_MICROSOFT
//! Defined if DUNE was compiled with an unknown C++ compiler.
#cmakedefine DUNE_CXX_UNKNOWN

//! Target CPU architecture.
#define DUNE_CPU_@DUNE_CPU_UCASE@

//! Target CPU architecture variant.
#define DUNE_CPU_VARIANT_@DUNE_CPU_VARIANT_UCASE@

//! Defined if DUNE was compiled for a big endian system.
#cmakedefine DUNE_CPU_BIG_ENDIAN
//! Defined if DUNE was compiled for a little endian system.
#cmakedefine DUNE_CPU_LITTLE_ENDIAN
//! Defined if DUNE was compiled for a a system with mixed endian doubles.
#cmakedefine DUNE_CPU_MIXED_ENDIAN_DOUBLES

//! Defined if DUNE was compiled for a 32 bit CPU.
#cmakedefine DUNE_CPU_32B
//! Defined if DUNE was compiled for a 64 bit CPU.
#cmakedefine DUNE_CPU_64B

// Headers.
@DUNE_SYS_HEADERS@

// Types.
@DUNE_SYS_TYPES@

// Functions.
@DUNE_SYS_FUNCTIONS@

// Cleanup namespace in Microsoft Windows.
#if defined(DUNE_SYS_HAS_WINDOWS_H)
#  define WIN32_LEAN_AND_MEAN
#  define _WIN32_WINNT 0x0501
#  include <windows.h>

#  if defined(max)
#    undef max
#  endif

#  if defined(min)
#    undef min
#  endif

#  if defined(CM_NONE)
#    undef CM_NONE
#  endif
#endif

#if !defined(DUNE_SYS_HAS_SSIZE_T) && defined(DUNE_CLIB_MICROSOFT)
typedef SSIZE_T ssize_t;
#endif

// Fixed width integers.
#if defined(DUNE_SYS_HAS_STDINT_H)
#  include <stdint.h>
#elif defined(DUNE_SYS_HAS_WINDOWS_H)
   typedef INT8 int8_t;
   typedef UINT8 uint8_t;
   typedef INT16 int16_t;
   typedef UINT16 uint16_t;
   typedef INT32 int32_t;
   typedef UINT32 uint32_t;
   typedef INT64 int64_t;
   typedef UINT64 uint64_t;
#else
#  error Unable to find fixed precision integer types.
#endif

//! 64 bit floating point type.
typedef double fp64_t;
//! 32 bit floating point type.
typedef float fp32_t;

// Library type.
#cmakedefine DUNE_SHARED
#cmakedefine DUNE_STATIC

// Declaration for exporting symbols.
#if defined(DUNE_OS_WINDOWS) && defined(DUNE_SHARED)
#  define DUNE_SYM_EXPORT __declspec(dllexport)
#  define DUNE_SYM_IMPORT __declspec(dllimport)
#else
#  define DUNE_SYM_EXPORT
#  define DUNE_SYM_IMPORT
#endif

#if defined(DUNE_DLL_EXPORT)
#  define DUNE_DLL_SYM DUNE_SYM_EXPORT
#else
#  define DUNE_DLL_SYM DUNE_SYM_IMPORT
#endif

// GCC extension only: hint the compiler about the likely result of a boolean evaluation
#if defined (DUNE_CXX_GNU)
#  define likely(x)       __builtin_expect((x),1)
#  define unlikely(x)     __builtin_expect((x),0)
#else
#  define likely(x)       (x)
#  define unlikely(x)     (x)
#endif

#if defined(DUNE_CXX_GNU)
#  define DUNE_DEPRECATED __attribute__ ((deprecated))
#  define DUNE_PRINTF_FORMAT(s, f) __attribute__ ((format(printf, s, f)))
#else
#  define DUNE_DEPRECATED
#  define DUNE_PRINTF_FORMAT(s, f)
#endif

// Internationalization.
#if defined(DUNE_SYS_HAS_GETTEXT)
#  include <libintl.h>
#  define DTR(str) gettext(str)
#else
#  define DTR(str) str
#endif

//! Mark string as run-time translatable.
#define DTR_RT(str) str

#endif
