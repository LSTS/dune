//***************************************************************************
// Copyright 2007-2019 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Pedro Calado                                                     *
// Author: Luis Venancio                                                    *
//***************************************************************************

// ISO C++ 98 headers.
#include <iomanip>

// DUNE headers.
#include <DUNE/DUNE.hpp>
#include "CTDGenerator.hpp"
#include "CTDGeneratorFactory.hpp"

using DUNE_NAMESPACES;

namespace Simulators
{
  //! CTD (Conductivity, Temperature, Depth) sensor simulator.
  //! Data is pulled from source data files.
  //! 
  //! Condutivity is obtained by appling a standard UNESCO1983 algorithm
  //! using salinity and tempearture data.
  //! 
  //! The depth value is generated by listening to DUNE::IMC::SimulatedState
  //! and applying a standard deviation to received values.
  //! @author Pedro Calado
  //! @author Luis Venancio

  namespace CTD
  {

    //! Seconds in hour.
    constexpr double c_seconds_to_hour= 3600;

    //! Task arguments.
    struct Arguments
    {
      //! Type of model to use.
      std::string type;
      //! Path to data file.
      std::string file_path;
      //! Default temperature.
      double default_temp;
      //! Default salinity.
      double default_sal;
      //! Interpolation radius of latitude and longitude,
      //! in degrees.
      double surface_radius;
      //! Interpolation radius of depth, in meters.
      double depth_radius;
      //! Standard deviation of temperature measurements.
      double std_dev_temp;
      //! Standard deviation of salinity measurements.
      double std_dev_sal;
      //! Standard deviation of depth measurements.
      double std_dev_depth;
      //! Name of Pseudo-Random Number Generator to use.
      std::string prng_type;
      //! PRNG seed.
      int prng_seed;
    };

    //! CTD simulator task.
    struct Task: public Tasks::Periodic
    {
      //! Temperature.
      IMC::Temperature m_temp;
      //! Current sound speed.
      IMC::SoundSpeed m_sspeed;
      //! Current conductivity.
      IMC::Conductivity m_cond;
      //! Current salinity.
      IMC::Salinity m_salinity;
      //! Current depth.
      IMC::Depth m_depth;
      //! Current pressure.
      IMC::Pressure m_pressure;
      //! Last received simulated state.
      IMC::SimulatedState m_sstate;
      //! PRNG handle.
      Random::Generator* m_prng;
      //! Task arguments.
      Arguments m_args;
      //! Delta for time keeping
      Delta current_time;
      //! Pointer to data generator
      std::unique_ptr<CTDGenerator> m_ctd_generator;

      //! Constructor. 
      //! @param[in] name task name.
      //! @param[in] ctx context.
      Task(const std::string& name, Tasks::Context& ctx):
        Tasks::Periodic(name, ctx),
        m_prng(NULL)
      {
        param("Standard Deviation - Temperature", m_args.std_dev_temp)
        .defaultValue("0.5");

        param("Standard Deviation - Salinity", m_args.std_dev_sal)
        .defaultValue("0.5");

        param("Standard Deviation - Depth", m_args.std_dev_depth)
        .defaultValue("0.1");

        param("Model Type", m_args.type)
        .defaultValue("Constant");

        param("Data File Path", m_args.file_path)
        .description("Full path to data file");

        param("Default - Temperature", m_args.default_temp)
        .description("Default temperature value")
        .defaultValue("5.0");

        param("Default - Salinity", m_args.default_sal)
        .description("Default salinity value")
        .defaultValue("10.0");

        param("Interpolation Radius - Surface", m_args.surface_radius)
        .description("Radius to search for points in the lat/lon dimensions")
        .defaultValue("0.01");

        param("Interpolation Radius - Depth", m_args.depth_radius)
        .description("Radius to search for points in the depth dimension")
        .defaultValue("15");

        param("PRNG Type", m_args.prng_type)
        .description("Pseudo-Random Number Generator type. Examples: \"c_fsr256\", \"krng\"")
        .defaultValue(Random::Factory::c_default);

        param("PRNG Seed", m_args.prng_seed)
        .description("Random seed to use to random generator.")
        .defaultValue("-1");

        // Register consumers.
        bind<IMC::SimulatedState>(this);
      }

      //! Initialize resources. It requests deactivation so that this task
      //! is not active by default and will be activated only when
      //! DUNE::IMC::SimulatedState messages are received.
      void
      onResourceInitialization(void)
      {
        requestDeactivation();
      }

      //! Acquire resources.
      void
      onResourceAcquisition(void)
      {
        try
        {
          m_ctd_generator = factory(m_args);
        }
        catch (std::exception const& e)
        {
          err(DTR("Unable to obtain model data:"
                  "\n"
                  "\t%s\n"
                  "\tFalling back to default values."),
              e.what());

          m_args.type = "Constant";
          m_ctd_generator = factory(m_args);
        }

        m_prng = Random::Factory::create(m_args.prng_type, m_args.prng_seed);
      }

      //! Release resources.
      void
      onResourceRelease(void)
      {
        Memory::clear(m_prng);
      }

      //! Requests activation of the task (if not active already) and stores
      //! received state in #m_sstate.
      void
      consume(const IMC::SimulatedState* msg)
      {
        if (!isActive())
        {
          setEntityState(IMC::EntityState::ESTA_NORMAL, Status::CODE_ACTIVE);
          requestActivation();
          current_time.reset();
        }

        m_sstate = *msg;
      }

      //! Get temperature value from model.
      //! @return temperature value.
      float
      getTemperature()
      {
        double lat = m_sstate.lat;
        double lon = m_sstate.lon;
        double height = m_sstate.height;

        Coordinates::WGS84::displace(m_sstate.x, m_sstate.y, m_sstate.z, 
                                      &lat, &lon, &height);

        std::array<double, 4> pos = {Angles::degrees(lat), Angles::degrees(lon), 
                                      m_sstate.height, current_time.check()/c_seconds_to_hour};

        float temp;

        try
        {
          temp = m_ctd_generator->getTemperature(pos);
        }
        catch(const std::exception& e)
        {
          err(DTR("Unable to obtain model data:"
                  "\n"
                  "\t%s\n"
                  "\tFalling back to default values."),
              e.what());

          m_args.type = "Constant";
          m_ctd_generator = factory(m_args);
          temp = m_ctd_generator->getTemperature(pos);
        }
        
        return temp;
      }

      //! Get salinity value from model.
      //! @return salinity value.
      float
      getSalinity()
      {
        double lat = m_sstate.lat;
        double lon = m_sstate.lon;
        double height = m_sstate.height;

        Coordinates::WGS84::displace(m_sstate.x, m_sstate.y, m_sstate.z, 
                                      &lat, &lon, &height);

        std::array<double, 4> pos = {Angles::degrees(lat), Angles::degrees(lon), 
                                      m_sstate.height, 
                                      current_time.check()/c_seconds_to_hour};
        float sal;

        try
        {
          sal = m_ctd_generator->getSalinity(pos);
        }
        catch(const std::exception& e)
        {
          err(DTR("Unable to obtain model data:"
                  "\n"
                  "\t%s\n"
                  "\tFalling back to default values."),
              e.what());

          m_args.type = "Constant";
          m_ctd_generator = factory(m_args);
          sal = m_ctd_generator->getSalinity(pos);
        }

        return sal;
      }

      //! If active, computes all values using random value generators and dispatches:
      //! * @publish DUNE::IMC::Temperature
      //! * @publish DUNE::IMC::Salinity
      //! * @publish DUNE::IMC::Depth
      //! * @publish DUNE::IMC::Pressure
      //! * @publish DUNE::IMC::Conductivity
      //! * @publish DUNE::IMC::SoundSpeed
      void
      task(void)
      {
        // Return if task is not active.
        if (!isActive())
          return;

        m_temp.setTimeStamp();
        m_temp.value = getTemperature();
        m_temp.value = m_temp.value + m_prng->gaussian() * m_args.std_dev_temp;

        m_salinity.setTimeStamp(m_temp.getTimeStamp());
        m_salinity.value = getSalinity();
        m_salinity.value = m_salinity.value + m_prng->gaussian() * m_args.std_dev_sal;

        m_depth.setTimeStamp(m_temp.getTimeStamp());
        m_depth.value = std::max(m_sstate.z + m_prng->gaussian() * m_args.std_dev_depth, 0.0);

        // Compute pressure.
        m_pressure.setTimeStamp(m_temp.getTimeStamp());
        m_pressure.value = (m_depth.value * c_gravity * c_seawater_density + c_sea_level_pressure) / c_pascal_per_bar;

        m_cond.setTimeStamp(m_temp.getTimeStamp());
        m_cond.value = UNESCO1983::computeConductivity(m_salinity.value, m_pressure.value, m_temp.value);

        m_sspeed.setTimeStamp(m_temp.getTimeStamp());
        m_sspeed.value = (m_salinity.value < 0.0) ? -1.0 : UNESCO1983::computeSoundSpeed(m_salinity.value, m_pressure.value, m_temp.value);

        dispatch(m_temp, DF_KEEP_TIME);
        dispatch(m_cond, DF_KEEP_TIME);
        dispatch(m_depth, DF_KEEP_TIME);
        dispatch(m_pressure, DF_KEEP_TIME);
        dispatch(m_salinity, DF_KEEP_TIME);
        dispatch(m_sspeed, DF_KEEP_TIME);
      }
    };
  }
}

DUNE_TASK
